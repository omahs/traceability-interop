{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7c934c1a-959a-4460-9a72-4e0fef0a1eb1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d071d2e2-072a-43bd-a143-b2e482143409",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65a48bd6-cfdf-4c8d-8674-d13403c8856f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c22e9185-c241-4c67-97b5-8635fbfc9add"
                }
              }
            ]
          },
          {
            "id": "02becf94-0fff-45df-83fd-c7eebad73bbd",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84dabd83-9deb-4f36-8e17-585139421254",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5bfb9e44-4d59-40c8-bd58-ebbf6ed558ec"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "77954676-a779-4074-95a5-f583f48717e5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d17595d0-d011-4955-a288-df708bb5b61d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2ba97031-6f3e-42d8-8651-5934e6cc65f0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7edff85-a2ae-4350-bbe2-800a86776688",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e61a2926-53dc-4e51-8546-aec5e22ee2c6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "06de0240-b540-45fc-9cec-b4f241cc6289",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29137d98-f291-49e4-a3d3-66ac4f4a70f1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aed6f27d-b6c4-4cf7-80d5-09111ba9a817",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "94312575-12bc-4e4b-ac85-0fc15dfe4243"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f89bf2e-fb57-4e72-a72d-3b4870903d88",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "500dedc0-ec10-4674-ad72-a46cd2a5fd6b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e548a36f-aebe-4ccb-aaca-221726ea6b04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ef69ba3-85b1-4cac-8d26-8d206c2b2f4d"
            }
          }
        ]
      },
      {
        "id": "054923f1-0c9c-4b9e-a400-f39eb51035cb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0df757cf-b0d5-42b3-a14e-08b2e37aeb53",
            "name": "Negative Testing",
            "item": [
              {
                "id": "78336242-4e5a-4ff6-bfe1-3078fb969376",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4a54ec47-6e49-4a7a-a9bf-2a239dab1baf",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1716a98a-c335-4878-9516-7aceaf125690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d842df4-bb49-42a2-bd1d-4a3a8412202c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee4db4e-2e1e-45cf-ad7d-e5e301c7fdd7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe8980d-8896-4438-ae25-51e3ef3cc690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "856b3930-1f3b-43df-94e2-ba4e52018106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62eb2850-ec66-40b1-b718-021e1df66310",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08e73c4-ac37-45b1-8929-bed095bc7390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e5ba2d3-26b9-4335-883c-704540fc688a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "64277945-5f7f-4cd8-9f7a-5d776dab8cb2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d05459b3-26f4-4393-96f8-99ff48fc7153",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef44d12-0c89-429f-813c-fdbecb305328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "869f89b5-ae18-40c9-b7ca-11f2afed1022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35627e72-346b-40d0-a115-51729163f22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94bd465f-845d-49d1-9e30-e286c308cff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b926713-bd66-4417-8a68-5b6564ca6246",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf46545-3c52-4dd9-b690-22975a771764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd834eeb-5b10-4b38-ae07-0a35d8d90ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839366ff-e36c-4ad0-919e-7a3dd2bdc212",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "82864c52-92bf-464b-bc29-66646c53270b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b818d28a-f0db-48a1-8c51-00ea5d666ff7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a540714b-464e-49bb-a909-579cd78e80b4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7140266-ee86-49c1-80b6-1cf625fed63b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ea4f5440-e77d-424d-902f-6ac128369c91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac5e603d-bd16-4f08-be8c-bbf7e5005902",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d9a6d0a9-6632-4543-93a2-ccbfc093b061"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b41e0fbb-9981-4a9c-b195-3835b3786aee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1198b36d-a97a-4122-8eb1-bf183fefef6d"
            }
          }
        ]
      },
      {
        "id": "b66cee5c-9111-44f0-9170-cd0ca9f86f09",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "83f5f442-6526-4c18-9dc7-8ab6da739abd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c50f416e-04f5-4816-8da7-9bb818587bea",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6c35c80e-08f1-405b-b5ca-5d287d020987",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7a6829-ff13-4fb3-8cfb-d854f0ee79d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd9566e-cf86-475f-a141-0400fdc00872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4c5896-6d0e-4e9d-a33e-53ac265c502e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88013b94-24fc-4a95-9bbd-d958112ea439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798ab80b-1d82-4bce-b5dc-2648c491cfeb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d3c95f-37b3-4003-afae-6789505efad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fabc445-2a53-40a6-a511-4158995ad1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b0134e-24c8-413e-aa32-f82da31b2b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "150992ab-ae62-4999-99e2-36a026cb9826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c0611d-169e-4e2e-8ded-1fab08b9a113",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09aaa05f-c70a-4e45-ae4d-4bbc38445413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334018e2-4ddc-4d4c-b9c1-4c9e0fdd7177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c032b072-21d9-414b-bb85-12529b084630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e47e15f5-57bf-4c47-93f9-31cc0feec640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11dc80db-5d09-4bd2-8b3f-cbecf65c5935",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce397f25-7c34-4a64-85a9-97f666225370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d678620b-97f7-48a3-a81e-965237147b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42793b9a-cb47-4020-88ba-e1a6fb58021a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38e95ce8-e704-4128-9615-e6e5b8eac8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf99bac7-b146-409a-85d9-4983bd0a33b0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a053b9c-b6c5-46f6-9c19-7bff1d0f0537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aaf35b4-e6d1-40f4-93b0-b13b82c60f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e57741b-9038-4385-9086-bab466d1d5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2299f85-a5c1-4d32-94b2-96fb56ddeb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d524557e-0aec-4575-9640-1f76f48d4413",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8052ab9-2d43-461a-9998-171f004c808e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4768a252-9529-47b4-91a2-386f0c477093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e33014-73a3-46ba-a52f-c48a1f352e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb41faa3-df6a-4c46-912c-c519577a1f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d14a56-c308-41bc-abc8-44043f6f18ce",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9a1850-9aca-4f59-9653-8da0afe431a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0ba808-8fca-4bba-ac00-95a708998dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87fb437-dc73-46bd-9cf9-01e29227bc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04b1cc6d-88e3-45a0-a502-1488ed9af328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e62282-39f1-46f2-89f2-449bb31dc8aa",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c0779c-8111-4385-a744-22220ca7adb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5099189c-347c-422c-ae68-b969685eaf10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7885ab56-05eb-4cd5-b414-f6ff26438fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8863554b-5cff-4d9c-8f0b-81d83a555340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b868905-f5dc-4c39-b36d-ac35ebcd4a9f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cea05fe-d18b-40e3-b49f-6ef8ae3b024a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad293f2b-89e2-47f0-aa22-118debb34a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d71ca8f-83d0-4ea6-8af3-7c39b1815d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "717ffc5c-91eb-45d0-a9ff-b4516402dc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b727bea3-1c75-4561-9169-85540310cdf9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c575bb41-59d7-48c6-a3a6-1e6dc221de9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797359c2-7549-4dfb-a93a-1cf8f1e145c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20fabab-04a2-453c-922b-13d77ede48cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75138f91-feed-46d4-8f92-a6f5ee1091ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2344f6-e024-4880-91cb-40bc9bfae0ff",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b50736-13c6-429e-8fad-3bf4845c50aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752516a3-d373-4037-a2c3-f1ebe8ff1193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bc9420-1fb5-4b2d-99e2-9dac4595a0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bfde321-9915-498d-9c52-bf9f7b7dec3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6aa6a73-43b7-40b4-8bf2-4d76f43a2f3e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8047bfc4-2cd9-4d59-b437-88df93515797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ee090b-34f0-4879-b5f1-1fd6fc5502d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d97ebc1-aceb-4ba5-ba16-153bc6c4f9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26d62960-94a2-4600-8a46-0d1c295b812b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0b5a8f-fe0d-41c9-a2fe-185d608942c9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14614259-5ee9-4c9f-9f91-bd0b58f60db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c29c3b-b2fb-4df4-b8d9-3231304dc62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbce04a0-35a8-4b4c-934f-90ee18a934b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "caf1b361-7693-4fcb-87bf-eaab905ddc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39269fbe-b2a9-4389-a627-829669f0ceca",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c3ac25-a725-45e9-9d4d-e07598301312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ff0712-797a-47ab-bf65-0761efdef9b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c6f520-325e-46c6-8a69-7403de743589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "626a2d6d-f5c9-4229-9cb6-c9a201c23ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9fdd9c-b4fc-42d8-944e-14c1299fc86b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dcf9a9-a394-4b54-ab03-9d1db3bf2f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8b482e-f484-4bdc-9b38-bc6510ebc985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4370cca-b3a3-4dbb-b635-798848363205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "badd5f9d-690e-4139-a8ed-638b94648ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815ce02f-0cec-4152-8cbb-2c6ed7f8ca6a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a0bf8b-23f7-439f-bd9c-4863b2784b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be9ad2f-6395-43b2-9f9e-142206df8c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829f30df-9fbd-48f4-9d98-121fefbce1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bad8b4a-12ee-44e7-ae59-236602eabe78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716ebc3c-b885-413b-8a88-9e5fc960df88",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4add047c-0710-46ee-9eab-51f434afffae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd70191-611a-46de-b31d-bf6f9c3d15a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9936b0f4-9875-4c30-9db8-20d688111912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c252c436-a931-462d-aab5-4cb6066a42f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcf526c-bad2-4a92-a75b-aaae4902a60c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e683ea47-e706-4e3e-8ad6-1017173c377f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2079e99c-7dfd-4997-acf2-7f3d98e3fa97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37117b44-b954-4d46-93e6-a37f89a74e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "440c26e3-8097-41de-8522-97cfc8b77108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e6154d-5724-4bc7-9e2a-6f209f952977",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd18e85-335a-470b-b4e8-c5b271ac406d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24eb26e-00cc-4c02-8e6c-5d45fd3d89aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f71ff3f-51a0-4a50-8bdb-423f8bc2475f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0062b9-5f15-41cb-8071-e6847975fb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9a827c-6574-480a-85ec-5ed4337e0e7e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4cc1b1f-ab80-40ef-ba7c-b718b7f976e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c1878b-eb75-4f69-8640-cae42fd29eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc776eda-c951-4419-8bf9-e202ef709ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b74eab5b-257c-45c3-b178-a57b6b72c47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6baeed3f-90e9-40a3-b8c5-0fcbcf896553",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a68fc94-39f1-483c-988b-14a5143d7947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc66aea-ed59-4ace-869a-506d8e9a70c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02a1151-5483-499f-9766-3a13a26275a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b940d004-c580-405b-8806-c7116fc161a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5798334-bcbe-4851-869d-3f82472a8e99",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361a9f2c-51d3-4fd6-9a3e-c63ff4bb9724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a5831ad-743f-4893-a194-5e99f5821493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d358d567-07d5-4ac6-9763-b670d1338ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6875ef1a-a979-4b59-ac8f-a3f47dfe98e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c812951-a87e-48df-bd3e-21f7c683b2cf",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b8c7d4-62c4-4116-ad63-eb95ccdccd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37bbcca-1563-4f74-a492-49e11f1b92c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c127c474-fddb-4ea9-8cb0-8c986512505d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0f76ee-b59f-4469-9eb8-cd9734e8afd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f878707-6c2f-4a44-ac68-a8aa7be93101",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c95be73-5ab1-4ae5-aa62-189fae5970c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8cb655-62bd-48c7-92f3-90865ed59a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8965c726-9069-4d16-bc7a-820e43a57a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d124b458-678e-4a66-a5c6-03c44f295bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b09a173-517b-4a13-b0ac-060e3ca7a395",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "875748cb-9ba2-4467-af35-3bfd2fd380e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc751a5c-0190-40f3-8042-3301b68adaa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad30747-8876-472b-944b-aad39ae3214b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1f71676-6af8-474e-8763-81fcde4abe7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4ce34d-1922-4dfd-bbb7-179a84e5a1a0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612cf675-2829-4022-9d90-a27edfb20284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027a1d7c-cf0b-4c85-9b63-c860cd5d8368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ee050e-ea5c-4e1e-af19-b14ed118dbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f9a6b26-e56b-4dce-8ef1-86b480282a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744d4cd7-1ce8-4718-8305-f859662608e7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce8c558-326b-474f-8e40-12e7dc6604d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51afc600-b2e8-4b23-94f0-5993bf9a22ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d166ab-0619-4032-b912-8d6050b3b718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3138244-6836-437c-9988-b5f5897761cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305fbf0c-aabe-4948-9e9f-3133483ad7f9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3214314-48bf-404c-bf26-2a5ee7290d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52682727-6d9a-429a-9abb-d6a7dcb10aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a067737c-a634-44fe-af41-e462c2b49734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97dcc5a4-ff69-4738-821e-eefd435d5b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f42fc09-0fb7-454a-9677-61f375901494",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8a61b1-e7a9-478e-beca-fe09b7da0088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e632157-a708-4dea-baf6-a1d21fac6f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfa52b6-88d0-4635-8270-83df0fb4b827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2581876f-116d-4c3b-b5a6-4c1b12da304e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b076b6d5-47c7-4a23-8fd7-ad442c6c7a86",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf80e2dd-7b63-4ee7-80b1-923b3385be2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c23204-ae9f-43c2-8009-569d5b2379e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1647d35e-cb1d-4fa6-b888-acad1597f43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "af969941-3f65-4a4e-a4dc-7adbecd79855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02f9095-83bb-42b9-8529-d0eac80c1ae0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0af4ccd-c03d-4b84-81f4-3fb728e4fe23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e98947-eb66-4d8d-9ea3-6e352f164289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c391b56-9122-4ca5-8eb5-9056099c829e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "63a808e8-a0cf-4b11-90cd-1dd7682716fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c758cb0-bf17-413c-9433-3defb75f428c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bbd796-bf67-40a3-9c36-fe72c96987a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ac454d-7271-496e-beba-3590d8fb68ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fd310a-f974-43b5-a77e-b223259d62e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27439734-49ed-4eee-8cfa-b10bc1960291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c70a4a-3b25-432d-a535-6f46788560d0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f4cffb-0462-40fe-88d4-a48899bd4486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7875fd4c-f6b4-405c-8727-7af9ef120551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8a5106-c6d0-4d6f-b8f5-4f5e27b8eb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e67dfda-f0d5-4f20-8d40-1bd6b3c155c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44590f46-d7fb-4c0f-b9d0-fa1e6cebcb22",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8050997-c255-4b3e-865b-c49a0359a879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f339db1-8695-4294-85e7-7c438430e603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a28fa7-23db-4232-91ee-eb847c74433d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9782f3c-da99-4c7f-b19d-7fd6dbc7fd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f60bb74-80ab-465b-842f-789ab2bb1344",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90289578-9255-4022-baa1-97b3c7ccfc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fddd307-4b1b-4522-89d1-6e397f5a6c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ed12a9-5744-4adc-b53b-3a8f02a24367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9d773da8-abb2-4f45-8307-2d947cefe987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ed40ad-4a95-4cf5-bcea-b14c0e2da242",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59050294-53e6-44c9-8a02-c740b8d16ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d754928c-7a6e-4ad0-95f2-952c4a45d84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1060e37-74eb-4754-879b-e5bcbef21807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79b7ef2c-38ef-46a8-ba9b-5251df15f2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ded142c-3eb1-4ec0-b667-b67952f2b1e7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b8b4cb-2b2a-4db9-bc67-af6110865753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7edc07fa-7b80-4287-9e19-79039a0059c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8310c625-17e4-4c85-bb9f-ea2ef4bbc36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87948ded-0900-49b5-9bbe-cd3fdaa85e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614d3d7c-9507-456e-a2df-27921e6a251c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6aab128-374f-460d-af97-afc79c36f08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a15f14-2369-4d27-8a5a-ae2ffe1d826e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cae65d3-0543-4623-b3ae-a088771402a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4758c4d5-f74b-4a76-9cb8-9f32160040b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1424c10a-bdbc-46a3-9bd1-046d7004a996",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476c209f-4f13-4d27-a713-7fff41ee9a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d82e561-8580-4ba8-88e4-dff6af6165bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7742924-1e5f-472d-ac15-4d43469a19d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b6805d4-64c1-4c2b-9ab8-6d4de60a1800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc42f0e7-4ade-44d3-8109-183aaab6fede",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0902a9f9-7adb-4c76-903b-4e8f5fc485af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cca5d6-469a-40df-8506-346456a0c4ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07572c5-172c-4d99-86e8-ef1050d3d454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e210daf4-4aad-4264-834d-7d8a8a099b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad8f85a-a44f-4313-a993-720e40fadd78",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942b0c37-8608-49b1-95cf-0dc1f9296bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4293787b-4e1e-495f-8f32-c7c4fffb418d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2968c72-15ca-4055-9a07-bccb8347cee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "edfe61ac-0a4f-4747-9976-75061a98e6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975aa2a8-3f59-4b6d-8c97-45835463be9f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf49bcb-5715-4ecd-ab20-ba5f3b0edecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21813295-ec40-4d1c-9a4c-8ceaa63829b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4b48d6-e37f-4fbc-9476-0989d08732c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "be979959-87db-4a57-be3e-f541a4f51e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b53318-b92d-4d7a-8187-f5a7d9fea72a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044e0a46-6436-4a89-9149-012d2f3c6d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2314f771-cb41-420c-9728-0ccdbc049419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e34349-49ca-477e-9866-436fe5dbbc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce68d52-5d1f-4f75-9fae-c719045805c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cb118a-3cc1-4505-96c7-44d9b118403f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5c05a5-2e5e-488a-9f46-572bba2c6a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1140306c-af84-477a-b709-447295c0655d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42491dab-dd54-4f08-94a1-7aa044f10e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "15562662-c1b4-4d99-829c-2aa7a74830a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58363fc2-7f7c-4ac8-b6c3-cba4fd4b40b6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbc8e46-6159-4977-b002-f828125f7584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ea37240-1a8b-4ce7-bd10-40adad578cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3763c77e-1f6a-4ba3-a955-b5de81cafc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "80733c83-0d0c-4adc-82b2-e009baf5d274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681ca28f-09ff-4844-8dc0-0de5a96b8629",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b1da8d-3a26-4dd6-911e-018ea404dafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8cee849-8ad9-45cd-ab29-e0a8cf5af8e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e15d1a-32c9-4acb-b4b7-d871adaa886f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53487240-a863-4f00-8b50-a943baff79f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9677ab-d7b6-4b09-9ef5-48d61c895b84",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ff6c87-e5bb-46d3-b729-47be6656ef87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de331f79-3e07-4b15-893c-72df16f773dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c5ca1f-f4e7-4252-af6a-33bc4e68b149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc161d8d-6535-4151-afca-966d467620d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ba6e0c-aee1-4c5e-823e-285e3ebd4609",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df534231-7145-4722-9197-edaa18587d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c80392-a8d7-4210-8042-8cbbd7512ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25dab5d7-f1e7-440a-8fcb-d5e60e80eebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a64d6c2-b366-47b6-a955-65b9bfccbaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce41feba-b486-43b6-9669-8e49cd158c09",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3f8ea4-7356-4fb8-ac2d-718ffe8f4442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a016469e-4589-4b17-9d87-12f99c8275f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd46ad3-78b4-408a-9f82-be5b32b6a8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a7231e-d508-4b1e-b640-fb7cdf912cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6d052d-c199-49c3-9499-f69b5e662d67",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9061ab-5533-408f-bf24-1e3650db08aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a967ecf8-de72-4038-83ac-1b6ed3012964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25845d1-3226-4cfd-9994-448947d71c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "354ae8a1-f398-4521-9e64-05094c150a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa990924-2d3d-4311-af6d-893720ce82c5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c4e0e5-0c66-4297-ae32-782bb5c85507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ed0ff91-b24c-4ca8-8799-5c69c9117cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcae958-3180-4e77-b19e-495e6b2233a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4dd180-befb-4470-ab84-e044f6397679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025c3694-d12b-4f7b-8525-fea6ab1ebfbc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba10bd0-91fc-467f-bfb4-f737217be29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a9695e-c335-41e7-ba79-a7ae6537934f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89df6455-c5e5-44b7-ab0a-f803a4d92160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed640de0-880a-4bb8-b820-5d89518f20b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbd4844-424e-44ce-9ff6-3d0f96f328a7",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b532cf-36db-430c-98ce-6dc5344fc415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90fa98b7-8edd-4592-8b25-a3307ecd8a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4383f7b4-f555-4d68-a5bc-a88a04256522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0982902a-6d71-4df2-a1c4-821aa09aaca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacc3290-b0a3-4dfb-8e41-b02e7d7f1cf2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93c2ed3-d369-4bc8-aeff-8ed74a7ace2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83ca7e2-bcb7-4dca-a34b-2bda616d9d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4f7328-9f30-42a6-a4de-6120d09ea817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84214d53-af9a-4059-a288-fa5d73a03fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3819786-6211-4a21-adcf-6f1b8171eed5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7241e6d3-59f3-4045-9857-950756907617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9194cad9-951f-49b8-a716-01954baab357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd84084-b55e-4e3c-ab7e-db6f816cc2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7beece1c-0ef2-456f-bcdf-a9261487e068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13d4bb4-36a5-4a70-a40c-717e08339f56",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7c7f9c-1d60-457d-bc5c-622a9a2eb7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31bb1a83-1087-4b79-b6e6-11165a42bff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3d885d-9f56-4aa7-88d5-2d78f711aa09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "19e2398f-8a0b-4380-9b71-ce701dc2a9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc64f59c-d691-406c-8418-a21eccbff2e2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e672019-f90d-4894-920c-08d376bcac41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac7b09a-b088-4062-ac52-216223e76f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06a2156-68a0-473f-bbe5-ca4d52a85482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ecfbc64-efa9-40a1-8b96-6697ecdc7811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1af173e-f63e-4525-a8a2-dd965cea3598",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78294422-f816-463f-9d45-38c9ed192bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b1dab2-a8ad-417e-a8f2-7929af1673e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f07ce6-4466-4e99-aeee-b02805f485be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7575e79b-c751-4e71-a9e9-4ba74c0ec967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45186619-0f26-4d08-b642-4f60f9943421",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab7c7e5-63e7-497c-b3b7-706cba71510a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4fb8e60-ef3c-47d3-a71b-f14c91bc3f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65362b24-bc39-41f7-aeda-add1776222d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "09538379-608b-46f2-90bc-a4d1eb3b0098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7b798f-da2b-482e-b8e6-e2319d5bf7dc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1ab9fe-9c10-4cca-b323-202ab057bf06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2fc199-3bc3-4749-93c6-c4816ffc5eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a8ee98-3360-4ac1-b91d-e01b3d9e68b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "de220c3d-5aab-482d-95c3-ec8b040ee757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7296eab-ddff-4113-9a88-3b72930daa82",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64df5bda-5b7b-4127-ad10-f64d8e8d264e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5f95a7-b156-4c57-a502-04adf7f3b620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acea3a9-1f82-452d-8c3a-f3faa4039fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ccb50c-7c9d-4929-800f-cad1ace3a25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287708b4-9fbe-4014-aaf4-df5eb5349c4e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a837ba-e3a4-42af-8bd1-a8fc53eb3cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216dec3c-1a35-42a4-9150-a3bd4077c51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24658862-8b6b-4a8b-86b9-963e458a4177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "99884c32-c606-4296-8dc9-eff4005e4eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7f687a-8bb0-496f-b241-5ec4c250d785",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150abdb0-989f-4b11-baca-b9a94cfefe13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "576b35c5-af24-4195-924f-e998713e5f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f20184b-855b-4b78-b916-887543c50b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e20a4d5d-b73e-4317-95d9-41e6e0e5f184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184e90f1-a374-443a-bc61-d77aa8a8f40a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96adc0a-aa17-46e5-b547-9a8c323d2a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28581df-b6a5-4b5e-8ac6-83fb3d66cdd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9ef870-b398-494e-b821-07184fd97a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33eecc5b-2be4-43c7-90b1-8bdb40c5349a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977ff418-77e7-4121-99ee-cd23a98b2a0d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e933b447-9768-4b07-acaa-39010fac5102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c52d797-52e4-41b1-920f-403ebdbfae71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17aada8-a78e-49d7-8116-56a710bcce0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21b7ebc3-598f-4604-915d-698af079acd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2d44f7-1161-4a0e-b0aa-6caeb8e47b6a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35886596-dff3-4337-8384-f34d2a12774f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd242277-451e-44cf-a9f2-1765602eab8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dacfb43-a7fd-40d0-a1bf-aab371cf37bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d98cb696-a283-43eb-8689-29908927e565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6818b735-58ce-4a5c-adc1-7af704fcd60f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f005a4-e291-4ee5-bb46-901349b9b01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75944e74-eef5-4105-a615-83bed9501685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1aa207c-63c2-4175-8f4b-43d7d1305a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7a1474-38ee-4ead-af45-7afafb86683b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0321297-5da8-4427-899a-2fdc4270ea61",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96550c3b-cc16-445a-8113-58496b6d1392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b4f288-eccc-4857-a193-1caf76fc56c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ddc2b1-6414-40b5-a884-3c7c2756a629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "60186def-b1c4-4f65-8870-97e740ebaa2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7b922d-35b0-4445-a462-183576a6abea",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f1c5f9-92fa-4d31-b038-b8691ddc3ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a863f724-5ab7-437d-8bfa-9e31e6bad1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78bcdf4-c81b-47fe-8173-3f0d97a1751f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "056f960e-78f4-417e-b36a-ceff5cdf83d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83130936-e193-4346-b89b-544fb2111a89",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b004f8-b421-48e1-934c-bc41ec0b670b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365cca29-23e5-47a6-b21f-fa3f58cac69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5229b09e-2b2b-4641-a194-83e6f0be8a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dc9e207-54e9-4e22-a1ec-8f05b84e8fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c9991e-f278-4e36-abf0-0045af0ae411",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16894077-5d72-4393-a31d-8434d8af0143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee9f3d9-52e6-4f1a-813e-be90f85a5569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c81433a-70d4-46f7-8614-8b1b9abc6a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38fc7939-aaeb-415f-b317-10a590155ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85733b5e-10ef-4c0f-93b5-fb1b8e7115e2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9c5268-567c-4b1d-b246-76280350e40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78f9e59-e9b9-45b5-b48d-13e45a2b6c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9bca676-d3dc-4cea-a024-9c3afadc7f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5d9f52-db1b-4731-a8f2-3075d1bac417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62922a3-9d8f-4350-967f-f2bd4d917a02",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c181c07-eed4-4704-b943-3dfce1f0b1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e3a5ed-c6db-45e2-b3a0-e45e0d6fe262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d028ad01-e17e-4324-86cb-b4fe4fc7815a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4a64a7-00c0-4a3a-b4b6-124b24a331d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f0c715-bdd7-4b8c-9692-6a79aff3aab4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9a9ec9-13c4-41d9-8cc2-edd8767f47ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df6c16b-c2a6-489e-a2ba-b78c517ed3a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba9b3cc-c5e7-4b3d-af8f-306f6bfc0258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae205428-8bb2-4cfb-b730-9069d099bcdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d86a53b-6ce1-45ba-8278-dcf2090ed7c1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ecc6cb-955f-4b37-a9d1-45ddd98ea286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f312068-2db2-4f75-b874-4782e5a5c959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98afa938-c1d4-42d8-8a2e-2316621dac2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "240ea5ef-ad64-4af0-99c8-79f4b0078b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c6ae06-fd11-4709-b463-6121b35cd9ce",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a1b997-1d6a-44a1-bca2-7fb9a91b14a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45578cbd-b431-4836-9a5c-fd4fd8d0b75b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e33b7ad-af76-4fda-813c-f9c6e6faa3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a59c55-21ee-401f-84cd-61c6c51d28c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c901bf21-e031-4106-b9d8-66020d7b132f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632aa8b7-63af-46b1-bdf5-91aeb561ea7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500606fe-5350-4818-847d-4bac62ad3cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84b2719-3c0e-42f3-9a6a-1a24174b6092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "910f1c77-f893-4b47-aabd-7cde08d93a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fc0a04-f80f-4b38-9469-bde441d0bb81",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6d0cff-5e36-46a5-bcab-57baad804961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cefc872-5f39-45da-a286-458aee94ef95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb6a358-9e7f-4a68-bdfe-a28318d07ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "137470a5-70b8-40f2-97a7-bbe80ab51fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a3ef12-8bb9-4342-a21f-7f3203f9ef7c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af770a24-df32-494c-ae7d-d1cbeeffbee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6bc3e50-da1d-4010-bb06-34714e5f3c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95793205-e1e2-44a1-b001-5a189ddc27d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b7e679-7f3a-4a8d-9a1c-48af98edf20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e5689e-a24b-48ae-a775-49e603fd78e8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823bda38-182e-4a44-8f08-d677316c14f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd725b0-a334-4ba0-b0ae-eb0f3ecb9b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdfbdac-6997-493c-8184-24049316bf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce2918c8-1f2a-4785-9ef8-f7004c0ef0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5ec67b-8d4d-48a9-be27-1239e90977d2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd9d328-7278-48af-8681-6884e37fa526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ecfe7b-d702-46e2-9156-865f9047c918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26742955-1ede-4233-8081-28c183362b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb82343-ac69-4257-8cc1-8a9739a30f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb771cf-6729-48ef-a3ec-befcc889048e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb0748b-e342-45da-98fb-dd6b13fd4233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b72b36-857f-415b-a0af-b099e810fc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c26f93a-451e-45d0-9885-df85283b1158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3ad6cf-c4f9-4625-97b7-1fd1f46f4558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b2f670-8a5f-42ee-90a1-2791740de96f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba62961-709a-4a85-a284-a78b3ee46ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4be113-0e7a-4665-808e-c79f47a3886f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b90161c-6299-4ce0-a8f7-cf5c1b3dea72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4dd1805-4204-4435-bdc6-8cd6d6ea3776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6abc5d-f1c7-481f-ae48-b5cc2585d186",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a69b432-0e85-4c3b-a192-10ca3b2dec06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8156e889-8ba3-4294-b70a-045febd145df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc206941-892c-4793-b43a-ba2f2728b468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e5c1ef-0127-491d-98b9-d5ad5ddb7462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b035bad-6008-44b1-bd22-44d316dc9662",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabacf09-c012-4378-ba9d-4ab02978888a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0afa13-81bb-42b4-abf4-31e6d3188280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b473dbe3-e0cf-4f6b-9645-11b9f457e60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1540d841-0898-4823-b68f-8f2453e7fe1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9831ade-bb5f-4e0a-94a4-a8ddbe742b22",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30aa71b9-1a88-4da3-9518-8c3a78013462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a898a321-e053-4837-b9cb-a6a451ac5b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3574e01-975b-4eaf-a971-507204f483e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73d9c82c-99fe-4cfd-b6f1-435bc0dfc3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2198c492-f5b2-411a-a3a8-71e5a3a14869",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653340c9-7c06-4536-b09c-ace42d5ae658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551c4135-87a2-46c6-b25d-dcff98444093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e55370-fc6b-4fc1-8c74-aa3a245a4e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cdd7c8f-c415-49a0-a29d-c8350f977276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17992f56-68de-4e6b-b652-7592c1b8d7a4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e131a8-9e71-4849-b976-1e6ebaba32fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f15343-5d41-404f-bef4-02f370ee0123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f98556-72c9-43b4-af3b-8ccc4780cef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "314144bd-7acd-44b2-826d-29219e7a6eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb01bac-71ba-4f0f-bd36-a85180e0c103",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7355547e-7703-495f-b447-f9d51674c347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e8aa98-9cc5-41ab-b021-64a7db240b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f16e05-2384-449c-b54b-89b4a9b78d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "47cbf52c-75c2-4c4a-a007-e82a723bff10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ab1fb8-ec50-4a37-ae62-00432d64dfa1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e055d3-56f6-48a3-ab9f-2716b3d3d51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb7ba0b-cfa7-4fce-b437-cda6eb3066d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52ca794-66c2-459a-81c0-a5714b69a1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "db223cf3-05f0-4250-a40f-2c04eec3a3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457dbe05-7b97-4955-87c9-c90f823c4602",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d73a1b6-bb33-4335-84b3-0313dcc90011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486bcc67-a37c-4657-9536-b691ce88139c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e01d09f-8f41-476b-be0d-2c394688b1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "629d9088-fa94-421a-b3ce-1fa4b0547287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24712bd-f3dc-494b-a06f-60fd973152ec",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27150906-c01f-4b50-8583-554a9505980c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f0461c12-3149-49ea-b071-f61aaeedcc61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c3dcee-b7bb-443e-ad70-ee28ffc9fa49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "83de9e25-65ba-4318-ac12-e4c2b2c1b9af"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ce29753c-edf7-404e-adbb-de74197e9137",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b20344a6-26de-43dc-8a3c-a5de05f8172c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447c2236-f15b-46a4-8da0-de45e4c189ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa5ef5f2-478a-4f49-bd69-85890e495f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935cdf77-43b7-42b9-916f-8ff120988ef3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a523bb51-1c79-4780-8836-c4dae91fee71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfafce5-87da-4adc-b888-bfff9e48d42c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2701afe-d074-4a0f-8519-7965fd680d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58c639e8-3f53-4d88-a648-c9508efdbb31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597a025b-4e7a-432b-bc22-fcb0cbadd9e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b5242425-dbe2-42db-aafe-232c34980b6c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0292d3a4-fb9e-49dc-8921-f93d5e738d38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ead8ff9-e77d-467d-8c8a-988e0dfb7ec1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e232b32e-876c-48fb-ab7a-0f15cfaec694",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2afabad-b833-43fd-a988-0374ee309cd2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f0422ef1-8981-412f-8ed5-f7dc4ef8e30e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf86d22c-2cbe-48cb-8902-d7be4196fefe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "01e19b52-b066-4712-bb9e-ab8bec59b956",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d582f881-e97c-4b69-ac6e-37eb1e6e4cbf"
                }
              }
            ]
          },
          {
            "id": "5cb69730-d691-4f5b-bdec-96b1401edf92",
            "name": "Positive Testing",
            "item": [
              {
                "id": "150f06a2-befb-4520-abd0-601b3dca5178",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79128b25-e115-4779-ad5a-3fed0e2a6ce3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b71ddde-d649-46ac-8068-2208bf390f4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cb5ad8e-50e4-4cec-93dc-7b61939ae8d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "13bcc510-21c8-4dad-b06a-da0273315816"
                    }
                  }
                ]
              },
              {
                "id": "bb7f4dc5-3494-4678-8b5b-8bd7308caafa",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cdb5505-ec6a-483f-8646-ab93787b27bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b26e9f33-9604-486b-b08b-b4332e6ba733"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed007ebe-0431-47c2-a09a-a61e69521a27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6db4dfea-17ce-4ec1-8885-f5688c1ef0a4"
                    }
                  }
                ]
              },
              {
                "id": "641b17fa-1ad6-48b1-bcb8-395c8696186f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d09c6b14-6cf5-4edb-90f6-dc1659377450",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "865dfdec-89e7-4bb1-bc59-51f87e78a936"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25fa6f60-d785-4955-a7ec-cd780842a656",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7b588fec-3e5e-4767-930b-705787122991"
                    }
                  }
                ]
              },
              {
                "id": "538444ae-3898-4c3c-bebf-32c2fc35c701",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b35cd30f-a5d7-4d25-b3fb-59a39fe7995d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34577eda-9208-430f-98c9-d3ed2355a914"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e8a48ce-6637-42cd-a08c-1217a264a6dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1315ad2a-f919-4c96-970f-998927eff514"
                    }
                  }
                ]
              },
              {
                "id": "916f860d-68f5-466e-93bf-6c9d91911d35",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ee87a6c-233e-4e39-af04-0f16b8f73d39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "017b7de9-66e7-4d0d-a45a-deebc37e1329"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2b101e1-9301-4432-a7eb-f2c3d59cf253",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "70dfb5d7-4e84-4c52-9f6e-9622e4ad5fd6"
                    }
                  }
                ]
              },
              {
                "id": "ac3c0d40-2bbd-4a63-b998-95f7de48c5be",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58231ce8-da2d-408b-9e11-98335827266e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "caf5a104-74d4-45c5-b2a4-b9285a87335e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ada1fcb-6411-424d-9eac-dab224cff299",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ce74e7f8-693c-4be1-8c06-44da48ae230b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac4c8e61-a395-44b9-9812-003d240bb30f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2dbc50e9-b011-42e4-adf1-68abdf52d085"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d96985e6-741d-4cf7-ab22-d172f1634f6e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "48dea92a-fa0f-4f18-81af-0a7941d86e4e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f80c6a2-8fbb-4515-b2bc-26b76d21bf56",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1113ea54-da08-4016-b430-8f80e5b38911"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d2480ec-24c1-46e3-bc74-7d75366d95ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d9ee1f3-8b3a-4ae8-b519-b5f5b39a4b7d"
            }
          }
        ]
      },
      {
        "id": "89ff78fa-da94-43f4-b699-6f9211b1e3f4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c238e465-e903-4045-ab70-e44e5822cb6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45614c2d-f12f-4080-9f8c-0af8f94da879",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "550acd1b-1c13-4b1a-8f4d-10852d4c6166",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1ca393-61b4-4c29-b929-6215fd911473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9606ded5-5069-4b57-8eaa-ba2ee9c3eaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306781fa-00c1-4961-b3ab-e6dc9e477367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "27c5b5d8-6705-438b-8585-eba38eea5d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1cec62-4ed8-42e0-900b-44d7514f6037",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c119c6-134d-4160-96ce-aa96cffc5153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc7d857-82ee-4908-9f05-92bbe5c700f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51742118-fc20-4228-80ec-c055dbecdaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de8113ea-4aa9-4583-bcb9-cbb487598987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbfea84-fcf5-486b-acca-178966490099",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b940273-ce3a-45a6-bbbb-e9d9c0d0ea49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68e7ff4-7a8d-4c95-8fce-921757d5665d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeff9dae-dd7f-400a-a70b-aa89f9af7f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f96ad1b2-9e74-4829-a056-cf7be5d0a713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bf801c-8970-45b4-8b3c-ecefeee91e4b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b1c6cb-1b1f-49c6-867d-ae7d1a8f57d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf1993e-e4e3-45e1-8333-8c28c9da5032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5dd053e-c3a3-4402-81f3-6c5ea344c95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4390f789-d337-4fe8-9da2-c034d7287e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63992351-06cb-441f-a919-5d283e45ad9b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcb7252-539a-4014-a6ce-eab77813be92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206802ab-48b5-4075-aa07-df5131eb85ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1233aa82-880b-4245-9e05-376d1abd781e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa396858-7e3e-4266-b430-5e8591c4b998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4f900a-0491-4d65-b8d5-75f7c94b9b92",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660e7b5f-e7f9-4ae2-a68f-51e7592446c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbd7bd7a-4b06-4063-abcb-b79d5eef5493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce1b85d-24cc-4b6e-998e-cc9b67076564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0905ea14-8965-4c82-905e-c85e53631cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ae4d02-2553-4dca-ab5a-b79695d8c2a7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271bf955-c621-43af-a187-88bbdbf3aacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe9239c-a413-4fdc-a632-06834380f4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581a5e96-a26c-4041-8bd3-95cb046485ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "34a2ba09-9802-49a9-962d-c19337aa08d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de97f31-19bd-4eca-994a-1e0058a02e9c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5a6413-c851-4d76-9c83-e58b0f70bb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e683af5-c186-4022-9c2a-bfdddefe11d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3422f3-0766-4abc-a5aa-a1c358e83b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37f2f894-7f04-4057-9b3f-2ff35c86c339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62fbde1-008d-4a31-aef8-f840459d5492",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa227c9a-e59c-4f55-ade8-6da8a522d908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8af6fa-04a4-487d-903c-b773b0ddee1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5f2ea3-40e0-4e5c-9030-91e6af97b673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6e447f-991c-44ec-921b-bce286eface0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe19dcc-a1b5-45b9-95b1-80debba50748",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8386d2cb-b33c-4cde-9e03-31c91f87ed85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fa62aa-29f0-4a72-86bb-c43d1abfb120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6264541-b10f-4c06-97b2-c3645d0cf835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d594d123-5611-4118-b76a-19a8f5081e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2fbdc9e-0a24-4331-b7cb-20c787f6ceb4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32525d3d-bd8a-4e7b-b352-32c8926548d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e936f435-a3bc-4883-82b9-bb3d132a1ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ebd7aa-3950-494d-a8bc-4792f208e198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed9b153-8d9d-4498-bb8e-aee46c1a7157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699fbc99-0abd-428b-bf64-55dd711f1863",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1dddac5-d08a-4947-9f3c-f1035bee84d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef1c6e2-aa49-4ff6-9fb4-99fab8d7187f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becfdb82-335e-497f-b7e3-73d4a8e211c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4def7a16-94b9-4e4c-8aa2-e16b2775ed3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89962962-4f79-4b76-a9a7-98686a8791d4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236db7f0-4a92-425a-a24d-bbe8a38a1ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76481fd-5f11-4bd8-8237-6245e7710485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4332768-027d-4c4d-82db-0ce3de382527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e8bfb01-76cf-41b9-bdcc-b9e4f24c8bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2830530b-df66-4701-993f-841f0d1d943f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33181816-b350-4a62-aa7a-225bdadedc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a3c42b-1cca-45d0-9882-126a3a49cb20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64643dee-0ad5-4fee-8644-107dc7a4df17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "63d0cc0a-4dc9-4dcf-976c-fe5d76d0c483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6225b76-9b93-451f-acec-f1bc4ee8c592",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dc7ede-0cf2-403d-9b2e-2160c6b0954c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8cf735e-75d3-484d-bf30-8810837b0835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bae91e2-f2ab-47e6-abb2-6b1860024dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ae091d-1059-4c79-96d5-201e1ca4e919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ad650a-d01e-4bd9-9344-6f78d8b82215",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b9681d-56ca-4688-95e7-f8c1e7cce29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3504cc9e-7ba1-499a-81bc-fa737157a1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5fe783-90d6-4ddc-b670-713b3ea241dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2e971f-c13b-4556-be33-ae56bc85dc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4a4710-116c-4827-bb79-5c02e50fa497",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca67955-5b41-4782-adf2-4ce2443ed57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58244df1-8742-4352-aeac-fededecd4196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53811470-77ee-44b4-b8c7-9d7d5f901078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee9a581-344e-4f6c-b085-620282193303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd6fff7-973d-4e2b-b854-84cc88754303",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c23ae5-d2a9-48bb-a772-405a36de1f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f5d315-08bd-4291-a307-9e39467b973f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7d8ca3-b290-4b3a-b17c-fee718a3b914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "56009d98-d700-4eaf-a7f3-9d39f30785ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2315674b-13b0-4e95-8b32-d5f4116f79c3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab84665-9e0f-4286-8800-c11c47a326bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac5578c-e390-49db-b349-05425a1df982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72deb6b-006a-468b-a51c-a4ca17349de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c277a25-b55d-460f-9fcd-f99bd6acc7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b0a694-07c0-440b-98a4-946864c48c0f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e3c1e5-7b3f-40d2-968d-dcbeb7bbcd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d008146-5c67-4451-a361-29d8a16d1e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108580af-f74c-46cf-b6cd-5d4993bf1382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "364fa529-7e98-4020-9eeb-e933d33a3eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d55add-bb23-4a7c-821f-6e535bae8161",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7ac7ac-9a12-4c8c-b6cf-feea52dee75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f30157-10b2-4c87-b522-5adfcf712bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911b16b6-fdf9-46e5-a7c3-288fa716500f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "209c3b54-803e-48ef-98cc-9950f3535fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db90c13b-aee7-4db5-b468-53a273224dd8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f573a5f-ea6e-4196-a8a9-49c59eb3fe69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce2e561-7b12-4ea3-8f69-9d9bd580d9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b67a04e-073c-4816-9f15-c7c9391b4f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be3612ac-090f-4d83-933d-9ce0fa715d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1f9bff-e5eb-4c1e-b262-e92090dbb3c1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66143d2-4562-4862-9892-8b40b85020b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d78ee3-70bc-4189-bdc2-30ac202009a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2beec88b-38b8-4d7e-833f-88d71a0e6f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b9b801-7d8f-4b31-869f-f92b2698c4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84f7691-04bb-4374-a0c9-04ed2e35b525",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ee6608-9b38-4b9e-96cb-fae6d19595af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34bb28c7-bc8b-49e4-af6f-72235bee27ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b3d92c-1a42-4976-9e76-1284bcfa0fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9495072-c582-4126-9fbe-be84a2d421de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c22d42a-47e7-4c97-a576-cb01fd62dcf7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e7e5aea-a646-4fa3-8f26-cd6861bd8192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff9a117-9708-41fa-a1d8-a088c69ecba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44667627-b4d5-48a4-ac56-fa0fe6e08b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "428144e1-9d53-4634-870e-1238c5a70469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebf5d9a-6ef7-4246-8c95-e9f9780f4181",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81e4f0e-99e0-48bb-82c6-74acb2638584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "448e1864-4014-4031-9c30-d3061e4c6992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8f7933-69bc-469a-8c78-9ca3c797fc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13a3949c-ce0b-44c1-b0ee-2640a62903ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1914c06c-ea8a-4d8f-a3ba-54f8c9d3bcbb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31012f74-64ef-40b9-a14e-3b20c9f55eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6eea4a4-0f00-4fd6-b67d-b7a423721fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04461662-616f-422a-8f00-3aa4dbb520be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3df75506-45f8-4b80-a9cd-301d5f93fbe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42d9114-7a10-4de5-acc2-77ad05c26b66",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df630a04-d7c2-4ce8-a00b-8d1b69b65c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630b39ea-913a-44f0-8436-913a6f19e160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821c8c25-f041-428d-9351-f90a14d16cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "917fec59-728f-4409-b8af-c99071869a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be49283-ac08-48bc-99d8-9180480b8a79",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad795e8a-3175-4711-92db-e1cef2d7141f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbadb46f-e6f6-4ade-b333-0340af98a4d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14511cbc-b9ed-45a1-8d17-a5dc62851475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78b8ce1a-0e92-46ad-8f2c-a84c79aab89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fa2b35-08b9-42bf-8db6-06daaeaa4edc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960d3604-b164-496a-98be-70fd74aa28e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77114510-3157-406c-8064-2a444e814cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ac3ea7-a864-4aac-a1e5-f10d24364ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6bdaa2-3611-497a-9199-f6ddf4c2d95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e50da0-2e5b-44ff-a583-c7f30d2bc267",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9791107e-392b-49e4-bc30-78aab24ac288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df07e757-57f0-47b0-a287-c3af3d1a19e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c64a19-1605-40b7-970f-0e95d94f9992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc520de-a939-47ff-8186-ff7e39aa1b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e5c89b-5385-41e6-8d23-a9c8f2c3898f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4071d8-3d86-409a-a09a-ab10265dfce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82641524-9ff5-48d0-9c6a-7030ce82f1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d90b462-56e3-4750-9b8b-664ca5972bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3d07a5-1fd5-40a8-b242-57b049511164"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "15f4a36e-0b0f-4503-8a6f-0d81d07f1d13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39a5760b-eb9a-4e8d-bcd8-4afd1ea3228c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9e0e9c-fdb7-4cb2-818c-bef76e0ecbbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167e0688-5649-4733-b541-e1effc3ed4f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cd0c67-fa22-4a5a-8c19-2cecfe28e752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5b620f0-fc3f-42ef-9a8a-e22a6b43e6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a5eec0-2892-4c14-9c4c-ec60b277b261",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9df2858-e432-4b95-a7b9-e10264c7f70e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "56c66ab2-6821-4798-8868-8a0e7bd8c43a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb9ce34-120f-4246-a04d-a06c61bd9ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99349153-6069-4696-887e-5a53f0dda32b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9915d1e2-47cb-4635-8fa5-da291a625940",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bb25555-5f54-4e38-8d17-bdaa5fdf8b23"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a99075e0-4ee5-4967-bccc-a80d69237abf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eda48d97-0f2b-4b1e-8971-1ae70215fb49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df1bd846-0f64-4eb8-8aae-b6656ab1b8b7",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eca0bc0f-77e4-43ef-aa40-5d91510f5c13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d5570935-8a5a-4632-9784-3d3cbde90039",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b857dfad-634e-44d4-a34d-2abf3bb69c10"
            }
          }
        ]
      },
      {
        "id": "9ac53651-80c9-496b-ab11-ccfddf3dba07",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "38874de1-503a-4036-9c2d-5c2bd52bb655",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24c0c1dc-4cc1-48b4-9c5e-ce1db106d926",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "56503dd6-7483-49ef-93d1-da1fd3cd2b22",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0cfdb3e-a95a-4af1-87d0-39d09b81f491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3016b7f-ff44-4add-934c-a271d97f210a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ef829b-e304-4a8c-9264-f94a4cf7a66e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb9cc69-5b2e-4790-9610-a92b63ec1395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d943fa-7550-48a3-901d-ed71229b33d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ccf407-7360-4fce-8883-cc07e10b6bb4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8074bd3c-6b1f-49e6-af0b-88ea7c42e91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef9186a4-fd97-4aea-9a86-71d2059265f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9e084b-69f6-4db9-a7fb-57dcd8f6c900",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634de8f6-8d25-44ab-ab55-f7a8957d4efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ce86af-96d5-4707-97ba-5d1e998dd3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a836bd9e-8f8d-4bf7-8a45-04985e174642",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c45e922-69e8-410e-930e-1d9a7ed20f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611b6270-adc3-4685-b793-dc2264a75992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709287c8-f4ab-4406-bbf6-4d1bbbf06c16",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3e8f98-007f-4293-815e-b3297f965bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b12baa-9084-4137-951a-0d5928213c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11be9aa9-7b01-49a0-9c7a-a9fae6a53eb3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272e7b52-e3ad-4aa5-bf54-171777ef3b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ded7143-9add-4181-86de-0653501da4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa655ca2-44a3-4b8b-ae6e-3e45615412a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ac0071-ad3b-4234-8ed9-f6f50bc24c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13bf3014-a58c-44cf-9445-8bb8ae6f8fda",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04f96b0-329e-4266-ab26-460bd4a89033",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c53d82a-a144-47ce-9230-5ce0137f69af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c86d7d9-a5cb-401b-8486-ede3b09af70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e824e8-f843-4b35-baf8-dbf13333c634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cf2120-5975-4d58-9e92-2f90f7d315bb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1e613f-c439-4af6-abaf-ea168993f8b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f27464dc-846f-49a3-8ec6-4e3733529e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "210ee51e-f89d-4843-91c7-5b33f3bb58b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38919b71-4be7-40a1-ba87-48d2fac980a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bf530d-2806-4ac6-84ae-f6dca4b760d9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b744fd-7a05-460e-a3fc-102dbc435c93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e993eafb-edea-4883-99b1-379f62091631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e17bb2-f77d-4ebc-b2a1-5f5555f13e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05197380-23e4-4c3b-9bcf-0d5a0a36aa49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc8668a-0dee-467d-9c87-e58cab53154c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd41c03-a583-4258-92b3-778b642e5c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed479ad-a8e9-46b5-bc16-069ea0cd4a09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d5990a-eaee-42b8-b956-8efda8687bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c35772b5-771f-4d07-8476-c75085d9ccb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561da13d-9bd6-4405-bbd5-2a1561670513",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4eabd1-b3b3-4a70-bcd4-053416911508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e0916ec-2a8f-49d0-abdf-90b8292bb707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4443afa-8e84-4a22-a9f6-5e47abd25bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e6200b-2597-433c-bf45-f5754fee561c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24bc3f41-ccf7-4593-83b0-03d7233cf1d4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705f929f-008b-477c-8c47-6ea64e10672a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf4bf545-f495-4012-9e0b-8f0b79d55e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e256b08e-e886-4399-9e8c-d93f1cba4761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67faf52-6236-4a0e-aab5-77148f8caee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b0acbc-57c8-43f4-a393-26a6a13cc72e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21b6252-075a-4c07-99e2-a8b15ce441e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7a8ccf1-0fab-4baf-bbdb-f412eb1dbeac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "536ebbe2-6789-4bd1-b6bd-f5e7c991fa91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb0174b-0920-43e1-810e-ccc1a37d5c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82af3a5e-cc19-4c44-aa04-0fc0db6fa2a4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6236a63f-8480-4e69-8ffc-0103e4216ef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9df10b80-d480-4f85-9400-7cb02cc40b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a397815-bf20-410f-8c30-95b8cbf5bf3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b311991-b088-44c6-baf0-fb810a1b9b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6ab434-7009-4041-af26-d5b3bcb7a839",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bf2bec-c87b-4f71-9f49-f79d5d7e07ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14d76758-83c4-4996-a358-528d53e4616b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4e0b45-80ce-43bb-96ff-d960c3f4ef69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc596378-4f8b-4a33-a0be-00fb2dfefa08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628a5bfc-71bb-4667-94d3-0864f1ed3eda",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ebaff5-30d2-4c99-9e6c-563b1dea0ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039b7a4b-4117-446e-b184-fbae43400d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "313f6d0a-d319-4e47-9755-0a1845f5d3df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab797473-2fc0-4fd5-b01e-72ea12046f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c8264a-1389-44ea-be8f-23e08ec2b5f9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64381347-aace-41fd-bea8-84e5af78410e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a90c6e32-e463-4e24-ad51-e663f9c0ef18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "365714f5-9527-4beb-bec4-32b2861533e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79bdc47b-fb33-41da-b180-f514f636a8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8dfa82-b3a7-4a54-80e7-40475da2ccb5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d613ce3a-4887-40ff-86a6-18ee02bac621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0371996-0f05-4329-9c55-10d4e50b4f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee79f0f-1f82-4217-8de1-ffceac0cee0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3275df2e-fca8-4d41-a706-562bdf9dfa5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e645f231-ac76-4583-9444-4758b728daec",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a63581-4d72-45f0-b7cf-ad5ba41b28c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c864a9-aed1-4876-bc38-7c791177d65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed592058-645f-4995-adfc-e31714084947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d4fce4-ba91-4f36-8b15-b71644ef410e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efeda63-0f4a-412d-8832-5ab63cb0b41b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7f4376-7656-466d-b311-55a49d6c2d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a0d89a-39b3-4882-b7f4-2e70911a2719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d745280-4274-41c0-b096-05d06dcc38f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c25c33f7-2db4-4eb6-95d4-d69225c732a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb870d8-bb17-440b-a93a-f05caae18351",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d906ae92-a7de-4629-9d88-2ed38e4d07bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f6dc8a-5911-42a9-b3a3-11c97e7b8496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2dcc1c-e66a-464d-8580-7ec9e64d4b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8b6818-8cf6-4308-b51f-d2850461e9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fbd03d-93e9-4b98-9c80-d179871c1bc7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd24bf1-708f-4a83-b57f-3e548569f170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd1ead9-4bac-4244-8613-5661b7d28041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b784f7-c9c4-4330-90c1-cfb547b55a68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecdda2cd-cadd-4d68-a39e-960139843929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bceca4e8-4f74-4187-afec-55c5a3134b7e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83049bf-dae9-482b-bcea-b2a18904d1be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb92592c-a652-4bad-8c1a-8cf76fc25254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fc1a0d-2e23-4f78-854f-3f4abfcfe4ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6f0b06-2906-4cf8-8da4-e36db9963cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b298ca26-f2d2-4eb8-a202-25826a7278fd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e6595d-b134-467c-a919-b82d5b61cacd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "728bebb4-2658-4d44-9239-b1bb765137ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8511bef6-1064-4cb0-9444-4619b884bb5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af30c9dc-16fd-4b2a-b26c-717abf2c3381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d4c23b-7963-4b49-a5ef-fc36d41c1133",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe66f31a-0030-4fac-a3bb-c20460bfb1d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69569d4a-58d0-4ca9-b4fe-8ebb4c178db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97a7f62-1fd2-44e6-8a75-b55e4c4d5cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d50cbce-92cd-44c5-9c90-cc52227fe9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92440f58-2310-4893-810a-1fe5083834a4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12c4100-4330-4457-baea-6b0f97032b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75c9f486-393e-445d-a01f-83219386209e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86166a3f-4e83-4e76-a7c8-7b8892de2dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a32945-5df9-4245-a4f1-5a90b8d696d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b8c481-62f8-479b-b2a8-6bd5e530ed7e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2382ef35-1037-468b-b3df-0762df33e1f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e125f65-019d-4580-942a-e75310bacf41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6c986a-1ea5-4a0b-9c10-2451b4b4e300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f0a9dc-f8bc-4ed0-afcd-4364949b043c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa187ab-c315-4185-81d4-edcec0140927",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b96d479-c99d-49a6-a88a-0aa8d0b60815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd05a31d-c379-4d92-8ed5-4171b000589d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6400bf4f-6bdd-4e18-8096-f9b311dfa6f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057f0ee7-f06b-4c35-b01e-40fe1d81b084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ff5b73-834e-4077-a4f0-44b0f538416c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a03a0b7-7969-4e81-b3ee-4e9c83f79280",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8e08a52-159d-4304-954d-42222982bdd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "444cd343-2670-4804-b17a-ab154bafa575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffcad21-d242-446d-b03d-48cd78832960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb76be3-3472-49c3-a47c-6a86be8cb6dc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ec7ec6-9621-4772-812c-44eb43119e3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1b50462-77a1-4df4-a2de-d9437bab6bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dea28ab-7bdf-4828-9b92-c92d429d2855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056448a0-e089-4e5c-ab78-d9987226334c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239d6e4e-3c2d-4ee4-9a40-92512ed171a2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d6a6e3-4e47-488b-9f95-02ce20f9255c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1a8dffb-525e-46bd-805f-beff51d24007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a870bf-3f91-4e3c-acb4-0dd7deec0bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab1679f-84ee-4475-97ae-c902f85dff18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a53267-dee7-4cf6-a785-acf5f3e4ce02",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41174294-fb9a-4f51-a673-b196e50db5b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84805bf1-9cf0-4bb9-b45b-0cc946f92e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87262f1-824d-4ac1-8dd4-45ac03f47597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b039b870-9338-4dc2-a425-e0c93e310853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11b5a79-3b93-4537-8285-f0186ebc8a3b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8c4dbf-4c38-40ca-814f-915d669cfda8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6901d64-b320-4e5b-9367-463d7f5be7a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82efcfdf-c18d-4b1d-88f7-c46b177090b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e9873f-9994-4330-8043-aedafcc22723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4356c076-1cb5-4d8a-988e-e73cc9902504",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d6cb45-4e9e-425d-9fd0-e82b844b0212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cba4a5f-2c9d-4636-bb5a-71c646ab9881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a9ab55-e4da-437d-ac00-17255cde3eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea20b0ef-b6da-4a63-8e38-7dea7205ed10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d0a036-491b-4912-9e97-84924850d249",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece7fd28-95d4-4fff-b4cf-be4025c9ff1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4abc7974-52f1-4c6c-a236-5ba0dcd54feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf1d6e9-0fbe-4f0a-8bdd-c47ad2537f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c031b9d-bda8-42a9-aec6-6baf44914ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb19efe-529d-43d4-8914-f92baa57bcb6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c91977b-c8aa-4817-a5b3-32af907b5271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3838a34-312c-4810-8310-6ae7f6720b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98173e4e-2422-43cf-95db-18f2b105cbeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba20059-09e7-4bb0-b9a8-2de8d3e85b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25c3ee7-9880-4250-b125-7410a83c2c9d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557d44ec-fbed-453b-be22-11851be0d18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989dad19-27b9-4568-9a73-639bd9faccaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f916be48-42d4-42d9-a3c2-a6a93c46f033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d2d13d-4fed-46d9-8695-306a44f75cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe59e7a-1914-436d-85dd-3d701302676c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ce43f7-6991-459f-80d2-9c468609c684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b52aaaf-824a-4d19-9348-2616d33ede14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6317a58-d3a5-4998-9799-021fb991479d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a310d2c0-2338-46f0-bacb-d7cb785106c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186d0030-d690-4ea8-ab50-a40d22f70c68",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f79310-bf8c-4c9a-ac98-c65460888c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb48117-0a95-4944-877a-eb681d237e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1473bced-1ba1-4ebb-a0d2-a1c7452af78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0ac6e7-0ae6-4a20-b32f-cc0390b997ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bc277c-b02f-48fa-b3c3-e162e238cca9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a1175a-853e-4363-8525-5d5ed72dbce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23797942-ef22-4783-95f5-c96c6e9facd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82056922-e4a3-45dc-9b7a-83396ea64c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c816dcee-2480-4857-8981-a0f995acd399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff3fe67-a20b-43a6-bc9c-51fb4a0394ab",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7cdd41-1dd3-4e50-bdaf-a32da0f82d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a150035-4b2c-4987-a911-b747dac1809d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efffbc3-6444-47bf-ab1d-de92e2ac9a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19474d41-7592-49e0-a444-d3b57e01ca3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3596ca5-1d03-489d-800f-7aba1d5e77b6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff36073-3e5c-4c06-87ba-2c21bccd2cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9badfbad-c693-467d-84c7-cd71111335ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92346c46-ef6c-4415-8ef2-e52e1f52504a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1d8bc6-a481-46b2-8a14-d1564cf1daa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b94e59-744c-4e0a-91cf-7031b10f9214",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776d2527-ddf7-40eb-ac06-7eb6c4662e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b7835c3-c6a9-4734-895c-491c2e2987af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1727285e-dd15-47fa-b290-90b91ebb920f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1280b2bd-b7b9-4c3c-a99b-70944a513aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b82c54-a822-400e-a6b6-8f7c52a221ff",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8d2275-766f-4c0a-9399-2274165058fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d7de64-6f1c-4e5e-bbe8-7228d250e2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adae3dff-604f-40dd-9b7c-fbcce7f827e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b354046-6c3e-4464-bf9c-ed7dea47a52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54f1f85-a421-4372-b1a4-8fe68dd37d46",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa56555c-34be-4fe1-90d3-6f851c7b1974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913e0050-ba2a-4721-9dc4-5cb0106fc4cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c80aa75-75da-4db7-bb36-e3b139a24947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2ed2f6-32f8-4b14-a32f-cbac4cc397fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22ec936-0716-4690-a890-b69158b0bf0e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47db23e-9f45-4457-bad2-98175f63b5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8d8537-921c-43f8-a1d1-bdfe9b7a0809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea969a77-7568-4bc7-8598-becd432a3fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce5d565-77d0-42fd-a6ff-2134bc577398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3316a3ef-8823-496a-b027-5397b1f8afa2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da11a357-fb79-4f5a-9764-4e21618f61fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c136cfbf-7f78-407a-bb09-e3b242a73730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa59073-6dea-41ed-ae89-430b4c6c7035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e3d6f6-6ea3-4425-913d-674b2d698242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6f9e22-d578-4656-9ad6-56e686d91b48",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae7a7aa-d9e5-4df4-951a-b275358c2bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6baca4-9ed8-451c-84bf-7c4abbd10dc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1008090f-4a63-4e2b-8a02-cb373e1ef23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d379798-bdab-4c0d-9044-1024ed35b8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3119335-ecb0-427a-82ba-e030fd03d1fd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb03e2fd-1dbd-480a-b435-a408d39d2cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256401ae-523f-49d0-bc9d-805c928fa165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aecd38b-8e46-4f07-830e-56bec05478c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182eda37-409a-4059-a7fc-2939c471605a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6964a977-ba43-4032-87cb-5cb2602c0d0e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dad5d0-3d13-46b8-b5af-98ef5c11e8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42bee14-12bd-41b4-a284-829d6911e3a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707815e0-4a1d-4a28-a694-ba28c58906b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699ba71a-a735-4b5d-894b-8415bc8341ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184028ad-ff0b-43b7-9bc6-162e1ce0a810",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5d7c2a-c5d2-4f7b-b8fa-0d5d6a62b433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6528610-68b0-4da9-94f8-7b01b84099fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee77c353-17f5-4677-836f-0fc72c728024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f86864e-eb39-4e0c-95f9-95b4a628b6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416676da-4059-4225-8126-4b0e44422cfc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080483d5-c220-4e13-8c54-13f6aa2e63a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc258beb-a8cd-4d54-a13a-2b351d7063db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce89c5e-b57c-487e-846b-b83d630394f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b008ae1-6e15-4aff-9eda-90a8943c5dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf64502-ab83-4b1d-9874-7ca99e12245c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8080fa-055d-4ec3-a09f-6eacf4580e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a52b63f-5c4c-46a5-86a6-a522d599799e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0a6010-40e8-44c4-89b1-3e15d895c30d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f87aed3-0480-4754-8c19-7ec597b55b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b87d4a-6de0-4c05-9f63-48cd3c09b13e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642a567c-a6df-4496-8b7c-88feebb2c47b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0ec33f-6bec-42d1-9271-6c4138a6d60c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1725c95c-6c1e-4423-bc74-cb789fde18f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba71d03a-d4b8-4a61-bbaa-f02a82975e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6b267e-cc25-47ef-8785-a6297eef5064",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5afaba-0b32-4817-a768-87b28b8103b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f04b6fb-92cf-4843-8513-649f0757ba4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fd4820-f506-4bb4-a010-9a076789e999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb060a0d-e53c-4429-b3dc-2a36c973ec94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cf16f5-d392-45a5-b41c-4544b0d1b398",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6a3713-d434-4038-a759-b73154c8db7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076aa35a-86ea-448e-86cb-62d9465b441e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e299e720-cdc4-4658-ba69-887eecc3e62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f63de7-bbee-4acc-9bdb-12e91c8553b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb313b3-8b20-44a1-9a29-1b7fdd68a738",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b96d2d3-7ebb-4d81-98ce-307a22e18234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db45480e-1cb1-4905-bd8c-2fa8aaf8d32c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e80fe0-29bb-4a7b-806d-0a8089bc4582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a99877-6b8e-4de0-9172-7a81a1c07ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972e1c4c-ab97-4242-aefe-b8ce9168134e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec00b818-8d2b-4113-8e9e-825407f8ee3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc5345c3-21f8-47a2-96f3-6e255a84c565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f3423c-78cd-47e0-9dd7-17f4918d92ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ecf6904-41f2-4eef-a9ec-fda9edb1cd36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b74b43c-0e9a-4457-aabc-2cca0988a740",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc03ced-7dc2-4b95-8447-48aa06bed438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30a83ed-db52-4499-9aa2-26b2765c50c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326cdaad-43a5-45a4-b853-21f678de225a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dceb032-3724-4f07-8c45-544e3c7badf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb7f323-ad22-42b3-a5d3-0ed67fa8601a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51753b7d-e189-4a56-a7e1-446e0aa5eae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e8b1b1-1521-4682-b7d4-ecc00d7dc95c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb3998c-4f73-434f-9366-59a96dcebba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b59dd0-d708-4a7d-b017-c0f2bebcb6a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16244b6-2cbc-4139-b5fd-b403bf583d98",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f71ea0c-dd77-4420-baa9-3404e6cc8297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1829354-d052-40a1-bc71-be28e498b2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05a39ec-bed3-4b6e-b79a-23badd0631b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946a26ba-105e-4010-b81d-76c929fc0c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169cdaf9-f1a8-4702-861f-acf984d9bbcf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4440926c-f2d1-4adc-8c72-c6c90e21cad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d217a5-c1be-4a3b-a8f3-046115f7f661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedd5bcf-5d53-4165-9187-32b963653774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85da1f5e-fbc0-4161-9906-4ca98ad40908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd459d6-9ee8-4a18-b232-56a6c3befbdb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b896d8ad-98a5-4eb4-a05c-34252a19ab73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54263318-4bf2-4dfc-a8f7-b8cb5138e433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b91934-e9a5-4506-b4c7-0aa6185ee25c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d1bb1c-3881-4b75-9276-7eeb5a6ab7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788b9c0b-57f3-4969-90c8-ca63c3857385",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796054be-5822-499a-9784-6955039b7897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "318d5955-afc2-4a44-940b-bfc51659494d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2405c67-7e59-4103-81e1-11b9bcd3d15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c350c9a4-1b7b-428c-9690-850e8fbac47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba4b232-aef0-4d50-9d69-61951e9b8006",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0cba067-0277-43f3-b8c7-6d8a210da417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b6c265-998e-406e-b18f-892ce5918664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce42293-dfff-4901-98c3-f6503764c60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e48d43-ff5b-4b95-a5e7-0b701af1096d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7f0537-ec94-4deb-aa3f-0b6e4cd458b4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c83828-3049-416e-81ce-643970442a0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342215fc-a193-41ac-ba06-43a460fe45bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "096e5e4b-f33d-42c5-bffa-1d4840dc575a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a6c13e-7e45-4e35-a5f9-814558def4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db51dda-d947-42e3-9279-a187cdfd45bb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a846e975-1299-49a1-adb4-e58e198468c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b41f2ce-be70-43e0-b74a-5852b3026f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e504b47-ef13-4a95-82fc-119bd4176839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b42936-c66d-475f-8ed7-067a45373446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee0d267-b356-4585-85d6-728922eca1b6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3ec403-8a97-4ee8-9fcb-345c2b8a5311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de7eab1f-d8c0-4a38-98ce-85ad185c965e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88e5c99-b409-40fc-885c-14c039ae88bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f945d6c-902a-4e2d-8cb2-77c618c9dfa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4a201b-0540-4b03-80c9-4a68c81e53d5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02cb7b6-fccc-4c1f-aae8-65e3ecd5a083",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "379d97e4-d6b9-49ac-bd2f-4228b202513d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fae6b4-e034-4d9b-abe5-e60f5dd06e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d960337-e4be-4a6a-a1a9-b5a54b5a3863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e670ad-ef7c-4c48-832a-af1901907421",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5486bb1-4209-4924-aa57-14812700f753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9baf3e4-ae67-4919-b768-ea118eebf646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e18186-07ea-401d-89a2-e2478142eb7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d5d866-3785-4a0c-8c92-a35948d8d98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df36ed4e-a14c-4682-83d7-8bd75c40c550",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169e3a21-af00-4ded-8ba2-bf2e820e7797",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f638091-3caa-4f5b-a0cb-fdecaf0c5da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29d00fc-f0fb-495a-8a2c-6de30aa602ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c392f3-edbc-4d97-8b80-4d2ff51bb1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5074b011-86d4-4033-b748-3378151bc137",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc1a491-f130-4cc0-b06b-8d70a22f738f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "721a9e0b-6fa9-4904-846c-a5bdf3954ca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53a3b32-4bb0-47d0-ab81-2489b7b259ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "762adfce-2c83-4930-ac42-1b503718837a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467c25e2-1159-4767-af70-ee6798398fd5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac25dcf4-f3f6-4917-ae20-57965cc26d58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "034e1f65-7aac-48c6-87ac-f2589dfe64b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fcca78-45ee-47a3-a670-b21139a72b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614ad4cb-3d85-49bf-a6b8-8e9c1dc4a0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52676772-bf34-453b-b457-9eb49eaf4c9a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ff56c9-c7aa-45e6-90b4-7bae04c13192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e23ca66-5eab-425f-9ee1-8811ed14d0ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818c7a06-0204-408f-b54c-544f5a1be6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21d5d9d5-7fd7-49db-8c41-c62825bcbd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047f05c1-7fa6-4c52-930b-34672ac72cfd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e599bc-d47d-4774-b95e-595816ee5faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00f1abe5-21bd-4936-84e0-fc046b853377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fddaff-51ae-45f3-b8cc-0453885535cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eca2b2d4-5220-42af-8b98-deedd8e09a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a1310b-5fce-4b13-8c03-35abe413dba9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a6a523-a6ea-4397-93d0-3c15f51acb6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae64f1a2-01d7-4886-8555-1938784867d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d5b800-493e-4278-865e-d2912f9793b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c96d59f-2c86-487d-9a2f-149720c706a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8a875d-02de-4fab-b628-6058e7cbe58d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb2d8c1-b733-44c9-ab0d-53325becb2a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f98334c2-09a0-40d7-b83e-b0c6547914a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4711b3ff-2e6d-46f2-8d41-df399b1edffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea2db123-bd97-49ef-8fb7-9ecd7b7f8911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2869c76e-3323-43fe-b35d-dc365ee905b5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc6e20d-0c4a-45e9-a8b3-455d05df6dcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e25f7ff7-fc8c-4785-8ff4-68abcdb268b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe38807-483e-4fa3-a78a-25a6952810f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6f8f6e-d355-4f93-a654-e688c9129656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b14327f-1812-483a-b115-64ff6829eea5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a4ffa6-d28c-404f-8c5b-8fecfa0ea7de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d1fbcf7-9c95-4fb0-8673-73e3dbdd2de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "533ab27a-fff3-4dcd-816c-860ba24917aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caab5bee-a151-4e97-ac36-c38f440bf727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6158ec14-ca15-463b-bd21-f5d311c2d668",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8175cd9-83bb-4773-80da-6f62e8e9e534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1560d208-f335-4805-9f54-c3bf8f681155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adfde49-10eb-4526-aa33-aabae97a5daa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05112d9c-6428-4828-a452-9b2303c1b1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3099f0-dfbd-47f4-b5e2-f7a2827bb755",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b706522-76b7-4e48-9c91-b1a2abc7354f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5cee794-81c4-4908-a2aa-b753b396c740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3aee0b-26bc-4be3-9046-d272a2d0b333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af67838f-44d3-4b24-9159-864202defa72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb799a2-f5fc-4b95-87e7-aee98c03317f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d2720b-e713-408c-963a-b6287f14a9f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51aff8d8-9364-4870-a4cc-166498d03b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe3ad0e-4a80-4584-8276-714242a6982f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3e223f-9e8f-4377-b767-42e199fd2041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7834d7b9-b2c4-4199-8582-dd0f5a50e37b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84015bf8-fb21-43b4-85ba-4218c82b2296",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02708680-a6aa-4a43-8dc5-0e87e6905cde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5b72b6-c802-4910-a154-f40995ef7719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858f2f17-851c-4557-a188-fa33296e6ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02537e1-0d97-49fa-85d5-c841d5babb9b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e947e323-cc21-4977-8c1b-db25200ad024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fcb494f-0401-45be-8045-10706cdadd49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d695b8-c9a7-4e4d-b65a-da9de16e681b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224c172c-0e4b-49d6-ae4d-80937cca37ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde4d599-26e7-49a2-a8b4-7393271e4ffa",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ba68b4-6914-44c0-9ec8-b2c63390c5f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a590d30-ad41-4cfb-9ab6-db57727d7df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb71629f-178c-4feb-bdd2-b15137fe92f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a711def-2482-4efa-a932-123ee4669c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19bd160-a2db-4410-8a40-34d71b3c4870",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30371528-95cb-4e42-a9ad-4c2f682c6898",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52e7e4c8-88a7-4499-b18c-057bce781f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9a803d-4d3d-4100-a3b1-341c838e46e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51df122c-4a07-47b8-bf9f-0b3505ace140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f625dd-86cc-4b2c-8391-a4413e6c3f0d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc0a4bf-7f86-451f-9a1a-4ea0615435c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d6ed55c-38e9-4450-bb0f-9b1344d8842c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d399a12-4129-44b5-83b6-02e2d2c93bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f02d054a-d145-470a-b474-7fc21f783772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feeb03fe-6a6a-42ce-b391-ca1e5cab7372",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3992edb-635b-4d98-bc57-a6608661dfe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07ac90d6-14ef-4334-b399-92994a98b1d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edb8403-8b9e-417e-82cd-cf05bfbaa407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "207d0dcb-2276-412b-839a-6bf4aeab9eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76dbd2a-4493-4504-9e06-c1b9f7e03e15",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d09c28-4d8a-4497-87b0-2705eaaf6668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e11ed9e4-9453-4922-8017-0434f57b214d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d0c508-85ee-4a48-b9ee-30bf66541ef8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c53919-a938-4496-b49c-dd86a9e06988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9711cf03-72a2-40ae-8496-735d7847892a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ddbb825-cea5-41b2-a7d0-2c7faee49f73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb7c668-32c1-4a7b-92e4-3b202688da24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737b62b6-f2d7-43ae-9eb3-554f69a08d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1173e3da-89f9-4bd0-82a3-491ad6bb14cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cfdedb-c099-4893-8792-07e9cf328c00",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414dc0f1-621d-4227-9e8d-7b9122e970b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5c203b8-f7f0-4ac3-ae7c-c8867ea45cde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a254fe7-9d9f-49b6-a92b-b02a1f3d8edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f304cd1b-5e5c-40bd-a520-393c2c287110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f39c19-b938-4da3-81c5-a0207dc0ba10",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0eb4efb-92e9-4fa4-a858-d162857f4d50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dee95c5-0228-49b5-ab6c-402e93c26b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a81514-077d-4a0a-9fcb-686d9a1b4b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ebd501-a70c-429e-a26d-f9fbbd8c9380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c56c80b-33b5-4882-9db2-3b94850c66df",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5664bdb-6ae5-4194-919f-7f62eb91faaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "845ad7a4-968e-4a2e-be22-a2ec994ecb1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "657f9360-8191-41c9-8302-e84f6a744835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf21770-eaad-4f7c-a113-0d9c07bbd672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfb8dc0-b595-4442-aa6c-be4507ecfbb2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fb1e86-e173-477b-8e0d-d7090476c3d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85947170-2e15-4e5a-ad3e-9d7763ffb786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54e0ebb-337f-4d03-9ea2-466216455a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc64bff-286e-4c6b-889c-9d577d095a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc13e33-969a-4a02-a800-99bbe15d3a0f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abbe9cb-7d67-410e-a2ba-6562fbeb9cd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bf0fa6f-9a47-4577-a659-dc3aad0b9ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae489f1-1208-4a2a-a703-01f6e2d38b04",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a459bc-70bc-4392-85c1-ee06d2d5d9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448dba0f-5159-46aa-836b-3ff6e754a198",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf95da2f-3541-4383-8ddf-cc667fad2754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57e9e258-913d-41d0-b518-277d83a4a5ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adae9a7-3862-47b8-9343-11954e558f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ff6a8d-3341-4a0e-8768-2199b88b8652"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d53a04e5-398a-407a-966e-24d8beeb70c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "257e81f6-fb84-4c95-bef3-afb04ad3092b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f6b535f-cf4b-4141-bb90-4e64423de335",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "311cdcb7-ee70-4e69-830f-c84a46272c3f"
                    }
                  }
                ]
              },
              {
                "id": "42fff889-7ce2-4827-9ea9-156207f29ca7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20e2f87e-3aaa-4c25-9071-5226f6b95bbd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95066b50-5d17-4d4c-85f3-5c964b7d252c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fea14da3-456c-45d5-bec9-3d4fdcf50d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4667c3-9ef3-41e8-802b-0ef3b52fac71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "577484b7-08b2-46a9-9a6d-4b4e4b216dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fb60f6-c191-4b61-b467-173f9723acbb",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20680310-97f0-4cbf-ad9f-4de762d91fc9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "79d41834-7602-4bdf-9225-fe9977b6c462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2c3844-4b42-451c-ae07-a7cfc7d150fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26791dbe-42b1-4c8c-8360-abfa874327f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91103bf2-3163-47f6-ad13-a3b33ce3503a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef7dc276-75e1-441a-8f3a-0c57af3a4a03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7885825-3cb8-4c9a-8c66-7afc78b5ee2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa17e0b0-4624-4912-9191-6af9f36a6e1b"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "37637e13-7b92-4262-909e-85c41f815706",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4bec27a6-afb4-4ad4-bb60-cc5a2f9680d9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b837fd3c-d39c-4bac-a036-e36b0203fa59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bb85bc6-c18e-467d-b019-8e6a28df289a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72744466-6e34-4664-a9ee-dd72dabb1002",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbb1df79-89c0-4c48-8864-91539e0e4670"
                    }
                  }
                ]
              },
              {
                "id": "23f44b8a-7002-40e0-8071-25957201a7fa",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "34b2a3aa-349d-403d-a355-a4d510db067e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19b7afa2-4a79-459e-94ed-9ab02c6e1421"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b5b4ef7-56a0-40f1-9843-df4ae0e6d805",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "624ea383-da46-4e25-95b4-fce1f97eb496"
                    }
                  }
                ]
              },
              {
                "id": "8d905e3c-a11b-4b47-ba98-ed3c41c906f4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f927e442-d210-44ab-a70e-12c37dbb6a1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b086e5be-a355-4332-886d-b9681b1e28a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42de2d37-470d-401a-892c-04fda162904a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dff6a7f7-353f-4146-96a6-ba00731ec15b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a33de517-ef3e-439e-af56-59a79604dca3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3a04ab47-49a8-4df6-8d0e-4ccae406df75"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51b52588-8a1f-4bf0-a1b7-e688965c8b53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f6029b2-d812-4ad0-b74e-b8ecad33a584"
            }
          }
        ]
      },
      {
        "id": "4eab0893-7c07-4623-b19d-649491049d7f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bcb5719b-d08c-4d3d-8119-16baa43962f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f181284c-3688-4420-bc78-ae4738c7f12b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61cb9134-31ba-48dc-a0d9-c161406545e2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96b5c7d-1d2c-4898-9080-b98e8ae760da",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "48fe5781-5ad0-4b50-a40e-db6572925466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23784b3-1c35-4449-9055-6d724b9714e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a009173-e1e7-4256-b456-6d3ce7c15db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894154e2-2c43-4931-bdae-0e2dd9e5ae59",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6afafe-c5e6-4d9a-b160-79f53482097c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d5cd6d0f-e945-4edd-bf7d-e588ab5ce11c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "926aabb1-e619-42e6-a433-8a841ca59bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b22b543-84e3-4c70-a05b-50bd2a955b14"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b232b23-9f80-4682-a34e-591dffade70d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d81feaf5-bc5e-4624-8925-2f42b982d2cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e06f0b92-12b7-43cb-b52d-6479469d70e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "459f63f2-4507-4bbe-a13d-886d242c8302"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43dba0b5-ccce-4c0d-b508-bf148d6e957c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a848e050-2dd2-4579-935d-75b183c9e571"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e124cec-55ac-47e6-b5f9-805c02dad0fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d8abbfc-ed16-4864-a4a5-a5d950d62e1c"
            }
          }
        ]
      },
      {
        "id": "202205fa-7896-4410-8a50-14c4814834e0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "697ad097-19b1-406b-9e87-f1488d59c492",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14917006-3545-4b79-bdb2-d52102dc7885",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d2355195-57e6-4a97-a88a-b139d30b1889",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5dd88a8-46b3-489d-a0d1-e5b9c49e583b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "49fe4d9d-816a-43f1-9886-ccd3438209db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47a4e4f-7fbf-4398-b8c8-23d8a8558b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7bdc409-836a-4104-bbc1-f35a5f62162f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d896d3e3-850b-4242-8e14-28341b368426",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fb924a-17db-400d-afc9-b9ed4cd7a4f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b112f12a-0adf-4bd1-971a-4442b35ceb83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df76b830-1e26-404c-b905-b8b691d9ab81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc5963b1-b0e9-4af3-8196-20ba0e959727"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f352db96-a1bf-4763-be87-6f40677850d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "692ab0bc-1461-4183-b892-7696d4253b72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4eadb54b-b497-411b-8631-d2ab31c40a6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67e6aa50-b09b-4cc8-a9ef-e6fa7bb33113"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2835391e-3091-42b3-8f2b-11a25e282055",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b4f49067-335a-4028-8cb7-14d308a19cef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9051d619-1d8c-404d-8898-91f52e4612bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fbd79e1e-739d-45df-ba93-c531e91d8107"
            }
          }
        ]
      },
      {
        "id": "ae101b5c-c519-4f84-8788-e0c1ea5576b7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "17205e72-c96f-474c-856f-82785a48c728",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9061c809-4d62-493b-8528-d4a14ad120e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7bd0402-2560-4edf-a9c3-ac8afd53fb3c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9254da9-4aa2-4753-94d4-dcd5218c1778",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ec1e79d2-5a77-4834-80dd-b64e14444056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae6ff49-cf8b-46d3-a873-42add6a54eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3e11dc8-4472-4d1f-9492-762358fc5c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9176ba48-6147-4934-9e91-5be329cd304c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d08eab8-8de1-42c6-9931-ada4bcdf2b77",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "968214c1-7cfe-415a-835e-ce3f08c676b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34576ce6-7bac-4efe-bf74-9d5257c99080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b862227-34a6-4b12-8d67-b884a0be7c16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87fa33ef-3bf3-4dbc-97a4-cd31f59993ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a30962d8-7aaa-4772-adde-ed9fb18b7331"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2c3bbb0-3b4b-4b61-b629-33af7c5d7b0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88151db6-c31a-47b9-9981-397e36f7f77b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc26de2e-c2dd-4dcb-a10a-c2883bf85895",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0a481552-1d28-4721-b5cd-6935a9256015"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4cffe89-1410-43f7-a813-6c6083111c18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ed30559-b5cc-4b3f-82e8-9d20e8e9cb48"
            }
          }
        ]
      },
      {
        "id": "4d06cc9a-ebdb-402e-ab12-52c21ac1cb7f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9bc96e5-8bce-4dcb-9b25-6ee6e6adea3f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc04297f-24ec-4d97-a7c6-055d5059f113",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "923fd055-3931-4ee3-bfd6-c6811cf489eb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "849a51c3-d742-4eb5-886d-f9ad6eceed7f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0df7c9a9-267c-4b85-8f9e-ba22ea0343f2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 338
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 489.9423076923074,
      "responseMin": 10,
      "responseMax": 2523,
      "responseSd": 413.4224052142509,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666313714143,
      "completed": 1666313852465
    },
    "executions": [
      {
        "id": "d071d2e2-072a-43bd-a143-b2e482143409",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "228d50da-eea5-4f58-be08-3ca80a45c6ad",
          "httpRequestId": "93cfff4c-dfc6-4442-97fd-9d7a29ec3d31"
        },
        "item": {
          "id": "d071d2e2-072a-43bd-a143-b2e482143409",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b5039694-2ae1-441f-a68b-2d0dc92b3729",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "02becf94-0fff-45df-83fd-c7eebad73bbd",
        "cursor": {
          "ref": "d38f7a54-c6ad-4c3c-b857-9ea37a9870c2",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "87ace08c-f219-4b0f-821c-dfd3925950e5"
        },
        "item": {
          "id": "02becf94-0fff-45df-83fd-c7eebad73bbd",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ca02566e-90e1-4db7-8b12-0c1b4c5326a9",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "2ba97031-6f3e-42d8-8651-5934e6cc65f0",
        "cursor": {
          "ref": "5e180f92-44eb-48ad-a8ea-a5d78f815d3a",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "32d83698-0d83-4710-9b71-a99bf996c0d5"
        },
        "item": {
          "id": "2ba97031-6f3e-42d8-8651-5934e6cc65f0",
          "name": "did_json"
        },
        "response": {
          "id": "148747c8-2682-41b5-a6c8-97216f41a410",
          "status": "OK",
          "code": 200,
          "responseTime": 751,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a54ec47-6e49-4a7a-a9bf-2a239dab1baf",
        "cursor": {
          "ref": "3f780858-e59f-4837-9e79-d07e322d143b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0dbc5c47-464a-4f38-9bce-14fe205d17d6"
        },
        "item": {
          "id": "4a54ec47-6e49-4a7a-a9bf-2a239dab1baf",
          "name": "did:invalid"
        },
        "response": {
          "id": "281c6acf-aaa7-457a-a940-025fbfdfa312",
          "status": "Not Found",
          "code": 404,
          "responseTime": 908,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4a54ec47-6e49-4a7a-a9bf-2a239dab1baf",
        "cursor": {
          "ref": "3f780858-e59f-4837-9e79-d07e322d143b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0dbc5c47-464a-4f38-9bce-14fe205d17d6"
        },
        "item": {
          "id": "4a54ec47-6e49-4a7a-a9bf-2a239dab1baf",
          "name": "did:invalid"
        },
        "response": {
          "id": "281c6acf-aaa7-457a-a940-025fbfdfa312",
          "status": "Not Found",
          "code": 404,
          "responseTime": 908,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cee4db4e-2e1e-45cf-ad7d-e5e301c7fdd7",
        "cursor": {
          "ref": "2412257c-f431-4dd2-af7d-dda807be0e9d",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "43bfc38b-58c1-40fe-9855-91be453014f6"
        },
        "item": {
          "id": "cee4db4e-2e1e-45cf-ad7d-e5e301c7fdd7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "fccba7a4-3da1-45be-9451-1345dbcac2ed",
          "status": "Not Found",
          "code": 404,
          "responseTime": 572,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "62eb2850-ec66-40b1-b718-021e1df66310",
        "cursor": {
          "ref": "64aeec7d-e623-4987-bbac-1020a4a0959e",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c7425b2c-bf76-49de-95e7-332ad938e5df"
        },
        "item": {
          "id": "62eb2850-ec66-40b1-b718-021e1df66310",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "83bfde73-4c20-404d-b4ac-e2d6ffb7f947",
          "status": "Not Found",
          "code": 404,
          "responseTime": 606,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "d05459b3-26f4-4393-96f8-99ff48fc7153",
        "cursor": {
          "ref": "a4785936-ae3a-4df2-ab71-fef9100751ff",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "de2afae1-253b-4c1c-9146-20027c83e14c"
        },
        "item": {
          "id": "d05459b3-26f4-4393-96f8-99ff48fc7153",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f9cb652a-9f16-4000-b82c-57b04886d719",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "5b926713-bd66-4417-8a68-5b6564ca6246",
        "cursor": {
          "ref": "7f7512a0-f9d8-4935-93c4-5054a45c02d2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "67c47ab1-82da-41f7-b3eb-fde47c5f55d0"
        },
        "item": {
          "id": "5b926713-bd66-4417-8a68-5b6564ca6246",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "48052f41-da0c-4004-b6a5-cf4a4917c230",
          "status": "OK",
          "code": 200,
          "responseTime": 1341,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5b926713-bd66-4417-8a68-5b6564ca6246",
        "cursor": {
          "ref": "7f7512a0-f9d8-4935-93c4-5054a45c02d2",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "67c47ab1-82da-41f7-b3eb-fde47c5f55d0"
        },
        "item": {
          "id": "5b926713-bd66-4417-8a68-5b6564ca6246",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "48052f41-da0c-4004-b6a5-cf4a4917c230",
          "status": "OK",
          "code": 200,
          "responseTime": 1341,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a540714b-464e-49bb-a909-579cd78e80b4",
        "cursor": {
          "ref": "22d79021-2f68-4a29-b047-5a65b88bb1c3",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a5059191-1402-4304-99b6-f41dfed677bb"
        },
        "item": {
          "id": "a540714b-464e-49bb-a909-579cd78e80b4",
          "name": "identifiers"
        },
        "response": {
          "id": "367e73fe-b2d3-407d-9e39-7b9dc20528f8",
          "status": "OK",
          "code": 200,
          "responseTime": 1221,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c35c80e-08f1-405b-b5ca-5d287d020987",
        "cursor": {
          "ref": "18b888d5-85dd-4d71-94be-847809c622c3",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4a739d5e-23b6-4c9c-bdf6-52c2bd600595"
        },
        "item": {
          "id": "6c35c80e-08f1-405b-b5ca-5d287d020987",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9d32bbd5-3dd5-4a7e-80b0-b844265a2113",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 847,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "6c35c80e-08f1-405b-b5ca-5d287d020987",
        "cursor": {
          "ref": "18b888d5-85dd-4d71-94be-847809c622c3",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4a739d5e-23b6-4c9c-bdf6-52c2bd600595"
        },
        "item": {
          "id": "6c35c80e-08f1-405b-b5ca-5d287d020987",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9d32bbd5-3dd5-4a7e-80b0-b844265a2113",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 847,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "798ab80b-1d82-4bce-b5dc-2648c491cfeb",
        "cursor": {
          "ref": "eebf150d-d7a9-4fc1-aff8-847edd5c1394",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ca99b4ad-ac51-45a9-94e0-31d42e073c07"
        },
        "item": {
          "id": "798ab80b-1d82-4bce-b5dc-2648c491cfeb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dc5a495d-6f12-46f2-b116-455b98b6b1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 503,
          "responseSize": 441
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e6c0611d-169e-4e2e-8ded-1fab08b9a113",
        "cursor": {
          "ref": "e5b7238c-16cc-4221-8379-46429798989f",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "88c54b14-baa9-4294-914f-50cac74b7949"
        },
        "item": {
          "id": "e6c0611d-169e-4e2e-8ded-1fab08b9a113",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "18d1b17b-1f75-4d78-9f16-0dececfe9334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "11dc80db-5d09-4bd2-8b3f-cbecf65c5935",
        "cursor": {
          "ref": "2f8791b0-351e-4465-b1fc-f850e883b98a",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8e69c701-7271-49ea-bb44-a68861618685"
        },
        "item": {
          "id": "11dc80db-5d09-4bd2-8b3f-cbecf65c5935",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6c8cc07b-dc35-432d-8784-3758872a7f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 419,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "bf99bac7-b146-409a-85d9-4983bd0a33b0",
        "cursor": {
          "ref": "22c8cecd-b78f-49ff-b8f7-f5cf704de2e8",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9a9c2505-c4ae-43ef-915a-81358d881849"
        },
        "item": {
          "id": "bf99bac7-b146-409a-85d9-4983bd0a33b0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "871072cd-21a4-4b61-90b4-e06da71e1cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 461,
          "responseSize": 959
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "d524557e-0aec-4575-9640-1f76f48d4413",
        "cursor": {
          "ref": "b9a5969b-03bd-4420-8fc4-f4575dae2521",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0008d49e-cf49-467e-8766-cf2d95a98761"
        },
        "item": {
          "id": "d524557e-0aec-4575-9640-1f76f48d4413",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e3ad5efd-f8f8-4627-b8c0-b99db1ad6eed",
          "status": "Created",
          "code": 201,
          "responseTime": 1873,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "f0d14a56-c308-41bc-abc8-44043f6f18ce",
        "cursor": {
          "ref": "24356168-8688-4c3a-8f65-6e9bccfdaa73",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1e3c01cb-6660-475c-8515-e7970ee1ec74"
        },
        "item": {
          "id": "f0d14a56-c308-41bc-abc8-44043f6f18ce",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f6bb30bb-e662-4e58-9db0-5c4bb080053d",
          "status": "Created",
          "code": 201,
          "responseTime": 1700,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b6e62282-39f1-46f2-89f2-449bb31dc8aa",
        "cursor": {
          "ref": "9fa03a6e-eb8b-4a66-a1ea-c4bd1fbb532f",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "019635b0-ee63-41bd-81fc-12ac9db7d7a3"
        },
        "item": {
          "id": "b6e62282-39f1-46f2-89f2-449bb31dc8aa",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "175e999d-1e35-46fb-a07e-ccb14a11b19c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 459,
          "responseSize": 1448
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "5b868905-f5dc-4c39-b36d-ac35ebcd4a9f",
        "cursor": {
          "ref": "d35dba2e-315c-4380-9aa3-06e4fd139614",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f5063a7a-30b6-4033-9e57-612c4185e169"
        },
        "item": {
          "id": "5b868905-f5dc-4c39-b36d-ac35ebcd4a9f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9cff8f9e-fef2-4e79-abee-36db140dd980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 1417
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "b727bea3-1c75-4561-9169-85540310cdf9",
        "cursor": {
          "ref": "eccded15-5483-4347-ac4f-5c2199b7a523",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d9cfe507-3eac-4c92-89e8-228ff8bdfda2"
        },
        "item": {
          "id": "b727bea3-1c75-4561-9169-85540310cdf9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cf32a490-6ac6-400f-b369-55d8bf40dc28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 1414
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "8d2344f6-e024-4880-91cb-40bc9bfae0ff",
        "cursor": {
          "ref": "aac8d720-c48c-4ed5-b632-08ea64af4a09",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "522cfeac-d2f4-4b73-9d7f-47b69d1349a9"
        },
        "item": {
          "id": "8d2344f6-e024-4880-91cb-40bc9bfae0ff",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2da6db71-1250-46b3-8c1f-49d86f030be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 1416
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c6aa6a73-43b7-40b4-8bf2-4d76f43a2f3e",
        "cursor": {
          "ref": "1bfc8b19-5018-4796-b27e-c8881f58b605",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "fa51de90-d9d4-4fc4-94fd-9be4a2ec6e1e"
        },
        "item": {
          "id": "c6aa6a73-43b7-40b4-8bf2-4d76f43a2f3e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5b0fa55d-971a-47b2-bb32-bec9b7d41a4d",
          "status": "Created",
          "code": 201,
          "responseTime": 1803,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7b0b5a8f-fe0d-41c9-a2fe-185d608942c9",
        "cursor": {
          "ref": "86d42674-99b8-4ed7-8a54-b8d5b0bfec39",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "250c7b05-a621-41b5-a249-67d937fc0331"
        },
        "item": {
          "id": "7b0b5a8f-fe0d-41c9-a2fe-185d608942c9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7a86151b-abe8-4a86-a182-f5f413f291b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "39269fbe-b2a9-4389-a627-829669f0ceca",
        "cursor": {
          "ref": "72eab62d-7c50-41ee-89df-ad15fb47d23f",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "35b20255-0574-4501-adcd-e302a4406f95"
        },
        "item": {
          "id": "39269fbe-b2a9-4389-a627-829669f0ceca",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "44fd332e-019d-4082-86ca-0acc054e39b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 478
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1f9fdd9c-b4fc-42d8-944e-14c1299fc86b",
        "cursor": {
          "ref": "427f2450-ea18-4d2b-9a14-96b63d29c534",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "557b87be-bae6-4712-9620-96408e0afb43"
        },
        "item": {
          "id": "1f9fdd9c-b4fc-42d8-944e-14c1299fc86b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "aef51f54-772e-47d7-980f-c0b012acd631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 449,
          "responseSize": 475
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "815ce02f-0cec-4152-8cbb-2c6ed7f8ca6a",
        "cursor": {
          "ref": "a465fbad-1bab-47b0-bf9f-b73ba681cc70",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "357c0f19-ed1c-4b7a-a067-ef41d37aa4b7"
        },
        "item": {
          "id": "815ce02f-0cec-4152-8cbb-2c6ed7f8ca6a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "092c993f-933d-46d1-b0ca-d475a9c25fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 698,
          "responseSize": 477
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "716ebc3c-b885-413b-8a88-9e5fc960df88",
        "cursor": {
          "ref": "8fa252b6-e53d-4ab8-85c2-790f92b7d87b",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ea0a66aa-d45f-4369-80ee-511940715ffc"
        },
        "item": {
          "id": "716ebc3c-b885-413b-8a88-9e5fc960df88",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b8ca0ccf-fbb0-459e-8299-b2633651afd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 682,
          "responseSize": 527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "4dcf526c-bad2-4a92-a75b-aaae4902a60c",
        "cursor": {
          "ref": "423d2c62-b5df-4382-915d-fb5e9c5924ed",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ec69759a-f649-4fee-b15d-3b91c0d7ce36"
        },
        "item": {
          "id": "4dcf526c-bad2-4a92-a75b-aaae4902a60c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "564462df-f8ab-4d3b-a35b-9639c61a8aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 827,
          "responseSize": 455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "96e6154d-5724-4bc7-9e2a-6f209f952977",
        "cursor": {
          "ref": "77208aea-0394-4e4d-a8cf-495232d293f8",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "04ac404b-08ea-496f-ab7e-bda89b21466f"
        },
        "item": {
          "id": "96e6154d-5724-4bc7-9e2a-6f209f952977",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "633fcdd1-55e5-4b1d-94ce-0019e97e4112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 795,
          "responseSize": 757
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "0e9a827c-6574-480a-85ec-5ed4337e0e7e",
        "cursor": {
          "ref": "ada4e9dc-6770-46ec-953e-7c8cf11485bb",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e7e9902f-3e22-4623-be75-def26f4be480"
        },
        "item": {
          "id": "0e9a827c-6574-480a-85ec-5ed4337e0e7e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6331872c-a108-4d4e-a178-3016a4b07294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 667,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "6baeed3f-90e9-40a3-b8c5-0fcbcf896553",
        "cursor": {
          "ref": "4f6fd332-8a4d-480c-a556-7a2730f32dd8",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "509ad040-7997-420d-b2b5-bfa474928cd6"
        },
        "item": {
          "id": "6baeed3f-90e9-40a3-b8c5-0fcbcf896553",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e874131b-2109-4a77-9bdd-7ca5a9b00bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 842,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "e5798334-bcbe-4851-869d-3f82472a8e99",
        "cursor": {
          "ref": "be70fb12-cdb1-4068-8603-7c9edcb1b3cf",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8d5a695a-b36e-4aaf-8ab8-791fec3b16aa"
        },
        "item": {
          "id": "e5798334-bcbe-4851-869d-3f82472a8e99",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c4ac0a6e-3bde-400a-bf98-ba068cf99900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 734,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "7c812951-a87e-48df-bd3e-21f7c683b2cf",
        "cursor": {
          "ref": "5530fd5a-6602-4975-a73d-39d6c96e3c38",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "787c2177-ee87-4459-9b18-af731d8a4e67"
        },
        "item": {
          "id": "7c812951-a87e-48df-bd3e-21f7c683b2cf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2119b7e8-7b40-4c73-9812-eef5792ade26",
          "status": "Created",
          "code": 201,
          "responseTime": 2069,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "5f878707-6c2f-4a44-ac68-a8aa7be93101",
        "cursor": {
          "ref": "e2481f0e-2469-4b32-a1e9-e816ccbd2b20",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7e891c4f-fa4d-460e-930d-937ad995ed13"
        },
        "item": {
          "id": "5f878707-6c2f-4a44-ac68-a8aa7be93101",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ccd535d3-5a6d-4f61-bcda-58dee8b0ed41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 458,
          "responseSize": 174
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "8b09a173-517b-4a13-b0ac-060e3ca7a395",
        "cursor": {
          "ref": "cdc8a463-6dad-4bce-9ed0-6af116848403",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5a6b45cb-657c-4f18-a47a-48f4932c1ec3"
        },
        "item": {
          "id": "8b09a173-517b-4a13-b0ac-060e3ca7a395",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "dd385d75-d45c-4e52-9a45-d38f07fda056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 802
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6b4ce34d-1922-4dfd-bbb7-179a84e5a1a0",
        "cursor": {
          "ref": "e01505a1-2c2b-4095-84fd-de12f82d2ae5",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0f9ac987-d008-4f11-9cfb-ac229521a648"
        },
        "item": {
          "id": "6b4ce34d-1922-4dfd-bbb7-179a84e5a1a0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "20867ace-2912-4227-8988-6ec527856ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 455,
          "responseSize": 792
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "744d4cd7-1ce8-4718-8305-f859662608e7",
        "cursor": {
          "ref": "6cd48762-fae9-41b6-930b-169c2770c2ad",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "872e872e-3c59-42f1-935a-c87a41e5e082"
        },
        "item": {
          "id": "744d4cd7-1ce8-4718-8305-f859662608e7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b404ae6a-8bef-47b4-9cd5-715d5031e59a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "305fbf0c-aabe-4948-9e9f-3133483ad7f9",
        "cursor": {
          "ref": "24b191be-7780-4a4f-9a30-5a98e318c732",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "96cefe0e-d418-4cd9-8108-efcdcb42ebe7"
        },
        "item": {
          "id": "305fbf0c-aabe-4948-9e9f-3133483ad7f9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ad55cd17-f979-485e-bd16-edf9d7861509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 472,
          "responseSize": 791
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "6f42fc09-0fb7-454a-9677-61f375901494",
        "cursor": {
          "ref": "6e764639-0e8e-4e30-8511-ceaf7c711a82",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "486e5619-78d3-4612-9a2c-ede47721f3be"
        },
        "item": {
          "id": "6f42fc09-0fb7-454a-9677-61f375901494",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "86dbe8ee-d2b3-4f8f-9a0b-00c0d927dbf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 455,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "b076b6d5-47c7-4a23-8fd7-ad442c6c7a86",
        "cursor": {
          "ref": "644fc2cb-ee1a-4c1b-91c9-cb732a86f951",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ad4d2f75-8562-4cdb-bcf6-a808212d6f16"
        },
        "item": {
          "id": "b076b6d5-47c7-4a23-8fd7-ad442c6c7a86",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "feac4da9-87af-4d3c-84df-c8915d6e8d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 407
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b02f9095-83bb-42b9-8529-d0eac80c1ae0",
        "cursor": {
          "ref": "8fd89310-0ad3-47ec-9596-9481e0fa2e1a",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fb3e0dce-2351-4c09-9b70-cf3145582c6a"
        },
        "item": {
          "id": "b02f9095-83bb-42b9-8529-d0eac80c1ae0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d1c20dd8-339b-483a-922d-94fa5e23fd6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 485,
          "responseSize": 753
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4c758cb0-bf17-413c-9433-3defb75f428c",
        "cursor": {
          "ref": "9a1135b3-fe0f-4a1e-8268-d31b228230a4",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0417db44-2c01-432b-b2dc-1f4a3904a9a1"
        },
        "item": {
          "id": "4c758cb0-bf17-413c-9433-3defb75f428c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fed75226-aad3-42b9-8403-26c128066c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "74c70a4a-3b25-432d-a535-6f46788560d0",
        "cursor": {
          "ref": "d2a4a88c-53b5-45f2-965b-f871111043c3",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "738fd4bf-99f9-4098-a891-92714355157d"
        },
        "item": {
          "id": "74c70a4a-3b25-432d-a535-6f46788560d0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8c2eb8e1-8332-48ae-8c3b-35cda394c45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "44590f46-d7fb-4c0f-b9d0-fa1e6cebcb22",
        "cursor": {
          "ref": "6352eefb-e2ba-4f6a-a169-913f9f1c97fa",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f49f2290-3eaf-48c9-bbfc-d73d2212bf23"
        },
        "item": {
          "id": "44590f46-d7fb-4c0f-b9d0-fa1e6cebcb22",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c464dbfa-babb-4d52-84ab-fa4eb7bb33c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 681
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5f60bb74-80ab-465b-842f-789ab2bb1344",
        "cursor": {
          "ref": "a570524c-fca1-4ea4-901f-ffc083a697f3",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "36793883-6818-4b93-949b-cd0538652751"
        },
        "item": {
          "id": "5f60bb74-80ab-465b-842f-789ab2bb1344",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9bd49e70-f7e7-44b8-9147-586a6e75058e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 930
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e3ed40ad-4a95-4cf5-bcea-b14c0e2da242",
        "cursor": {
          "ref": "eb23fffb-b731-44ec-9286-c0512697cfd0",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "33ac6228-17ae-40b8-9f1e-e893a2c4be60"
        },
        "item": {
          "id": "e3ed40ad-4a95-4cf5-bcea-b14c0e2da242",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "792290a3-4189-440d-80b7-6da67e52733a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 453,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3ded142c-3eb1-4ec0-b667-b67952f2b1e7",
        "cursor": {
          "ref": "976acd76-c55d-4dcf-87ad-027d3fdf57d0",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6780ac14-b680-4bef-80d7-249d2e95dd2a"
        },
        "item": {
          "id": "3ded142c-3eb1-4ec0-b667-b67952f2b1e7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5c1d48fa-7e75-4534-abf5-3f33d8f2651a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "614d3d7c-9507-456e-a2df-27921e6a251c",
        "cursor": {
          "ref": "a32fa57c-8db6-4f0c-97d5-30b8c929eeb2",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "79efb167-e256-4c9c-8892-6c0f978cbab9"
        },
        "item": {
          "id": "614d3d7c-9507-456e-a2df-27921e6a251c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d2080203-0531-4267-ab96-ec3987b31142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 778
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1424c10a-bdbc-46a3-9bd1-046d7004a996",
        "cursor": {
          "ref": "e955fdac-1b63-4fbf-a444-3f0db36c88a6",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8591a386-d756-4d45-b689-63ce5d8177aa"
        },
        "item": {
          "id": "1424c10a-bdbc-46a3-9bd1-046d7004a996",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0058f86b-7fed-441f-bb76-d123df87624b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "fc42f0e7-4ade-44d3-8109-183aaab6fede",
        "cursor": {
          "ref": "55b23c4e-07c1-4b0c-9857-09cd14f97b86",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "50bc59e2-32f7-4ce5-8683-54a692a9397e"
        },
        "item": {
          "id": "fc42f0e7-4ade-44d3-8109-183aaab6fede",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2e4eab6d-83a6-44ce-b665-8b61f3385cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 466,
          "responseSize": 704
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2ad8f85a-a44f-4313-a993-720e40fadd78",
        "cursor": {
          "ref": "b07b457a-7531-4eb3-9045-a9089de481d7",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f3bb7e03-08ab-4039-84a5-6ffb1977753d"
        },
        "item": {
          "id": "2ad8f85a-a44f-4313-a993-720e40fadd78",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c12ed76d-e2ff-46ae-b285-c49f34ebccc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 706
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "975aa2a8-3f59-4b6d-8c97-45835463be9f",
        "cursor": {
          "ref": "7d300928-75ca-42b6-a187-922b349ca507",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5d473d12-6253-4a66-88ba-a113bd206235"
        },
        "item": {
          "id": "975aa2a8-3f59-4b6d-8c97-45835463be9f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4b1af132-7fd3-47a8-9fa4-7f6cda68c318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 955
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c6b53318-b92d-4d7a-8187-f5a7d9fea72a",
        "cursor": {
          "ref": "29c9eb9b-5166-4cda-8143-345e815ded80",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ec855da3-f262-4a19-9182-1bcede3970c5"
        },
        "item": {
          "id": "c6b53318-b92d-4d7a-8187-f5a7d9fea72a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "506b2caa-d00b-4f9e-be90-6a1684c4802a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e9cb118a-3cc1-4505-96c7-44d9b118403f",
        "cursor": {
          "ref": "42fae1da-fc58-4d79-8216-fe9091406d1f",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "32ccddab-4f7d-4626-aa03-8d89af938bd3"
        },
        "item": {
          "id": "e9cb118a-3cc1-4505-96c7-44d9b118403f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "601bd554-1f00-437a-a516-a160b495ae92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 465
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "58363fc2-7f7c-4ac8-b6c3-cba4fd4b40b6",
        "cursor": {
          "ref": "cfecacf4-37a8-424d-a79c-54a5ed83891d",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2eabd311-0253-4c17-b96d-364077f4ad06"
        },
        "item": {
          "id": "58363fc2-7f7c-4ac8-b6c3-cba4fd4b40b6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "255628ac-77eb-470f-b7d8-5beeab2d3bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 452,
          "responseSize": 489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "681ca28f-09ff-4844-8dc0-0de5a96b8629",
        "cursor": {
          "ref": "28bd11b9-1438-4b85-b92a-f473cc50f517",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0083c388-8ad1-483f-a137-2e740b7a0728"
        },
        "item": {
          "id": "681ca28f-09ff-4844-8dc0-0de5a96b8629",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cc3e4fc8-ec86-474d-98f1-ae5b00033d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 520,
          "responseSize": 470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "6c9677ab-d7b6-4b09-9ef5-48d61c895b84",
        "cursor": {
          "ref": "c22d2f54-d023-4065-8eae-e8c50c2bbea1",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d9a8b5a0-6fce-4a98-a9b9-cd93f87d77b5"
        },
        "item": {
          "id": "6c9677ab-d7b6-4b09-9ef5-48d61c895b84",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3984dff3-f9fd-49bc-b460-d7a82d2a436a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "00ba6e0c-aee1-4c5e-823e-285e3ebd4609",
        "cursor": {
          "ref": "9bb85726-0f59-4b18-96cf-6c06b633622f",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "38560dc0-2d30-4466-ba91-8b8b7fb5774f"
        },
        "item": {
          "id": "00ba6e0c-aee1-4c5e-823e-285e3ebd4609",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f4968e9d-e716-4500-9701-d57b49071293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "ce41feba-b486-43b6-9669-8e49cd158c09",
        "cursor": {
          "ref": "6c5f02bd-3352-4606-bad2-eae25d626a38",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "df11c77c-09ae-409c-955a-d3c32952e4cd"
        },
        "item": {
          "id": "ce41feba-b486-43b6-9669-8e49cd158c09",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ca6d8988-51fc-4e59-9058-4cc77d048a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "6f6d052d-c199-49c3-9499-f69b5e662d67",
        "cursor": {
          "ref": "7fe6d3c8-e2c0-48c5-a8dd-537ef8266104",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "254a9677-8823-4d7d-a8d9-ad7420831857"
        },
        "item": {
          "id": "6f6d052d-c199-49c3-9499-f69b5e662d67",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2050daed-28af-4683-8796-f31d8bf7c53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "fa990924-2d3d-4311-af6d-893720ce82c5",
        "cursor": {
          "ref": "07175502-5292-4905-98c9-6a556110cbd2",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bf8118e6-3cbe-4b25-beba-2655c16fe9c3"
        },
        "item": {
          "id": "fa990924-2d3d-4311-af6d-893720ce82c5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "22e5ccd6-4f77-473a-bc4a-6dfa9ee59d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 464,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "025c3694-d12b-4f7b-8525-fea6ab1ebfbc",
        "cursor": {
          "ref": "03cf9afc-209d-4d9e-9fee-c378205b9e3e",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "999f60b0-0d7e-4e97-8213-4e549ad39c2d"
        },
        "item": {
          "id": "025c3694-d12b-4f7b-8525-fea6ab1ebfbc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "da9ca103-8ac6-476c-b741-ce89d96ba13d",
          "status": "Created",
          "code": 201,
          "responseTime": 1776,
          "responseSize": 653
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "efbd4844-424e-44ce-9ff6-3d0f96f328a7",
        "cursor": {
          "ref": "74d63d32-a976-490b-b0d5-89ca8520b033",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3ecac784-03e3-4933-9a80-e4ae23082fb2"
        },
        "item": {
          "id": "efbd4844-424e-44ce-9ff6-3d0f96f328a7",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ca13294b-930c-41f9-a4f5-28fcd9542012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 935
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "eacc3290-b0a3-4dfb-8e41-b02e7d7f1cf2",
        "cursor": {
          "ref": "9d27f988-de30-452f-b2e1-111c1d1a7b38",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "352a87f7-803b-44e9-b740-c2db14d6ab96"
        },
        "item": {
          "id": "eacc3290-b0a3-4dfb-8e41-b02e7d7f1cf2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a958fb9f-9a69-4136-bfff-1c6f6cf8c643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 932
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "a3819786-6211-4a21-adcf-6f1b8171eed5",
        "cursor": {
          "ref": "37e0d520-6c51-48f4-956a-253fd213ef26",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1b10e2bd-0204-4b08-8272-02ff511f5607"
        },
        "item": {
          "id": "a3819786-6211-4a21-adcf-6f1b8171eed5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "634dd49c-cfc7-4d55-af3d-6313dd6e7fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 530,
          "responseSize": 934
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "e13d4bb4-36a5-4a70-a40c-717e08339f56",
        "cursor": {
          "ref": "7a710d63-523e-4eb5-a7a3-62d213e10625",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a6418ee1-46f6-4637-b7f5-d5309358a730"
        },
        "item": {
          "id": "e13d4bb4-36a5-4a70-a40c-717e08339f56",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d7673817-5d28-4dcf-aeaa-f0a663356b1c",
          "status": "Created",
          "code": 201,
          "responseTime": 1643,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "cc64f59c-d691-406c-8418-a21eccbff2e2",
        "cursor": {
          "ref": "77cc0258-9c07-4e17-9efa-b39cd92bf508",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f8f1d88c-cb48-4979-889c-69931a1639e3"
        },
        "item": {
          "id": "cc64f59c-d691-406c-8418-a21eccbff2e2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "56cd6cea-7df4-4750-a34a-4ede2f3ad244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 475,
          "responseSize": 1273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a1af173e-f63e-4525-a8a2-dd965cea3598",
        "cursor": {
          "ref": "30625c68-eade-4ff9-ba46-3260a977b0ce",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8afe85ae-f79c-4a6f-9fbe-389da02927db"
        },
        "item": {
          "id": "a1af173e-f63e-4525-a8a2-dd965cea3598",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7cc41436-bd70-40e3-b449-f92722d947a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 482,
          "responseSize": 1259
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "45186619-0f26-4d08-b642-4f60f9943421",
        "cursor": {
          "ref": "95090402-b4f2-4e7b-8338-9967b6a72e3d",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a6da0b1d-22b9-46e3-bd6f-1ba13c4d1244"
        },
        "item": {
          "id": "45186619-0f26-4d08-b642-4f60f9943421",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "329dafab-45cc-4c50-b6c5-aaba590a421a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 450,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "fc7b798f-da2b-482e-b8e6-e2319d5bf7dc",
        "cursor": {
          "ref": "dd7f489f-89eb-4d21-8db5-ac5dbd90507e",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c7b7e2ac-fa4a-44b1-b766-ca99b0db03ec"
        },
        "item": {
          "id": "fc7b798f-da2b-482e-b8e6-e2319d5bf7dc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "be288041-c8ac-43dd-86b1-6a464828b2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 1258
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d7296eab-ddff-4113-9a88-3b72930daa82",
        "cursor": {
          "ref": "b4d8ab50-7600-454a-9fec-9c28bab3aea8",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6550ac0d-e9e8-4535-95ea-a3edea258a2b"
        },
        "item": {
          "id": "d7296eab-ddff-4113-9a88-3b72930daa82",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6e1b5c20-6b91-4811-93b5-30b900e0c047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 460,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "287708b4-9fbe-4014-aaf4-df5eb5349c4e",
        "cursor": {
          "ref": "94ea08e7-7704-4aa7-b6a5-4747c05a3102",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8634acc4-c703-4f4b-b203-f5f4a8b8cec2"
        },
        "item": {
          "id": "287708b4-9fbe-4014-aaf4-df5eb5349c4e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bf62a5b3-d028-493c-93f4-0d83dbd45b0f",
          "status": "Created",
          "code": 201,
          "responseTime": 1771,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ed7f687a-8bb0-496f-b241-5ec4c250d785",
        "cursor": {
          "ref": "f28a84e3-4547-4d6a-b95b-0cd59618fc53",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6a3530a7-59e0-485a-9440-67aa622d4b8f"
        },
        "item": {
          "id": "ed7f687a-8bb0-496f-b241-5ec4c250d785",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "af9845cb-60c8-49cd-9469-233b6e2a87d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 458,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "184e90f1-a374-443a-bc61-d77aa8a8f40a",
        "cursor": {
          "ref": "80db6386-831d-45d2-996c-60095b3aa867",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b5cd9aee-be33-418d-9cb4-7121a19246df"
        },
        "item": {
          "id": "184e90f1-a374-443a-bc61-d77aa8a8f40a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4aa4aef6-6394-4b9e-bbfc-e4e73bd9dd7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 463
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "977ff418-77e7-4121-99ee-cd23a98b2a0d",
        "cursor": {
          "ref": "93560b32-09d0-41f1-ada7-f7281917cfef",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4c17c9eb-848f-4f09-b629-3d381be2e619"
        },
        "item": {
          "id": "977ff418-77e7-4121-99ee-cd23a98b2a0d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1b7708bd-2f01-49c0-a088-506e4acc3030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "5a2d44f7-1161-4a0e-b0aa-6caeb8e47b6a",
        "cursor": {
          "ref": "ee4a0b0c-7faa-4846-8e10-162327eb5b87",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c06a4485-41a8-44b4-b32a-18710a8d9589"
        },
        "item": {
          "id": "5a2d44f7-1161-4a0e-b0aa-6caeb8e47b6a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "36f1cd00-a43e-43bb-a230-5c54e02977ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 462
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "6818b735-58ce-4a5c-adc1-7af704fcd60f",
        "cursor": {
          "ref": "85548525-9ed7-40f9-80bd-a067387a72d4",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "75cd73c3-843e-4cbd-bfbb-4f9c2b812659"
        },
        "item": {
          "id": "6818b735-58ce-4a5c-adc1-7af704fcd60f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cea12159-1593-42d4-9af3-f0db3a020123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 474,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "a0321297-5da8-4427-899a-2fdc4270ea61",
        "cursor": {
          "ref": "62b38de8-5304-4a67-976b-16be1a46626b",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3ba68d64-e3f0-494b-a093-d55d49a2697c"
        },
        "item": {
          "id": "a0321297-5da8-4427-899a-2fdc4270ea61",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "17e518b4-13f3-4f30-b876-31063b1828d2",
          "status": "Created",
          "code": 201,
          "responseTime": 1726,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "1c7b922d-35b0-4445-a462-183576a6abea",
        "cursor": {
          "ref": "4a2d8cca-3456-4624-a6e9-90764b7dc2c1",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3fd37bcc-0920-43a7-b27f-32a454fd75fd"
        },
        "item": {
          "id": "1c7b922d-35b0-4445-a462-183576a6abea",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9e2ab8b4-3bed-4604-99b9-b979d3e4eb0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 512
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "83130936-e193-4346-b89b-544fb2111a89",
        "cursor": {
          "ref": "edf2b093-805e-418a-84ce-f59295df1c01",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "884e807a-750e-4995-8794-959ff5e70989"
        },
        "item": {
          "id": "83130936-e193-4346-b89b-544fb2111a89",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3e647ff5-25ef-4ef5-a7e3-ee46560014fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 493
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "92c9991e-f278-4e36-abf0-0045af0ae411",
        "cursor": {
          "ref": "beefea55-624f-4d46-9110-3ec8f76dc27d",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4971090d-8538-4e6b-bcd5-43e71158a0ec"
        },
        "item": {
          "id": "92c9991e-f278-4e36-abf0-0045af0ae411",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "61c157ee-d609-489d-bb1c-7173cb63082e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "85733b5e-10ef-4c0f-93b5-fb1b8e7115e2",
        "cursor": {
          "ref": "c8670f5a-d385-48db-a690-36b04419c991",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b7a9daf5-79dd-4869-a0a9-15567ad13138"
        },
        "item": {
          "id": "85733b5e-10ef-4c0f-93b5-fb1b8e7115e2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c3205809-b656-419d-b1c1-995a6d865188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 458,
          "responseSize": 492
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "e62922a3-9d8f-4350-967f-f2bd4d917a02",
        "cursor": {
          "ref": "2274662d-40ec-4ec7-a5d7-fd17977474eb",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "829e732a-291f-4b61-9d0e-6a355df09388"
        },
        "item": {
          "id": "e62922a3-9d8f-4350-967f-f2bd4d917a02",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "576eeba3-4f4f-4373-87cf-4d104f315a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 435,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "52f0c715-bdd7-4b8c-9692-6a79aff3aab4",
        "cursor": {
          "ref": "e5113d50-ec0d-46f3-b29d-000a854ef718",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "375f5f8e-4416-47b7-b231-cd15dcf0c6fa"
        },
        "item": {
          "id": "52f0c715-bdd7-4b8c-9692-6a79aff3aab4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "03254f59-06a4-4627-99f8-3b1fc84ff4ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 483,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "7d86a53b-6ce1-45ba-8278-dcf2090ed7c1",
        "cursor": {
          "ref": "c7cbc322-05e5-4465-bfe0-796e16d709ba",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5d8fb43b-1ada-478f-9dd3-48ce677c4910"
        },
        "item": {
          "id": "7d86a53b-6ce1-45ba-8278-dcf2090ed7c1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b4f8e292-0e95-471a-8fa9-e9a52b067698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 469,
          "responseSize": 551
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "75c6ae06-fd11-4709-b463-6121b35cd9ce",
        "cursor": {
          "ref": "72a6927e-f47d-443d-a224-84d2b76e5139",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1531f283-2572-48d2-8216-82842393f379"
        },
        "item": {
          "id": "75c6ae06-fd11-4709-b463-6121b35cd9ce",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dada28d7-22ff-4981-bc4a-f07f3452ec05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 532
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "c901bf21-e031-4106-b9d8-66020d7b132f",
        "cursor": {
          "ref": "58b8123b-5acb-4580-83ce-a3699b65ee08",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "865b4e44-1298-41f2-a06d-35bfe7805828"
        },
        "item": {
          "id": "c901bf21-e031-4106-b9d8-66020d7b132f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "12b0060a-deb2-4d03-8877-56cd7169ac71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "33fc0a04-f80f-4b38-9469-bde441d0bb81",
        "cursor": {
          "ref": "dd2897f8-0173-4c59-a3e9-6234c58c073f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0b598748-2dc5-4404-8043-40d469b7f3b2"
        },
        "item": {
          "id": "33fc0a04-f80f-4b38-9469-bde441d0bb81",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "89db815b-b350-4b44-8fa8-d46ac87c7bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 482,
          "responseSize": 531
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "56a3ef12-8bb9-4342-a21f-7f3203f9ef7c",
        "cursor": {
          "ref": "2ca50662-e708-46d0-bf78-238360476d35",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d30ce23d-604b-4159-b621-f39f343b223d"
        },
        "item": {
          "id": "56a3ef12-8bb9-4342-a21f-7f3203f9ef7c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6ef43735-37f3-4c4c-a449-4acd48ef4bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "22e5689e-a24b-48ae-a775-49e603fd78e8",
        "cursor": {
          "ref": "b3b7472e-12dd-4f77-ae7a-46dc88800c54",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "84c21c92-2ba5-45c5-9770-2715e32ae864"
        },
        "item": {
          "id": "22e5689e-a24b-48ae-a775-49e603fd78e8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "611e809d-878f-444b-ab39-18d3b078f915",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1291,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "ea5ec67b-8d4d-48a9-be27-1239e90977d2",
        "cursor": {
          "ref": "7f7930ae-ebcb-4d65-9908-4d1f5be6f40e",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a76fb0f0-1941-42f8-8978-51aecd0ad1d9"
        },
        "item": {
          "id": "ea5ec67b-8d4d-48a9-be27-1239e90977d2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "358dfd4d-30c5-4ebf-85eb-902469810dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 582
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "dbb771cf-6729-48ef-a3ec-befcc889048e",
        "cursor": {
          "ref": "e519a888-a6d5-4327-a608-bc73dabade3a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "779ff091-bb27-42ab-9fee-45f3a0067477"
        },
        "item": {
          "id": "dbb771cf-6729-48ef-a3ec-befcc889048e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d50b3406-7656-438f-b3b1-8e748f26f246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "70b2f670-8a5f-42ee-90a1-2791740de96f",
        "cursor": {
          "ref": "ad8eb450-ff23-4512-8694-8792e6ccf26c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5b4c7b51-fa8d-46c1-b55f-d462ba9dd1d5"
        },
        "item": {
          "id": "70b2f670-8a5f-42ee-90a1-2791740de96f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9d0944f4-56d8-4bb8-8ec7-63509d8f09a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 556
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "cf6abc5d-f1c7-481f-ae48-b5cc2585d186",
        "cursor": {
          "ref": "51738541-2bc7-4d56-b45e-f7415cadc629",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4f9a6cb2-d1d2-4440-b0ff-6736a17a1596"
        },
        "item": {
          "id": "cf6abc5d-f1c7-481f-ae48-b5cc2585d186",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c62e57c8-576f-4134-85ba-fcde60c826ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "5b035bad-6008-44b1-bd22-44d316dc9662",
        "cursor": {
          "ref": "8aba8121-ac2b-4cf8-8e72-7bd898b6737a",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b25ea27e-92ad-4578-8a64-9878370eaf7e"
        },
        "item": {
          "id": "5b035bad-6008-44b1-bd22-44d316dc9662",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f974446d-8cbf-4fd4-baab-6729e0ba186e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 451,
          "responseSize": 580
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "d9831ade-bb5f-4e0a-94a4-a8ddbe742b22",
        "cursor": {
          "ref": "fc5d9d2f-0041-4b21-ad8e-0b204e400934",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d29e39e1-c3df-477d-af94-2c71f068e59b"
        },
        "item": {
          "id": "d9831ade-bb5f-4e0a-94a4-a8ddbe742b22",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6c1814d7-94f3-4dbb-a6f3-f8f5338942b5",
          "status": "Created",
          "code": 201,
          "responseTime": 2262,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "2198c492-f5b2-411a-a3a8-71e5a3a14869",
        "cursor": {
          "ref": "fab080c0-f896-4f74-b8b0-a3b3fc6cbae8",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dcc689ed-9077-40de-b0d9-268622e23e6f"
        },
        "item": {
          "id": "2198c492-f5b2-411a-a3a8-71e5a3a14869",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8280512c-1da7-4e5d-8f95-303c67d04003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 470,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "17992f56-68de-4e6b-b652-7592c1b8d7a4",
        "cursor": {
          "ref": "976e8b1f-37a5-4c7f-85d7-6611e4863411",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9f64770d-2648-4be8-9754-97937016dcba"
        },
        "item": {
          "id": "17992f56-68de-4e6b-b652-7592c1b8d7a4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d43779a0-18b5-452c-a028-b712213a99a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 427,
          "responseSize": 589
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "ebb01bac-71ba-4f0f-bd36-a85180e0c103",
        "cursor": {
          "ref": "29771ae0-7928-45dd-ad36-d8aef77a9cf2",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fc76ab2f-bead-413f-af30-bca907a57cd2"
        },
        "item": {
          "id": "ebb01bac-71ba-4f0f-bd36-a85180e0c103",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9891f12a-a8d5-450e-97a7-735b0714a6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "f4ab1fb8-ec50-4a37-ae62-00432d64dfa1",
        "cursor": {
          "ref": "b9ea9710-3416-4fd8-9cdb-1879a576fae8",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1c634e90-8116-4e79-8fbc-3b0c234ed6a5"
        },
        "item": {
          "id": "f4ab1fb8-ec50-4a37-ae62-00432d64dfa1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b6db967d-61ed-45ef-8886-d77608615c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "457dbe05-7b97-4955-87c9-c90f823c4602",
        "cursor": {
          "ref": "08e5a10c-aeab-4b47-8ec0-9ca89dc4ccf9",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "52dddd55-3ee7-4531-9e5a-6bd975fc82a4"
        },
        "item": {
          "id": "457dbe05-7b97-4955-87c9-c90f823c4602",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7f89546c-3d7d-4f53-a8d9-516aabceba2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "e24712bd-f3dc-494b-a06f-60fd973152ec",
        "cursor": {
          "ref": "86ae3aab-7a93-4dac-afd2-7fb320444550",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "59dffb02-7374-460d-891f-fb809d206d8d"
        },
        "item": {
          "id": "e24712bd-f3dc-494b-a06f-60fd973152ec",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b6fd1105-6859-497d-93cd-ac07b0ea4f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "b20344a6-26de-43dc-8a3c-a5de05f8172c",
        "cursor": {
          "ref": "d39398fd-a1a1-4946-a58a-4129fc01f583",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "04964f03-9451-4833-80a8-41aba14a76ec"
        },
        "item": {
          "id": "b20344a6-26de-43dc-8a3c-a5de05f8172c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "49f01dbf-d043-4c45-a5d7-dbb4cd099acb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "7dfafce5-87da-4adc-b888-bfff9e48d42c",
        "cursor": {
          "ref": "e74c0d54-4f52-4ac8-82a6-1e2803de01f1",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "41ebd583-bf0c-485e-9359-95dbecaae951"
        },
        "item": {
          "id": "7dfafce5-87da-4adc-b888-bfff9e48d42c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "cbeb0891-7413-4038-aaa7-b6d93c332b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 490,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "150f06a2-befb-4520-abd0-601b3dca5178",
        "cursor": {
          "ref": "6e5d6caf-0562-49d5-8ba8-f06162be5121",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5c945372-5b8b-4485-ac5a-979f0b1cf3b6"
        },
        "item": {
          "id": "150f06a2-befb-4520-abd0-601b3dca5178",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b8278fa3-5777-4651-bcba-9eead87470d7",
          "status": "Created",
          "code": 201,
          "responseTime": 1905,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7f4dc5-3494-4678-8b5b-8bd7308caafa",
        "cursor": {
          "ref": "e6c8f25c-0b79-4f0f-a6d7-37334fb932f3",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ea06b182-bf6a-45d4-9b0d-a484dfbe0384"
        },
        "item": {
          "id": "bb7f4dc5-3494-4678-8b5b-8bd7308caafa",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "ad491a9a-81b6-40f5-b2d3-9d09c73dd916",
          "status": "Created",
          "code": 201,
          "responseTime": 1678,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641b17fa-1ad6-48b1-bcb8-395c8696186f",
        "cursor": {
          "ref": "944f3ade-9e29-45d1-bf5d-10e28ac93ab4",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5a3e731b-cda8-4d4c-9c10-732e4fd2251c"
        },
        "item": {
          "id": "641b17fa-1ad6-48b1-bcb8-395c8696186f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "576b3505-c2d9-421e-9bd7-e77ad5d7572a",
          "status": "Created",
          "code": 201,
          "responseTime": 1743,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "538444ae-3898-4c3c-bebf-32c2fc35c701",
        "cursor": {
          "ref": "23445b34-95bc-40b7-aa2b-e574a4494bc1",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cb77ef6c-0b22-45c1-a9cd-3876fe0ab31e"
        },
        "item": {
          "id": "538444ae-3898-4c3c-bebf-32c2fc35c701",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6c4058ad-1494-4e17-80e4-6b2715320e08",
          "status": "Created",
          "code": 201,
          "responseTime": 1660,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "916f860d-68f5-466e-93bf-6c9d91911d35",
        "cursor": {
          "ref": "ffb19496-4812-490e-90d1-8d6a4cb14779",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "180c4528-9ae8-4e21-b459-f1cda5b881e3"
        },
        "item": {
          "id": "916f860d-68f5-466e-93bf-6c9d91911d35",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "25c746a1-c283-4560-8195-97b4c71a6dc3",
          "status": "Created",
          "code": 201,
          "responseTime": 1808,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3c0d40-2bbd-4a63-b998-95f7de48c5be",
        "cursor": {
          "ref": "73060300-2e81-4aaa-a22c-3fa32465313b",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2b002017-fc93-4262-9c34-9a477987248f"
        },
        "item": {
          "id": "ac3c0d40-2bbd-4a63-b998-95f7de48c5be",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d847d943-d822-4709-8c16-1c235bd6d4c1",
          "status": "Created",
          "code": 201,
          "responseTime": 2523,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550acd1b-1c13-4b1a-8f4d-10852d4c6166",
        "cursor": {
          "ref": "a3e706e9-8944-47be-807d-d262d8cde601",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b39c15f6-4102-490a-8676-ce64648047ae"
        },
        "item": {
          "id": "550acd1b-1c13-4b1a-8f4d-10852d4c6166",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d18dabe9-0181-4516-9ee5-d9c6ba0cb5b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 476,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "550acd1b-1c13-4b1a-8f4d-10852d4c6166",
        "cursor": {
          "ref": "a3e706e9-8944-47be-807d-d262d8cde601",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b39c15f6-4102-490a-8676-ce64648047ae"
        },
        "item": {
          "id": "550acd1b-1c13-4b1a-8f4d-10852d4c6166",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d18dabe9-0181-4516-9ee5-d9c6ba0cb5b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 476,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "0a1cec62-4ed8-42e0-900b-44d7514f6037",
        "cursor": {
          "ref": "afc4a664-b6d9-448c-8fcf-88e6352a24a4",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "70b9dcfb-72f7-4297-91b3-3d35a5de9a3b"
        },
        "item": {
          "id": "0a1cec62-4ed8-42e0-900b-44d7514f6037",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0106f262-099d-4719-acd0-98e3eb785379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 327
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2dbfea84-fcf5-486b-acca-178966490099",
        "cursor": {
          "ref": "4fedfb7d-d137-41e9-ac5f-8022e6259d74",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "02f59439-8d43-4faa-92e5-6472b2e74d6f"
        },
        "item": {
          "id": "2dbfea84-fcf5-486b-acca-178966490099",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "01e8aacc-84b5-4285-928e-9b339da0eee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 449,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "47bf801c-8970-45b4-8b3c-ecefeee91e4b",
        "cursor": {
          "ref": "113269f4-d94a-41e5-a932-488b976d33f6",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "60af6620-e170-4840-9242-6bd2dde3ba9a"
        },
        "item": {
          "id": "47bf801c-8970-45b4-8b3c-ecefeee91e4b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "59f05fa3-a3cb-44fa-956f-0d89017ed395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 486,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "63992351-06cb-441f-a919-5d283e45ad9b",
        "cursor": {
          "ref": "d1eb00ba-8ad0-4aa2-ad34-76ff0b06cdd7",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b157f3ad-f255-4cbb-b1e5-50833304b2c6"
        },
        "item": {
          "id": "63992351-06cb-441f-a919-5d283e45ad9b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7f92f66f-4f08-46e8-a796-68ddee87d0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 451,
          "responseSize": 282
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "7e4f900a-0491-4d65-b8d5-75f7c94b9b92",
        "cursor": {
          "ref": "97063899-2c3e-4889-827a-3f2aed1ba765",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8205a3f5-1804-4793-95dc-b73119217dfc"
        },
        "item": {
          "id": "7e4f900a-0491-4d65-b8d5-75f7c94b9b92",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "17e3b49d-505b-489c-9682-f0a74f42dff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 454,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "27ae4d02-2553-4dca-ab5a-b79695d8c2a7",
        "cursor": {
          "ref": "5a178da9-85a1-47a9-9a22-ff4a2f517492",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "572ddbe9-82dc-457f-bb20-7cf5ea53e541"
        },
        "item": {
          "id": "27ae4d02-2553-4dca-ab5a-b79695d8c2a7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "73c4c087-8ebc-4949-b743-bfcaa4081d5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 450,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "6de97f31-19bd-4eca-994a-1e0058a02e9c",
        "cursor": {
          "ref": "988e2792-fe57-4218-aaa6-207acb74d6d2",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "db6551a7-3933-4df8-84dc-0eb4850727fd"
        },
        "item": {
          "id": "6de97f31-19bd-4eca-994a-1e0058a02e9c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "caccea94-5e29-41f5-866e-0bc278fd97b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 478,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "d62fbde1-008d-4a31-aef8-f840459d5492",
        "cursor": {
          "ref": "68905886-b0e8-453a-8de8-dedda2eeed21",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "20e70621-3cba-437a-bdd1-1b2de5b4c50f"
        },
        "item": {
          "id": "d62fbde1-008d-4a31-aef8-f840459d5492",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f5101797-4de6-4a1b-85f3-96cfb2ab5faa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 445,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "fbe19dcc-a1b5-45b9-95b1-80debba50748",
        "cursor": {
          "ref": "4e1c7dfc-4b90-408b-8fc3-18b93db4a5c2",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "90559a8e-bdc2-4148-aeb6-21a8484b39a5"
        },
        "item": {
          "id": "fbe19dcc-a1b5-45b9-95b1-80debba50748",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "53f06228-08f1-497d-abfc-b74ff0448ff2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 443,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c2fbdc9e-0a24-4331-b7cb-20c787f6ceb4",
        "cursor": {
          "ref": "51f10f3a-03f9-4a24-82f6-f5bf7f03ba8c",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4bd578d6-0ecf-4ff7-9358-1d2c7ff9bc93"
        },
        "item": {
          "id": "c2fbdc9e-0a24-4331-b7cb-20c787f6ceb4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9704456b-a1f6-4da3-a607-d46b9d81ec22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 457,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "699fbc99-0abd-428b-bf64-55dd711f1863",
        "cursor": {
          "ref": "1d4e089e-ace6-4b3f-b254-dc3215f8ff2f",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3f2171c0-6c33-4a01-8f28-03ddfa8f3a8e"
        },
        "item": {
          "id": "699fbc99-0abd-428b-bf64-55dd711f1863",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "59e58e33-2028-4e4d-afb9-af968533e595",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 456,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "89962962-4f79-4b76-a9a7-98686a8791d4",
        "cursor": {
          "ref": "6f5cdf0f-c791-44d0-b50e-7fbf62abead3",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "54524f4f-4564-49c9-8a46-c0a5af8e4f74"
        },
        "item": {
          "id": "89962962-4f79-4b76-a9a7-98686a8791d4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1795898b-a6b1-4e03-8c89-f58adc8863e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 438,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2830530b-df66-4701-993f-841f0d1d943f",
        "cursor": {
          "ref": "52996fe3-5292-406d-8bbf-7a8894d1a594",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "af297251-5e17-4508-b3e7-65ba07613d5b"
        },
        "item": {
          "id": "2830530b-df66-4701-993f-841f0d1d943f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6662e095-9f2b-48aa-a45e-151b2d06124c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 487,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "d6225b76-9b93-451f-acec-f1bc4ee8c592",
        "cursor": {
          "ref": "a4d3aada-474b-40f6-aa49-bccab974ddd6",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a67f36e4-1cdc-49a3-9648-f1a47715c8b7"
        },
        "item": {
          "id": "d6225b76-9b93-451f-acec-f1bc4ee8c592",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d01200f3-6fcc-489d-91b3-156ef52e680d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 459,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "91ad650a-d01e-4bd9-9344-6f78d8b82215",
        "cursor": {
          "ref": "45239d28-a073-43ab-b64e-123bd4011555",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7a4a43ae-a2a4-4576-9da8-4d86ddc60d51"
        },
        "item": {
          "id": "91ad650a-d01e-4bd9-9344-6f78d8b82215",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d9a8184b-0f38-48d8-9af8-f4fbb3bbbd33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 531,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "5b4a4710-116c-4827-bb79-5c02e50fa497",
        "cursor": {
          "ref": "16137ff0-b5a9-42f9-8ff6-109885714633",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0cbddb54-dd0c-4523-a0bb-b3b5e70c65dd"
        },
        "item": {
          "id": "5b4a4710-116c-4827-bb79-5c02e50fa497",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cba5d56f-70ff-48b6-ba8d-d4e9627f868d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 434,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "3bd6fff7-973d-4e2b-b854-84cc88754303",
        "cursor": {
          "ref": "c3b7ea21-2321-4185-8120-08f52f4957fc",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "15106555-81a9-4a5b-a706-efc6c7895712"
        },
        "item": {
          "id": "3bd6fff7-973d-4e2b-b854-84cc88754303",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e41f9b8c-48bc-408b-95f3-7ae1616409f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 477,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "2315674b-13b0-4e95-8b32-d5f4116f79c3",
        "cursor": {
          "ref": "ac5a62fa-cdd7-49a0-b7c0-60aaae691704",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "eced71e1-999e-49ae-aa44-7aabb9f8f82e"
        },
        "item": {
          "id": "2315674b-13b0-4e95-8b32-d5f4116f79c3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c9c013bc-0ae1-4df7-a51f-9fb861115d74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 418,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "b9b0a694-07c0-440b-98a4-946864c48c0f",
        "cursor": {
          "ref": "601817cb-2b86-4d24-88d3-0d57b79d29fb",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e28d250a-4360-4cc7-ba25-beeec2c3c211"
        },
        "item": {
          "id": "b9b0a694-07c0-440b-98a4-946864c48c0f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b04e3675-8197-422b-b46c-2e358f986029",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 450,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f1d55add-bb23-4a7c-821f-6e535bae8161",
        "cursor": {
          "ref": "a6764ad1-a075-4f91-b14e-83243ba2d83b",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "05a024ed-31e6-4d43-9cad-7b5120f4db6b"
        },
        "item": {
          "id": "f1d55add-bb23-4a7c-821f-6e535bae8161",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "80fe7b7e-3f42-49b8-91ae-5b5617a0b54c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 424,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "db90c13b-aee7-4db5-b468-53a273224dd8",
        "cursor": {
          "ref": "1b342515-2908-42ed-a285-32a450b8cecd",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3b26795d-ecc8-4ae6-8621-56079061b364"
        },
        "item": {
          "id": "db90c13b-aee7-4db5-b468-53a273224dd8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5a354622-b6cb-48fd-a9fc-e3e95459d43d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 497,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "7b1f9bff-e5eb-4c1e-b262-e92090dbb3c1",
        "cursor": {
          "ref": "8f9bd079-2587-4b77-b1e8-5d7ce1078b40",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a659e71f-9685-43c7-b405-17323f27565a"
        },
        "item": {
          "id": "7b1f9bff-e5eb-4c1e-b262-e92090dbb3c1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4d5018ea-0425-4b1d-bc97-9ae5212526a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 441,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "a84f7691-04bb-4374-a0c9-04ed2e35b525",
        "cursor": {
          "ref": "7f47861e-ea66-4bd3-98e6-ec57e0757b4b",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "71eec20f-948a-47d8-92d8-8400432fa489"
        },
        "item": {
          "id": "a84f7691-04bb-4374-a0c9-04ed2e35b525",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2553fc48-baa8-4218-9335-5309565bc60e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 438,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "5c22d42a-47e7-4c97-a576-cb01fd62dcf7",
        "cursor": {
          "ref": "3beca4a6-b405-4e40-b689-bf69d39bed77",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c24817ee-d75e-450e-868d-338a27147591"
        },
        "item": {
          "id": "5c22d42a-47e7-4c97-a576-cb01fd62dcf7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "523ad607-60c6-42f3-8d0c-a7027dee1880",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 471,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "1ebf5d9a-6ef7-4246-8c95-e9f9780f4181",
        "cursor": {
          "ref": "87338fdb-ec24-449d-946f-174cd319ad44",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b88957f6-df63-4289-b6bf-faf8b366ae0a"
        },
        "item": {
          "id": "1ebf5d9a-6ef7-4246-8c95-e9f9780f4181",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a844d66a-2e4b-45ff-b34f-9e48323981f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 639,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1914c06c-ea8a-4d8f-a3ba-54f8c9d3bcbb",
        "cursor": {
          "ref": "03b105ba-468a-4bb6-9adc-fd8156ec1655",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1e917cf0-8a57-4164-88ed-0b518cc4a932"
        },
        "item": {
          "id": "1914c06c-ea8a-4d8f-a3ba-54f8c9d3bcbb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "eb1fc7fe-2b30-4aff-9a1d-0865ab623744",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1096,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d42d9114-7a10-4de5-acc2-77ad05c26b66",
        "cursor": {
          "ref": "ce3dea05-475a-4626-98f4-37bea6ce20e8",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "81a08862-1608-40a7-b2c6-e9e1b164322e"
        },
        "item": {
          "id": "d42d9114-7a10-4de5-acc2-77ad05c26b66",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0169da22-ca30-48df-a3d8-d94a1a31d583",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1197,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "3be49283-ac08-48bc-99d8-9180480b8a79",
        "cursor": {
          "ref": "8d4debac-4f41-4d0d-8d06-fe0272030cdb",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b4114dd9-0528-413f-a4e2-e9d901718a23"
        },
        "item": {
          "id": "3be49283-ac08-48bc-99d8-9180480b8a79",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "696664b6-8f77-479a-8991-bffebf7e5a14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1357,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "18fa2b35-08b9-42bf-8db6-06daaeaa4edc",
        "cursor": {
          "ref": "27522838-8205-4103-92b7-3a2bd17b71d9",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bbdccd58-8a86-4b51-837d-b54e8ac86f09"
        },
        "item": {
          "id": "18fa2b35-08b9-42bf-8db6-06daaeaa4edc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4cb18c44-bfaf-4398-ac41-2f1fa612c25b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1505,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "56e50da0-2e5b-44ff-a583-c7f30d2bc267",
        "cursor": {
          "ref": "156c25b6-fb6a-4d28-b891-195423edb831",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a7291bd0-95e9-4881-9cb3-be87d462dd12"
        },
        "item": {
          "id": "56e50da0-2e5b-44ff-a583-c7f30d2bc267",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "571cb486-2881-4613-919f-1e8c07e42df0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1112,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "61e5c89b-5385-41e6-8d23-a9c8f2c3898f",
        "cursor": {
          "ref": "348350a5-b406-4af5-9e20-fa77c2d5dc6c",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b6e39733-bce7-45b2-8039-de6f3200f732"
        },
        "item": {
          "id": "61e5c89b-5385-41e6-8d23-a9c8f2c3898f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7ffbb8bf-4809-4612-a2e3-c20116eeed81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1428,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "39a5760b-eb9a-4e8d-bcd8-4afd1ea3228c",
        "cursor": {
          "ref": "91521c5b-ffe3-441d-9162-5ee19f6726c8",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ec2e7c9c-e4bc-4a77-ba21-ad7b5f82deff"
        },
        "item": {
          "id": "39a5760b-eb9a-4e8d-bcd8-4afd1ea3228c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7c0adc2f-38ce-4a87-a700-ec7c86feaa30",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "18a5eec0-2892-4c14-9c4c-ec60b277b261",
        "cursor": {
          "ref": "8186e81c-d3e5-437f-818e-8732eb70eda2",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ef4307ae-6420-4b9c-b792-601116d1a75c"
        },
        "item": {
          "id": "18a5eec0-2892-4c14-9c4c-ec60b277b261",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a4fe5f6d-6da9-4e16-a4bf-16ddffd00593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1062,
          "responseSize": 206
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "56503dd6-7483-49ef-93d1-da1fd3cd2b22",
        "cursor": {
          "ref": "4ef7801d-62f5-45bc-acfb-d49a8ab2986f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "aca4483d-cf54-4903-8e8f-f04c978a65f8"
        },
        "item": {
          "id": "56503dd6-7483-49ef-93d1-da1fd3cd2b22",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e78f30dc-987c-4275-ba63-57031828a704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 504,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "56503dd6-7483-49ef-93d1-da1fd3cd2b22",
        "cursor": {
          "ref": "4ef7801d-62f5-45bc-acfb-d49a8ab2986f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "aca4483d-cf54-4903-8e8f-f04c978a65f8"
        },
        "item": {
          "id": "56503dd6-7483-49ef-93d1-da1fd3cd2b22",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e78f30dc-987c-4275-ba63-57031828a704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 504,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "06ef829b-e304-4a8c-9264-f94a4cf7a66e",
        "cursor": {
          "ref": "7d1c0129-9e85-4479-8af0-9b19e4261852",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c2470406-f575-47d2-9106-742230b2369e"
        },
        "item": {
          "id": "06ef829b-e304-4a8c-9264-f94a4cf7a66e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "74ed8d0b-9abb-47a8-9afb-87033012a652",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 323,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "68ccf407-7360-4fce-8883-cc07e10b6bb4",
        "cursor": {
          "ref": "20e4d80f-a9ae-4283-877d-7fadfbf905d9",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9216f65a-c88a-480b-a42b-09bef808c6bc"
        },
        "item": {
          "id": "68ccf407-7360-4fce-8883-cc07e10b6bb4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fb1cae44-096f-4e44-a1ab-832425b1f2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "4b9e084b-69f6-4db9-a7fb-57dcd8f6c900",
        "cursor": {
          "ref": "66aea125-7cb5-4721-9b14-1d593c62992e",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9b06b9b9-1b53-4a44-9f5a-98b4b372c6b1"
        },
        "item": {
          "id": "4b9e084b-69f6-4db9-a7fb-57dcd8f6c900",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "aa5d8e0f-0865-4d2b-91fc-c576b09adf10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 540
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "a836bd9e-8f8d-4bf7-8a45-04985e174642",
        "cursor": {
          "ref": "26e13bdc-ea11-4f43-a43e-3f99db67900c",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "eeeee778-3513-4362-b60f-57af7c2b6c3a"
        },
        "item": {
          "id": "a836bd9e-8f8d-4bf7-8a45-04985e174642",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9cb0178d-4f3d-48ea-95ca-dd75ddf29672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "709287c8-f4ab-4406-bbf6-4d1bbbf06c16",
        "cursor": {
          "ref": "82406dd7-4776-49b3-9ab7-90632614d18c",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6889aa8f-a965-48d3-9cee-8c36c10a7f25"
        },
        "item": {
          "id": "709287c8-f4ab-4406-bbf6-4d1bbbf06c16",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b6d731fd-924f-45b9-a33d-b0fb3f092e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "11be9aa9-7b01-49a0-9c7a-a9fae6a53eb3",
        "cursor": {
          "ref": "3e9d1fbb-f2da-41ba-aaa2-caa7744f5bfa",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0e9bcb34-e5a7-4842-866c-887ff71f7478"
        },
        "item": {
          "id": "11be9aa9-7b01-49a0-9c7a-a9fae6a53eb3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3de70ab8-ac1d-4926-a678-3378b6153afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 1154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "13bf3014-a58c-44cf-9445-8bb8ae6f8fda",
        "cursor": {
          "ref": "b5316a16-7821-4956-98b0-5bd875d2f407",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a7e7a37a-56d6-47a5-9f66-198610a01340"
        },
        "item": {
          "id": "13bf3014-a58c-44cf-9445-8bb8ae6f8fda",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "53ec72d8-bf6f-481d-8283-551a54565281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "97cf2120-5975-4d58-9e92-2f90f7d315bb",
        "cursor": {
          "ref": "fd6f3efe-50e2-4f2b-b375-75c614b71eb9",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "39cbff91-661d-4701-808f-71ab40cb974e"
        },
        "item": {
          "id": "97cf2120-5975-4d58-9e92-2f90f7d315bb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c2edca51-1dea-4a51-a5fb-25f4806cc95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 1699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "48bf530d-2806-4ac6-84ae-f6dca4b760d9",
        "cursor": {
          "ref": "1905e63c-1521-4b45-b4c7-00000281a35a",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4b621503-4572-4046-b5ff-edfab4cd1671"
        },
        "item": {
          "id": "48bf530d-2806-4ac6-84ae-f6dca4b760d9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bc0915ff-e5d7-4707-b3a4-42e97e61eff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 336,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "3bc8668a-0dee-467d-9c87-e58cab53154c",
        "cursor": {
          "ref": "f59f640e-7c86-402d-a1dc-59b044c064c4",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a71813a6-a396-4d4e-8466-aa437ccbb680"
        },
        "item": {
          "id": "3bc8668a-0dee-467d-9c87-e58cab53154c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "923772c9-c076-4d84-9742-64974391cf46",
          "status": "OK",
          "code": 200,
          "responseTime": 355,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "561da13d-9bd6-4405-bbd5-2a1561670513",
        "cursor": {
          "ref": "f7da0cd0-1337-4567-a77b-2c393d468aae",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6866e787-9de6-4d62-a849-663ab977a1fb"
        },
        "item": {
          "id": "561da13d-9bd6-4405-bbd5-2a1561670513",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2cb09b84-0cf2-4a18-8cf6-6bc08ba46531",
          "status": "OK",
          "code": 200,
          "responseTime": 308,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "24bc3f41-ccf7-4593-83b0-03d7233cf1d4",
        "cursor": {
          "ref": "98c14ac6-bce7-40f1-9b86-46da7717ebe4",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7182634b-e9be-4824-a571-5aa2a9db94ba"
        },
        "item": {
          "id": "24bc3f41-ccf7-4593-83b0-03d7233cf1d4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3b0ee3ab-0667-41d0-8e92-dd923c5279b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 2187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "96b0acbc-57c8-43f4-a393-26a6a13cc72e",
        "cursor": {
          "ref": "d5fd46f1-06ce-4f0f-980e-7038925994d4",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "70e76262-daea-4d54-88d4-0270e71dee20"
        },
        "item": {
          "id": "96b0acbc-57c8-43f4-a393-26a6a13cc72e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "95d8a29e-627b-4a64-9db8-62e7551832fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "82af3a5e-cc19-4c44-aa04-0fc0db6fa2a4",
        "cursor": {
          "ref": "ae8fbc82-6917-4722-9771-c569ad4ce43c",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "42ab7575-b1ff-48e4-bcf5-81ee0e4f1813"
        },
        "item": {
          "id": "82af3a5e-cc19-4c44-aa04-0fc0db6fa2a4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8841d785-2688-4a15-bdbc-f937c4b75419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 2176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "8b6ab434-7009-4041-af26-d5b3bcb7a839",
        "cursor": {
          "ref": "9c2d0393-da63-4644-b6ea-4184aa070437",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e1bdda35-0e29-4d4f-b75f-b7f4339d67a0"
        },
        "item": {
          "id": "8b6ab434-7009-4041-af26-d5b3bcb7a839",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "881c6504-7cbb-4c78-baaf-00d6af7d1562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "628a5bfc-71bb-4667-94d3-0864f1ed3eda",
        "cursor": {
          "ref": "1eca95b7-9051-4c52-97c6-186a96e47251",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9afe9112-33b8-4a70-b324-3ee261c79b9a"
        },
        "item": {
          "id": "628a5bfc-71bb-4667-94d3-0864f1ed3eda",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5d34c89b-2d4d-4391-af1e-0023d6f9f69c",
          "status": "OK",
          "code": 200,
          "responseTime": 392,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "d8c8264a-1389-44ea-be8f-23e08ec2b5f9",
        "cursor": {
          "ref": "276337ab-1ec1-4815-b994-28964090804a",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b2ed5d83-d43c-45a2-9a9f-0d2e3dd172d1"
        },
        "item": {
          "id": "d8c8264a-1389-44ea-be8f-23e08ec2b5f9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "723a27ba-0fcd-4a8b-81f9-8db6d843ac45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 326,
          "responseSize": 1235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "9e8dfa82-b3a7-4a54-80e7-40475da2ccb5",
        "cursor": {
          "ref": "b9e2f376-d8ad-44ef-84a8-502902096d9a",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fb6301fc-95f4-4cc3-971a-d70b52281547"
        },
        "item": {
          "id": "9e8dfa82-b3a7-4a54-80e7-40475da2ccb5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2e3174bc-3275-46ee-9501-f1cdda7b6a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 1191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "e645f231-ac76-4583-9444-4758b728daec",
        "cursor": {
          "ref": "f274ab6f-c846-40a9-a0d9-422564916af8",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "81b209e9-51b4-4c7d-8091-853443bfcb0f"
        },
        "item": {
          "id": "e645f231-ac76-4583-9444-4758b728daec",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ad28c4f7-9dea-4cd1-bff3-2488a6642cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 1189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "5efeda63-0f4a-412d-8832-5ab63cb0b41b",
        "cursor": {
          "ref": "5d397262-e902-4524-a928-b19fe4d899c9",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "60845f7d-2574-45c9-bb70-61507b3a1058"
        },
        "item": {
          "id": "5efeda63-0f4a-412d-8832-5ab63cb0b41b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c06ec092-ad3f-4560-b9ff-8fc7487b9106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 1190
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "5fb870d8-bb17-440b-a93a-f05caae18351",
        "cursor": {
          "ref": "e6c2a1a4-47fc-4cb8-aab4-c83fb8f9654e",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4b9b8999-b648-4c5d-a584-e97380fda493"
        },
        "item": {
          "id": "5fb870d8-bb17-440b-a93a-f05caae18351",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "56bf13f8-72ff-43b6-9b9e-c582cb6de41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 1241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "a8fbd03d-93e9-4b98-9c80-d179871c1bc7",
        "cursor": {
          "ref": "f30ef270-ad49-4897-8771-5df0a413e595",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "026bba25-c806-4b02-98da-fd8399845595"
        },
        "item": {
          "id": "a8fbd03d-93e9-4b98-9c80-d179871c1bc7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5d6ed4d0-c94c-405a-a080-a1a91f122f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 1168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "bceca4e8-4f74-4187-afec-55c5a3134b7e",
        "cursor": {
          "ref": "6b9646df-22e4-4a9a-8d8f-a96f2172917d",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "49be117b-0ee2-45b8-b679-9803d0206d72"
        },
        "item": {
          "id": "bceca4e8-4f74-4187-afec-55c5a3134b7e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1d4e4b3c-b5c1-4ac0-8a49-9e7e62db59c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "b298ca26-f2d2-4eb8-a202-25826a7278fd",
        "cursor": {
          "ref": "a8584a5a-5805-4191-a65f-b6e0d6da9205",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9f40c4d8-fc41-4d53-b769-c135a7a7847a"
        },
        "item": {
          "id": "b298ca26-f2d2-4eb8-a202-25826a7278fd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "493a32e9-bcf8-403f-8c99-f36d06f0f289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 1488
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "27d4c23b-7963-4b49-a5ef-fc36d41c1133",
        "cursor": {
          "ref": "b85d1b52-f455-4346-98c8-6eb20c99c359",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1e3c2a72-2f88-469d-b11a-c5bf192d7735"
        },
        "item": {
          "id": "27d4c23b-7963-4b49-a5ef-fc36d41c1133",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "794b28ce-ba53-42c8-8e67-3b59c2d511b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "92440f58-2310-4893-810a-1fe5083834a4",
        "cursor": {
          "ref": "292c77a6-2453-4116-8c13-2db9716d5208",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f4993ed0-072d-45af-8fcc-a807c3205f29"
        },
        "item": {
          "id": "92440f58-2310-4893-810a-1fe5083834a4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ddf407f8-b26f-4eb1-bfd8-550833961f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 1515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "57b8c481-62f8-479b-b2a8-6bd5e530ed7e",
        "cursor": {
          "ref": "a7e45375-d7ab-44d7-bd01-5fd633397ded",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "03b9bfab-58aa-4f00-9426-eed120e29b17"
        },
        "item": {
          "id": "57b8c481-62f8-479b-b2a8-6bd5e530ed7e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "32597fad-5e8c-4e85-8449-99972e344f75",
          "status": "OK",
          "code": 200,
          "responseTime": 336,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "9aa187ab-c315-4185-81d4-edcec0140927",
        "cursor": {
          "ref": "d7c84568-aad5-4390-a6b6-7ad4c2ce8f02",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e84c46ab-117f-404a-9010-2c6655d98010"
        },
        "item": {
          "id": "9aa187ab-c315-4185-81d4-edcec0140927",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "dcc50b8b-e40d-4dce-a283-63151de7d98e",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "16ff5b73-834e-4077-a4f0-44b0f538416c",
        "cursor": {
          "ref": "15bfec35-3cf1-4da9-810f-4c687878927b",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "22d9ede7-5a03-4975-8950-7d234fa0e727"
        },
        "item": {
          "id": "16ff5b73-834e-4077-a4f0-44b0f538416c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e41a7dd3-5d23-4e10-8d13-a348b9c2f07f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 1534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "1fb76be3-3472-49c3-a47c-6a86be8cb6dc",
        "cursor": {
          "ref": "1c66ea9c-a519-4c4c-8aae-2f0a5d750792",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ea90fda5-2fb8-45f2-b3b8-41879aab5cdb"
        },
        "item": {
          "id": "1fb76be3-3472-49c3-a47c-6a86be8cb6dc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "984cbf91-a6d4-4ab5-b9b8-34e4d7f8b9a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "239d6e4e-3c2d-4ee4-9a40-92512ed171a2",
        "cursor": {
          "ref": "9c2ff695-e891-4714-8ed4-3b6a9ea7d7ee",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2589cb71-5077-4ec8-a588-6d94d02dfe33"
        },
        "item": {
          "id": "239d6e4e-3c2d-4ee4-9a40-92512ed171a2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "44818603-0c49-4848-bad2-0a31e926d9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "98a53267-dee7-4cf6-a785-acf5f3e4ce02",
        "cursor": {
          "ref": "b8aa8c6a-ac2c-4fc2-bf5d-a1be1b5d051e",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1a3fd61c-3481-43ff-941e-e9772160dbee"
        },
        "item": {
          "id": "98a53267-dee7-4cf6-a785-acf5f3e4ce02",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a78384af-9bac-4554-8a08-6d596913fb10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "d11b5a79-3b93-4537-8285-f0186ebc8a3b",
        "cursor": {
          "ref": "8681a58b-00b4-4dcc-bcfd-535d73a1a3f7",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7d28c668-2a8f-4fbf-b82b-f2e5d84dbfb0"
        },
        "item": {
          "id": "d11b5a79-3b93-4537-8285-f0186ebc8a3b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0efd58d7-5cdc-414b-afb9-9f1aaa6ae863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 1550
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "4356c076-1cb5-4d8a-988e-e73cc9902504",
        "cursor": {
          "ref": "291152ef-61f2-4e36-a1ef-8458ac00f6e9",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9698e053-e419-4fd1-ae26-6c796230f8e2"
        },
        "item": {
          "id": "4356c076-1cb5-4d8a-988e-e73cc9902504",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0ca9b34c-b8c7-4ffb-9161-74582963de51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 1136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "26d0a036-491b-4912-9e97-84924850d249",
        "cursor": {
          "ref": "1f7b81bd-2976-47fa-9ad0-2ba0964777e2",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9a58138b-56c7-40b1-971e-98f2585d596e"
        },
        "item": {
          "id": "26d0a036-491b-4912-9e97-84924850d249",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0e26263b-1336-45cd-bee4-b2aada51d431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 1445
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "9fb19efe-529d-43d4-8914-f92baa57bcb6",
        "cursor": {
          "ref": "db3aa6c6-5859-4243-b46d-2b3e6bb0d938",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1da94767-5f7a-42e9-85e7-5949f47dda39"
        },
        "item": {
          "id": "9fb19efe-529d-43d4-8914-f92baa57bcb6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "be5f5bc4-a52d-4eb6-ba8f-f79c96c956c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 1431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "f25c3ee7-9880-4250-b125-7410a83c2c9d",
        "cursor": {
          "ref": "f5869250-f103-4a5b-8491-d35098e6273a",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8fd15537-4b48-484c-92b9-777e986f2c8f"
        },
        "item": {
          "id": "f25c3ee7-9880-4250-b125-7410a83c2c9d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "83db71e0-dee1-4fa1-a66c-d800ba772d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 1429
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "dbe59e7a-1914-436d-85dd-3d701302676c",
        "cursor": {
          "ref": "1d1dd415-8cd4-4016-8a3f-9225e26d4d2c",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7d9cd542-5710-4af7-ade5-cbed3a83359a"
        },
        "item": {
          "id": "dbe59e7a-1914-436d-85dd-3d701302676c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6062b80a-88ac-490f-90f1-7f65e05210de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "186d0030-d690-4ea8-ab50-a40d22f70c68",
        "cursor": {
          "ref": "c7816b75-f569-4151-8fef-51b7960b2efa",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "58e89332-7606-4181-83c7-23c56dffe450"
        },
        "item": {
          "id": "186d0030-d690-4ea8-ab50-a40d22f70c68",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f8938194-cc92-487e-8526-c853c0be38af",
          "status": "OK",
          "code": 200,
          "responseTime": 251,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "66bc277c-b02f-48fa-b3c3-e162e238cca9",
        "cursor": {
          "ref": "e8725690-e853-4cef-835e-55b7a4df56da",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d0994f02-6f36-43b7-b9cd-1f9fe74ee33b"
        },
        "item": {
          "id": "66bc277c-b02f-48fa-b3c3-e162e238cca9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "54fbe22c-f172-47f7-9c48-6c2fe4b0bc21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 1470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "8ff3fe67-a20b-43a6-bc9c-51fb4a0394ab",
        "cursor": {
          "ref": "f793636d-3a2d-499c-a74f-56f5d5e762fb",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d027f4c6-2a0d-4273-928b-8b277858feb5"
        },
        "item": {
          "id": "8ff3fe67-a20b-43a6-bc9c-51fb4a0394ab",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "632ccbea-2498-4ae7-8378-5af9988398e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 1456
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b3596ca5-1d03-489d-800f-7aba1d5e77b6",
        "cursor": {
          "ref": "01615675-c007-4015-976f-35311ac20a18",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "32d98b3c-a3ed-4b45-8eac-4c8340764cb4"
        },
        "item": {
          "id": "b3596ca5-1d03-489d-800f-7aba1d5e77b6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c748babd-2bfe-4dd0-b7d3-d1a54d37d0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 1454
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "78b94e59-744c-4e0a-91cf-7031b10f9214",
        "cursor": {
          "ref": "43a42385-e7ba-470c-ab40-906dc776c10a",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "30aacfd4-e5d1-4f1b-833b-f143ee7030f8"
        },
        "item": {
          "id": "78b94e59-744c-4e0a-91cf-7031b10f9214",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e4f8951f-d5ba-44a9-96c8-d286f0481d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 1455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "09b82c54-a822-400e-a6b6-8f7c52a221ff",
        "cursor": {
          "ref": "1b6c85aa-bc48-4e1f-a729-04b587250f0f",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cd75b664-c104-4f8f-b1f8-5549d0867cd2"
        },
        "item": {
          "id": "09b82c54-a822-400e-a6b6-8f7c52a221ff",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2c3251aa-47c2-473a-8240-f8ee583786b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 1476
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "c54f1f85-a421-4372-b1a4-8fe68dd37d46",
        "cursor": {
          "ref": "99c8379c-e2eb-4b64-89ac-323a017bb4f5",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "00e5dd59-5159-47b4-919b-3ed640090908"
        },
        "item": {
          "id": "c54f1f85-a421-4372-b1a4-8fe68dd37d46",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bb3dd331-f876-4c2d-a020-04bdea36bc89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 1178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "a22ec936-0716-4690-a890-b69158b0bf0e",
        "cursor": {
          "ref": "515ae722-092e-4bf0-a41b-de7001cca314",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0d37be88-3e46-442b-a7fa-cc87f41cbc14"
        },
        "item": {
          "id": "a22ec936-0716-4690-a890-b69158b0bf0e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5f2e53e7-77f1-40a3-bc95-720d89e43fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 1202
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "3316a3ef-8823-496a-b027-5397b1f8afa2",
        "cursor": {
          "ref": "ef882973-0f89-458b-97e8-7509cc7af3f5",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0356b4a6-465d-4b57-b4d3-c4efe8be1dd0"
        },
        "item": {
          "id": "3316a3ef-8823-496a-b027-5397b1f8afa2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d59efd4c-b37d-45c4-83f2-5d0c32fb60b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 1183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "6c6f9e22-d578-4656-9ad6-56e686d91b48",
        "cursor": {
          "ref": "210272cd-7b60-4c6a-92d1-7369a2665a14",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "db44eb84-6fe5-46bd-a317-bd2e91d0020e"
        },
        "item": {
          "id": "6c6f9e22-d578-4656-9ad6-56e686d91b48",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b5d6961b-6ff4-4da0-91a6-d7cdb70d51cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "d3119335-ecb0-427a-82ba-e030fd03d1fd",
        "cursor": {
          "ref": "7e18430e-c7ea-4247-abd7-2e2cc08a18b8",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d0f31bdc-9102-4b03-8eb0-b0389496293b"
        },
        "item": {
          "id": "d3119335-ecb0-427a-82ba-e030fd03d1fd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4a0cbd70-6a40-4083-b4c6-58caf9619b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 1182
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "6964a977-ba43-4032-87cb-5cb2602c0d0e",
        "cursor": {
          "ref": "9d43e4a3-3d5e-4a21-a60c-2c8c93c7e7d2",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "80a36330-061d-4610-a242-486cd7a7827a"
        },
        "item": {
          "id": "6964a977-ba43-4032-87cb-5cb2602c0d0e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "02ec8c8d-a849-4e59-aaec-7b9a0add69fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 1208
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "184028ad-ff0b-43b7-9bc6-162e1ce0a810",
        "cursor": {
          "ref": "ff743598-cc2d-4e4e-88d9-4a67d00efc43",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3ef96276-6398-4cbd-95f2-fddcddcce16e"
        },
        "item": {
          "id": "184028ad-ff0b-43b7-9bc6-162e1ce0a810",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9db2c20b-5917-4e52-9e04-f710f3267521",
          "status": "OK",
          "code": 200,
          "responseTime": 330,
          "responseSize": 333
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "416676da-4059-4225-8126-4b0e44422cfc",
        "cursor": {
          "ref": "5f717afb-e8ed-4d03-a2a8-3a2a33fb49a8",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1e189661-55f2-4bbb-9b75-c1d0693f424c"
        },
        "item": {
          "id": "416676da-4059-4225-8126-4b0e44422cfc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c760d1d6-be6f-421a-bae9-0a435634dc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "dbf64502-ab83-4b1d-9874-7ca99e12245c",
        "cursor": {
          "ref": "041ac259-b5d9-4a0d-aa85-e5729bc9238f",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3ba62001-f467-44a4-b31b-386f44f383f9"
        },
        "item": {
          "id": "dbf64502-ab83-4b1d-9874-7ca99e12245c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3d02e347-4574-4e9d-a5ba-45e4c071b994",
          "status": "OK",
          "code": 200,
          "responseTime": 335,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "11b87d4a-6de0-4c05-9f63-48cd3c09b13e",
        "cursor": {
          "ref": "8a61f65c-8928-4f20-a789-6f543453ee03",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8ff31bea-1965-4a39-8267-299159a50888"
        },
        "item": {
          "id": "11b87d4a-6de0-4c05-9f63-48cd3c09b13e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4c7aff52-096f-4bb0-ab24-da6b46e848cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "0e6b267e-cc25-47ef-8785-a6297eef5064",
        "cursor": {
          "ref": "f5fe3883-7274-4994-9a23-c94fa4f55ccf",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7f436b42-b0a0-4846-9c32-06e89e75e3ae"
        },
        "item": {
          "id": "0e6b267e-cc25-47ef-8785-a6297eef5064",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bd54d783-05da-4465-b53b-74b9e44fb8b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 346,
          "responseSize": 1654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "f4cf16f5-d392-45a5-b41c-4544b0d1b398",
        "cursor": {
          "ref": "ac05b8e1-8edb-43c4-b00a-bd51edc3e930",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7faec407-7f7a-4dee-a2d5-4b57cca406a2"
        },
        "item": {
          "id": "f4cf16f5-d392-45a5-b41c-4544b0d1b398",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5193719c-265e-42d6-b035-2ab1db7663f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 1655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "4cb313b3-8b20-44a1-9a29-1b7fdd68a738",
        "cursor": {
          "ref": "bb206079-f8c2-4827-9e41-432872f1bd72",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9bb957a8-1ae9-4547-bc98-d9ecea22ecfe"
        },
        "item": {
          "id": "4cb313b3-8b20-44a1-9a29-1b7fdd68a738",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4cee1ac5-be62-47b7-8c8a-80c32786d9d3",
          "status": "OK",
          "code": 200,
          "responseTime": 324,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "972e1c4c-ab97-4242-aefe-b8ce9168134e",
        "cursor": {
          "ref": "80c655e8-a5d6-4a9f-b754-a4ba4998182e",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6674f014-f4e0-41ae-807b-0c9391ad15ea"
        },
        "item": {
          "id": "972e1c4c-ab97-4242-aefe-b8ce9168134e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3ebea711-ace1-4961-ab90-5301d55966b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 2014
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "8b74b43c-0e9a-4457-aabc-2cca0988a740",
        "cursor": {
          "ref": "422c10d6-3580-4efd-b5b3-c4e00e924692",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "39b316e3-d15f-4862-9dc7-5df37c0a0ef6"
        },
        "item": {
          "id": "8b74b43c-0e9a-4457-aabc-2cca0988a740",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d978d597-214a-49aa-b062-2d193548568e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 2000
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "fbb7f323-ad22-42b3-a5d3-0ed67fa8601a",
        "cursor": {
          "ref": "8da082f4-97f8-49b5-b907-cc7bf95db33c",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "752d934f-f244-4a8e-b8d2-f3ed2776febb"
        },
        "item": {
          "id": "fbb7f323-ad22-42b3-a5d3-0ed67fa8601a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cb27c97d-c009-47e9-b2ac-06662494093f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 1998
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "b16244b6-2cbc-4139-b5fd-b403bf583d98",
        "cursor": {
          "ref": "3738bb81-b2c7-4b19-a9d4-63e2953e60bc",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "123a53de-11f4-47c6-8b79-7471b3a8e02b"
        },
        "item": {
          "id": "b16244b6-2cbc-4139-b5fd-b403bf583d98",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7ada9802-7c64-4ba7-bdee-a7b47423d616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 1999
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "169cdaf9-f1a8-4702-861f-acf984d9bbcf",
        "cursor": {
          "ref": "b23ec797-4b2a-49fe-80be-646c7916fde8",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "203edb08-aa40-4ec5-8bb4-22dc33273f0f"
        },
        "item": {
          "id": "169cdaf9-f1a8-4702-861f-acf984d9bbcf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fefb684a-835e-4e64-9137-3b27595ff810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 2020
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "2fd459d6-9ee8-4a18-b232-56a6c3befbdb",
        "cursor": {
          "ref": "b055fe1b-b1f6-4810-b45b-ee7771bb5273",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "662f6945-00c6-4f67-ae5b-a38eee1095d9"
        },
        "item": {
          "id": "2fd459d6-9ee8-4a18-b232-56a6c3befbdb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ff7b5708-9974-4c28-a9d9-8f7f50d26be1",
          "status": "OK",
          "code": 200,
          "responseTime": 212,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "788b9c0b-57f3-4969-90c8-ca63c3857385",
        "cursor": {
          "ref": "3b64be70-34a0-48ca-bcd4-35719d8bbf1b",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a53f7e33-4bba-4ba3-a1ca-24919c4a570c"
        },
        "item": {
          "id": "788b9c0b-57f3-4969-90c8-ca63c3857385",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4e0bed79-3b7a-4e3e-bfe9-92584e0e79b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 212,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "0ba4b232-aef0-4d50-9d69-61951e9b8006",
        "cursor": {
          "ref": "60640f26-aa84-4f2a-a4d8-c23de0537f8a",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0b416561-3c63-4a8b-8ca2-8ba235653310"
        },
        "item": {
          "id": "0ba4b232-aef0-4d50-9d69-61951e9b8006",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a35cc2fc-8620-4935-a519-27894100cf87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 211,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "db7f0537-ec94-4deb-aa3f-0b6e4cd458b4",
        "cursor": {
          "ref": "4105b2bd-099f-488b-a477-7cd6b55540f2",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "00e40149-4a29-415a-b813-0423b1292bef"
        },
        "item": {
          "id": "db7f0537-ec94-4deb-aa3f-0b6e4cd458b4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9bb3eeeb-e760-4e96-b103-709123bb9fe5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 211,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "6db51dda-d947-42e3-9279-a187cdfd45bb",
        "cursor": {
          "ref": "eacd5723-09f3-41b2-b426-c1c61c45a797",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a202037f-999b-4095-98b9-6f445a4dca1f"
        },
        "item": {
          "id": "6db51dda-d947-42e3-9279-a187cdfd45bb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ed41106a-508d-4eed-8d0d-54c2037365bc",
          "status": "OK",
          "code": 200,
          "responseTime": 208,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "0ee0d267-b356-4585-85d6-728922eca1b6",
        "cursor": {
          "ref": "d49022b9-0a6a-4de4-a62b-a5c1f89f4a0e",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "84d138a1-b600-448f-be7d-2c4be6fa423a"
        },
        "item": {
          "id": "0ee0d267-b356-4585-85d6-728922eca1b6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "07957a61-519c-48de-af60-0b62426419cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 238,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "2c4a201b-0540-4b03-80c9-4a68c81e53d5",
        "cursor": {
          "ref": "5038c7da-ce56-4f30-9ad8-0254838b74e5",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d3a68f9e-28fa-440f-9e5c-971d5abbec4c"
        },
        "item": {
          "id": "2c4a201b-0540-4b03-80c9-4a68c81e53d5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b38183d5-24f6-4595-9df2-472d213868c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 270,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "52e670ad-ef7c-4c48-832a-af1901907421",
        "cursor": {
          "ref": "ec2117c9-13e6-45b4-b7b9-0010501e5d9c",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9cca26eb-bd22-4bb0-ad7a-386f2e561dcf"
        },
        "item": {
          "id": "52e670ad-ef7c-4c48-832a-af1901907421",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "55666892-04cc-436a-90ef-61311d7e1e7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 241,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "df36ed4e-a14c-4682-83d7-8bd75c40c550",
        "cursor": {
          "ref": "b7549d08-1173-4826-9781-341112792ec0",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ad6dad4f-a946-43e3-8161-05000efe28d7"
        },
        "item": {
          "id": "df36ed4e-a14c-4682-83d7-8bd75c40c550",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ef1a94db-b6f3-407f-9aab-15296b889fb9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 278,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5074b011-86d4-4033-b748-3378151bc137",
        "cursor": {
          "ref": "66b2b3d2-4fb6-429f-a5c2-99b25fe07549",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "85c9639f-e7cc-4752-9951-55fed4f826c6"
        },
        "item": {
          "id": "5074b011-86d4-4033-b748-3378151bc137",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "93cd545e-0d3b-473e-9a6c-a7f097293a73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 274,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "467c25e2-1159-4767-af70-ee6798398fd5",
        "cursor": {
          "ref": "bcd689cb-2d7b-4463-9b4d-f596ae6cb75b",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "405fa672-f802-467a-aa88-e7b2745ebf27"
        },
        "item": {
          "id": "467c25e2-1159-4767-af70-ee6798398fd5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2999e4ef-3f39-45e1-a00d-89e364900e1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 385,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "52676772-bf34-453b-b457-9eb49eaf4c9a",
        "cursor": {
          "ref": "74bde70a-3228-4870-9808-29a49a3b242f",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ca4f6dc1-87ea-49c9-9000-10a20a96c177"
        },
        "item": {
          "id": "52676772-bf34-453b-b457-9eb49eaf4c9a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ff4fac9d-70ec-467d-b428-d84bb7fbf832",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 393,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "047f05c1-7fa6-4c52-930b-34672ac72cfd",
        "cursor": {
          "ref": "fd468d94-de89-47f0-b28b-32e36a6339ff",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9510a4e7-627d-45e4-9590-b2d9d9377561"
        },
        "item": {
          "id": "047f05c1-7fa6-4c52-930b-34672ac72cfd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ddd16d80-7f51-4324-83ea-24d1c7c4da28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 420,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "41a1310b-5fce-4b13-8c03-35abe413dba9",
        "cursor": {
          "ref": "d3329a06-2e1d-479a-858b-5502999fa6ea",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e0ef5626-24ad-42c3-9ab6-3af6f9b7f24e"
        },
        "item": {
          "id": "41a1310b-5fce-4b13-8c03-35abe413dba9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1880bedb-909a-4117-8f4c-b23829ac0b71",
          "status": "OK",
          "code": 200,
          "responseTime": 424,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "be8a875d-02de-4fab-b628-6058e7cbe58d",
        "cursor": {
          "ref": "9ac93e76-df23-409c-8232-67bc52b937a1",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2d47a67e-7bc0-461f-a37f-0c488791dbc2"
        },
        "item": {
          "id": "be8a875d-02de-4fab-b628-6058e7cbe58d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f07c8c55-7b9e-4086-be3f-eba7fb8abddf",
          "status": "OK",
          "code": 200,
          "responseTime": 658,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "2869c76e-3323-43fe-b35d-dc365ee905b5",
        "cursor": {
          "ref": "afeffa14-1507-4b39-b36e-59ce322bf3b9",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "eba35b62-33ec-471b-9247-242ff0afa469"
        },
        "item": {
          "id": "2869c76e-3323-43fe-b35d-dc365ee905b5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f55037a9-014d-4af9-8a9f-3e45b7b89aa1",
          "status": "OK",
          "code": 200,
          "responseTime": 523,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "3b14327f-1812-483a-b115-64ff6829eea5",
        "cursor": {
          "ref": "022211aa-81ba-4681-afcb-6d744dda2023",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "53477522-bc77-461a-9176-e1880c705cb6"
        },
        "item": {
          "id": "3b14327f-1812-483a-b115-64ff6829eea5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "06d78149-5265-4857-a3e4-16b388e00337",
          "status": "OK",
          "code": 200,
          "responseTime": 472,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6158ec14-ca15-463b-bd21-f5d311c2d668",
        "cursor": {
          "ref": "9d2ca916-06f6-463c-a613-17fb380fdcc6",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1b525726-b692-4d71-809e-ee7f351a9862"
        },
        "item": {
          "id": "6158ec14-ca15-463b-bd21-f5d311c2d668",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4803f88e-de4a-4d24-a11c-4cbd105569ce",
          "status": "OK",
          "code": 200,
          "responseTime": 833,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ed3099f0-dfbd-47f4-b5e2-f7a2827bb755",
        "cursor": {
          "ref": "990d02c2-2720-423b-ad6f-171fb6576889",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b9e04322-7cc9-4981-bbcb-07c92e129746"
        },
        "item": {
          "id": "ed3099f0-dfbd-47f4-b5e2-f7a2827bb755",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dd793fc0-6199-471f-aef6-2ad264e04063",
          "status": "OK",
          "code": 200,
          "responseTime": 698,
          "responseSize": 303
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "4eb799a2-f5fc-4b95-87e7-aee98c03317f",
        "cursor": {
          "ref": "6f78c97e-5d10-464c-bccc-b12f07e137bf",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "20d0a5a0-e04f-4616-aaa4-77e8b035b56a"
        },
        "item": {
          "id": "4eb799a2-f5fc-4b95-87e7-aee98c03317f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c02f8559-511f-4977-bd60-8051e52c4f8e",
          "status": "OK",
          "code": 200,
          "responseTime": 575,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "7834d7b9-b2c4-4199-8582-dd0f5a50e37b",
        "cursor": {
          "ref": "3e5110fe-8d2d-4406-b42a-4f7bb5af183e",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e42489b1-757f-47dd-981a-89a0a982c2a4"
        },
        "item": {
          "id": "7834d7b9-b2c4-4199-8582-dd0f5a50e37b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f3d59ff3-f779-4198-9ba1-62261c979e61",
          "status": "OK",
          "code": 200,
          "responseTime": 340,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "d02537e1-0d97-49fa-85d5-c841d5babb9b",
        "cursor": {
          "ref": "5b8b2e98-6bba-45d7-9d6e-266b20a6dfc2",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "58c9730a-1ea4-46d5-b426-a1751982448b"
        },
        "item": {
          "id": "d02537e1-0d97-49fa-85d5-c841d5babb9b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "399bc631-9ef5-460f-a0e3-daced334d0d3",
          "status": "OK",
          "code": 200,
          "responseTime": 248,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "dde4d599-26e7-49a2-a8b4-7393271e4ffa",
        "cursor": {
          "ref": "1489035e-b23f-40c4-9b95-5cbe44d6d829",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fd9b1528-799c-470a-8c9d-7f7a88d7ba15"
        },
        "item": {
          "id": "dde4d599-26e7-49a2-a8b4-7393271e4ffa",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "06c97bc1-4e97-487b-82b4-cec910e069c6",
          "status": "OK",
          "code": 200,
          "responseTime": 248,
          "responseSize": 309
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "c19bd160-a2db-4410-8a40-34d71b3c4870",
        "cursor": {
          "ref": "d3e503bf-070c-4c4d-8736-e568897c3115",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "276a245a-79c5-49fb-9d86-a39359ba7461"
        },
        "item": {
          "id": "c19bd160-a2db-4410-8a40-34d71b3c4870",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "64ce2012-5150-4601-9ea5-4e8d03b7ad45",
          "status": "OK",
          "code": 200,
          "responseTime": 328,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "40f625dd-86cc-4b2c-8391-a4413e6c3f0d",
        "cursor": {
          "ref": "2976c7c2-b9e4-4981-81a3-64b795882d62",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "47d2eb70-4702-411e-aa75-6505225fa628"
        },
        "item": {
          "id": "40f625dd-86cc-4b2c-8391-a4413e6c3f0d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c147ac26-0614-4f01-9906-4f67a686ca33",
          "status": "OK",
          "code": 200,
          "responseTime": 279,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "feeb03fe-6a6a-42ce-b391-ca1e5cab7372",
        "cursor": {
          "ref": "88896280-c263-406d-b326-36a158d6c956",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a45519f8-9153-42bc-817a-54ab3eb38c5e"
        },
        "item": {
          "id": "feeb03fe-6a6a-42ce-b391-ca1e5cab7372",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "656a0d06-e0fd-44e9-bc5a-b319b7a8681f",
          "status": "OK",
          "code": 200,
          "responseTime": 255,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "d76dbd2a-4493-4504-9e06-c1b9f7e03e15",
        "cursor": {
          "ref": "6c53e713-f331-44bc-a147-aab8b599d685",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d260cf98-613d-4640-a5c7-a99fd2697399"
        },
        "item": {
          "id": "d76dbd2a-4493-4504-9e06-c1b9f7e03e15",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9b23c9f7-0c36-4e7b-8e11-3344e33311a1",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "9711cf03-72a2-40ae-8496-735d7847892a",
        "cursor": {
          "ref": "464a985e-6717-4adf-8916-7a28a8fb6bd0",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b22f482c-78de-4868-bb9b-87a224d8a19f"
        },
        "item": {
          "id": "9711cf03-72a2-40ae-8496-735d7847892a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4a5e1a36-6f7c-4616-90fb-b9db40bba36b",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "f5cfdedb-c099-4893-8792-07e9cf328c00",
        "cursor": {
          "ref": "fb3acaae-8bf2-473a-b4dc-18fc90683f25",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "cae680fa-b302-4dae-a1cd-f93506a941f8"
        },
        "item": {
          "id": "f5cfdedb-c099-4893-8792-07e9cf328c00",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cd543957-fefb-4854-a5dc-41442022404f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 205,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "29f39c19-b938-4da3-81c5-a0207dc0ba10",
        "cursor": {
          "ref": "c15659f0-fdaa-4405-8cd2-0375c602370f",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "46e2eff1-2313-49f2-b8d9-b34d6dc49822"
        },
        "item": {
          "id": "29f39c19-b938-4da3-81c5-a0207dc0ba10",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "69023f3e-2a24-4de5-9a88-d32c994fe791",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 248,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "2c56c80b-33b5-4882-9db2-3b94850c66df",
        "cursor": {
          "ref": "a423d0fd-d9ff-430a-9fab-00f316a8d4c9",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3af4dd95-48d0-433f-ac68-b06ad8fecf0f"
        },
        "item": {
          "id": "2c56c80b-33b5-4882-9db2-3b94850c66df",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ca1663fb-f156-48af-9b43-c8b59fcb85e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 221,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "7dfb8dc0-b595-4442-aa6c-be4507ecfbb2",
        "cursor": {
          "ref": "ab549afc-c1c8-40c8-b5e5-91708af7453f",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ff1bf2db-2aa8-4d19-afb0-476f95b6292b"
        },
        "item": {
          "id": "7dfb8dc0-b595-4442-aa6c-be4507ecfbb2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2afcfbaa-2dbc-4597-8dce-7f6340e51a79",
          "status": "OK",
          "code": 200,
          "responseTime": 225,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "8cc13e33-969a-4a02-a800-99bbe15d3a0f",
        "cursor": {
          "ref": "d048b88a-1326-49f8-b718-2fe3bad35548",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a960988b-0a7b-4478-83b8-2d6bc8d96da9"
        },
        "item": {
          "id": "8cc13e33-969a-4a02-a800-99bbe15d3a0f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1d49692c-47a3-4eb3-8f9d-78d7b746780e",
          "status": "OK",
          "code": 200,
          "responseTime": 282,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "448dba0f-5159-46aa-836b-3ff6e754a198",
        "cursor": {
          "ref": "befc8666-3cbd-42a0-8c3e-0bb3116f6fa9",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b0450c33-2455-4e33-b21b-7e3396127872"
        },
        "item": {
          "id": "448dba0f-5159-46aa-836b-3ff6e754a198",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c6c2a209-e394-4b45-96cc-0019b5183acc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 227,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "20e2f87e-3aaa-4c25-9071-5226f6b95bbd",
        "cursor": {
          "ref": "172b0e7d-9365-4711-9dab-60730b6aa9de",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fc56e5aa-a713-48c6-ad25-4587bd4746d0"
        },
        "item": {
          "id": "20e2f87e-3aaa-4c25-9071-5226f6b95bbd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4dcdf77a-a039-4e5f-995b-decd4bf5cc13",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 41,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 403",
              "stack": "AssertionError: expected response to have status code 401 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c4fb60f6-c191-4b61-b467-173f9723acbb",
        "cursor": {
          "ref": "84f3906b-f33e-49b7-b152-fd3033172453",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7d82fbfd-bd6f-4550-bece-fad43e85b6c5"
        },
        "item": {
          "id": "c4fb60f6-c191-4b61-b467-173f9723acbb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c609da9a-3428-4bcd-af40-854f7994cb34",
          "status": "OK",
          "code": 200,
          "responseTime": 306,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4bec27a6-afb4-4ad4-bb60-cc5a2f9680d9",
        "cursor": {
          "ref": "11d74dac-79eb-42cb-ade1-ec6b188aaf46",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "892e40ee-112a-4a7c-a328-d07d3597ad52"
        },
        "item": {
          "id": "4bec27a6-afb4-4ad4-bb60-cc5a2f9680d9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e752e463-c8a6-4c23-8d70-13f54e72f9f0",
          "status": "OK",
          "code": 200,
          "responseTime": 281,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "23f44b8a-7002-40e0-8071-25957201a7fa",
        "cursor": {
          "ref": "1482cdca-2e44-4507-b5cd-27ca9b822c01",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "459a7d43-a7e2-44ec-b230-a946aface6e5"
        },
        "item": {
          "id": "23f44b8a-7002-40e0-8071-25957201a7fa",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "fa20a458-0a6e-4cd5-bcbf-68ae263472f0",
          "status": "OK",
          "code": 200,
          "responseTime": 299,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "8d905e3c-a11b-4b47-ba98-ed3c41c906f4",
        "cursor": {
          "ref": "577236a4-1908-44ca-bc11-62a5806419ff",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a0ad6044-0fe1-4460-a56e-ef1ef694f774"
        },
        "item": {
          "id": "8d905e3c-a11b-4b47-ba98-ed3c41c906f4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b9d3d3c5-0014-496d-9c24-8ef43825ca39",
          "status": "OK",
          "code": 200,
          "responseTime": 284,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "61cb9134-31ba-48dc-a0d9-c161406545e2",
        "cursor": {
          "ref": "aa6dd7c1-2dca-4853-8e26-08819c0dec9d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cd771ecf-28fb-4408-a7da-9dc27c3a1193"
        },
        "item": {
          "id": "61cb9134-31ba-48dc-a0d9-c161406545e2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "564ee785-9ba4-43f1-8f60-001c1e35686f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "61cb9134-31ba-48dc-a0d9-c161406545e2",
        "cursor": {
          "ref": "aa6dd7c1-2dca-4853-8e26-08819c0dec9d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cd771ecf-28fb-4408-a7da-9dc27c3a1193"
        },
        "item": {
          "id": "61cb9134-31ba-48dc-a0d9-c161406545e2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "564ee785-9ba4-43f1-8f60-001c1e35686f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "61cb9134-31ba-48dc-a0d9-c161406545e2",
        "cursor": {
          "ref": "aa6dd7c1-2dca-4853-8e26-08819c0dec9d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cd771ecf-28fb-4408-a7da-9dc27c3a1193"
        },
        "item": {
          "id": "61cb9134-31ba-48dc-a0d9-c161406545e2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "564ee785-9ba4-43f1-8f60-001c1e35686f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "894154e2-2c43-4931-bdae-0e2dd9e5ae59",
        "cursor": {
          "ref": "1ca70379-e670-4f86-af2f-a1c02910feff",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "65b4c6c7-c14e-4e80-8902-a76355229e7c"
        },
        "item": {
          "id": "894154e2-2c43-4931-bdae-0e2dd9e5ae59",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "94f57148-b548-4304-ab0b-643f5f91457f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d2355195-57e6-4a97-a88a-b139d30b1889",
        "cursor": {
          "ref": "f6046b2b-bea3-47b1-938b-0b7f28591a33",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "36a6f7ed-a3e3-470c-8df5-58b9152354a9"
        },
        "item": {
          "id": "d2355195-57e6-4a97-a88a-b139d30b1889",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2ce7ea31-7f78-48c1-91ac-1a960b8856b5",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d2355195-57e6-4a97-a88a-b139d30b1889",
        "cursor": {
          "ref": "f6046b2b-bea3-47b1-938b-0b7f28591a33",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "36a6f7ed-a3e3-470c-8df5-58b9152354a9"
        },
        "item": {
          "id": "d2355195-57e6-4a97-a88a-b139d30b1889",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2ce7ea31-7f78-48c1-91ac-1a960b8856b5",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d896d3e3-850b-4242-8e14-28341b368426",
        "cursor": {
          "ref": "38cff091-fe35-4a9b-b7bb-2541ee3ecd3f",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aec78044-02eb-4dbb-9ffd-f9694b9e022d"
        },
        "item": {
          "id": "d896d3e3-850b-4242-8e14-28341b368426",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "794a4e8c-adc2-4887-9b32-3844e6361f7e",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f7bd0402-2560-4edf-a9c3-ac8afd53fb3c",
        "cursor": {
          "ref": "2625bbcf-16cf-4ade-bdcd-2b8d7e644c7a",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3ebbbe96-9bde-4301-8204-4f410437abcb"
        },
        "item": {
          "id": "f7bd0402-2560-4edf-a9c3-ac8afd53fb3c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a10dddf8-1575-406f-abdf-06206869d6fc",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f7bd0402-2560-4edf-a9c3-ac8afd53fb3c",
        "cursor": {
          "ref": "2625bbcf-16cf-4ade-bdcd-2b8d7e644c7a",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3ebbbe96-9bde-4301-8204-4f410437abcb"
        },
        "item": {
          "id": "f7bd0402-2560-4edf-a9c3-ac8afd53fb3c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a10dddf8-1575-406f-abdf-06206869d6fc",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9176ba48-6147-4934-9e91-5be329cd304c",
        "cursor": {
          "ref": "0cd89263-b526-44b2-90b6-2338550fa1bc",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f3c3f89f-52a2-4b08-8017-3261e49a50ab"
        },
        "item": {
          "id": "9176ba48-6147-4934-9e91-5be329cd304c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "1558ea1b-213e-4522-9e14-dc93a423c579",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}