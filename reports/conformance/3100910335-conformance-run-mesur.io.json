{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "077f4cb6-ade5-422b-8677-d7778a5ea93f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6197f5b9-342d-44d3-8cb1-dc3a2b6f2fad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a970849-a18a-4736-86f4-07d8f04c3457",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "518bccf1-64bd-4253-a317-1f8a74f6bcd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7b19447-a154-41a5-898e-d9799ece5926"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "b62fcdda-08ef-461d-a962-2c53031c7bc5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9d0751f2-7265-42d6-a4cc-928fb8128e86",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd13dfe6-f91a-4ab2-9831-2e67d201046a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7ed2cc1e-9286-48f7-b682-f7072e543b8c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341ba5f4-95f0-4908-8950-425a9c346728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5926420b-5695-4673-9fd5-4bf0c9465730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b005673c-5a75-4c6c-8dec-d5ec82e49739",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45403ee5-5023-4119-936c-7c43362db077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6557c47d-e9a7-4a94-9c37-b0931dfe4f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce157e91-8dbc-4ed8-8f72-df487507e632",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a631e30c-c545-44ed-88df-50cf21268d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cd37fb6-ab00-49b6-add5-f483775c26dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "61bbb959-aa4d-48c5-865c-7b011d01b695",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c1a0d9e-1848-4e58-a1ac-4d1ad1f4a901",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450e339b-7d02-497a-8c3a-45ce8aae3519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49113bfa-ee4f-45f3-96e8-3e279323aa3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70096b0d-9a4c-4381-b037-cbbd5ea235c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad2c7ae-04e9-4c29-afec-771bda24345e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d47b13-26a3-4fba-9528-d225f437cbd4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4d5288-7b43-46e4-b5c2-f52c56fa7842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "effaf212-1858-4cd0-a230-b145329a6e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52427fc0-e2cb-4bdb-9463-1f3725a1afdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "640e3b73-a9d7-4f61-ad95-acb5e787b7f4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0bcb8509-f569-4145-9f5c-c55c606cdf26",
            "name": "Positive Testing",
            "item": [
              {
                "id": "74471a16-336f-4646-9748-f5d58ee56a06",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9c8749e-837a-4eff-967f-6ed71d50bfc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a52e0dba-5796-43a2-b16a-7b8b6fe84cd7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b9d0916-b46a-487e-9c24-6c976a600ce1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2a9deed6-0ffa-4eab-b798-8b4c398a9188"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e99282f4-de81-411d-8e9a-d6a3429a4cc0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1afed6b7-96e4-43c1-92f2-e0d81a350e0d"
            }
          }
        ]
      },
      {
        "id": "b36299f5-aba3-4790-86d6-57997123bbcb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0e8c1052-b2ad-42a9-a58f-53956f5f2794",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a81e4d1-a85d-4cae-bdad-bd8d4f286302",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c5a1fc08-1afb-4b36-a2e1-187948b85284",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e307c99-8537-4248-b599-75e648ea8ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac5ec3e-367c-468c-904e-3151f6701fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca60324a-df78-45ba-b582-f9b0d1028952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5eb6304-71f0-4a30-9650-1ab8e5e3381c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c715205-88a1-426e-95dc-da7cd685fd53",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4cd2d3-2841-4d04-8660-caca748a46e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bede7f32-9b41-4f25-93ce-e4b313d3d2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e9752b-2a07-4064-a421-c23f9ec5f2b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d95a50be-38e1-44f4-b238-a4abe26ab6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46eb160a-6629-4dba-b6ce-99e949e4b73b",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6114e855-f050-4125-b611-0b2b42e78cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eef44e1-acd9-401d-9eab-8ab3cd5ec2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d915b8-5349-4daa-bf35-f2ad298276bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39cbba97-d38f-4f4c-b456-5074bb766f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62adf1af-a59e-4eb4-b4bf-fba13b2bd4bf",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a750bc4-5ee7-4fa3-946b-552cf9d13806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baedb3ae-90df-4c35-b592-7814f93e3a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a1c254-9269-4d22-92f9-5feb1b818f56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d8a2472-5181-4897-b10b-a5fcf4ac3ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde7dbcb-dde5-409b-bac6-6c6934e758f9",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77178138-5ab2-48b6-b9b9-4ea0ee9041f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d3d749-029e-4d00-a181-26ef402023d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473f6499-703c-48ee-9f3c-3da4c121b97d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "760b8256-331c-4f2b-a7fa-dfe79a027e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f5ce47-f12f-497e-b085-776768139fe8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc62efa-d584-44be-b441-17b1671798b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef5c3c6-3f9f-41ed-9fc5-d595f40a0070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9f8f46-6340-4161-bb10-2c31f4166d64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e6416b0-750f-48c7-9296-9b20dad07daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a7901b-deae-4d75-88c2-85a025d44be9",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a545c00-70b9-452c-9c2e-dfe7b4f51cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17168eda-f781-4463-9589-f09c1095a48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fed3b9-20d9-4b0a-85fe-8948e6afd000",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "918cc3ed-44fb-40ff-b0b9-2766213313bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6221c43-2307-4ddb-8c7d-4a1221fc6ecd",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5011b16e-0b5a-4f28-a68b-7ca965b86ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fd3dcf-a0fb-4cf0-8273-9eadcc74c47b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0e20f9-92e5-4aed-be52-32445cbe6f7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "930727d4-628a-49c9-b585-a7fbb6584f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1bc2d7-620c-45cb-ad2f-4142bd876863",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4232922b-905f-4ad2-86a6-65bcad7b8067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4673c747-134f-4040-8399-c3ec6f3547ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc8e5b1-8014-45c6-a5bb-d26dc50e32db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e53f4b63-43ba-4b56-88e6-4cf8d52e6f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e9b760-1f95-4d7a-b447-ac1977e2ed80",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ace9b3b-904e-444a-bfa3-d7928eeedbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6929ee29-7f18-4ec6-804d-00bf8fb1ad20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8657a8e2-8dbf-46b5-ba70-500cbff7c2d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df8c42ab-9928-43b8-b563-8869280d6ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9210e419-9518-4059-969e-208164f3e6be",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995ca18a-cde5-4aa5-9938-ea7322728fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb395fe6-1bc4-4040-9e1a-e99e72359e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f980715f-67a7-4ad0-b266-5f195ca832ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "cd2e1233-56c3-4618-8365-a6a17beeb21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec784e4-2442-4560-aa87-959057f90c2a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd38e9fd-2535-4e2a-bb3e-1ae2d7e9470c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399e75e2-2a8a-47e2-9a1c-713f8dd47f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9afe04-201d-46b7-a2b6-44a19b55725b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "6bc780bc-2cea-4856-a3f2-79ab4d43f382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c8f908-c8d2-45bd-835f-cf75e019a8c3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed460efc-7b6f-480e-9f8b-d707f8d8eb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9935c89-9969-4f20-bd6f-6b313e056f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e98065f-b667-4641-ac49-d671ffc2be9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d99afad2-0021-4dac-a7b8-c21a65915cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62933dc-731d-40b7-8770-a2fbc9e60f5a",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56f8288-b0a4-4a98-98ac-29a96bd12e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1efc4b16-810b-46e7-b90b-039335f656f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a8c0a3-7c7f-46de-982c-2938f4178b90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2cf08d6-0528-4348-a768-f20b330a2dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ff6538-2a12-4a1b-8b46-400b77093bcb",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd271bf-8c73-43d2-80dc-6bef019b860f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2182f7e7-8dde-4657-92f3-97553d3359e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83493858-d0cc-4575-accb-e73aa38f87e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "a48d05a0-9a08-43f5-99f4-ee862f3d64f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc3b016-937b-42de-b29d-30933753ebe4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbd8e2a-7c4c-4c49-b5fa-702af66e435e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821c7272-2dd0-414b-af80-02126a1e1afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6cedb7c-3074-423a-a8d6-7d5bd2cdd216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "51713b60-52f9-451c-945f-da757fc892c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6e2248-d2cf-427d-b1dd-8fa3fc52270c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0e078f-c7f8-44e6-b579-b004c0471fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2c901a-35a7-4776-ad8f-e85eada64210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517bc405-a938-4c8b-87aa-f48123c9e776",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ecf5c14-b940-4bb5-b94f-ef90e20feea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dc7191-d6e3-49bc-b086-6fec6f9cba01",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8222a047-e4ef-4480-8189-d6ba0f8a0c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8119aaf-27ce-4723-99f6-551c19b2dce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b60f2d-dd19-4018-9ee6-438a993f4f30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cb07186-b00a-4213-933a-2d4ead924c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9393bff0-2c99-425e-9391-5699c9f6fc27",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccef0f4-3fe7-47e2-b2a1-c626d3ef9af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a814e61-ebfb-481f-9924-293524b05cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfa3a7c-9a2c-4e5b-819b-52de64212836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e2e1fe8-07e4-4bd8-a54e-47c5ac9a4f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945655ac-c92b-451b-b988-d6639cc91ef6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91b1527-8add-4aa8-b3d4-1fe236b93637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37788c7-8e7f-4b3e-a233-a19450038f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0e56e7-3375-4118-9efa-bf8e0b27a7b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec0884c7-c52a-4724-91cb-d9a4d6f597a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487f1a00-c19e-4ea4-96da-278119deef92",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab52e25-3eb2-420a-8d26-d12b19acdcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac15378-1a76-49f2-a08f-1fd83bfe6fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14c47bc-56d2-4e73-bbbc-a4057639d0ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a49b64cd-4ab4-42b0-99a3-3c2c1557b2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b1e692-57fc-4d75-8f97-3303e28d49ac",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb7f65f-f240-4864-aa8d-3a031afbdbdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebf7267-c2fe-4615-bafc-2b94eb1c9112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de13a3d-a92c-4308-9d9a-7decec327f57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c067665f-0c30-443d-9273-7d6e989f6ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963e3dce-dded-4aca-9738-b72f34bb4072",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb342f3-6f29-43a9-a035-4bd1f04deeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f24eea6-6f72-4b77-b12f-52577cd6cd04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fa5f03-3657-47f7-a729-4bd038d1fa4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9392e855-f251-4df7-86c1-3d631c1fd75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168b9556-a053-48f9-8a89-8b93a13d2134",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae8b99c-5d5b-46c0-b43a-841d7b77f7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a49d1c7-7777-439a-8f6b-2f2babe05a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ccc59d8-b9ee-4107-a949-5e70df5d07ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60f9e267-cff9-47b5-98d1-e5bd58673fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cba74f7-714d-4c77-8b36-feb846956876",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99490620-b81b-4189-9732-1d2f50678060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b73c221-7214-4962-9b77-437e10549f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcc8a06-9455-42dd-b66c-2f28175ddab7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e19b4072-aa79-4e27-96f4-0734f35ac920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede7c372-bb94-4af4-8966-16d648a393df",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a00cd7-f5b8-40d0-bc61-f2a70ce9b763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05989d36-4627-4948-a582-8a91f6b96f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda09cc4-be05-4805-9189-4a8526d62c0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fb43ab1-e3e6-4eda-b45d-60f35a843af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223c57ee-9aeb-4304-9480-d9e7a11c6e12",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b3dd64-382c-4e81-bd4b-48537432a634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f2594c-d0fd-4003-96a2-0255e868a21e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a5888e-bf62-4806-8bc5-c578b878d45a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e149db07-f7bd-4be5-9db7-44259fcf75a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95cf4201-0677-42ce-bbaf-b2580ae27215",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50b5d78-b290-4bdb-9d18-14ed3b6f83bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab171a48-8300-4519-9136-6c63c55a4826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae26d980-861a-4965-9fe8-5bd9a0d50f62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "624e61bb-975e-461d-bc6f-b3d2fcedd668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9592d3e4-0ff9-4ba3-b4f2-a30aa5ea7a33",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be91697-b67f-4a2a-9b27-fa26d7f85cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb240e32-689e-425f-8117-8ff119fa17b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0032efb8-e535-4ae1-9d6a-0c98178eee7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a28faf3-043e-4347-9e23-ed0fd5ba9354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbfc7cf-a835-43b9-b3c0-1b956fb90560",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685d4ab9-5f47-418c-aa40-0e50680a1b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad6d383-7a3a-468c-8349-c67f08b3bcfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13de1e39-3387-4251-babd-b24e0dca00f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "212ae81b-9ccc-43ae-aff2-ebaed8ee731b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4577803-4e91-416e-815e-9022244b780d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c228df9-1b55-4267-b92c-395f8dd6b130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a4303fe6-a2e8-48d2-a9aa-75118e35f46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8401604b-7185-46fa-b948-dd5199dc289f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61a6988c-277e-4296-9c47-1b677ad0940f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6aaa9489-8022-48db-981b-7b6a4c7c0853",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e73144c0-8f9e-4d60-a8ef-1212c6d0684d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bbff77-7d4a-4a42-b9fc-5c38ea44e30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cbfb771-7c1a-4e99-b6b8-c8361360147c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48ef231-dfbb-4c8f-ba1d-fe3e037db47c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8957a977-21e0-4039-832b-cce3ca01b97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b3fe3a-7758-47f5-b841-8a6212725fba",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c50bf9-5685-418a-a730-a799bd36293c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c688f62c-051d-4a4d-aa0f-439a6be559cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30280fd6-c24a-4a35-bcd3-669839382659",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3a61f03c-6b82-4992-8d51-e899b6f871e8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4410a5f-7271-4c32-ac0e-b15ae6a2b75e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b6ad950-fea1-479c-91ff-9f0a8af829cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f7f8af0-93cc-47b9-9063-428b7d7d8c64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "219d7537-bef3-41e6-9a0e-983e0b8fb3c2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3795f196-ca04-4405-833d-8853e92e59c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ee11bf6-367e-48cd-89fa-d8fa6026c1de"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d7e6009a-407d-47dc-85ea-3517be226e06",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e392b20c-d5ad-4310-944b-18432594092e"
                }
              }
            ]
          },
          {
            "id": "a13162c3-0054-49ab-994b-90008119c784",
            "name": "Positive Testing",
            "item": [
              {
                "id": "18c1bb3a-b9d8-47c9-9656-ba00ec0be12c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73966bc8-10f2-4dbe-8d61-a2dd46170aff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ad6d416-e30b-4e0d-9655-4d33451740db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b6ba487-7392-4680-85cd-136cff45e258",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2b5bbc5e-cec7-440c-91cb-9ccbf9eb6ff3"
                    }
                  }
                ]
              },
              {
                "id": "92a84015-cf7e-4c9e-902d-e6e7e7a5e706",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9d67537-4ca3-4c42-841a-43c3f69b70d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15a6fbb2-0a84-4efd-9224-d642860487b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4d1e561-8850-486d-a5a1-2b4ce1f6e9d9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "73000fb4-5bc8-4c6a-a875-49cda0a8730e"
                    }
                  }
                ]
              },
              {
                "id": "833fc0e9-227e-4ed1-a403-081814159ca3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10b23eec-fdf7-4fc9-8bab-2b4285d35f4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49c86b8f-5f39-4607-8e76-87350193bd40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8747924-32ff-4e26-a248-3e4f8395f293",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c57a0436-7404-4755-b5e9-2edbf58c5859"
                    }
                  }
                ]
              },
              {
                "id": "9bf7fb8c-49a6-43ab-964d-e66e9da8519b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4bc7e32-88ff-4932-8024-c16b8220b91d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6430b06-0cd3-4cf6-97e4-f13e3df8a10e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6467e78-e378-4a4d-aa98-7df0a58978fd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "db7286d7-f35f-46aa-9017-f23d6b99ffe1"
                    }
                  }
                ]
              },
              {
                "id": "d6704a68-61ac-41fe-977a-e3e1d05f9496",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2f6bd52-559f-48ca-807f-a410c9604e2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fe01cbf-f730-4b0c-92c9-6b04e5a75419"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93e537b3-6cfe-445a-8bb6-fa8c9f3c8c09",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "bd8f3074-bcee-4c95-a55a-71e1b28eb8d5"
                    }
                  }
                ]
              },
              {
                "id": "667b6c04-31e8-4054-8e14-66dd6de029a4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bb137ac-888e-4f14-8935-2a974b27b660",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43149db0-30ea-467c-b6a5-7b60bc8b597e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "499baff2-8923-4bbe-b706-858a758b7d60",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "88c925aa-b251-4acd-879f-e282e7285905"
                    }
                  }
                ]
              },
              {
                "id": "ad74f555-a03f-4936-8a1c-365276d27d3e",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7702bab7-72ee-45a4-a7eb-f7d8a1f6f238",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12dc2537-fd0e-435f-be62-ef30f9cbc0a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd0ba3c3-c941-499f-9dc9-8ce917715d5b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "cfb8928a-d1c9-47d8-9c97-2c7f9d4e25f7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef51b01e-8b0f-48fd-81b9-705dc0850a36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fa97b15d-15f7-4cb5-939b-bac717c0ea07"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "92fcf677-867d-4a27-be94-7c7040aa654d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c37bf47-6f2a-4394-b743-8e0de09b0a2f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96eca7fa-ff35-480c-8683-7bde9ef42d6a",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "8c4ee1fa-bdec-435d-a424-064dd9a90f0e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab99559d-abbf-4d4c-99ba-7fef539a5bee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c468407-e435-4dfd-9410-0fad27c5abc7"
            }
          }
        ]
      },
      {
        "id": "da0ab8ea-9a4b-4843-b47b-04f63d4426bb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fa9f65ae-1533-459f-a9c1-37678c2af318",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c51e48d9-43cb-489c-bd93-3fdd19facd5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4565aaf-710b-4329-9377-4b9622c8854c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd620721-23ff-48dc-bd7e-3e59f3436813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "350d2a87-cea5-4613-96a5-e3cbd3dfbb69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af24068-b1e7-45ee-aedc-5599dfb91047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d093db2f-5038-467f-b8e3-54c872e17d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46073ace-37ea-4e28-a8cc-8477e53b1dd8",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c5e00b-10ff-4b47-9089-52d60d3a6907",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "571e01a5-96fe-456e-aab7-b0b1440d2c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c348112-37d9-4cb8-89a5-dd6f94352d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43d5b086-dbeb-4d94-afdb-c12c4e28fab9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "526e749e-6914-4284-8467-ba5bf3701342",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ede251a-74fe-48ac-b696-43b09b9b612e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b113637b-acc4-409a-b51a-5e757f46a2ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa16bd1e-1a33-492c-bf9e-27d9badc835e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f02fb0a3-5aec-42f2-af85-cefbc23fd51f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "1cf1c1f2-c1d6-4576-8b94-b2efc4be31a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41394032-66a0-4bde-abf5-290e67d19535",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9bcb1c3f-3467-4b23-b9e0-ca5b404acd3d"
            }
          }
        ]
      },
      {
        "id": "3677c2ef-2bc9-411e-9786-b0fbf14f98c1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2c23a729-80aa-4a92-a31c-ca255d5e0120",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b45edd04-d557-4f43-a144-ac9e57cb0a72",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e049e9dc-99ff-4ba7-9f41-2e59a3609421",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "102b482d-0fbb-4ffc-b297-24eab4272237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332cd311-161e-4672-a7a8-1279397e5493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff1d382-0a68-4efa-aca8-90f7dc850ab9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e41ba6-a8e8-4927-bd17-893231ec9fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3228bbc0-e8c5-4fac-b98a-0b09bd2c7360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e063e91-f5c5-433d-869d-caf258f06081",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff76b9d-05b0-4d37-ab0a-3f43472e3f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58bf505a-a3e2-490d-b7dc-d2d5c5cc1361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbca764-e51d-4b69-947c-ba5d168d6198",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d03b9c1-e4b7-468d-a106-ba9d36fbdc9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8811344-baa8-4581-8711-1a77e18fcfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a475a7c-41f7-430b-98e5-70177baffbf9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5129603a-198c-4186-8d1f-85fa03f11af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb984f6-43d4-44ea-8fb0-89bb2f3be246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6baad9-e915-4c89-9c3a-ea4bc926827e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5fe9cb-4e16-44cf-9b23-5f78f0df28b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e92a5e9-4881-49d7-8f69-cfa06db2f569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88b62c2-1e05-4709-b56c-69b7d000078a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8dba63-05a7-4f16-9960-f4f679f603af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36901d24-34ce-49d2-a8a1-d8c112785a82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7639b13-18bb-43f7-8c05-3269f823b4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86dd7d74-4e26-4559-accc-727dbff8f7fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b033957-302e-4a23-a2b9-77c2a8108aef",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6127278-2444-4eb2-a234-8fcbf9d1ccd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f1a661a-b3a2-40a3-ad5e-a92e4b4fee64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9247b2-0814-47f0-8e82-0b760c5bb736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245d83ca-29a9-43af-8460-d6e8e9c8cfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2404c47d-daed-4a43-9986-d063468dbaf5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599cba49-1233-4b66-a0d7-727532670cb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b01d22e-3a16-4a13-b81d-82133513895c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1307dbf-da06-4478-a6bb-cad97f3f3d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a7ae5c-2a00-4199-b23f-f29e9cc8e3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0923ffcf-b0f0-4e77-90b7-6837ba1b32d0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40fa61c-a99e-4578-8c36-0e138498452b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee94ec52-e6b7-441d-bdf3-0c329bfc38ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e60a78-2ea3-45ee-84b9-699f72af1819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5006a739-1a92-49fb-a266-fa1260ed3fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcc1c82-86e3-4b00-b5d0-4a9ca4921fe8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..RJunbl8K6pk5JyKv0VkmdJT4I8sfatEPdbup0RAYKU6F1fDvEZ8j0xFlr1ocpNQGIi4H5cufTCRE3Fi45ZQ-CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247b5a0f-bd58-4ece-a59d-579a9750a1d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948dfc11-7559-4cfa-9eec-0c120a1d90ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "218c611c-84cd-486d-bc39-6956ce2ff84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c5d5d3-7566-4121-858b-b2e51b85a108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208e2b0b-6bc5-49c6-b6f8-ee8e6b0592a2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7fe00c-6401-4a0f-9bbd-11bc11a13407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53774f1-c5d9-40cf-b71d-94924be06ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabb0c18-767e-4ee3-bb80-e2b68c75330b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c1c4f2-8b45-46b6-8e87-c85cfd7cf885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4057bd-30d6-4c9d-abe2-578f6daaae7f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bc800f-abd5-4a8f-a1eb-10b9bfebc580",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dd28d63-467e-452d-a220-785469c3c12e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70862e0b-e21b-4402-925c-4663371cc440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbff8d6c-9e14-456b-84e5-d800b246f0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44068997-a1b5-45ba-ab70-742d9d24c811",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d37700-bc05-4636-8abe-7fe43b38cd0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9a90a86-952c-4812-bd17-c809c6e1c545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e39795a-8fac-4a39-887d-e543070879c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2397cf59-4448-406b-9f40-cbeadf74c3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2677459b-01ec-4960-b303-47dad7feb570",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91836e3-bcf8-439d-afac-c56503df9024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3af27477-7bc8-4704-b3f2-e314cb86b411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00d3e89-8092-4230-aab9-c46ab59545a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c836ee-b4a5-4014-94b5-c7588733dc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d265e2-ed33-421f-a79e-298476322af5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f109b0-850b-4964-ac51-432217f440fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "290bbca7-052b-45df-850a-12f4dafd93ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d7b1ec-0325-4e95-b7b5-f7da1ff4cf60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffcb18dd-26e0-4d07-afcf-1eff3877e707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0eb1e8-d52a-46c5-af61-8e0ed827b2ed",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6945c4b9-83c5-402e-9e0b-9be109e28393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8337a7a3-4857-4f4f-bcb9-82d5d94312ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "698c0adc-ccec-49e6-a169-f4aed33c307c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea0d672-a380-4af2-9d8b-9aa0ed46b223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8158d2-b5d5-4849-9cdb-f5fac7a67d6a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..CaZ2UcTNDOTCXaDXAclLPy7_3rpuf2sbL5xwaMnN2abolieE_C7fB7RsmZ7i5_6CoKRhGnrM3_YkAms8IlObCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e120f979-20e8-49d6-99c1-720c88cef4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43777d08-73ad-4e0d-97f5-550b6cb6784a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b019e3-a421-41bb-89c4-915b7e155ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926cea4d-9ac4-46a5-be57-171112962110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa579ba0-f359-450d-9251-88fec6f540e9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..yonwdW7r7YFAAjZZxjVrYPkLVrbLR5TMZ3bkWN1uo2UbUi5tgtlikoyyHlj8QD0MPA7xd4Jv-1PlryIVOqtUCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059f29b9-29dd-4d0b-bd2f-863a5fffb6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09cf9151-d1ce-4096-916c-1ea2460bb4cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe98455-567e-4380-8088-2eeb02aa019e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42579518-3576-437f-a022-194626235e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe10a51-53d4-4775-ac27-77ef0933eef6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TRCl90uRMmkycDvfeHw1S7yxyAVl1-Vc2SfwwDzXkn1SqfCJxptwVsgJWwr3gQRAqveZR0xrxQczy4tWHq2FDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c98619-5197-4c3d-a6e6-666c22b4c708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3289e1c-23cf-4e6d-ba61-01bbb3e1b7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f10de24-d877-4d80-927a-eec0d6d18d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf89add-0130-4932-ad2f-c84f73f11c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917baf9b-c4ee-4690-954f-c9f1844e4159",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d289cb1d-9a44-453e-9b3e-9203db2519f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec11e68-4fc2-4e4d-a630-12ab02b9a063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0742ef-98ec-424c-8211-d93ca382d1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a228abe0-e58c-4419-ba03-440a13eabf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd5d382-3db3-4079-a465-af8c9578135a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ymo0kNnQ9mVHr1RKpfCuR_ekUAXzNEM7stSEtbbFv4ZPZb6NK7kUBkckgwrZyBp8re9RQEedJ9yiyfzTL41dCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dabdb8c-5d7c-4b1b-819a-41cb8eef3dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f26c56b0-1ee4-4d49-b639-d73290f00094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9353809a-8e40-45e2-9757-73e080d3823f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebed0e2-e6f8-48c9-a23c-6b7cc02e92e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074c9d4d-4185-4d25-83b7-b8cfc4a05d8b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f782d8dc-e678-4c65-ab68-54c519d2b46f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ffd5f9-c953-4036-b82e-fc457f485704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad1ff85-5afc-4168-bd1d-9e1a77981011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17edce9d-4a5d-4d5d-91e3-df396254ea9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbfd4d64-7430-4ec5-a0bd-52cca9050c9a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea140433-152e-4897-8d8a-2a2a3dfcc154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d3a2ec1-c189-4c16-a678-a932f2a45e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d682d03-6ac3-4cdc-a3ae-9b3ae09c5293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030e3bee-409a-48f4-8aa9-6b3ffa9c6f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5cadc7-fd6b-4b80-b2dd-1ad8f644b92e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644c7cb5-4966-43c6-a417-967e8f5c2ad4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff4f7e87-502c-456a-9146-5b2af0e812b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f700a47-66b8-47f9-a369-d2d8ebabea4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c5779b-b3aa-4b69-9fe7-71b4a525d64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da000cc4-1ecf-4d00-9d5d-ed5fc9797acf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376fb5c1-cbb5-419d-b7b0-c6c0b1df17cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6826804-3772-42b9-a7de-774035a26019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3094203-3ec3-4921-bc9f-ff71f62da368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e494295d-66da-49c8-839c-4af589e6e9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6ba7ef-25aa-4a10-9499-4b0ba59573f8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56c8775-fe99-4198-955e-ed8665d8d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9822cb1c-e254-4da0-8ef3-a80d8fa29caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e02622-ecf3-4575-9419-5e9511926014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce7ff99d-a362-412e-bd90-017d0b14a6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308c9ad0-23e4-45e4-82ef-292236356c2c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f08a6d8-0f1f-41a5-aae6-31eaf5b2f17c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb98fb8-ac9c-4afc-8bd6-8be1911650f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c0322e-9d2b-4c52-b2c4-819e71b302de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511134f1-7330-4b39-a170-7465274b19eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad45b18b-431e-45d6-812c-79b069c36d07",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b1b3bc-ecc3-43ec-87ac-b339a8691cbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a44b7e26-86c1-4e5e-9350-7071dc194e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "884f16e3-1b72-432e-b727-e7eba0aff77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f614d5-69f2-4dc0-80a9-7bb79daf66da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc9e5be-3969-40ac-a0fb-f8b1e7477cc6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e48f65d-05bf-4cd6-804d-91562d0aeb92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ed5193-64c3-490b-990c-47a5e54ffc2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e2de00-576a-472e-b9d1-f741231f0de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27aa358e-2855-4105-86eb-f90662297a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df90b42-6b19-49bd-ae74-1e9bc40de697",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967b68ca-b6d4-4702-bdf7-2e04a83376bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b38c5a84-c74f-4204-b843-7b1e426ddb0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bfd528-debc-4056-be23-c3506cdb6bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d112babc-745e-48f2-827f-6013eb6786e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c48b3cd-83c4-4ccc-b1b7-a94f4a5a7c26",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ea5b84-da71-492c-8683-96a90b602b8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f860de6e-5ff2-4d66-926a-daf0f968d37e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d28b25-3176-48d9-bd71-8e04c7b80487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40159064-f3dd-4960-8afc-63a2add3680a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9aa09e8-3777-4f17-8b90-f7b3802f4a39",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ab6974-c748-4998-b420-f53388261f7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a1a307-e85c-4dc8-a2a6-c3c3c5db16e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727901f1-747d-4149-a242-7a37917c2ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a6bc2f-bf6b-4288-9e25-360aed4da0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2f6c8b-dc17-4666-8047-48b9453fe271",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030e9e73-a4fc-41ae-ada9-201dc9e857d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ee5b08-1539-46a5-8b51-a15033f01de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6bbc08-a806-47c5-9fa5-9656e5ca61ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c5abf5-26f0-4bbc-be0b-53d2607b13c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d12a72a-a0d0-49f3-a61f-cf9732e1c5b8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bgY03ZzK02APUHCDiqUVMYbbvu4mSPNC1sGY3lTC8ko7j5oZDB4rB8FRzsXCc9L0O4nHx4UNJURCsRZUErbRCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c268320e-cdd2-43a2-9900-cc4f98fbe489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1448db-cf21-4f1e-a832-d58229d44907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adac2478-3749-4103-a193-7ee0e09db1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865784b6-0c93-4cf8-9290-229a2274bf48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4399eec3-e78c-47f0-bb53-83a43db366ef",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..2Mu6q2PaIBjmfXHqLuT7XIFthDHboV4bdlIdLFY9KxapUXic6uhoefYFrarss-AN_5dUHdjWnHEMCoWYjW4MAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9bdcbf-9a3c-46e3-9306-7344c7d4e59a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d377026a-51f7-4979-8d3e-937abd9325f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ef0208-6793-4a30-a373-60610f1ed15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e151e0c7-bea1-443b-8355-5d5b002b44c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1d782b-51ac-44ba-85c5-4d5d2893dcab",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..L3RWLJfQzaffmRy3vXZF_7gfdlR-iQbA_8TjGFaBCmaOqm8R7Qi0B6JivEqshh8MZWufDitgO-r6ASk2iaGVDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49064010-39b5-408e-8cba-766d6862080b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f709ac30-e70d-4fd6-82dd-215876b3a793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db27b6f6-56b9-4cc2-9789-5a2603ffbd41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b013394-9587-4c47-aa90-c25f5a25b695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e917248-607d-4142-8a55-f71eacf5c7d5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05798205-b1c8-4d5b-b32a-90ef0f5b9c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ebf0f08-7402-492e-ba82-9bb5be38c3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40edd74a-6a2b-4bb6-90de-32a5fa34a8c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4cb7d67-3293-4eb1-b768-48a27144011c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf51e3de-d408-4dce-96b4-7b8a8204f0ac",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a6ff92-0887-4a24-bdef-f74c3ba7340c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e19775-6ae6-4c1f-9f21-b097fb8cd4be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1150a09b-1bd2-4b5b-b6f8-38f539bfc4df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a57461d-ddfa-4cad-8180-cd375bead7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a296e9-14bc-482f-a922-0540996356ed",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..E4WypAOLo4KNTnvHucei_9yLEMdlq_UwhS7mexlp5i3hF8SfBAlLv2scHANd3Ikhtqr9JIyaXuDnIN2LsaVFCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49598784-ac2a-4458-bf0f-07be5273b374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668aef15-a5f8-41ff-8879-0b4b98aae7a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776a907b-5a59-498e-b08d-55b09ef16548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ea7d0a-8db7-4fba-864a-8dd8b55c9dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88dce2f-41da-4b6c-ac6d-b96cf2a72e1a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rnEgkKo3EQPiGixl67oPIFuZ7H9zueq0ELswP2p_FdahgJooIojScCnp-AcxeC_G6YDtLUbsNlVy0SkDvTnwBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89ec218-df39-4e74-8111-1497038a95a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0b6b53-d4a0-472f-93ca-e1b5518f505c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d340d05-a6ca-4664-8f82-4e37f7c3198b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee2bb7c-9ce0-4d6d-8f86-b1407de5ee34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f086ba-7bfe-4440-ac46-c9e0dec832ca",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..nK8J_eHLw18__7Byp9ohgpDCHY1-Wfpw8vk-8k-nw4ezzjlwYoYjbo9x_xx3ES0WY0aCN2Xr9SbRoZHr78P0CQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81afdde-19f2-490c-9933-76364eb8f166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236adfba-6c38-4553-8fcc-cb47dd0ea524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fffde81-18d3-40b8-af25-19d0e37df38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba30fef2-6e07-453b-9544-7267d5769924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9c1620-2c17-4f6e-82c7-f9d90ad8d9c9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8662b789-97a9-4c76-99f2-7fcc9f90527e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ea2285-902a-4259-a478-a176c7f4d7c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b035ff-679b-449b-b9e2-dda746714822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfbfc28-d4e5-48ec-bf08-3141071dfc44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b34732-e23e-4a82-bc73-7647ce314c00",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GEyy2tqmKf8AzHhXY06veUbSRVk9uoQIu21GZlYtcdMGh-VrTjvfVg2R8DAFtCBe6tEUL4dnsM87mT-20nG5Dg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dfaba1-9478-409d-8ac0-9823172d4c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1aa960-e6e9-416c-b092-981bf5bd8d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c702161-1285-4230-a0f4-f1d4eab3c961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa4a51e-04de-4b0f-a532-f6be83c09f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3fead9-bcd6-469c-b855-f9023b706d40",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d323866-0b2f-4287-80a8-5c00593baa7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec70568-4e9d-4a5b-a2e5-a427ec36ecf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d06e8a8-7e33-43f6-af07-4036a2e5149e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae83d742-f198-45cf-b0ff-014ed5cf140b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c0a785-b016-4c3a-86b3-d0e95db0ba63",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vuVI_mdt7bpVwmKIsmIusWlCbj-wk33p6_FC2COcGBKzh9m5jxydHlDRIM6YoJQJWpS8_EavVFKwQvPuLuwNDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcd2145-060a-4431-b7f5-5b690f6e519d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081c9c62-cab6-4e1c-9fe5-72f90a317b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd66a79-905d-4a57-8072-6e5b8508067b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f68e3b-dffe-4bc7-886d-f00d036e0a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387024a7-1dfb-47b4-a50d-caaada6704a0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jurLQ2KXgTdIxIAB1dwcysrBFVMT95g3Mn2SuyxAubRWS8Rbe-dFsoVG24kxo5wE6EZVYEuES8uHwNX_SSrvBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6e27fc-e2e0-45a3-998e-fab11d5f1e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52299757-7a63-407d-9f3f-1781b919fb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ea93ae-0f5e-4274-9e61-fa5ad6175a49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f50a752-150a-47a5-b90c-1a7fa5e6ea6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8ea514-e461-4167-a29d-69ed9f2b82a3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..HyTRfrVnRzNCXO3qmmbQnmtXYV_bAdmZg-27bnuBGqQScL87kkmPfY3CpSTLN_8aV72mVBkvy1-uvYhkQotmDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393014cf-eade-48b6-8ad6-d12eb5a080e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0313737-df52-49b2-ac68-88e62c826d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d9c77e-1a97-407c-a42b-14920884cdad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf5d91f-e280-47fd-8546-0e2b6f7a5048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35766c59-d0b2-4bf6-974f-7166eebaeb36",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88bb26d-652c-4bf0-848a-448beba1a4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598b4b2f-0d88-49dd-bbc8-365a95326877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9613d562-13c3-4c83-90a6-1312496def6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3563e58a-5cbd-4910-8f9f-c1249d51de6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89427d0b-7d67-416b-bf82-2e5d5f3b05e5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5NhiK8XqFDY7TB3l0Mli_VAhnflErggK8zlj71jNg6F5WD4eNAVufeVLhK8HtvGaC-7R7nQzQfzkCH9692DUAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d379bc-95ff-474e-9aa1-7988185b64a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786627e8-de76-4e77-b0c1-7589699726a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c5f5b4-dd1e-4656-b165-4a30c7658277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe77e2d-7359-4da4-a73e-30f1ceed367c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3d4913-74f0-4b61-954a-088d8383ed42",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1phNak29yV9Dt7ljiilV_cD1b78U9dV8Zhwjgrocc4Nahxchof8QHmEAFjfupRQZ71WIBpW-VGUtW-OwUu6eDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07433bc-7a66-403d-8097-c4b405a7afec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ebe9ec-0488-4567-b3e5-949481ff272d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb11c17-e18c-4705-97de-d46d82e5a91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01465b92-8c9a-4e7b-9ad5-567cb91c1742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2b5e16-c38d-43aa-acc9-f9dcaca952b9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2c22c5-acd3-4f25-8401-4ce81f9a8d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a207649b-0fc8-4b66-9d06-6cf200bda430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fc25a3-0f9a-4b50-96a9-178a88e3c564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7f675d-3b3f-42f1-9fae-006b8ffbaf1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d42a39-a558-4ab5-a08c-58141a44e78e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b12542-5c1a-436b-9f3b-70c63a0a2033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad2bafd-6e1c-40e7-b6e0-5be236989c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5763fe87-26a1-4ae4-9029-f2d5494642ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b814a1-e3af-48c4-9702-16fd8ed5cb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e05024a-c435-47cb-8b8c-3584e24800a2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..j1W65DhMkwul7bodXfKrVNsT_27QIFO7rI-8TDk0-ef-wu4PU7OuA8MFAOXfx-HdVf5KdqVu0BB1ITE6WjIXCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d0835a-321f-46d5-967c-8eb7af26180e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c264e3-8a21-4de6-82bb-84fc2a263d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df978022-4de8-43e6-8e43-95c8dbdc5530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc70322d-0e03-4361-8a76-07f2f5d248dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22db29b-8887-4b25-af1f-8aaf173cb6f6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Wm4yBzXF87zLmyA0LMEwHSWs-2EfPpdN2yJstmvPJkPVLFdXKUdjh7lZuHNVtTkAMGNT8Wi_RZ5Q1BWAY054Cw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92045050-fb96-4e59-a979-fa5ac8b4743e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ce790c-50ed-4681-9726-b3700a695e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f060c700-d889-42da-a50f-99b1244e99a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913c28c4-ae3f-4c75-bf98-2a7f7f78fe16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc04ca58-923c-41da-8d08-d0d9c8832b09",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6356a4-988b-4133-91e2-fec8702e659b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1925d5cc-4ffb-43e9-93f1-6e2ae10845ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04cddd9-4ee7-45af-a8b5-601515c75961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf8cb9ca-85e5-4330-ad46-db9ba217141b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8dc804c-552f-4cc4-bbf7-6a5ebd65ef82",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626434d3-a911-4cb7-b79d-ed5b72c24ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ba14ca-7be7-4439-b444-fb345ec5b014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d943e5e3-9d93-48bf-89a5-6ef9a1de25de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1639e458-dbf4-450b-ab17-38c52f9ff644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461b37ef-267a-4518-9d3e-5f0b85b37a27",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VDVadt3rnBQ7P8dSYyZU5RHdfxVBWz3liR1wKbXbfBuaNT-rJYOoUCLQj-7IQ2elQaB4Fhp2nsgul9ZQmZc1CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb347dd-8943-4b36-bea9-f922a1504928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9bef04c-c945-4ebc-988e-9ef0414a5602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8879029f-4307-4bf1-80c5-cf636dde6afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a01e196-7103-42da-b079-63451c39916b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd755403-4415-426b-838e-afdb166173a2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Kz272GRCnCfgHy4D8txIaM1bY5O5vW8iFfQrL2B8a7OnaVTcq6nF-dhqnoMLHPEbrUNzHK7spVAZG05Njl6CDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c89543a-7b5a-4724-9e29-a904b00d84ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65933b33-0ad2-426c-aa2a-60e5ddb01c97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfacf0d4-48a8-4dd7-a9e2-4c3d366f6c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a3a2c3-bb5c-4f85-834b-0231f63d2b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffa687b-2bb9-4639-8833-289954116bbd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..P9pVMuK8IN7B38_-uHlTyqAeQFcasIOW06wJWEZDZLPpaeLA4L-S6ee-tZsbGmM0QoSr8WTkbqkhiXpEhuIbAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890207a2-b0e3-456a-a5c9-e8d439bf327e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f460e933-0dff-4fd0-9ec0-074cacca828c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4678d459-f60a-400e-8ce1-ef325f0ab581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85cb61de-3edc-4d25-9cff-89914d38048f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6d57e8-38eb-400e-89d5-8bf070fcddae",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rdlyOsz8ZwKwD5_CacS7c9iPQnRUIywCc_sHdyJlADD9Cq4cRwRw0wwJ7OZtLDylbm512V0s3Cn69i1qMWc8Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b235bc2-03f3-4eba-b4c5-03da937a9605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26705f81-4811-409d-ad1a-63d00c17140f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "571e9de4-ffed-4976-b570-29cce9e33417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b3c480-8cbb-4b8b-b400-afed1a6dbc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fd862c-2c50-410b-b0a9-e32c17ca276f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YXI2e8nVY98qybXn64g4bOG063TH6yjKFmSF9gRq0MtX3q3cex1t5ayc38JjZSBEgoJTKQzUTbL71FOukoNrAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e372211-a771-4160-9d13-ee7eedb1b9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89ca6b8-6f7b-418f-a6a9-c9987fb89618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c3ed22-3a14-4742-bf5d-29ae2df74a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a171ba8-ed91-4137-b882-1f25f224f0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da76ecc-e0f9-4dd0-b931-bfd4efd54c14",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbd716c-55eb-486b-91af-6cc0925ba2e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01b46ab5-dbb3-4cad-902d-b5f9f07b0a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef654c0-8877-4857-bb13-aed7f189466c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9538235-07ba-4a09-8747-69ffc316c3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3399e6-8a9a-4b0d-9362-c21acdd56ea3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70686686-1450-4791-977a-9211768d8d87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ae2cea-6b2a-40bf-affd-64a62c107373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dacf96e9-d203-4dfd-8bf5-e189f276e6b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761513f8-7d99-4686-a44e-bc8435fe7e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f05d56c-2712-4466-a2c4-64d438cded38",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e18541c-932b-42c0-baae-13e706b63ee7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71441732-66e7-4e39-9786-71985fb779f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49f3c16-2a01-42cc-8833-bbe11dea0161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef21f7f-e88e-4594-8289-0cda77c24f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7bdbd5-5024-4d6a-8a85-c0f1a09b8307",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11726e29-7b47-4bda-bcf3-e6a16fd045b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c70925f-4a32-4164-88a0-1f78c3566c6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa82feee-786d-4fa6-b825-cbdf4e323c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9653a392-8235-4b16-8f07-30aa5aa023a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23797391-ce21-422e-a7cf-535f0ba8609a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ed28dc-5d02-4354-9366-082d32d9aca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caec9e15-c20c-473d-9aa0-02e0512ebe6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242ae868-65c3-4b92-9fc7-63e10c033c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba3af27-b5f8-4657-b831-ebe43950d435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886a640c-33e2-4d76-b1bd-a0c5a70bfcba",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d77de9-c6b8-4d4f-a748-6843462a5c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84702c8f-cf5d-4f8d-bb25-3e2f01b69355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0acfbb-5023-41d2-bd0c-296485725dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7601e80e-29f3-49e0-be20-0e850d97d8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0033142-1b4b-460a-94fd-5f4934e2c8a6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74db9c87-5e89-4cec-9f5b-121618ed340d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6628fdf1-4b84-4c05-9ee2-3735f64d7e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9f09c8-3f8d-4416-b76b-05be8728d1b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc04cd4d-addc-4f93-bcad-3251da1996dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc863c2f-0c69-448b-bb33-09e0e19a09f2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd319e8-6a41-4617-b0a9-f3a7cd2d9f72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37c81cc8-6a74-4365-9053-edba8933e113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce3f738-f2ee-4e5b-bf3b-9dceb9a83427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963bc876-90e9-4794-858c-1f2bcb982dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81962963-0293-4533-ac33-b9a7aa5c5d72",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cdfd23-5413-4ac2-af8b-be20fca611b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c569179-bb94-4d3d-94da-c13a79878a61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baccdd20-8c60-4c6f-b378-5b9e6075f5be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3181a00c-58cc-4e89-89dd-48b8d86eb993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e68e40b-0072-4d83-bc69-dc086c95ff53",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4a2cc4-6066-42b0-96c3-0c19f531586d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a46e09e5-997c-450e-b6f4-3f8f18e7abd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "140989a9-6759-4ba9-a134-8eeefbc068a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889a067b-e6ad-4e84-b2cd-af538f3ad9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e619b27a-de8f-47b2-8faa-1e4d3a82d861",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0639d0-f734-4dd1-973a-34b00e680af8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f9ed36-b1eb-4869-90f8-869f25702dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb50dce-bdbb-4b7d-bf1c-f7fe6c892810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "423b2904-319b-46f1-9ce7-7a163f533bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212e0e08-5a58-4f7e-bf6a-28249fdf07aa",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4960e9a4-21ce-4563-b7b2-d366a8495eba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38095261-e0fe-49c7-b81d-73528f00a5a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba125b3-9d64-4c79-9afc-26c786d4f51b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a1fad2-9049-4ed8-871e-3fde1419189c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c38be02-beb5-4a25-979d-41000543c274",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b41a81-b189-4cf2-b42f-854917ae5966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd0ba991-036a-443b-96b1-d5badec4f7d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238c534d-0b24-4a58-b2ec-ccb146b2de91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82229bce-3262-449c-a4ff-04cf3a1fdcda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae3b08c-230c-447c-9c43-dde591bf3301",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3a8ce6-62c6-4bce-94c0-316b5c155ced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32194748-e01c-4465-9bf8-5904bec90cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d1aafb-f7ff-4525-8e60-1722abad98fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c96cffd-3e8d-4586-90fe-9f9c8653f6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0047d6-c28b-4390-9167-198b5db80502",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3f2535-ecd5-4479-944f-d6c67df1ef13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbd82320-bd99-4357-9f1e-487e21516275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2828df11-04f1-496b-9c52-8682e6afad63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3705076-acaa-4b8d-a960-984e81e96cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d133a382-119e-47ad-8080-08e4fe583cd3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18df4b1d-2a75-4311-98e6-ac5171916509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b57430-b26a-4101-8147-6aac5741f671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e549b983-e4db-4477-892c-7a769f8fe6e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ddb075-e70b-4743-94cf-7ebb1e195903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb7301b-ae0b-45ec-9229-7eb87eef5315",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5fca0a-40fe-431b-b13b-9e15efdb8a30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f29b212-4661-43e8-afa3-31aaa6ba9de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37349698-54a5-4987-8af8-202f5a18b923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4307499e-850d-4694-8558-2b47220f7729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d6f224-93a5-4db8-b824-8938e94b0cab",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c0aaaa-0045-47ea-a6fe-8d3ffce19d39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5fd7c78-2e69-4cf8-b3ee-d3ab55c58eb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2492a5-8e46-4446-b7f5-ba372e34f613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273226cd-2d15-44d4-8b06-2be333c1c572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df64a7cf-62ce-4fb2-b131-52a949859e6c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f0c55e-4d19-4897-8c2c-8d4822c30911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55587016-047b-4ee9-a3b2-60a6852d8054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e51341-74ef-40d8-bd55-d649fb842f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c755482-e46e-44be-ba6a-9e9f8238397e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e20608-11b5-4087-99f0-50dd35b7dc46",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a39d6f9-d8e1-47b2-bf57-20636d16ba6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc68d0fd-f487-4a04-a26e-838c28ac4b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7cb657-80bc-4627-93f4-73a8bc13801b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71bad82-13a9-477e-97c9-5aeaf4a69560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a44676-85f8-4df2-b9ef-7007f23ee911",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0738ae-dde1-4afa-b2fb-b8d8a85f3b7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e838770-34ef-4166-9481-597cb30f4d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d2f327-c1d3-455d-9f8b-9e88e29980b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff1462c-3717-40bd-8fb6-a9a84b8a1022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d631630-b573-4275-b462-2c7a66c26791",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdac5c9b-4753-4966-8edb-8d9ceca3dc8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4d6d7af-1f77-4ffc-ba4b-cfb0cf006417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b384c7-5a70-41b5-af21-6bf13688b108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2a4d4f-dd26-4117-ac8e-e1f5dc1c1a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6324d4e6-3cba-468c-b6c7-c4b65c7028ae",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415cb2ad-f630-4a01-89cb-e54001997a70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fcbec7b-8bee-4ea0-913a-28d89482b565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f309ff-fe9c-44f2-bbc3-0f5b0069ba45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eae3de5-e3f1-4b36-8057-f923504af56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6389877-1942-4e4e-8fe3-29f322764af7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223f36f7-3164-4fb8-90c7-0673141803a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7e3163d-2108-4be9-a406-c6801c2ea2df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a94deb-00b7-4154-a95d-7eb11d8c1db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac52ad47-442a-4e52-9388-eb96641bf95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acbfbaf-8aa1-4751-8281-ab87cb223ca3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04f64be-ebfe-4bac-b0fa-e26a41756cdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a040733-ffcb-4739-97c7-006e4ac25390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf9435b-590b-49df-8a67-16b628507ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3176d4df-eef0-4648-9808-c7f168f6bdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287f8a89-22b0-4fd5-a184-bddc158919d8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c4998c-86b3-485b-9a70-bd5617b81b28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "092f55bf-f461-4dcc-99f2-54e23ccac7bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60385179-5213-45fd-bbf1-879cc3a630ab",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1d1d1a-fd2a-4688-8e45-ad20dd21db3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821033b7-606b-4e0a-8955-96363b8ab712",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dac06f-524d-4f22-9187-484f21e50df8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "921699fc-d2d1-466c-869d-3a049f61dc1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7f826e-4b64-4788-9e39-1c7eda30d742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ccb152-c222-4ebb-bbd6-14b8952a6844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8842ca9-3401-43f7-9fc7-3ba3f5aecd7c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da41cf0b-ac01-4c47-8d57-0b640983baf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a21b381-567e-4fe2-94ff-5ee010653ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a90cb80-b9e9-4a44-8225-2285347ee06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ecc292-489e-47bb-b53e-3e3b8e764592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b1ea68-8ec9-4e5d-ab5f-183b01371bf6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c01d4a2-10e4-4a0a-bf21-77fba0c13514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2829749b-630a-4fbb-9f05-0248917a5714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1ce0c5-912d-4579-bb44-8e9e25ac9e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "136a05fb-7bcb-464a-b070-70c8bf2595f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad28b91e-63fe-4fc8-aaba-3dc6f6872983",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd921bd5-bb8d-49f0-b106-651629e4c54a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b53e85-1e44-4858-950a-404767baac30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "170dd05b-b938-4e5c-a980-09e8bcfbbbdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3bb4fa-7586-49bc-b71f-8d881328500b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496c6c42-bff1-4133-bd86-0ad86cb5c50e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1040e8b3-3f6d-447a-b572-a1870efc53a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64858d5d-7edd-4ec0-ba99-2b07abf03561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ab43b4-ab58-464f-9420-55dc8e0d2d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4489a84e-11c9-4eca-a8ca-9dd0d8db17b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ca95b4-1674-4e5d-a881-04e2e88d1308",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46883e5-9a8e-4887-a989-733ae6352cf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30d90919-b695-47c4-907c-fa2f8ad5a815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efcd7a4-7638-4381-a737-ac58f5389637",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d213712-e891-439e-b8b3-21b31a879b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9988937e-9977-43ab-a425-517c6468f3b3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6baf46d5-9bcd-4fa7-9e4a-216dbd923842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "888845c0-eddc-4c79-a61a-958cd3ff8d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f6e55f-e5e7-4ae0-8aa3-5c10affabfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8e7e1d-476d-4a10-8aa7-3c7a641303f5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e2efd27-85c9-4216-86a8-d7f4611e18b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "139e3ebf-8abd-40f2-a6eb-10008f53f406"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "444509af-5bcb-4824-9056-551c5cdd6a25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbe073cd-ffdf-4472-b632-666ba8c4c1ba"
                    }
                  }
                ]
              },
              {
                "id": "af5cb71d-6a60-42c8-bdc5-08018c569330",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fcd41b21-fb42-4651-9bc1-bca6e0a09900",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef3c928-81f9-478a-b39c-e55d4399e853",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0198dc2e-cd82-48a6-8922-b9704493c420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee029bc3-2051-4a48-b314-d78e495b1ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4f4719d-048b-48a7-a59c-7dc2acc14c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45def967-7a4d-431a-9ba9-e26fce883ece",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a4606e-090b-49fd-aa45-6971b2b9f6df",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "800c19e8-b123-48dd-bbad-153e070a6516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e8eb0d-de1b-42cb-ac57-f042e5375b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fa81af8-fe90-4461-a539-20781099aea5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96014d29-f13c-4b0a-9780-0cd7089abd0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94b6673f-c657-4742-8811-431f287d94aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd35cc4a-e328-4e1e-92d4-77e1c1feee9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a6c224b-d455-40b2-933a-17da1af1e972"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14f7ac72-e4c1-4dd9-a6f1-2c23cb9a0cd2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d96bc9fc-5b1c-4ded-9d01-8ed09ebb97a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4be320bf-3b1d-4501-a402-bc7499573bc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f368fcda-27f4-4c9e-9669-e9ae92b4baf3"
            }
          }
        ]
      },
      {
        "id": "d3b24eea-3f08-4cfa-8575-46a274099331",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "26ba160d-1bb2-4365-886c-41ded67080cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77bc96ea-b29a-4b54-a6fd-f30aa303616d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c648fab1-4e9b-4701-bf43-b77de8ba1280",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabb25cf-a714-4c52-96c4-191af7294775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ec79b5-07fa-4e0f-9087-ddc62a94c29b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bf7420-000c-4605-8666-d3760683dfea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62472245-8789-4aae-8e3d-d7ce4a814480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f55c23-fd8c-40fb-9d9d-7cc7eed14ba3",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a5800b-a767-49c0-9cbd-d87f5710b537",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a4e6a0be-220f-402f-953b-0169afd41e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbed7f54-b564-4139-81d6-27386834f328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff9497ee-3079-4eec-b1d9-32843ff0845c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f52a513-ee6f-4575-a55a-b0cfde82cecc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afed4188-7da9-4a34-b964-474f0bd42782"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a85fee8-1669-4670-a51c-74988978afeb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12674397-184e-42a8-97ce-1cc96237b76f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9eef49fe-756f-408e-9229-3a49579e00f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "dcfb776c-4089-4b49-a1e4-1615bd925c54"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5aeb713-da53-42ae-af22-447ae2f4232b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2173bed5-46e4-4dfd-b275-52911fed4c12"
            }
          }
        ]
      },
      {
        "id": "2dd2744e-0862-434e-8287-9474c23c8a20",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "77417698-149f-4eb9-9886-f723f24f2848",
            "name": "Negative Testing",
            "item": [
              {
                "id": "691a6179-a71e-46f7-9593-949c311d40a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d61dcca0-989a-4dfa-8601-3c452e796165",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9b6c9d-457e-4ced-8bfe-27d36c10f8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6492becf-769f-434a-ac95-6e935ffd1042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7d2f0a-5ce0-4f0c-8211-de344a9c2a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1aaa34b-ebc8-4803-9419-3934be98de7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e89c5fa-e393-4f6f-978c-d657d3093de9",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75b7897-011c-4e33-aaf8-0ca9419caed6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "de0e9904-633a-4429-aacf-47c59b604ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2044288-1adb-4313-a9f7-59566ee0f181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db6ba769-29ef-4a5d-8616-096cd784d33a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab4d0c9c-7aee-46e7-ab5e-a6dc0c04b537",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b500ca4-5118-4dca-a284-434f389be4b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6b8e657-f79c-4f6c-8ee6-41256a683c34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dad8324-54a6-4c06-82af-c2a3108307ab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c9a45bc-72e8-4cdb-8e66-3abc14dcef16",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "77779d36-4f0d-4955-bfe3-f28dd65cb829"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b47c21e6-eb14-4c6f-a1b3-9607e7c15b1b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75da72e5-b5fd-44b9-aaa8-26dbefd38c0e"
            }
          }
        ]
      },
      {
        "id": "20ebd44b-3a48-47c3-9414-826a3682ed5d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d6ed2b48-4ac2-47b0-80f8-c472aacf9392",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6d37521-7cfa-4ef6-bada-f21b6bb28684",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5bb48c7-a46a-4926-94f1-cce9022325db",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965e56d6-205c-4946-9893-19488017797a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfeb37c-7421-4b01-9891-9aef24cb6b1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fbfd22-a946-43d5-80c2-fb7d49ac7229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6abb93e8-676f-4c93-9b31-8243c9b3c4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfcae52-e86f-466c-a345-01ecc410abea",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea48f0a-d2f1-4d6d-9076-e3e5e99be42a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "708b5574-e9e3-4ac6-9363-0b431c4ce298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ad584a-845a-4369-bc84-a36667d3b149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f6ee728-5f2f-4c95-89d3-c66cd0bbbfab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9757b0cd-868e-4925-b99b-34bd502b36d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e475def2-5ca8-4ebe-8799-4431a317a539"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e86d9d88-343f-447c-a38e-01ffb9996e3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "421cdff5-4138-427d-a2d8-7739b0dcbca0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a40bff5d-f2e8-41fa-9f5b-b9b62ca613c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "5d5b6442-0c4e-4bf6-bd54-c4c03dc99ad4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "921d4a31-8d61-477c-ae57-2f3af1ddad45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72894cb6-afb5-4e4a-a208-2315016c967d"
            }
          }
        ]
      },
      {
        "id": "5a7ef015-425f-4332-931f-00ced73153d7",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "0ca384f1-805d-4077-bc64-aa469be4b035",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1193,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 200,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 309,
        "pending": 0,
        "failed": 283
      },
      "testScripts": {
        "total": 602,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 591,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 38.14999999999997,
      "responseMin": 11,
      "responseMax": 312,
      "responseSd": 51.610439835366684,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663792249411,
      "completed": 1663792266195
    },
    "executions": [
      {
        "id": "4a970849-a18a-4736-86f4-07d8f04c3457",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 152,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "52b50f78-0580-422b-bbe5-8c1312de68d0",
          "httpRequestId": "f897f1ec-819b-435c-a74b-cff489cf3f63"
        },
        "item": {
          "id": "4a970849-a18a-4736-86f4-07d8f04c3457",
          "name": "did_json"
        },
        "response": {
          "id": "a7e73d13-ff6a-4440-875f-d817fea39eca",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "7ed2cc1e-9286-48f7-b682-f7072e543b8c",
        "cursor": {
          "ref": "aa828f24-e57f-4c1d-984c-7e0e765cec4b",
          "length": 152,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "73dbfbd9-4561-4c0e-b894-3efc41bcfe70"
        },
        "item": {
          "id": "7ed2cc1e-9286-48f7-b682-f7072e543b8c",
          "name": "did:invalid"
        },
        "response": {
          "id": "7f759a87-d6ee-4d0a-929d-18f18473a38d",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed2cc1e-9286-48f7-b682-f7072e543b8c",
        "cursor": {
          "ref": "aa828f24-e57f-4c1d-984c-7e0e765cec4b",
          "length": 152,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "73dbfbd9-4561-4c0e-b894-3efc41bcfe70"
        },
        "item": {
          "id": "7ed2cc1e-9286-48f7-b682-f7072e543b8c",
          "name": "did:invalid"
        },
        "response": {
          "id": "7f759a87-d6ee-4d0a-929d-18f18473a38d",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b005673c-5a75-4c6c-8dec-d5ec82e49739",
        "cursor": {
          "ref": "eadb5c2e-af75-4803-a15d-b5b268657cbd",
          "length": 152,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "40f51691-f21b-4a0d-a687-6a9ed94c12dc"
        },
        "item": {
          "id": "b005673c-5a75-4c6c-8dec-d5ec82e49739",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6d811015-82e8-405f-92fe-098715b40b93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 148,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "ce157e91-8dbc-4ed8-8f72-df487507e632",
        "cursor": {
          "ref": "5155ad47-d5ee-4343-8619-e5044d649da6",
          "length": 152,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "744dae6f-f190-4648-aaee-94b114c6b828"
        },
        "item": {
          "id": "ce157e91-8dbc-4ed8-8f72-df487507e632",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "035311a4-4604-48ed-bd0f-810ef82d6c4b",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6c1a0d9e-1848-4e58-a1ac-4d1ad1f4a901",
        "cursor": {
          "ref": "ce701190-e24a-434d-b37d-35e0da9c332f",
          "length": 152,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2b1d7eee-6db3-4b64-b0db-f291632a051b"
        },
        "item": {
          "id": "6c1a0d9e-1848-4e58-a1ac-4d1ad1f4a901",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "64bc97df-46d5-4a9e-977c-1f51d68eb737",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "35d47b13-26a3-4fba-9528-d225f437cbd4",
        "cursor": {
          "ref": "2fe4c1a4-c918-403b-adb1-7729ef0381ef",
          "length": 152,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dfafebf2-4c35-406b-9117-ea5b72bea8e6"
        },
        "item": {
          "id": "35d47b13-26a3-4fba-9528-d225f437cbd4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5a11fc38-5d60-4d62-824f-23afbca86b9c",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "35d47b13-26a3-4fba-9528-d225f437cbd4",
        "cursor": {
          "ref": "2fe4c1a4-c918-403b-adb1-7729ef0381ef",
          "length": 152,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dfafebf2-4c35-406b-9117-ea5b72bea8e6"
        },
        "item": {
          "id": "35d47b13-26a3-4fba-9528-d225f437cbd4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5a11fc38-5d60-4d62-824f-23afbca86b9c",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "74471a16-336f-4646-9748-f5d58ee56a06",
        "cursor": {
          "ref": "aa5712be-e284-4fd6-950f-2e103f7b0249",
          "length": 152,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5e81ab7c-ce73-40e1-b59d-0494021c5c14"
        },
        "item": {
          "id": "74471a16-336f-4646-9748-f5d58ee56a06",
          "name": "identifiers"
        },
        "response": {
          "id": "1ccc27c4-6b06-4f85-9e21-77d54ed22f02",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a1fc08-1afb-4b36-a2e1-187948b85284",
        "cursor": {
          "ref": "89d4a7ef-2c8a-4221-a867-3bb74dd159ca",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4754367f-9aa6-4a64-9500-c67ac94e51bc"
        },
        "item": {
          "id": "c5a1fc08-1afb-4b36-a2e1-187948b85284",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "eed73d17-069b-47a6-bf53-98944f57f8f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 279,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c5a1fc08-1afb-4b36-a2e1-187948b85284",
        "cursor": {
          "ref": "89d4a7ef-2c8a-4221-a867-3bb74dd159ca",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4754367f-9aa6-4a64-9500-c67ac94e51bc"
        },
        "item": {
          "id": "c5a1fc08-1afb-4b36-a2e1-187948b85284",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "eed73d17-069b-47a6-bf53-98944f57f8f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 279,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c5a1fc08-1afb-4b36-a2e1-187948b85284",
        "cursor": {
          "ref": "89d4a7ef-2c8a-4221-a867-3bb74dd159ca",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4754367f-9aa6-4a64-9500-c67ac94e51bc"
        },
        "item": {
          "id": "c5a1fc08-1afb-4b36-a2e1-187948b85284",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "eed73d17-069b-47a6-bf53-98944f57f8f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 279,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9c715205-88a1-426e-95dc-da7cd685fd53",
        "cursor": {
          "ref": "6042c470-7307-48a8-861b-3327d495372d",
          "length": 152,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1800927f-6842-4826-8fa2-4f59cdf429eb"
        },
        "item": {
          "id": "9c715205-88a1-426e-95dc-da7cd685fd53",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "367d10ff-4ae9-4485-baee-50e00f5d75a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "9c715205-88a1-426e-95dc-da7cd685fd53",
        "cursor": {
          "ref": "6042c470-7307-48a8-861b-3327d495372d",
          "length": 152,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1800927f-6842-4826-8fa2-4f59cdf429eb"
        },
        "item": {
          "id": "9c715205-88a1-426e-95dc-da7cd685fd53",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "367d10ff-4ae9-4485-baee-50e00f5d75a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "46eb160a-6629-4dba-b6ce-99e949e4b73b",
        "cursor": {
          "ref": "9d03a84a-a9b7-46eb-86a4-b6ac095a21d1",
          "length": 152,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1d5a014d-a15c-4f4c-b8de-b311274255b1"
        },
        "item": {
          "id": "46eb160a-6629-4dba-b6ce-99e949e4b73b",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "bf8d40aa-06f3-44a5-9baa-ffd737741645",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "46eb160a-6629-4dba-b6ce-99e949e4b73b",
        "cursor": {
          "ref": "9d03a84a-a9b7-46eb-86a4-b6ac095a21d1",
          "length": 152,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1d5a014d-a15c-4f4c-b8de-b311274255b1"
        },
        "item": {
          "id": "46eb160a-6629-4dba-b6ce-99e949e4b73b",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "bf8d40aa-06f3-44a5-9baa-ffd737741645",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "62adf1af-a59e-4eb4-b4bf-fba13b2bd4bf",
        "cursor": {
          "ref": "a49fe89f-f948-4b82-88f1-90c609d8b62a",
          "length": 152,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f6232aa5-9341-4cd4-9101-80bd1086cdcf"
        },
        "item": {
          "id": "62adf1af-a59e-4eb4-b4bf-fba13b2bd4bf",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "200a4c9f-745e-4be2-bb63-97467ae0d2f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "62adf1af-a59e-4eb4-b4bf-fba13b2bd4bf",
        "cursor": {
          "ref": "a49fe89f-f948-4b82-88f1-90c609d8b62a",
          "length": 152,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f6232aa5-9341-4cd4-9101-80bd1086cdcf"
        },
        "item": {
          "id": "62adf1af-a59e-4eb4-b4bf-fba13b2bd4bf",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "200a4c9f-745e-4be2-bb63-97467ae0d2f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "cde7dbcb-dde5-409b-bac6-6c6934e758f9",
        "cursor": {
          "ref": "35966d02-47b7-4024-a252-d4f2f4e4a741",
          "length": 152,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b4609ae7-7346-4bba-a837-b251d898d9bc"
        },
        "item": {
          "id": "cde7dbcb-dde5-409b-bac6-6c6934e758f9",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "8d25ef2b-3b4c-47e1-9a39-8821b76dde43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "cde7dbcb-dde5-409b-bac6-6c6934e758f9",
        "cursor": {
          "ref": "35966d02-47b7-4024-a252-d4f2f4e4a741",
          "length": 152,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b4609ae7-7346-4bba-a837-b251d898d9bc"
        },
        "item": {
          "id": "cde7dbcb-dde5-409b-bac6-6c6934e758f9",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "8d25ef2b-3b4c-47e1-9a39-8821b76dde43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "66f5ce47-f12f-497e-b085-776768139fe8",
        "cursor": {
          "ref": "734c48e5-61cd-447e-b53a-d98a31096b6f",
          "length": 152,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fe01dbfb-2f88-49d5-9b35-85cdcd109cb4"
        },
        "item": {
          "id": "66f5ce47-f12f-497e-b085-776768139fe8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6330a03e-3831-4101-8c26-224cda14e9d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "66f5ce47-f12f-497e-b085-776768139fe8",
        "cursor": {
          "ref": "734c48e5-61cd-447e-b53a-d98a31096b6f",
          "length": 152,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fe01dbfb-2f88-49d5-9b35-85cdcd109cb4"
        },
        "item": {
          "id": "66f5ce47-f12f-497e-b085-776768139fe8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6330a03e-3831-4101-8c26-224cda14e9d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "c4a7901b-deae-4d75-88c2-85a025d44be9",
        "cursor": {
          "ref": "550fa4ed-cd40-4c12-b4ed-3d205b4e4342",
          "length": 152,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "26a9bf34-c48d-4370-9ac8-d9c43dd1402e"
        },
        "item": {
          "id": "c4a7901b-deae-4d75-88c2-85a025d44be9",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "6f0e724f-fdfe-4db4-955d-c2455bc883cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "c4a7901b-deae-4d75-88c2-85a025d44be9",
        "cursor": {
          "ref": "550fa4ed-cd40-4c12-b4ed-3d205b4e4342",
          "length": 152,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "26a9bf34-c48d-4370-9ac8-d9c43dd1402e"
        },
        "item": {
          "id": "c4a7901b-deae-4d75-88c2-85a025d44be9",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "6f0e724f-fdfe-4db4-955d-c2455bc883cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "d6221c43-2307-4ddb-8c7d-4a1221fc6ecd",
        "cursor": {
          "ref": "bcda1b0a-d345-47f3-ab66-90980daf6de6",
          "length": 152,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "62b0bf25-bea4-46c6-a46b-7a4d4c3df2c4"
        },
        "item": {
          "id": "d6221c43-2307-4ddb-8c7d-4a1221fc6ecd",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "b6b80373-bbda-4d7b-895f-1c34a50275f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "d6221c43-2307-4ddb-8c7d-4a1221fc6ecd",
        "cursor": {
          "ref": "bcda1b0a-d345-47f3-ab66-90980daf6de6",
          "length": 152,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "62b0bf25-bea4-46c6-a46b-7a4d4c3df2c4"
        },
        "item": {
          "id": "d6221c43-2307-4ddb-8c7d-4a1221fc6ecd",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "b6b80373-bbda-4d7b-895f-1c34a50275f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "fe1bc2d7-620c-45cb-ad2f-4142bd876863",
        "cursor": {
          "ref": "cf878238-b9f0-453e-90be-0ee3863d5cf0",
          "length": 152,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9ea589f1-445d-482c-a906-d233bad3ed32"
        },
        "item": {
          "id": "fe1bc2d7-620c-45cb-ad2f-4142bd876863",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "30807123-e2c1-41dc-9197-21c04943370c",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "fe1bc2d7-620c-45cb-ad2f-4142bd876863",
        "cursor": {
          "ref": "cf878238-b9f0-453e-90be-0ee3863d5cf0",
          "length": 152,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9ea589f1-445d-482c-a906-d233bad3ed32"
        },
        "item": {
          "id": "fe1bc2d7-620c-45cb-ad2f-4142bd876863",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "30807123-e2c1-41dc-9197-21c04943370c",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "f0e9b760-1f95-4d7a-b447-ac1977e2ed80",
        "cursor": {
          "ref": "d2a4d2d1-c0d6-476e-b9b0-473c8532735d",
          "length": 152,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "75d1bdf2-abe8-4700-97df-1c6eb841b0f6"
        },
        "item": {
          "id": "f0e9b760-1f95-4d7a-b447-ac1977e2ed80",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "d6cbc6eb-6d29-4312-9033-cde33862e4ea",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f0e9b760-1f95-4d7a-b447-ac1977e2ed80",
        "cursor": {
          "ref": "d2a4d2d1-c0d6-476e-b9b0-473c8532735d",
          "length": 152,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "75d1bdf2-abe8-4700-97df-1c6eb841b0f6"
        },
        "item": {
          "id": "f0e9b760-1f95-4d7a-b447-ac1977e2ed80",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "d6cbc6eb-6d29-4312-9033-cde33862e4ea",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "9210e419-9518-4059-969e-208164f3e6be",
        "cursor": {
          "ref": "313b667f-48eb-4689-be53-5c0f994af209",
          "length": 152,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4b140e4d-dc09-409c-9436-fdb1b050a13e"
        },
        "item": {
          "id": "9210e419-9518-4059-969e-208164f3e6be",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "db1871c7-75b9-498c-9d10-21dfcd0c1b60",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "9210e419-9518-4059-969e-208164f3e6be",
        "cursor": {
          "ref": "313b667f-48eb-4689-be53-5c0f994af209",
          "length": 152,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4b140e4d-dc09-409c-9436-fdb1b050a13e"
        },
        "item": {
          "id": "9210e419-9518-4059-969e-208164f3e6be",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "db1871c7-75b9-498c-9d10-21dfcd0c1b60",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "3ec784e4-2442-4560-aa87-959057f90c2a",
        "cursor": {
          "ref": "ff323b61-2131-4410-90c3-e7f9a9d2e26a",
          "length": 152,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f31d2e18-b939-4fc9-b7aa-7da9ba69ce14"
        },
        "item": {
          "id": "3ec784e4-2442-4560-aa87-959057f90c2a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1fe1e797-3002-475b-85d7-fff38c3963fd",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "3ec784e4-2442-4560-aa87-959057f90c2a",
        "cursor": {
          "ref": "ff323b61-2131-4410-90c3-e7f9a9d2e26a",
          "length": 152,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f31d2e18-b939-4fc9-b7aa-7da9ba69ce14"
        },
        "item": {
          "id": "3ec784e4-2442-4560-aa87-959057f90c2a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1fe1e797-3002-475b-85d7-fff38c3963fd",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "73c8f908-c8d2-45bd-835f-cf75e019a8c3",
        "cursor": {
          "ref": "4acb2571-689c-4c57-bb1e-7aaa3fe9744e",
          "length": 152,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7ec1c7af-3339-40a3-9d1c-0b1c44eb2f73"
        },
        "item": {
          "id": "73c8f908-c8d2-45bd-835f-cf75e019a8c3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c5659b46-29ab-4c89-8742-7a0e14b6026b",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "73c8f908-c8d2-45bd-835f-cf75e019a8c3",
        "cursor": {
          "ref": "4acb2571-689c-4c57-bb1e-7aaa3fe9744e",
          "length": 152,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7ec1c7af-3339-40a3-9d1c-0b1c44eb2f73"
        },
        "item": {
          "id": "73c8f908-c8d2-45bd-835f-cf75e019a8c3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c5659b46-29ab-4c89-8742-7a0e14b6026b",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c62933dc-731d-40b7-8770-a2fbc9e60f5a",
        "cursor": {
          "ref": "23ebf315-9bdc-4962-b38a-807b3a0dae4b",
          "length": 152,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "15501eb7-18e1-4f21-b3f2-e51db7988011"
        },
        "item": {
          "id": "c62933dc-731d-40b7-8770-a2fbc9e60f5a",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "199cfdc4-410e-4a85-a277-6f7b6c3f9a3f",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "c62933dc-731d-40b7-8770-a2fbc9e60f5a",
        "cursor": {
          "ref": "23ebf315-9bdc-4962-b38a-807b3a0dae4b",
          "length": 152,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "15501eb7-18e1-4f21-b3f2-e51db7988011"
        },
        "item": {
          "id": "c62933dc-731d-40b7-8770-a2fbc9e60f5a",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "199cfdc4-410e-4a85-a277-6f7b6c3f9a3f",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "98ff6538-2a12-4a1b-8b46-400b77093bcb",
        "cursor": {
          "ref": "6843d53e-bec2-4392-b414-cc32de0f96be",
          "length": 152,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4e414a38-7c9f-430c-922b-3a466a8afb05"
        },
        "item": {
          "id": "98ff6538-2a12-4a1b-8b46-400b77093bcb",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "e8c7801b-da15-4d14-9f45-994b1a7e3393",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "98ff6538-2a12-4a1b-8b46-400b77093bcb",
        "cursor": {
          "ref": "6843d53e-bec2-4392-b414-cc32de0f96be",
          "length": 152,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4e414a38-7c9f-430c-922b-3a466a8afb05"
        },
        "item": {
          "id": "98ff6538-2a12-4a1b-8b46-400b77093bcb",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "e8c7801b-da15-4d14-9f45-994b1a7e3393",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "dfc3b016-937b-42de-b29d-30933753ebe4",
        "cursor": {
          "ref": "03eeb7bb-edc9-4587-b436-f47965d8e583",
          "length": 152,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "23b8e471-8bd0-4e02-a0c1-4adc9ecdb968"
        },
        "item": {
          "id": "dfc3b016-937b-42de-b29d-30933753ebe4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "71a5d075-9981-4ede-8c1f-3e2bca9515a8",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "dfc3b016-937b-42de-b29d-30933753ebe4",
        "cursor": {
          "ref": "03eeb7bb-edc9-4587-b436-f47965d8e583",
          "length": 152,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "23b8e471-8bd0-4e02-a0c1-4adc9ecdb968"
        },
        "item": {
          "id": "dfc3b016-937b-42de-b29d-30933753ebe4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "71a5d075-9981-4ede-8c1f-3e2bca9515a8",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "4b6e2248-d2cf-427d-b1dd-8fa3fc52270c",
        "cursor": {
          "ref": "962f707f-5f78-44a7-bde6-878144456f0f",
          "length": 152,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bc064eea-1bcf-492c-b35b-11581e90c2eb"
        },
        "item": {
          "id": "4b6e2248-d2cf-427d-b1dd-8fa3fc52270c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8446daf1-fdae-400e-af65-c56207cdc02c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4b6e2248-d2cf-427d-b1dd-8fa3fc52270c",
        "cursor": {
          "ref": "962f707f-5f78-44a7-bde6-878144456f0f",
          "length": 152,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bc064eea-1bcf-492c-b35b-11581e90c2eb"
        },
        "item": {
          "id": "4b6e2248-d2cf-427d-b1dd-8fa3fc52270c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8446daf1-fdae-400e-af65-c56207cdc02c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "17dc7191-d6e3-49bc-b086-6fec6f9cba01",
        "cursor": {
          "ref": "43d5d7b7-b7eb-4a66-a8c2-81b2cebd187d",
          "length": 152,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "14a9f2cb-713b-463d-a184-ddd612834bb3"
        },
        "item": {
          "id": "17dc7191-d6e3-49bc-b086-6fec6f9cba01",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "b0576924-b075-49ac-83e4-22de9942a624",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "17dc7191-d6e3-49bc-b086-6fec6f9cba01",
        "cursor": {
          "ref": "43d5d7b7-b7eb-4a66-a8c2-81b2cebd187d",
          "length": 152,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "14a9f2cb-713b-463d-a184-ddd612834bb3"
        },
        "item": {
          "id": "17dc7191-d6e3-49bc-b086-6fec6f9cba01",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "b0576924-b075-49ac-83e4-22de9942a624",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9393bff0-2c99-425e-9391-5699c9f6fc27",
        "cursor": {
          "ref": "685947f3-537d-48f0-bef9-9c3e186b78ad",
          "length": 152,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cdb59a1c-cb53-4aeb-8c9c-7869e0721772"
        },
        "item": {
          "id": "9393bff0-2c99-425e-9391-5699c9f6fc27",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b9759dd9-f6ef-4446-833b-eed168dd8684",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "9393bff0-2c99-425e-9391-5699c9f6fc27",
        "cursor": {
          "ref": "685947f3-537d-48f0-bef9-9c3e186b78ad",
          "length": 152,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cdb59a1c-cb53-4aeb-8c9c-7869e0721772"
        },
        "item": {
          "id": "9393bff0-2c99-425e-9391-5699c9f6fc27",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b9759dd9-f6ef-4446-833b-eed168dd8684",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "945655ac-c92b-451b-b988-d6639cc91ef6",
        "cursor": {
          "ref": "0589867f-cdcc-44c4-911e-4a7a994cc224",
          "length": 152,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5802b695-6af3-453c-b091-89c7e8cc2723"
        },
        "item": {
          "id": "945655ac-c92b-451b-b988-d6639cc91ef6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6bd26a1c-55eb-4087-9404-1e802f29c414",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "945655ac-c92b-451b-b988-d6639cc91ef6",
        "cursor": {
          "ref": "0589867f-cdcc-44c4-911e-4a7a994cc224",
          "length": 152,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5802b695-6af3-453c-b091-89c7e8cc2723"
        },
        "item": {
          "id": "945655ac-c92b-451b-b988-d6639cc91ef6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6bd26a1c-55eb-4087-9404-1e802f29c414",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "487f1a00-c19e-4ea4-96da-278119deef92",
        "cursor": {
          "ref": "18e8534d-2e9c-4022-abe2-b362ee5c73e1",
          "length": 152,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "32253807-13e0-437a-97e5-58a95d6dd958"
        },
        "item": {
          "id": "487f1a00-c19e-4ea4-96da-278119deef92",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "8e70cdbc-2e26-4f8e-99c1-6eb3f1c5b907",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "487f1a00-c19e-4ea4-96da-278119deef92",
        "cursor": {
          "ref": "18e8534d-2e9c-4022-abe2-b362ee5c73e1",
          "length": 152,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "32253807-13e0-437a-97e5-58a95d6dd958"
        },
        "item": {
          "id": "487f1a00-c19e-4ea4-96da-278119deef92",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "8e70cdbc-2e26-4f8e-99c1-6eb3f1c5b907",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "57b1e692-57fc-4d75-8f97-3303e28d49ac",
        "cursor": {
          "ref": "e681dc4e-9895-47b2-a309-d2d099664cd3",
          "length": 152,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0f13c21c-92b0-48d4-909d-5d6c2b9a774b"
        },
        "item": {
          "id": "57b1e692-57fc-4d75-8f97-3303e28d49ac",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "d8bf4f56-3004-4f1e-a4dc-458c0ef17ecb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "57b1e692-57fc-4d75-8f97-3303e28d49ac",
        "cursor": {
          "ref": "e681dc4e-9895-47b2-a309-d2d099664cd3",
          "length": 152,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0f13c21c-92b0-48d4-909d-5d6c2b9a774b"
        },
        "item": {
          "id": "57b1e692-57fc-4d75-8f97-3303e28d49ac",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "d8bf4f56-3004-4f1e-a4dc-458c0ef17ecb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "963e3dce-dded-4aca-9738-b72f34bb4072",
        "cursor": {
          "ref": "635d673e-e1b8-48c4-b038-05ebe9b6fe67",
          "length": 152,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2105b371-30e7-46c1-b76a-c5c65c23baca"
        },
        "item": {
          "id": "963e3dce-dded-4aca-9738-b72f34bb4072",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7b06a971-5084-4f0f-840b-bd16ba0a1835",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "963e3dce-dded-4aca-9738-b72f34bb4072",
        "cursor": {
          "ref": "635d673e-e1b8-48c4-b038-05ebe9b6fe67",
          "length": 152,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2105b371-30e7-46c1-b76a-c5c65c23baca"
        },
        "item": {
          "id": "963e3dce-dded-4aca-9738-b72f34bb4072",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7b06a971-5084-4f0f-840b-bd16ba0a1835",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "168b9556-a053-48f9-8a89-8b93a13d2134",
        "cursor": {
          "ref": "1651786b-a33e-48b9-886c-8f8bce230851",
          "length": 152,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c2abbede-5cfe-4e1b-afe3-7bd9c69ddc90"
        },
        "item": {
          "id": "168b9556-a053-48f9-8a89-8b93a13d2134",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "48c678ec-619e-4ff4-a6d3-5c63a14db48e",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "168b9556-a053-48f9-8a89-8b93a13d2134",
        "cursor": {
          "ref": "1651786b-a33e-48b9-886c-8f8bce230851",
          "length": 152,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c2abbede-5cfe-4e1b-afe3-7bd9c69ddc90"
        },
        "item": {
          "id": "168b9556-a053-48f9-8a89-8b93a13d2134",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "48c678ec-619e-4ff4-a6d3-5c63a14db48e",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "9cba74f7-714d-4c77-8b36-feb846956876",
        "cursor": {
          "ref": "77acc25a-7986-4ce5-897e-e94a7057bbe8",
          "length": 152,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f583d5f7-6975-4e50-a23d-b9d2137a6ce6"
        },
        "item": {
          "id": "9cba74f7-714d-4c77-8b36-feb846956876",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8d9ce46c-00e5-4d52-a86f-84cd872bb94c",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "9cba74f7-714d-4c77-8b36-feb846956876",
        "cursor": {
          "ref": "77acc25a-7986-4ce5-897e-e94a7057bbe8",
          "length": 152,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f583d5f7-6975-4e50-a23d-b9d2137a6ce6"
        },
        "item": {
          "id": "9cba74f7-714d-4c77-8b36-feb846956876",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8d9ce46c-00e5-4d52-a86f-84cd872bb94c",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "ede7c372-bb94-4af4-8966-16d648a393df",
        "cursor": {
          "ref": "80354cd4-4f0c-4ff9-b751-109f2df2845f",
          "length": 152,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "704e48c7-0693-4cc6-b6ae-f3cfa4dff429"
        },
        "item": {
          "id": "ede7c372-bb94-4af4-8966-16d648a393df",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "923b5995-e802-4bb2-bdca-a617c65b0306",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "ede7c372-bb94-4af4-8966-16d648a393df",
        "cursor": {
          "ref": "80354cd4-4f0c-4ff9-b751-109f2df2845f",
          "length": 152,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "704e48c7-0693-4cc6-b6ae-f3cfa4dff429"
        },
        "item": {
          "id": "ede7c372-bb94-4af4-8966-16d648a393df",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "923b5995-e802-4bb2-bdca-a617c65b0306",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "223c57ee-9aeb-4304-9480-d9e7a11c6e12",
        "cursor": {
          "ref": "3081776a-ec01-49ce-b8db-aa083e975f04",
          "length": 152,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "352f196e-bde7-45a7-a188-9a93e4eca16c"
        },
        "item": {
          "id": "223c57ee-9aeb-4304-9480-d9e7a11c6e12",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5aefd3c5-0b94-4ac2-bba8-6891fa5fc4f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "223c57ee-9aeb-4304-9480-d9e7a11c6e12",
        "cursor": {
          "ref": "3081776a-ec01-49ce-b8db-aa083e975f04",
          "length": 152,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "352f196e-bde7-45a7-a188-9a93e4eca16c"
        },
        "item": {
          "id": "223c57ee-9aeb-4304-9480-d9e7a11c6e12",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5aefd3c5-0b94-4ac2-bba8-6891fa5fc4f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "95cf4201-0677-42ce-bbaf-b2580ae27215",
        "cursor": {
          "ref": "45acc01c-7fb7-45e1-ae3a-cc11bf967cd3",
          "length": 152,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "abc3591b-0b12-40c9-b208-1fbd679549f2"
        },
        "item": {
          "id": "95cf4201-0677-42ce-bbaf-b2580ae27215",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "b0486c22-5fab-466e-992e-5df8d43264f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "95cf4201-0677-42ce-bbaf-b2580ae27215",
        "cursor": {
          "ref": "45acc01c-7fb7-45e1-ae3a-cc11bf967cd3",
          "length": 152,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "abc3591b-0b12-40c9-b208-1fbd679549f2"
        },
        "item": {
          "id": "95cf4201-0677-42ce-bbaf-b2580ae27215",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "b0486c22-5fab-466e-992e-5df8d43264f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "9592d3e4-0ff9-4ba3-b4f2-a30aa5ea7a33",
        "cursor": {
          "ref": "1818b5d4-b4f9-4d51-8409-1de5e74fb92c",
          "length": 152,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d7c67f40-7d48-4ace-95a2-feb0f48e8caa"
        },
        "item": {
          "id": "9592d3e4-0ff9-4ba3-b4f2-a30aa5ea7a33",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "3f90b9cf-d8fa-48e1-8955-b610e2c34f28",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "9592d3e4-0ff9-4ba3-b4f2-a30aa5ea7a33",
        "cursor": {
          "ref": "1818b5d4-b4f9-4d51-8409-1de5e74fb92c",
          "length": 152,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d7c67f40-7d48-4ace-95a2-feb0f48e8caa"
        },
        "item": {
          "id": "9592d3e4-0ff9-4ba3-b4f2-a30aa5ea7a33",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "3f90b9cf-d8fa-48e1-8955-b610e2c34f28",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "5bbfc7cf-a835-43b9-b3c0-1b956fb90560",
        "cursor": {
          "ref": "7484589f-98c9-4a68-a8b6-c40defc085de",
          "length": 152,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9c5c7c82-bb4e-4917-8c31-643e74d10720"
        },
        "item": {
          "id": "5bbfc7cf-a835-43b9-b3c0-1b956fb90560",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "c43d934c-7719-40a2-abc0-f1f5a27a6f3e",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "5bbfc7cf-a835-43b9-b3c0-1b956fb90560",
        "cursor": {
          "ref": "7484589f-98c9-4a68-a8b6-c40defc085de",
          "length": 152,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9c5c7c82-bb4e-4917-8c31-643e74d10720"
        },
        "item": {
          "id": "5bbfc7cf-a835-43b9-b3c0-1b956fb90560",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "c43d934c-7719-40a2-abc0-f1f5a27a6f3e",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "f4577803-4e91-416e-815e-9022244b780d",
        "cursor": {
          "ref": "208aa8f1-c7a4-4267-94b4-dda53860c21b",
          "length": 152,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cd5fbd65-eec9-449e-8b6c-2fbc708693b0"
        },
        "item": {
          "id": "f4577803-4e91-416e-815e-9022244b780d",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "a8fbc63d-4afb-4c96-8fd5-480fba676971",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "f4577803-4e91-416e-815e-9022244b780d",
        "cursor": {
          "ref": "208aa8f1-c7a4-4267-94b4-dda53860c21b",
          "length": 152,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cd5fbd65-eec9-449e-8b6c-2fbc708693b0"
        },
        "item": {
          "id": "f4577803-4e91-416e-815e-9022244b780d",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "a8fbc63d-4afb-4c96-8fd5-480fba676971",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "e73144c0-8f9e-4d60-a8ef-1212c6d0684d",
        "cursor": {
          "ref": "a0b21e66-219c-462b-b26b-b28c34816ec4",
          "length": 152,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "294d35c3-c057-4863-bb92-e5ee58c7df57"
        },
        "item": {
          "id": "e73144c0-8f9e-4d60-a8ef-1212c6d0684d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1bd9c9c4-379d-47ed-9daf-bfb5a40ef700",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e73144c0-8f9e-4d60-a8ef-1212c6d0684d",
        "cursor": {
          "ref": "a0b21e66-219c-462b-b26b-b28c34816ec4",
          "length": 152,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "294d35c3-c057-4863-bb92-e5ee58c7df57"
        },
        "item": {
          "id": "e73144c0-8f9e-4d60-a8ef-1212c6d0684d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1bd9c9c4-379d-47ed-9daf-bfb5a40ef700",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "20b3fe3a-7758-47f5-b841-8a6212725fba",
        "cursor": {
          "ref": "6482f53f-921f-4c38-b2b5-54d085463872",
          "length": 152,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d7879636-af8a-4052-8b32-c1f3650566ab"
        },
        "item": {
          "id": "20b3fe3a-7758-47f5-b841-8a6212725fba",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e8b4f125-56fd-4f5d-b0d3-8b5cb2ae8547",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "20b3fe3a-7758-47f5-b841-8a6212725fba",
        "cursor": {
          "ref": "6482f53f-921f-4c38-b2b5-54d085463872",
          "length": 152,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d7879636-af8a-4052-8b32-c1f3650566ab"
        },
        "item": {
          "id": "20b3fe3a-7758-47f5-b841-8a6212725fba",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e8b4f125-56fd-4f5d-b0d3-8b5cb2ae8547",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "18c1bb3a-b9d8-47c9-9656-ba00ec0be12c",
        "cursor": {
          "ref": "3915ecfe-2a9c-466b-9ce2-61080e57f113",
          "length": 152,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "27588de9-d59a-432a-9746-c3f8e2cd18f3"
        },
        "item": {
          "id": "18c1bb3a-b9d8-47c9-9656-ba00ec0be12c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "af778cd2-46ca-4f2b-b6b7-29ccc03e761e",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c1bb3a-b9d8-47c9-9656-ba00ec0be12c",
        "cursor": {
          "ref": "3915ecfe-2a9c-466b-9ce2-61080e57f113",
          "length": 152,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "27588de9-d59a-432a-9746-c3f8e2cd18f3"
        },
        "item": {
          "id": "18c1bb3a-b9d8-47c9-9656-ba00ec0be12c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "af778cd2-46ca-4f2b-b6b7-29ccc03e761e",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a84015-cf7e-4c9e-902d-e6e7e7a5e706",
        "cursor": {
          "ref": "4146b3cb-bbfd-4b84-8fe1-b527d9bca679",
          "length": 152,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0864f550-3de4-4ed7-aaea-300ca59bec93"
        },
        "item": {
          "id": "92a84015-cf7e-4c9e-902d-e6e7e7a5e706",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c2d6bfe5-45be-410b-a764-6c39db5359df",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a84015-cf7e-4c9e-902d-e6e7e7a5e706",
        "cursor": {
          "ref": "4146b3cb-bbfd-4b84-8fe1-b527d9bca679",
          "length": 152,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0864f550-3de4-4ed7-aaea-300ca59bec93"
        },
        "item": {
          "id": "92a84015-cf7e-4c9e-902d-e6e7e7a5e706",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c2d6bfe5-45be-410b-a764-6c39db5359df",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833fc0e9-227e-4ed1-a403-081814159ca3",
        "cursor": {
          "ref": "f5183899-5d3e-4838-9645-eac3645e2974",
          "length": 152,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b4f04ced-3af9-4c14-bbd3-fd61d3c1b555"
        },
        "item": {
          "id": "833fc0e9-227e-4ed1-a403-081814159ca3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b8c89ed4-7928-4e6e-a0d9-261143ff403e",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "833fc0e9-227e-4ed1-a403-081814159ca3",
        "cursor": {
          "ref": "f5183899-5d3e-4838-9645-eac3645e2974",
          "length": 152,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b4f04ced-3af9-4c14-bbd3-fd61d3c1b555"
        },
        "item": {
          "id": "833fc0e9-227e-4ed1-a403-081814159ca3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b8c89ed4-7928-4e6e-a0d9-261143ff403e",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "9bf7fb8c-49a6-43ab-964d-e66e9da8519b",
        "cursor": {
          "ref": "79aa48f9-f854-44b0-9534-2ca6fbef458b",
          "length": 152,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "003ecedf-b550-4052-942f-1871eeb62de0"
        },
        "item": {
          "id": "9bf7fb8c-49a6-43ab-964d-e66e9da8519b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "473c4f9f-bc6a-4671-81a9-d137e9b9cc90",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf7fb8c-49a6-43ab-964d-e66e9da8519b",
        "cursor": {
          "ref": "79aa48f9-f854-44b0-9534-2ca6fbef458b",
          "length": 152,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "003ecedf-b550-4052-942f-1871eeb62de0"
        },
        "item": {
          "id": "9bf7fb8c-49a6-43ab-964d-e66e9da8519b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "473c4f9f-bc6a-4671-81a9-d137e9b9cc90",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6704a68-61ac-41fe-977a-e3e1d05f9496",
        "cursor": {
          "ref": "3d2c4cb4-950c-410f-b295-fa4c0a7886e7",
          "length": 152,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7f0c7be6-0a8f-4275-8274-d64eda757749"
        },
        "item": {
          "id": "d6704a68-61ac-41fe-977a-e3e1d05f9496",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8a928cc1-557f-4292-b16f-c64c22c9ec3a",
          "status": "Created",
          "code": 201,
          "responseTime": 148,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6704a68-61ac-41fe-977a-e3e1d05f9496",
        "cursor": {
          "ref": "3d2c4cb4-950c-410f-b295-fa4c0a7886e7",
          "length": 152,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7f0c7be6-0a8f-4275-8274-d64eda757749"
        },
        "item": {
          "id": "d6704a68-61ac-41fe-977a-e3e1d05f9496",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8a928cc1-557f-4292-b16f-c64c22c9ec3a",
          "status": "Created",
          "code": 201,
          "responseTime": 148,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667b6c04-31e8-4054-8e14-66dd6de029a4",
        "cursor": {
          "ref": "755aa8e7-0d67-41a0-af42-3d755beb3ee0",
          "length": 152,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1af51df3-b304-455c-a304-d4e0abb8b76f"
        },
        "item": {
          "id": "667b6c04-31e8-4054-8e14-66dd6de029a4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "159bb7e0-11af-432b-95d3-bda816c9173a",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667b6c04-31e8-4054-8e14-66dd6de029a4",
        "cursor": {
          "ref": "755aa8e7-0d67-41a0-af42-3d755beb3ee0",
          "length": 152,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1af51df3-b304-455c-a304-d4e0abb8b76f"
        },
        "item": {
          "id": "667b6c04-31e8-4054-8e14-66dd6de029a4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "159bb7e0-11af-432b-95d3-bda816c9173a",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad74f555-a03f-4936-8a1c-365276d27d3e",
        "cursor": {
          "ref": "2e5dcae9-d172-4cc4-a79d-f0c455ba4f95",
          "length": 152,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "538ef59d-f684-4020-875e-b11fed2d995d"
        },
        "item": {
          "id": "ad74f555-a03f-4936-8a1c-365276d27d3e",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "06210ac4-bcd6-413e-af47-0fb76d33ed02",
          "status": "Created",
          "code": 201,
          "responseTime": 49,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad74f555-a03f-4936-8a1c-365276d27d3e",
        "cursor": {
          "ref": "2e5dcae9-d172-4cc4-a79d-f0c455ba4f95",
          "length": 152,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "538ef59d-f684-4020-875e-b11fed2d995d"
        },
        "item": {
          "id": "ad74f555-a03f-4936-8a1c-365276d27d3e",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "06210ac4-bcd6-413e-af47-0fb76d33ed02",
          "status": "Created",
          "code": 201,
          "responseTime": 49,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4565aaf-710b-4329-9377-4b9622c8854c",
        "cursor": {
          "ref": "9d76401f-1eae-4edd-bef8-f1d08c1abe53",
          "length": 152,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "86500611-f674-4db9-9f97-2826d4ade84e"
        },
        "item": {
          "id": "b4565aaf-710b-4329-9377-4b9622c8854c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ef504c0c-1fa7-4393-8d3c-5babe6039357",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b4565aaf-710b-4329-9377-4b9622c8854c",
        "cursor": {
          "ref": "9d76401f-1eae-4edd-bef8-f1d08c1abe53",
          "length": 152,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "86500611-f674-4db9-9f97-2826d4ade84e"
        },
        "item": {
          "id": "b4565aaf-710b-4329-9377-4b9622c8854c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ef504c0c-1fa7-4393-8d3c-5babe6039357",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "46073ace-37ea-4e28-a8cc-8477e53b1dd8",
        "cursor": {
          "ref": "ba3a2a23-4450-44c6-809c-d8ecc4e5b027",
          "length": 152,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d44b775e-affe-4ae4-bbf4-eeae9e59f1a0"
        },
        "item": {
          "id": "46073ace-37ea-4e28-a8cc-8477e53b1dd8",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3b3d9086-4473-4836-aa1e-422cd43b9d24",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 13,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e049e9dc-99ff-4ba7-9f41-2e59a3609421",
        "cursor": {
          "ref": "5c0c6cbf-ed93-4997-881e-15a469748159",
          "length": 152,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ca0a5ab4-dfe5-4bc8-9705-c15dd2421218"
        },
        "item": {
          "id": "e049e9dc-99ff-4ba7-9f41-2e59a3609421",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c6096b5d-902b-48a4-bcce-51e1c6ea4a7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 13,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e049e9dc-99ff-4ba7-9f41-2e59a3609421",
        "cursor": {
          "ref": "5c0c6cbf-ed93-4997-881e-15a469748159",
          "length": 152,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ca0a5ab4-dfe5-4bc8-9705-c15dd2421218"
        },
        "item": {
          "id": "e049e9dc-99ff-4ba7-9f41-2e59a3609421",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c6096b5d-902b-48a4-bcce-51e1c6ea4a7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 13,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8ff1d382-0a68-4efa-aca8-90f7dc850ab9",
        "cursor": {
          "ref": "404d5283-08c3-4be9-ac76-74023513e9b6",
          "length": 152,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4ae647e3-c5eb-4ab6-a57b-624c833dcd53"
        },
        "item": {
          "id": "8ff1d382-0a68-4efa-aca8-90f7dc850ab9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4da69339-ae21-4700-9bfd-432ebcb1355d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 15,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8e063e91-f5c5-433d-869d-caf258f06081",
        "cursor": {
          "ref": "d1462409-7326-4617-8d06-5c7663b30423",
          "length": 152,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "51af95bb-97a3-4671-b66b-9ca4275d5904"
        },
        "item": {
          "id": "8e063e91-f5c5-433d-869d-caf258f06081",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "400e1ad3-3f77-4d86-b4ac-7ddfd785145c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "cbbca764-e51d-4b69-947c-ba5d168d6198",
        "cursor": {
          "ref": "4acb54aa-2587-4dbb-a677-a92612e1156a",
          "length": 152,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4fbc0e44-cd5e-4ffc-b116-af10b892748f"
        },
        "item": {
          "id": "cbbca764-e51d-4b69-947c-ba5d168d6198",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fd343b14-3cd1-43fd-aa0e-17a859547ac1",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5a475a7c-41f7-430b-98e5-70177baffbf9",
        "cursor": {
          "ref": "7d5b7457-e558-4b8f-a6f0-05faba6a9e96",
          "length": 152,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "065b3f04-56b3-4b8f-aa60-786f28edc56b"
        },
        "item": {
          "id": "5a475a7c-41f7-430b-98e5-70177baffbf9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1e522b43-4c96-410e-a7c9-566baeb39c3b",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "fa6baad9-e915-4c89-9c3a-ea4bc926827e",
        "cursor": {
          "ref": "97a0fc05-f9e8-4264-99ab-8d13fbc41546",
          "length": 152,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a55e7618-5861-404a-a77d-5112c181ef38"
        },
        "item": {
          "id": "fa6baad9-e915-4c89-9c3a-ea4bc926827e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e1c19302-2bc1-466b-aac6-367095695b44",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "a88b62c2-1e05-4709-b56c-69b7d000078a",
        "cursor": {
          "ref": "9b14fa20-d1ce-4414-b923-e4867715cd14",
          "length": 152,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7c6023a2-719a-4111-a4a2-f4f06b9a2e4b"
        },
        "item": {
          "id": "a88b62c2-1e05-4709-b56c-69b7d000078a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a1b3b019-a80e-49e0-ae42-03c096e2a0f7",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "3b033957-302e-4a23-a2b9-77c2a8108aef",
        "cursor": {
          "ref": "eb858415-66e8-4365-9fbe-bfbb2a96c327",
          "length": 152,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "53c1a59e-738f-48e2-a6ce-4ddb3325a452"
        },
        "item": {
          "id": "3b033957-302e-4a23-a2b9-77c2a8108aef",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "475f172e-dbb6-4782-85a6-c8796efce3d8",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "2404c47d-daed-4a43-9986-d063468dbaf5",
        "cursor": {
          "ref": "6551a362-1c1a-4650-a84d-9fe3c93646fd",
          "length": 152,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "636dc769-b492-451e-8f4d-7a0e7acb393c"
        },
        "item": {
          "id": "2404c47d-daed-4a43-9986-d063468dbaf5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "73aa1ebf-0872-44c7-96e5-53ffd5153abe",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "0923ffcf-b0f0-4e77-90b7-6837ba1b32d0",
        "cursor": {
          "ref": "b214c91d-d890-4185-8693-8b9b6a4c742b",
          "length": 152,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b4b7aae2-cf4d-4eb6-aa04-6fba9ea87dbc"
        },
        "item": {
          "id": "0923ffcf-b0f0-4e77-90b7-6837ba1b32d0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f8279137-408e-4178-836a-56188783ef18",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "3fcc1c82-86e3-4b00-b5d0-4a9ca4921fe8",
        "cursor": {
          "ref": "012ec034-6d97-4827-94b2-9394aaa74a2d",
          "length": 152,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3a4a89df-084e-43e6-afb4-06b494774e6d"
        },
        "item": {
          "id": "3fcc1c82-86e3-4b00-b5d0-4a9ca4921fe8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3213e5ac-fca7-48ee-b933-4697eac3e27e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "208e2b0b-6bc5-49c6-b6f8-ee8e6b0592a2",
        "cursor": {
          "ref": "92e7ab14-f5f4-46d1-ad34-433b04bf1599",
          "length": 152,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2417dc1e-c49f-4835-b775-331087c279ca"
        },
        "item": {
          "id": "208e2b0b-6bc5-49c6-b6f8-ee8e6b0592a2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "986b74ea-d4d1-4971-897b-1d0bb2c04948",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "0e4057bd-30d6-4c9d-abe2-578f6daaae7f",
        "cursor": {
          "ref": "2adcca1b-5a41-4c55-816c-909ffadcbd31",
          "length": 152,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "198bd3e2-87a6-4961-8990-f55198caf5a1"
        },
        "item": {
          "id": "0e4057bd-30d6-4c9d-abe2-578f6daaae7f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ce310e60-1faf-4100-b0a3-f6af2701dc9f",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "44068997-a1b5-45ba-ab70-742d9d24c811",
        "cursor": {
          "ref": "d24e8f25-3e2b-41f5-8610-95a873efb169",
          "length": 152,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a791ea05-79e8-4a6f-b0ed-0d807c47b15f"
        },
        "item": {
          "id": "44068997-a1b5-45ba-ab70-742d9d24c811",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "306e6132-88d3-4f1d-a2dd-241211e2f4ef",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "2677459b-01ec-4960-b303-47dad7feb570",
        "cursor": {
          "ref": "fd671924-09cc-438f-a543-cca468b622d7",
          "length": 152,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cb331503-9e06-41d5-aec1-e933d2e68f9b"
        },
        "item": {
          "id": "2677459b-01ec-4960-b303-47dad7feb570",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "95b99a73-0f43-475c-b9ec-bed9c718eabe",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "54d265e2-ed33-421f-a79e-298476322af5",
        "cursor": {
          "ref": "1d8aa025-a967-4251-bad3-c3efc99aa6b3",
          "length": 152,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a324c794-154e-4006-874e-09de5126f5fd"
        },
        "item": {
          "id": "54d265e2-ed33-421f-a79e-298476322af5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2759fb6e-6a82-4db7-baa6-1b2dab1daa2c",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6b0eb1e8-d52a-46c5-af61-8e0ed827b2ed",
        "cursor": {
          "ref": "de5b754e-8589-423b-a595-c23635250a3b",
          "length": 152,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bce47de3-f984-44aa-b0a2-2d9f11254002"
        },
        "item": {
          "id": "6b0eb1e8-d52a-46c5-af61-8e0ed827b2ed",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "faa6ddf7-f572-4ef2-a6ca-f1f357931c12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ed8158d2-b5d5-4849-9cdb-f5fac7a67d6a",
        "cursor": {
          "ref": "becd82a3-dd24-4517-ad16-6163a0b79675",
          "length": 152,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9605eb3e-7001-4387-97fc-f47674292829"
        },
        "item": {
          "id": "ed8158d2-b5d5-4849-9cdb-f5fac7a67d6a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2ddab058-6290-4e74-afd3-f3df3b57af4a",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "fa579ba0-f359-450d-9251-88fec6f540e9",
        "cursor": {
          "ref": "a382267a-2e3d-4c96-b0e5-50111294cd1e",
          "length": 152,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "295c395c-6a7a-4fcd-a6ac-30ca66e06519"
        },
        "item": {
          "id": "fa579ba0-f359-450d-9251-88fec6f540e9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e02f4dd1-e4de-4cfe-994e-ecfdb0f06d6f",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4fe10a51-53d4-4775-ac27-77ef0933eef6",
        "cursor": {
          "ref": "7945fe43-b19d-4cff-b879-ca81df31f436",
          "length": 152,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "63b6b581-0c33-4493-83ee-d7fee7e70ae0"
        },
        "item": {
          "id": "4fe10a51-53d4-4775-ac27-77ef0933eef6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5765cc8b-61c6-4863-9cf1-c42503b8b6aa",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "917baf9b-c4ee-4690-954f-c9f1844e4159",
        "cursor": {
          "ref": "855ccabf-d405-4eaf-b71d-072ef8d6a3dd",
          "length": 152,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "58137161-5e7e-4fa3-9f54-d559899469c8"
        },
        "item": {
          "id": "917baf9b-c4ee-4690-954f-c9f1844e4159",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a58f1200-ccec-43db-89b0-4297db35e821",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "0fd5d382-3db3-4079-a465-af8c9578135a",
        "cursor": {
          "ref": "5010825c-ad5a-4b26-ab7a-f12a78df8d7f",
          "length": 152,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "44f5a8af-c4af-4d6c-ae71-837282bc9c05"
        },
        "item": {
          "id": "0fd5d382-3db3-4079-a465-af8c9578135a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "adffd8fc-45d3-4837-a6cf-6cfd2dd0060f",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "074c9d4d-4185-4d25-83b7-b8cfc4a05d8b",
        "cursor": {
          "ref": "e11dd08e-366e-4169-b1d6-e588c7b037d0",
          "length": 152,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b0b6bcc9-5616-4312-ae6b-ca9abcd42ac9"
        },
        "item": {
          "id": "074c9d4d-4185-4d25-83b7-b8cfc4a05d8b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3a6026d6-5589-4fb8-896b-16eba811ec4c",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "cbfd4d64-7430-4ec5-a0bd-52cca9050c9a",
        "cursor": {
          "ref": "4dbcea09-ab7c-4476-bf3d-ef761e389f08",
          "length": 152,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c904498e-892f-4491-a439-e03a8bca14c7"
        },
        "item": {
          "id": "cbfd4d64-7430-4ec5-a0bd-52cca9050c9a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "12bbb848-02da-4b32-a97c-8252e0680fb7",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "1e5cadc7-fd6b-4b80-b2dd-1ad8f644b92e",
        "cursor": {
          "ref": "bcd1ee6f-b4e5-4f7b-bd58-0ab6d5ff0595",
          "length": 152,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "33ed100d-1d58-4227-afc9-11ba6267f92a"
        },
        "item": {
          "id": "1e5cadc7-fd6b-4b80-b2dd-1ad8f644b92e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b345e0a2-06ec-407a-90c1-0777c9675e7b",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "da000cc4-1ecf-4d00-9d5d-ed5fc9797acf",
        "cursor": {
          "ref": "601d5c48-dd76-4c7c-977e-189329b2b405",
          "length": 152,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9751563b-610e-4a8b-a09e-8e7f0ef98722"
        },
        "item": {
          "id": "da000cc4-1ecf-4d00-9d5d-ed5fc9797acf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d7cb051e-2975-45ba-af47-d4342567dff5",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "eb6ba7ef-25aa-4a10-9499-4b0ba59573f8",
        "cursor": {
          "ref": "d76255e1-54d1-4dd9-8faa-5af557633540",
          "length": 152,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "47040423-3d91-42be-87af-d18ba7a312d8"
        },
        "item": {
          "id": "eb6ba7ef-25aa-4a10-9499-4b0ba59573f8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2758cf96-61d7-432f-9131-b7218d3b86aa",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "308c9ad0-23e4-45e4-82ef-292236356c2c",
        "cursor": {
          "ref": "1dc57ce7-04bf-4ecc-b1a7-15db36bb587f",
          "length": 152,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "98bfeb50-6dd8-4cae-bd57-524aca0d6803"
        },
        "item": {
          "id": "308c9ad0-23e4-45e4-82ef-292236356c2c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4d1b0963-c5a6-496a-9483-2b9b6c1c78ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "ad45b18b-431e-45d6-812c-79b069c36d07",
        "cursor": {
          "ref": "f512aa6b-a978-4301-af22-4f75a0f4ceb1",
          "length": 152,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0513bc28-93b5-43f6-b19e-4e2d1a68f7d9"
        },
        "item": {
          "id": "ad45b18b-431e-45d6-812c-79b069c36d07",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fc9e95fa-7e55-4d85-823a-733312d910ce",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "dbc9e5be-3969-40ac-a0fb-f8b1e7477cc6",
        "cursor": {
          "ref": "1877f70d-4792-4fc3-9066-14bf493b2933",
          "length": 152,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "481d3f7c-9c2a-4482-aad6-5185725a340f"
        },
        "item": {
          "id": "dbc9e5be-3969-40ac-a0fb-f8b1e7477cc6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d5a4164d-1d0c-4822-a7f7-aef696e2c613",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "7df90b42-6b19-49bd-ae74-1e9bc40de697",
        "cursor": {
          "ref": "674e8a7f-b86e-4be1-8710-81820ecc185e",
          "length": 152,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "56150623-254e-49e6-a841-8b651011fb78"
        },
        "item": {
          "id": "7df90b42-6b19-49bd-ae74-1e9bc40de697",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "689c30ee-6164-4a2a-b4cc-7cda6a75778e",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "7c48b3cd-83c4-4ccc-b1b7-a94f4a5a7c26",
        "cursor": {
          "ref": "b39c92ba-3f03-4f42-b361-cd85aa10dceb",
          "length": 152,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f102d408-90a9-4a1a-b421-a75f7f5ff05e"
        },
        "item": {
          "id": "7c48b3cd-83c4-4ccc-b1b7-a94f4a5a7c26",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "86d7dc92-e409-462b-80fc-2c027f2c2e78",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "c9aa09e8-3777-4f17-8b90-f7b3802f4a39",
        "cursor": {
          "ref": "378b04a3-11a0-4205-a9c3-f8b53f022b16",
          "length": 152,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "86d943d5-0e9e-4217-ac80-009c541f7bc3"
        },
        "item": {
          "id": "c9aa09e8-3777-4f17-8b90-f7b3802f4a39",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fd78952b-6de4-4584-867e-50b7f4bf93bd",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "0d2f6c8b-dc17-4666-8047-48b9453fe271",
        "cursor": {
          "ref": "bdca44db-f253-4b4b-9c12-950010167b0b",
          "length": 152,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fd419fda-3489-484d-adcd-f2331c9d3c9d"
        },
        "item": {
          "id": "0d2f6c8b-dc17-4666-8047-48b9453fe271",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "98c97b54-e6f1-44c8-909d-773e5fb494eb",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "4d12a72a-a0d0-49f3-a61f-cf9732e1c5b8",
        "cursor": {
          "ref": "1d93169c-171d-41be-a63f-9bc6214ff2aa",
          "length": 152,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6e6e148c-4600-4949-b08c-3330aaa275d0"
        },
        "item": {
          "id": "4d12a72a-a0d0-49f3-a61f-cf9732e1c5b8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "51c4d02a-cb57-46d2-ba89-4eaf0233c798",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "4399eec3-e78c-47f0-bb53-83a43db366ef",
        "cursor": {
          "ref": "de7bb020-1449-47d2-afd3-83b078c12560",
          "length": 152,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4ff252ab-7d05-41c7-83b2-a3ac19359985"
        },
        "item": {
          "id": "4399eec3-e78c-47f0-bb53-83a43db366ef",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b9b6e5de-0234-412c-89a5-69512224ca3d",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "8a1d782b-51ac-44ba-85c5-4d5d2893dcab",
        "cursor": {
          "ref": "854654a0-2d25-4ac2-9c0c-cebe6c275a9b",
          "length": 152,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f99c2656-922a-41ae-a1a1-6e5ee017de38"
        },
        "item": {
          "id": "8a1d782b-51ac-44ba-85c5-4d5d2893dcab",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4e07523c-af23-4427-a516-252363d02f19",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "3e917248-607d-4142-8a55-f71eacf5c7d5",
        "cursor": {
          "ref": "9aee2dbd-4562-42dc-97c8-75c8be5fdfdb",
          "length": 152,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8ef7e13e-be2c-4d91-af4a-90419a951980"
        },
        "item": {
          "id": "3e917248-607d-4142-8a55-f71eacf5c7d5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8fa1b217-9f47-49bc-abe2-dcbeb4adbdce",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "cf51e3de-d408-4dce-96b4-7b8a8204f0ac",
        "cursor": {
          "ref": "e326933a-3e0c-4842-80a9-0be517fb5818",
          "length": 152,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "81f46544-4dec-4d85-ba64-f3e161fd54be"
        },
        "item": {
          "id": "cf51e3de-d408-4dce-96b4-7b8a8204f0ac",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2aecda5f-de3f-47db-b180-486c447b228e",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "10a296e9-14bc-482f-a922-0540996356ed",
        "cursor": {
          "ref": "61a1abd0-5a6f-48de-a1db-41c4011b101c",
          "length": 152,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1946624e-9a36-44b7-aa4b-c335d13feab8"
        },
        "item": {
          "id": "10a296e9-14bc-482f-a922-0540996356ed",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8e7d42c6-037d-46b2-93ea-404381036cf1",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "a88dce2f-41da-4b6c-ac6d-b96cf2a72e1a",
        "cursor": {
          "ref": "74447e35-cd67-429d-9ed0-68929ed6e36e",
          "length": 152,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bdf35a27-950b-4b99-b981-8d2838a633f7"
        },
        "item": {
          "id": "a88dce2f-41da-4b6c-ac6d-b96cf2a72e1a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "69bb079e-59c6-461a-ab7d-e3f7dc37d334",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "69f086ba-7bfe-4440-ac46-c9e0dec832ca",
        "cursor": {
          "ref": "7369840a-40bb-4d18-b559-1cf0d45c4c7e",
          "length": 152,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3e12f167-5466-46fe-8f5b-1fff9a99b927"
        },
        "item": {
          "id": "69f086ba-7bfe-4440-ac46-c9e0dec832ca",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e9f30bbc-29e9-46d2-84df-ccb7812a3110",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "7f9c1620-2c17-4f6e-82c7-f9d90ad8d9c9",
        "cursor": {
          "ref": "0ccea3fc-a32d-4aea-8740-7dd16502dd8f",
          "length": 152,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9beffa86-0556-4442-b3a1-be15c86de6a2"
        },
        "item": {
          "id": "7f9c1620-2c17-4f6e-82c7-f9d90ad8d9c9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "eff69a2a-7e3d-40dc-9e15-a946d4ae983a",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "72b34732-e23e-4a82-bc73-7647ce314c00",
        "cursor": {
          "ref": "c9596f82-e29e-4864-8f93-124ae41f0350",
          "length": 152,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "dfe1aebc-0e3d-4bd0-96cb-a606d4918ef1"
        },
        "item": {
          "id": "72b34732-e23e-4a82-bc73-7647ce314c00",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1d7be3c2-6366-4490-ada5-b304e656bdda",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "3e3fead9-bcd6-469c-b855-f9023b706d40",
        "cursor": {
          "ref": "6bbdd9b4-6081-45aa-bd02-9f33f6918c2b",
          "length": 152,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0a26414b-63b8-4a22-8796-817fabe9f496"
        },
        "item": {
          "id": "3e3fead9-bcd6-469c-b855-f9023b706d40",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "51fec958-1dc4-4c49-94e9-a90037bffc48",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "f2c0a785-b016-4c3a-86b3-d0e95db0ba63",
        "cursor": {
          "ref": "c4d6dc81-8c16-4f20-8154-8ac730be8370",
          "length": 152,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e47a16c7-a312-465b-bf2b-d2578429df05"
        },
        "item": {
          "id": "f2c0a785-b016-4c3a-86b3-d0e95db0ba63",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3794b898-de32-42f8-a583-6f1d2976671e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "387024a7-1dfb-47b4-a50d-caaada6704a0",
        "cursor": {
          "ref": "fd61ef3e-6480-4efa-86b4-95d4aa014bd9",
          "length": 152,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "aceec97e-40da-4952-beef-e17c9f4b4cd3"
        },
        "item": {
          "id": "387024a7-1dfb-47b4-a50d-caaada6704a0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3c4dd0c1-e5d9-412c-bdb7-e9632cc7a3d8",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "4c8ea514-e461-4167-a29d-69ed9f2b82a3",
        "cursor": {
          "ref": "ed397acd-3361-4619-ba81-e6ec81d16aaf",
          "length": 152,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1676a289-e650-47d1-9d81-1ac11ac20cac"
        },
        "item": {
          "id": "4c8ea514-e461-4167-a29d-69ed9f2b82a3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d60beb6f-2ef4-4f70-825d-dd230b50f872",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "35766c59-d0b2-4bf6-974f-7166eebaeb36",
        "cursor": {
          "ref": "938e6e3a-95f4-47b6-9e07-bd8ada03a413",
          "length": 152,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9a86eb07-922d-407a-a633-497fa32e8cb4"
        },
        "item": {
          "id": "35766c59-d0b2-4bf6-974f-7166eebaeb36",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f20f518b-4b21-41fd-84cc-d0cda9861164",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "89427d0b-7d67-416b-bf82-2e5d5f3b05e5",
        "cursor": {
          "ref": "24c31bb4-6605-4ccc-bfc0-0c97ae337e79",
          "length": 152,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "257676d2-6c73-4ef4-af43-e3c8ef306859"
        },
        "item": {
          "id": "89427d0b-7d67-416b-bf82-2e5d5f3b05e5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "db8e8ba3-e443-49d8-b6c0-ab65909a5f03",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "9d3d4913-74f0-4b61-954a-088d8383ed42",
        "cursor": {
          "ref": "f9317fde-a958-4b8d-8768-84fe73bd174b",
          "length": 152,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ca0a18aa-7275-4cb4-a93b-88212c108827"
        },
        "item": {
          "id": "9d3d4913-74f0-4b61-954a-088d8383ed42",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "de352937-b1a1-4362-b954-57f2c2ebbdd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "7f2b5e16-c38d-43aa-acc9-f9dcaca952b9",
        "cursor": {
          "ref": "76f6d80a-04cc-47f9-9f16-b96c8f929448",
          "length": 152,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "eca76200-ad34-4223-9075-c8451a0e8a92"
        },
        "item": {
          "id": "7f2b5e16-c38d-43aa-acc9-f9dcaca952b9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e6412e58-1418-4669-8a41-a74e1f84da5b",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "d3d42a39-a558-4ab5-a08c-58141a44e78e",
        "cursor": {
          "ref": "7135bac7-6f0b-4ada-8907-2d51473657b6",
          "length": 152,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2425f7b7-360f-4a53-9329-f125769639ab"
        },
        "item": {
          "id": "d3d42a39-a558-4ab5-a08c-58141a44e78e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "01a5b33d-65dd-4c91-bb3d-8988d6f282c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3e05024a-c435-47cb-8b8c-3584e24800a2",
        "cursor": {
          "ref": "2a73264f-c9f7-4d1b-9e2a-f4a454d84c34",
          "length": 152,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "973c4891-0ec7-488d-afa8-df31996f39b7"
        },
        "item": {
          "id": "3e05024a-c435-47cb-8b8c-3584e24800a2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "680b3608-7672-4de3-88c2-874e5faa3dfc",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "c22db29b-8887-4b25-af1f-8aaf173cb6f6",
        "cursor": {
          "ref": "576832f2-c60c-4513-ae50-95d17f4771e6",
          "length": 152,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "621cf65f-9fb3-435f-8f1b-20f71fb4efea"
        },
        "item": {
          "id": "c22db29b-8887-4b25-af1f-8aaf173cb6f6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9b18e907-fe05-4a89-ad68-9008aee8c9e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "cc04ca58-923c-41da-8d08-d0d9c8832b09",
        "cursor": {
          "ref": "f8f9e474-8476-49e3-ad1f-3a2a1e712463",
          "length": 152,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1b02e2f9-e5ff-4b8a-be8a-3de4d85a2714"
        },
        "item": {
          "id": "cc04ca58-923c-41da-8d08-d0d9c8832b09",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "989f55ad-e79a-4f15-860d-7487abe6f51c",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "f8dc804c-552f-4cc4-bbf7-6a5ebd65ef82",
        "cursor": {
          "ref": "f0558995-bf9f-4d5d-ad99-284621c73079",
          "length": 152,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d32d443e-bad4-4dc7-a6ca-c22e8c478058"
        },
        "item": {
          "id": "f8dc804c-552f-4cc4-bbf7-6a5ebd65ef82",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7f682b8e-61c9-4cbf-8fc0-84babac72b3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "461b37ef-267a-4518-9d3e-5f0b85b37a27",
        "cursor": {
          "ref": "3d6fd59b-eed3-4406-b7ba-e20acaa25ef9",
          "length": 152,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "986bbb73-4d94-449a-beea-eb0fc9e5fd34"
        },
        "item": {
          "id": "461b37ef-267a-4518-9d3e-5f0b85b37a27",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b099afb3-152d-4874-9d7c-d6d169b20d1b",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "bd755403-4415-426b-838e-afdb166173a2",
        "cursor": {
          "ref": "6c243d6c-205d-426e-bc69-52fcd7e71e08",
          "length": 152,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fd2d0edb-617f-4c00-b0e4-4b49ca1d02b1"
        },
        "item": {
          "id": "bd755403-4415-426b-838e-afdb166173a2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "52d2403c-ed17-4915-93a5-848dd28a43f2",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "1ffa687b-2bb9-4639-8833-289954116bbd",
        "cursor": {
          "ref": "e5569d6b-02cf-4762-a30b-a2f3dc0539e0",
          "length": 152,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e14514b8-7095-4d2e-9e18-583bfa90abc1"
        },
        "item": {
          "id": "1ffa687b-2bb9-4639-8833-289954116bbd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "de018856-1b01-4eb8-97c5-c6f9544ae053",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "fc6d57e8-38eb-400e-89d5-8bf070fcddae",
        "cursor": {
          "ref": "b49be3a3-28aa-4e39-8148-ff775b839abc",
          "length": 152,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "cb58c0b7-3361-4bcd-9bb0-82856d018ec4"
        },
        "item": {
          "id": "fc6d57e8-38eb-400e-89d5-8bf070fcddae",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d3cb5ee9-eccf-4e5a-b69a-a33a0bb789a3",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "30fd862c-2c50-410b-b0a9-e32c17ca276f",
        "cursor": {
          "ref": "fe2d75fb-6df0-4a8e-b044-3566eba9b0c5",
          "length": 152,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d56c866b-f36a-4e7b-84ed-83ee407168d8"
        },
        "item": {
          "id": "30fd862c-2c50-410b-b0a9-e32c17ca276f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "aed32a16-e615-48f7-9a1f-a3f0da6f222e",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7da76ecc-e0f9-4dd0-b931-bfd4efd54c14",
        "cursor": {
          "ref": "a1fffb21-8e4a-4694-a9a9-7c41b7b84983",
          "length": 152,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "05710c11-c7d4-4145-8f12-1ab86ee037cd"
        },
        "item": {
          "id": "7da76ecc-e0f9-4dd0-b931-bfd4efd54c14",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e954df34-abb2-4e8b-a007-9a8ba1ebd689",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ab3399e6-8a9a-4b0d-9362-c21acdd56ea3",
        "cursor": {
          "ref": "5611a82e-dcf5-4100-851e-fce485d5220e",
          "length": 152,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3ca81436-6e6e-4d73-b453-dae507f92e3a"
        },
        "item": {
          "id": "ab3399e6-8a9a-4b0d-9362-c21acdd56ea3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7ddb3e58-1ca4-44f1-ae59-0e6b0556a296",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "4f05d56c-2712-4466-a2c4-64d438cded38",
        "cursor": {
          "ref": "f3209a0f-3697-42cc-9cd4-1adc985c105c",
          "length": 152,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5ff57488-bd1a-45de-ba5c-8805f7f0cf98"
        },
        "item": {
          "id": "4f05d56c-2712-4466-a2c4-64d438cded38",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4eb2870f-45f7-47b4-a6e2-638be65c4ad4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "df7bdbd5-5024-4d6a-8a85-c0f1a09b8307",
        "cursor": {
          "ref": "94d86d71-496a-4d95-abdd-91ff279c75fb",
          "length": 152,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6b38a04f-86ff-4737-b009-a1e30c009f67"
        },
        "item": {
          "id": "df7bdbd5-5024-4d6a-8a85-c0f1a09b8307",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a58fe8dc-910f-44e7-932a-15fb5f6e97e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "23797391-ce21-422e-a7cf-535f0ba8609a",
        "cursor": {
          "ref": "93168f2f-ab88-44f8-a9fb-8c9a973ed4da",
          "length": 152,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4a5b1230-6e95-477c-bae4-b9dadfc80831"
        },
        "item": {
          "id": "23797391-ce21-422e-a7cf-535f0ba8609a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "92e2b0a8-07a3-4087-831d-19f1907070b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "886a640c-33e2-4d76-b1bd-a0c5a70bfcba",
        "cursor": {
          "ref": "5a8f9a1e-6b62-495e-b329-12c7166b26da",
          "length": 152,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e1b6fe00-0a88-4108-bed8-ec031dd9133d"
        },
        "item": {
          "id": "886a640c-33e2-4d76-b1bd-a0c5a70bfcba",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "993a4d5e-e648-4360-9068-621147547652",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b0033142-1b4b-460a-94fd-5f4934e2c8a6",
        "cursor": {
          "ref": "0cd857fe-a056-4061-a411-a311609604c5",
          "length": 152,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a9582865-c974-4900-a26d-ca2351b324c8"
        },
        "item": {
          "id": "b0033142-1b4b-460a-94fd-5f4934e2c8a6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0461b424-4836-484d-b480-1f36bd13f8f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "cc863c2f-0c69-448b-bb33-09e0e19a09f2",
        "cursor": {
          "ref": "4f0c61dc-5598-4918-bbc9-73a29ccddd30",
          "length": 152,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a9894944-7fd8-4fec-9fce-47de062107ff"
        },
        "item": {
          "id": "cc863c2f-0c69-448b-bb33-09e0e19a09f2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d272283d-0ae1-41dd-8eb7-fecea7fd7998",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "81962963-0293-4533-ac33-b9a7aa5c5d72",
        "cursor": {
          "ref": "d0c8de43-c3fc-4f89-a2a6-b92c2973a3a3",
          "length": 152,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "204b4b95-494b-44ac-9f0d-59e6d3884ee2"
        },
        "item": {
          "id": "81962963-0293-4533-ac33-b9a7aa5c5d72",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9d6e8640-17d9-463a-b171-297a515238d9",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "2e68e40b-0072-4d83-bc69-dc086c95ff53",
        "cursor": {
          "ref": "df2f4890-527f-4dff-9ebb-68f7f62efa06",
          "length": 152,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8a8962d6-7ef4-4829-a092-e69ca7780037"
        },
        "item": {
          "id": "2e68e40b-0072-4d83-bc69-dc086c95ff53",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4c1d8a9a-d7c9-455a-a735-93d53c026e5c",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e619b27a-de8f-47b2-8faa-1e4d3a82d861",
        "cursor": {
          "ref": "b3234189-f6ef-4ed8-a35d-930ce9295e37",
          "length": 152,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9bd7d02b-20dd-41b9-bcdd-b33d4d93513c"
        },
        "item": {
          "id": "e619b27a-de8f-47b2-8faa-1e4d3a82d861",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f2abbbb0-19ed-477d-99b7-d940209c01af",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "212e0e08-5a58-4f7e-bf6a-28249fdf07aa",
        "cursor": {
          "ref": "a9715905-10cd-4e97-87d8-e473965643f6",
          "length": 152,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b57214be-efbe-4224-970c-25fb4b45cf73"
        },
        "item": {
          "id": "212e0e08-5a58-4f7e-bf6a-28249fdf07aa",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a4cb705c-1574-4216-b079-6a3ff9850a78",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "4c38be02-beb5-4a25-979d-41000543c274",
        "cursor": {
          "ref": "6b5894aa-3879-4bf2-93ec-70a2f8f8ea0e",
          "length": 152,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b1078408-1c3d-46bc-bc37-645a9b3f1818"
        },
        "item": {
          "id": "4c38be02-beb5-4a25-979d-41000543c274",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "30564ac3-1555-4f58-be6e-2ba7c17cefe3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "5ae3b08c-230c-447c-9c43-dde591bf3301",
        "cursor": {
          "ref": "dbfac4c0-c6ee-4302-8182-4abbb3b8d88d",
          "length": 152,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "773e45f9-3d4f-416e-b1a1-1648c2acf0ab"
        },
        "item": {
          "id": "5ae3b08c-230c-447c-9c43-dde591bf3301",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3150bb81-67e9-4a52-894b-4b9fc641dc8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "1b0047d6-c28b-4390-9167-198b5db80502",
        "cursor": {
          "ref": "d474c808-546e-47eb-b757-9ee865ff02d3",
          "length": 152,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2f333bcf-47a6-42e0-b390-08b174104747"
        },
        "item": {
          "id": "1b0047d6-c28b-4390-9167-198b5db80502",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "563c00e9-5db8-4a83-9c05-8b86ee91f86a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d133a382-119e-47ad-8080-08e4fe583cd3",
        "cursor": {
          "ref": "847a2e83-a723-4adf-8e18-09ece93bbf20",
          "length": 152,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b30cd350-51da-4884-8ee0-b578a4120300"
        },
        "item": {
          "id": "d133a382-119e-47ad-8080-08e4fe583cd3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "77d89c54-ef10-441d-91ac-ca918c7e424d",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "8bb7301b-ae0b-45ec-9229-7eb87eef5315",
        "cursor": {
          "ref": "75e4283f-d810-4f4d-bc90-52ec000223e6",
          "length": 152,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "185cdfec-82aa-46d1-9463-e57908f8c189"
        },
        "item": {
          "id": "8bb7301b-ae0b-45ec-9229-7eb87eef5315",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e37fafd1-33b6-4c89-9259-64e3d8ceaf89",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d5d6f224-93a5-4db8-b824-8938e94b0cab",
        "cursor": {
          "ref": "d23daa8b-ec52-4fcb-ad9c-78878c88a85b",
          "length": 152,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c08e4880-10dd-486c-85af-f31a2f8f61ef"
        },
        "item": {
          "id": "d5d6f224-93a5-4db8-b824-8938e94b0cab",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b54746f7-cd23-4358-b269-5086559fe96e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "df64a7cf-62ce-4fb2-b131-52a949859e6c",
        "cursor": {
          "ref": "5d003c3b-4f74-4881-a406-6c85354f782e",
          "length": 152,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "39302d29-5d27-47f2-9851-8840dd7de2a5"
        },
        "item": {
          "id": "df64a7cf-62ce-4fb2-b131-52a949859e6c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4b37ecda-f5cc-4a83-bad9-86e217c3904c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "55e20608-11b5-4087-99f0-50dd35b7dc46",
        "cursor": {
          "ref": "0e453a6c-9125-4957-920f-a61cc6323f65",
          "length": 152,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "76d75333-ed6e-436a-b9eb-e17c9bf28620"
        },
        "item": {
          "id": "55e20608-11b5-4087-99f0-50dd35b7dc46",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "999e802f-37a0-4bdc-9e18-b8a455603062",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "06a44676-85f8-4df2-b9ef-7007f23ee911",
        "cursor": {
          "ref": "9bed0607-78a8-452f-ba4a-37308edab3d1",
          "length": 152,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3d57c9ae-d5e1-4065-896f-e859dfe34e45"
        },
        "item": {
          "id": "06a44676-85f8-4df2-b9ef-7007f23ee911",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b73c2ff7-3428-435d-bd1f-626f797f4fe0",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "0d631630-b573-4275-b462-2c7a66c26791",
        "cursor": {
          "ref": "1ff888a5-c899-4430-9a5b-0a7e5d3fd398",
          "length": 152,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "780f7683-c4c4-4b79-9dbd-330699d20c8d"
        },
        "item": {
          "id": "0d631630-b573-4275-b462-2c7a66c26791",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e540ea26-9019-48ac-8aa1-3a5d485e016d",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "6324d4e6-3cba-468c-b6c7-c4b65c7028ae",
        "cursor": {
          "ref": "a3235f6f-e8e9-45e9-a141-b7803f38bbe6",
          "length": 152,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "64df875c-9110-4ad4-8b0f-7aa9384e8c14"
        },
        "item": {
          "id": "6324d4e6-3cba-468c-b6c7-c4b65c7028ae",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7b82b0db-3985-4a5d-992e-a69b97a717b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "f6389877-1942-4e4e-8fe3-29f322764af7",
        "cursor": {
          "ref": "312dec2a-60aa-485d-9df3-d4491052a055",
          "length": 152,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8d1bc3b3-dd8c-4689-a4a1-800b2ebb3088"
        },
        "item": {
          "id": "f6389877-1942-4e4e-8fe3-29f322764af7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "18332059-1c86-4f4a-91aa-88df0ca08f38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "2acbfbaf-8aa1-4751-8281-ab87cb223ca3",
        "cursor": {
          "ref": "cd32ee9c-97e5-4a0a-9d9c-b55c809ffaee",
          "length": 152,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5a5e5643-9baf-44ca-93a3-c9e9cdb06dcf"
        },
        "item": {
          "id": "2acbfbaf-8aa1-4751-8281-ab87cb223ca3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0a1d2b2e-2b86-45cf-ace0-2845e2de845a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "287f8a89-22b0-4fd5-a184-bddc158919d8",
        "cursor": {
          "ref": "278af3c1-57e5-4b36-9ba7-1b3672e5c14b",
          "length": 152,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f6dba12f-25a0-47e1-971b-2d90f81441bf"
        },
        "item": {
          "id": "287f8a89-22b0-4fd5-a184-bddc158919d8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "170b7177-b221-4edd-9d58-4d8c217a00d8",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "821033b7-606b-4e0a-8955-96363b8ab712",
        "cursor": {
          "ref": "82c817fe-2dc5-410c-acce-50076e149814",
          "length": 152,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6e3c7014-5849-4159-b630-76c104db7798"
        },
        "item": {
          "id": "821033b7-606b-4e0a-8955-96363b8ab712",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bffc9a49-26a1-446c-8ce5-21ddf14c5d53",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "a8842ca9-3401-43f7-9fc7-3ba3f5aecd7c",
        "cursor": {
          "ref": "7a1bcd1c-d7f9-42e4-9a37-34d6620ae4ca",
          "length": 152,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "10389ce7-fe3e-4f69-a998-535ee6616966"
        },
        "item": {
          "id": "a8842ca9-3401-43f7-9fc7-3ba3f5aecd7c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c07bdddd-435c-40fa-a930-a871474d8e57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 18,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "55b1ea68-8ec9-4e5d-ab5f-183b01371bf6",
        "cursor": {
          "ref": "3fb10bcf-eb0f-4d5d-a0cd-7fad2ff29a3d",
          "length": 152,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4c50145e-a720-49f3-9831-8bf841aac0c2"
        },
        "item": {
          "id": "55b1ea68-8ec9-4e5d-ab5f-183b01371bf6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0143b36e-d2b9-4efc-a0f7-8de6e1f44833",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ad28b91e-63fe-4fc8-aaba-3dc6f6872983",
        "cursor": {
          "ref": "4ff65a15-0de5-4d0b-b906-abb8849c64fe",
          "length": 152,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b5b8b220-568a-4250-98a7-b97078ee2faa"
        },
        "item": {
          "id": "ad28b91e-63fe-4fc8-aaba-3dc6f6872983",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2fa9c377-5a59-4c7e-938c-2e57ac365065",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 18,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "496c6c42-bff1-4133-bd86-0ad86cb5c50e",
        "cursor": {
          "ref": "2fbefc59-b6ee-491e-aa88-1526b4e5a23e",
          "length": 152,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "70d1b15b-ba8c-4770-a42f-b2036e646ae1"
        },
        "item": {
          "id": "496c6c42-bff1-4133-bd86-0ad86cb5c50e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5eee009f-ce46-4241-af5f-4a701d916787",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "a3ca95b4-1674-4e5d-a881-04e2e88d1308",
        "cursor": {
          "ref": "abe588a8-8fa8-4034-ba5f-d241bf8987ee",
          "length": 152,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "cd8c4d6a-5b2d-40ea-baac-c382d7faf833"
        },
        "item": {
          "id": "a3ca95b4-1674-4e5d-a881-04e2e88d1308",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a0e5eb30-4b81-427e-8abe-ae019a490ea8",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9988937e-9977-43ab-a425-517c6468f3b3",
        "cursor": {
          "ref": "43f18237-ebb2-42aa-9458-d9c4bca8548f",
          "length": 152,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "082930b9-e4b6-4037-93ec-c92dd08137a5"
        },
        "item": {
          "id": "9988937e-9977-43ab-a425-517c6468f3b3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ecf46152-120c-4bf1-b947-2785cc4abfdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "fcd41b21-fb42-4651-9bc1-bca6e0a09900",
        "cursor": {
          "ref": "ee215e87-a6ef-4a46-af13-ebd701a99945",
          "length": 152,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "83411ba3-375a-4adf-8d95-bd625c4ad15b"
        },
        "item": {
          "id": "fcd41b21-fb42-4651-9bc1-bca6e0a09900",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3a3011a7-4e68-45a3-875f-9e78033f6376",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "45def967-7a4d-431a-9ba9-e26fce883ece",
        "cursor": {
          "ref": "228411cc-894c-4682-91f6-732e7255437a",
          "length": 152,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "34981aa3-d38f-4373-9952-b5d0da474a45"
        },
        "item": {
          "id": "45def967-7a4d-431a-9ba9-e26fce883ece",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0b54ed6d-f108-4f95-960a-1d452f6c4ffb",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "c648fab1-4e9b-4701-bf43-b77de8ba1280",
        "cursor": {
          "ref": "f6af2ec4-9b4b-4b64-b461-8e00061f8dfc",
          "length": 152,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f241e6ec-fe65-4176-946a-745fb749641b"
        },
        "item": {
          "id": "c648fab1-4e9b-4701-bf43-b77de8ba1280",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0f65ff73-1159-497f-adf5-e3b01c7f7eef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 15,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "c648fab1-4e9b-4701-bf43-b77de8ba1280",
        "cursor": {
          "ref": "f6af2ec4-9b4b-4b64-b461-8e00061f8dfc",
          "length": 152,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f241e6ec-fe65-4176-946a-745fb749641b"
        },
        "item": {
          "id": "c648fab1-4e9b-4701-bf43-b77de8ba1280",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0f65ff73-1159-497f-adf5-e3b01c7f7eef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 15,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "04f55c23-fd8c-40fb-9d9d-7cc7eed14ba3",
        "cursor": {
          "ref": "aa3b5d66-194c-4bf6-acbf-7705327a5165",
          "length": 152,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "14e2c9f1-1869-418a-b880-cef13f189715"
        },
        "item": {
          "id": "04f55c23-fd8c-40fb-9d9d-7cc7eed14ba3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "0d78ebd5-b9dd-4333-a070-d69fc37baf36",
          "status": "Not Found",
          "code": 404,
          "responseTime": 14,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "d61dcca0-989a-4dfa-8601-3c452e796165",
        "cursor": {
          "ref": "f0b152e7-4474-409c-ad43-b3e8a325821c",
          "length": 152,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0afa0bf3-fb6b-4474-9f49-b588dd8e8e6e"
        },
        "item": {
          "id": "d61dcca0-989a-4dfa-8601-3c452e796165",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "17e88709-8f64-40b6-a75c-f81d50990969",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "d61dcca0-989a-4dfa-8601-3c452e796165",
        "cursor": {
          "ref": "f0b152e7-4474-409c-ad43-b3e8a325821c",
          "length": 152,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0afa0bf3-fb6b-4474-9f49-b588dd8e8e6e"
        },
        "item": {
          "id": "d61dcca0-989a-4dfa-8601-3c452e796165",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "17e88709-8f64-40b6-a75c-f81d50990969",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "8e89c5fa-e393-4f6f-978c-d657d3093de9",
        "cursor": {
          "ref": "2b323c29-7fdc-4aa0-90b6-6df48e901736",
          "length": 152,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d2197454-e99a-408f-8655-a76097a016b3"
        },
        "item": {
          "id": "8e89c5fa-e393-4f6f-978c-d657d3093de9",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9ac5d1ab-1476-47a9-afa5-d3818684dc7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "c5bb48c7-a46a-4926-94f1-cce9022325db",
        "cursor": {
          "ref": "d54f2504-33ba-407a-a7bf-b67cf34e82cd",
          "length": 152,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d39ac908-66a7-469e-93c3-68fb876cd8ea"
        },
        "item": {
          "id": "c5bb48c7-a46a-4926-94f1-cce9022325db",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "54db94d9-1167-45ba-84d3-4560c8f1706b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "c5bb48c7-a46a-4926-94f1-cce9022325db",
        "cursor": {
          "ref": "d54f2504-33ba-407a-a7bf-b67cf34e82cd",
          "length": 152,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d39ac908-66a7-469e-93c3-68fb876cd8ea"
        },
        "item": {
          "id": "c5bb48c7-a46a-4926-94f1-cce9022325db",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "54db94d9-1167-45ba-84d3-4560c8f1706b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "4dfcae52-e86f-466c-a345-01ecc410abea",
        "cursor": {
          "ref": "e109b2ff-c4e7-4e67-b3ec-f1d3e399be43",
          "length": 152,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "56717da4-6c70-488f-abc3-171af34be7a2"
        },
        "item": {
          "id": "4dfcae52-e86f-466c-a345-01ecc410abea",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "5bf4948c-09b8-43c2-a706-6723961b783e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 13,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      }
    ]
  }
}