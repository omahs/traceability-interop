{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6114027d-d261-44c7-b5c6-91b598fcfa20",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2ee16a87-300c-44ff-be99-315b2b0583b0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f710fab-5543-4577-ab14-122914f2b29e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "df1205b3-6183-430c-8207-ffaa1915bad2"
                }
              }
            ]
          },
          {
            "id": "d88908eb-7924-40e0-9f24-71a22ca6ce03",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bbc86852-7625-4e11-96b4-e4001ce200cf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "93749a8e-75eb-4313-8e30-f3ae39627550"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "69c3fa20-7feb-4224-adf5-65ca32ec0929",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "fd312651-5b39-4ac4-b1bd-c7f90f4c13ff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1309f56f-b8d7-4427-b021-ab0454e53c55",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d81c07f-8170-472a-a1f7-bf189f204326",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "031a0976-4346-4867-bca4-89faae810707"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ee7e1472-bf18-455d-ae8b-b413decac740",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a56a2be6-9f68-4e74-aec5-dab076f480e5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "322dfa8c-c48f-4842-b48d-365754d4f832",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ae640cb-c529-4ed1-8f69-98fb5c7c9b2d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a766f73b-a080-4718-8ad9-2bbeaf58e6af",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "46c82497-e508-4c94-9d3a-1af8516de1c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33f9bff5-82aa-4c45-b154-f7ef948fbe5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc002d80-96c3-4bf9-ae16-71f64b9a68f3"
            }
          }
        ]
      },
      {
        "id": "c8abfc0b-0410-47c1-8e54-903bfef56728",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1aa81f5b-9edd-48a3-b587-1a3534c9e09f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1be6af6b-22c7-441b-a55d-96de99543975",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3d81c516-09aa-4476-a3a3-fdbb85146a34",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d81d7f-d968-427f-a632-8fa5539ba099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "256cc7ad-5827-4010-8539-00b1d0fb7bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cec685-5b37-4bc2-8529-d7ed0370d3ec",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4523535a-d518-41e2-9c7a-844756f5e636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24201358-b634-40c4-99c3-f866df9247c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bcff8b-60da-4cb3-8502-6b28cc9cc1a5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cea83e4-ebba-49cd-9d3d-e41932f0a406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4c1bc41-a017-4a44-9ad7-75c95f2ae41f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d40c140d-bbd1-4092-b462-c6a5368549ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1fbca6f-a28c-4f0d-9df9-8c8f169ccb3e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe76999-1a94-4313-9226-e9977964400e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19637c2d-30a2-4b73-a729-38a3b622239f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d07c94b-d18c-4a3d-a244-d7e5f3996246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3bc619-54d7-4f62-b111-1ff512b82066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1567ba3-2fb5-4178-9e62-eed493a64f4b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ea7cc2-a677-49bc-8345-caa6d6e41aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a77d943a-d247-4133-9f01-9228e7c9d7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458177d2-bbee-45b8-b431-39e2fb33acb3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "da515fc9-7fb1-4f14-98b4-1a809baf5cb3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "58df6b40-6cb5-4042-a5c0-1fd2480053ca",
            "name": "Positive Testing",
            "item": [
              {
                "id": "892a3044-18b8-479d-8eab-7b9305a2c3f5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2e1435e-9518-4b42-a4ef-829950bcd7cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "014251f4-78ed-48ef-93ec-dd1fa04b20d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ac0e92f-c61d-4415-9677-4e800c5e0754",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0b1e66c3-cc79-4bcf-958d-f48012bde735"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1ded1dd-eaa2-4ef5-bfb0-3c9069519a6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90d07440-0b2b-4387-a7f9-54a40e9028e8"
            }
          }
        ]
      },
      {
        "id": "15e3d990-2fba-43e6-8c05-684190e5210a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5cee2516-6f73-4f89-b0cf-8fb55d261738",
            "name": "Negative Testing",
            "item": [
              {
                "id": "89ebf6a3-1d1e-41b4-a60b-862fab184ece",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b1b0d816-38c3-4a75-8f6e-16c9bf92dcc0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22111cf-e0d7-47a0-85df-d9365eb3a322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b05e07d-ef54-4dfd-b6de-aae65e019fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e634ca-e737-4c24-987e-295fa2101445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92c9b9f4-c571-4989-a2b1-10a4d0c64c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779707d7-d8ee-45c8-b4a8-986a28009b1f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a440c6-853b-4642-8c1d-6e5dafa31525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c784bbc4-db9e-4ecc-866a-626a14967c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55ec2dd-7b25-4d5e-be6b-cfb05ed31608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a7dd41a-b965-48cc-be26-9864fdf3d7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6769a987-a0ed-40ba-9ab8-3d50cd8be997",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8451c5-ab1b-4d2e-af45-3b5f4e319d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46720857-9bf2-45a0-9122-63a662de026b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cca6b2a-e1a6-45ea-a4a8-0871dd7fb8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f32767b-5bd7-4eff-9880-c6cfd0f91f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccde1ecd-aa93-4b30-b967-018512a00e7f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9bac94-caaf-44c7-bd9c-b14f67832a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7939f578-a00e-4789-bd08-4cebfe0c5b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da642b40-ecb4-476a-9aec-ba5607333388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84796e03-2c0f-45b0-8704-afd6cf6ff891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231af2f4-d830-4956-848e-33075b76228c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f4dd89-1fb0-43c2-b2e2-ad1cccdbfd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ada1fb-cd8e-4935-b64d-9bc750526ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e941a9-a7a1-44fd-9d3c-35b8eaabc55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c998fa6-6f92-46c2-aef3-ce564bb8782f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc94a47a-8cfd-412d-b1d0-324c7b7ea6c4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41819078-4224-45d7-a6af-92bbf5a94a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0601667-c1ec-4e9d-8edf-4d437f70f4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89034ca-a548-4250-aefc-c525d166a6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4ea67e9-9d31-41a7-8a06-08b25def2304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3056f2bf-3b0a-49c2-bf5d-5c2a6b2bb5f8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bedb08-8006-41e0-b4a7-6f92aac1710b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663c3a98-a94b-4385-903b-0852e263a27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c8d650-cc40-4693-8ffc-1aee1e1a78e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3285bc62-cd12-4716-8a86-6306accf9d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97b4e27-8761-40f2-9989-b177be9c8fe2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e59718-1aab-42c1-9c09-4d79627e7248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc0fc7e-94ec-4ea4-b77c-dc2dc4421021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489b863d-9005-4ca9-99f5-734cc2db2880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50486bf3-5e6e-4724-9c99-a2dcf04fdced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941164a5-916a-45a1-b359-1f32b5a54b8c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c199ce12-8383-43fe-bded-c1ee222dfa02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c7191d-59dd-4000-bd96-1b181e36126d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993e59da-6777-44f0-b27e-a94c1790dbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a56da85-9643-4faa-a115-db638cd4aa5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8ac49d-3089-4782-93c5-f4192fd41ad4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16effc15-1909-48cb-8537-b5c5249e4987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0501b3-1e68-4be4-896a-9c766725fa89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d104daa3-f9c9-4b76-964d-c865b04e3268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "003648e0-54c5-466c-9b73-0dda6fe070a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae9814c-b1e2-4556-b87c-109447ccd20b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea16426-a59e-4919-8978-255806d05ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d07f0f-7813-4842-93c3-5a279e17d39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a5d587-fd4c-47c2-bbbd-0367e4f9ebaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00f0a107-07fb-40ea-acc8-f5883e302542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f47c75f-ed41-4b30-9104-1707eac6989d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa598a81-1083-49eb-8d6e-c31dc64ec46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d29385f-d4e8-43ab-9918-e88e3427890d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970f5f57-b614-483d-8171-5ad339ed543d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fe9fe60-b0c2-4a95-8413-e9ab3b261ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bae0752-898a-4b7d-9840-b56aa3b2257b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4297ec-5f0a-48b0-abec-e6d09493375a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ecbd96-7e26-47fe-865b-d715bfd06d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d4e5c5-15fc-47b0-93c2-d0aa81f5d826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5334566-6733-45bd-a00b-53bc9ec052eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1576335f-4b55-4f31-9b61-e2cd00462efe",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65674b65-0a96-4998-9121-6322daa40fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ef6a36-d36c-4e4a-a07b-7ee7473f3781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c536a3-fc54-44b8-a704-6ba4422f35e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cdbbf1c-b4db-4c52-a4ff-da486967a5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71b0b95-64b0-49dd-ac6e-8a00e8d4e1a7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad1f4ee-60c0-402d-9ea7-c68131dd404d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7f55e8-af1b-4801-870d-b5eec2d2b201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d63d3df-6714-4124-bfcf-558fcecc50d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8b5da92-d5b4-42fe-a68a-82b467dc0a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5742cef1-1e30-4fff-b911-d398d9619b74",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "383d1341-be90-4def-a69d-b3f7d4118bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d5c64c-21fa-48f7-b734-634fa2d74a5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b390c0e-8aee-4b44-ba3a-ae1ee2ac0898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5eb6cd9-8673-46ca-8e5d-0170ab902365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7fd875-8300-42af-ab6e-6d68f3e39e1d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7219b1c5-d1ec-4db5-903c-e5df032b0d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff2d9241-2c00-4b68-99c9-85e9bf1cf4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935fcae6-3993-4977-b649-ec127fc212f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1549e3b3-3efc-4ff7-9870-a296dfc2a31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ead290-d037-41a6-ab35-f076e4de81aa",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da5f74d-7c4c-4ed4-8446-69bd05004b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290900da-60d0-4a85-aa98-19eab482abea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8697d9-e20d-42cb-bbb2-d6a38964b637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "37d18f25-ddbb-478e-9d6c-c3a652dcf1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f1f5be-8b12-4de0-a7a0-f5a3bd78e553",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6650e81c-2b5e-4204-a14f-d0934dc90d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e644e339-6dad-4fde-8348-4c1e26f15f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c237d25-3e1b-48c0-ac58-b35f132f68d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4107d3b-cbb5-419b-b370-e0f165711b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecce1815-daaf-4c89-abf0-76afba0ef6b1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff32888e-dd99-4b95-8bb3-7c8d0b14b802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b82a637-050b-434e-9b52-ea1b4f6e1735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d72a8a7-3153-42ba-bdc0-eafb88b52eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06fcc5ca-9e1d-40a5-a441-2a880cbdbd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82d9b43-57cf-4bf2-a858-a09802dc04eb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153a426f-a875-4ea5-90cc-a03a556ace2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7780aa6c-1981-42e6-aa70-7f3d5569fcd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26862755-711f-453c-91ec-656c2ddaff2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf398d4e-d6fa-400e-b536-3ccfcc69b4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c598e20-1b81-4f43-b227-5a4296417c43",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b54c514-83f8-41a9-bc2d-47a67e07a57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18ec26e-cc3d-4589-83e2-e308f10a38a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036c49f1-330a-4c54-8d6f-5669de8e063f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec0e3014-4d92-4ce5-9cf0-399e39cb49f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090c2c07-f9b4-4a7a-b794-113351ec1ba6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfaec176-ca0c-4226-8087-0bea856ca62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d401c0c8-fb44-4240-935d-9ea387d6024e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e2f225-3180-4dd3-9593-3c64d4f63115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3791b04a-99ca-40bb-ba80-1667813316c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d9bc8b-6083-4551-995f-4b0d9e467263",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8864ee2d-fced-4b1c-8f08-3f59c004938f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6faff6-3e1c-4559-bf18-633c64176d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb10b41-6414-44dc-931e-0f8e9fbebce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "af9498fb-2650-45c0-a0d5-e2dc4e157886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f4dc4f-d478-45e3-aaf5-7a5eb499c019",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258f947a-883b-4712-9dd4-f6f09341ae41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8734cbc5-0a07-4d1a-95c3-24b32b202497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465d5131-de7a-4ece-a111-174cac243918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9603b00c-eb29-472c-bb56-3a1b5a9b0b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddd8105-c109-47ce-834c-a9d54ab4c24d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fbd3d5-4a48-4473-aab6-d1510a189e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158f2bbb-938a-432e-a3db-14d2fbf50c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c7bf78-13d8-495b-8824-5ce208079827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32b21bd4-7a65-43b9-9381-d1eddb8e543c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27770c95-d06c-42b1-a96a-35a0ddd0dc95",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6883a1c0-a878-4601-9d7f-e599583933f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5ada59-710b-48b5-8321-7cbfff9c6530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e437c87-b8ab-4571-83c5-dff63516a81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "006a527e-e74e-49d3-b076-a975e571e6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b738caa-9f5a-4eea-8087-8ddbe80e4dab",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409a663c-e428-4e11-a422-42eee812869c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868f72ff-1624-4dc9-9c2f-e6ea1c1acc7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad5d0aa-92f8-4bab-a88c-00fb12768432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "176bf6d2-348c-46f7-86a6-0a1931de6149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d6fb74-e69d-4edd-8a7a-eeba1eea8a6e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d49f05-2565-4895-b461-59ba6b7833c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5453997-4c91-457e-b091-15ed88cce4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3f742f-8037-4c75-ab3d-321e1f08ad0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8ab392-bea4-4971-a27d-19c2a3da0a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fadc9c-f066-47f9-8cd3-03a3e7f9f897",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6051c6ff-93b9-43ba-a43e-b48797f591bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c3793f-d558-4bec-ab6d-61c4b91140ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b525465f-f2ee-400e-a4de-ba0daa925dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "663f64b6-8584-46e0-b15a-98662016588f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e157deef-833b-4504-8036-ebf51f93f246",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7741c73-e8b4-490a-b161-34cdd41902c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55643084-6831-4fe9-a039-cdabc9983b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04880e35-505c-4213-83bd-4306f0dd5e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c19d6e5-ea9f-4072-9c4d-b304e461c5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3259ee7-28a0-4830-b72b-06e8ecbb5e25",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb0d1ef-43a0-4fb8-ae7e-7548347c7182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c6b91b8-ce8a-45d1-ae3b-8a0f6de4401f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06442bb7-2bf0-496f-a091-2e35079e0acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e052f8-8bb9-473d-8379-d931592d960b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbacee41-1393-4bcc-898e-ad1b6747b5fa",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887b5d98-f15a-4e54-8fa1-d50c7c9566f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcaeff6-ac81-48ca-be54-a55db9b59e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6eccfe5-844c-48f4-bea5-91f81c013d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58a3d45a-0c60-4cc7-83d4-3952f1c0ba0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c28b0fd-3279-4fd0-86bd-8d57706153c0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72142683-dbcf-43d2-a6df-aa3854f4725b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4704539d-8dfc-4c70-bd3f-34be29667737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08047675-9c0a-4620-b4e9-1920d797e5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76031e5e-7283-40bb-85e5-3c9d7cff6379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87216ca7-5bdb-4324-b5e0-cae2b91621b4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0f54ec-7547-459d-a21c-ac0d52b20d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ab9c69-0bb9-4d22-a249-5a92f55efe9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e495481c-4e97-4c12-816e-c5896b6c76e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "53f77898-61c8-4648-b22c-a3d6cdd38532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae62bc5a-1cec-4507-aa90-6467e58fab4e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30dd3702-8a19-46cf-bb22-1e5da14577bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca79ea38-8fd1-4fad-9d05-cc43ea169ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c84a47-fe5a-4a7f-982b-0e1b3e8ec475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8354e3e8-fb1c-42ae-8c81-fe4533e89df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16fd637-5101-46ee-9c73-45f7d1589193",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fa056d-3d70-4110-a214-513c2e40193a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2abed7c-27fe-4409-8594-1626a4b8298c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ffb2f6-d7a8-4059-ba88-d1ae95577545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc21835-6b0f-4d1e-8323-e16954f010f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65842432-1e96-4735-b195-c286c2842ed1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c0a2fd-10fc-4561-8cbf-2efc0832ad36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf0f138-86e8-4261-b79f-540ef49be86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcfa5a4-7ccf-43b2-8cef-6ac5ab565b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8da56b63-2460-4aa5-a970-c6bd1fb75d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f7500a-e95b-49d9-9327-5e969ff4cd10",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "741bcb99-5a97-40b1-9bbd-d5443ab41aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626bde94-56b9-4be4-912f-05af98ca8297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1829997f-13e9-4468-8c86-13276e68beb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e26f8fae-3f8f-46a1-9ea2-e802e7ec6f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6936be48-66c6-4d9f-be80-1ae1c954263d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eee2177-561a-4f01-bb5a-c906d6281b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b2447b-6cb9-4562-9578-0bed782d7697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8feec62d-f1b7-4559-93e5-b069ae690b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce040fb-23a3-4ea3-a9f2-08d37835af67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951ac18c-f6d5-4a38-b6ae-6f199e97a815",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f0a968-f29c-4f71-a854-11525a709d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb03cd4-be8c-44fb-bbfb-44df9884947d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dde009-0f61-4201-a103-c401aba0b3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e42ee906-273a-4312-a137-727de81ea09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70c3fe1-6ede-40f5-a794-2399658b4054",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf04c42-7def-4d03-8fd2-e5049589bc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c443ecb-3b6e-42f7-a7f5-214e351d3e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd496214-3a5e-4507-944d-085822ab89d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "27a292c9-972f-42f1-82c3-3086ae72e1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae8b14c-02f4-48fa-bd49-8490f1817188",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3510294-5dcc-4ed6-88d4-a48853b72fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437baab0-35f8-4557-9f5c-4548e13babd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a8e74c-3ca2-4bcd-aaa1-65387dccef67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f117071-f3da-4a49-9516-ffbd056a6b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a86535-7965-492e-8925-27f3dcf9bb10",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa6e08f-3ebd-4f86-bab3-ef040c93cb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea08476-8dba-4d71-a350-c9717eeed8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8f8f13-e00d-4f05-a46f-f8fa2998d447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf9ef68-1cbe-4ab7-bad7-1bec86b24966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40147a79-6180-4e36-b418-d1e45907c1e5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e1f984-b755-4795-9333-481ec19ae91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a975b43-e600-4908-8457-9174b99255ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cde0e86-b05f-488e-94b7-5464e38f1e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a885f7e1-db25-47df-af0c-0ef794e7ce07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d916983-d86c-4215-ab46-a2e81564fdb8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6d519c-1283-4bc8-9ce8-7262df44f4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc384755-7175-4459-a30f-e6d913b2cff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f729a8-b439-40cc-bfb4-7b46ddd19656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1204511f-bd91-47a2-a256-7982d9aa1b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08175c6d-8a01-428f-87e1-0f1570a53893",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76418a29-28be-4996-9f45-90d614bc3951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61dfcf04-d732-4383-924b-86b3a67058b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ba6334-1c01-45d5-99b9-9fa14b3a42fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0bf2288-911f-44a3-93bb-be94c29339b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6e54c0-97b5-49f0-870d-c1ae7c1f8c88",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ed5b27-ba79-413a-81a7-ebede92d3a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffaf0a9d-df04-4833-b915-4e28d5df1f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c655812-53fa-4b79-a9e8-54dc71db88fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "021b61f8-d2ac-448c-ab6b-a2fa234ce246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c28342-2a61-404c-9dc9-938c485c3385",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b23bfd-7f47-4205-aa63-806e719a2eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820a381a-0af4-4ad4-8122-a37a45ecb574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9266238a-32b8-4b66-9cac-110deaf4f38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87df3427-508b-470d-b225-8d3c9af6a569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414ec6e8-9a21-4ec4-bbe1-d2daa60bdb9a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d4b133-014e-406d-a9f7-db31c47dba42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665bde0c-ec3c-4731-8eee-e5a325956baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9814b9b1-c1ee-4c18-b998-0762ee412cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1b1347-9ca3-46d8-a603-7368beeeabd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5819e3-fdbb-4b28-8dba-55c065a2161e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864bd146-9232-414b-8dc6-faaaeb95c195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd15936-ce22-440d-b73c-1ca3c553aeb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8496ec32-3b75-4784-a180-76d4a8a9a1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc4cfb8-fa25-4e2e-ae56-935e58842d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e231147-5b27-4057-b198-b020ad6c962b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc13a7b-a8f2-415b-9122-695d58b0f50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88418aa2-9deb-485e-94a7-c7f5991d5b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434f7376-a770-4b9a-b333-1044781f215f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c6ab95-3b66-4e50-8445-2a7f2e6e5aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282d7b28-1eb2-4ff6-a5a9-c0b7690d96bf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50922f86-05ed-4b15-a0d8-6245ae719388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0022d132-9233-45db-bc39-950230b67950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6044a3a6-02ec-4c64-a6e9-3fbd1ea5d899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "233b7333-9f66-4af5-bfdd-55deb377cab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066474d3-331c-4d93-b2af-8b3bf4e177b7",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036b5a76-549c-41a3-b850-e928d76f431b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc54ad9-2c36-4384-8077-45a38a16ba22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7cf3c1-8227-4241-b1e4-f2fd4984b98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eed7d5f5-e974-4080-a041-a64a7d4fb010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7381fa9-7e26-4a3f-9eac-98907213e5fb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e22c32f-1cff-4a7f-a523-9ddc7facc9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc974cba-4318-47b1-975d-2cd66a8f607f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3d8d66-3500-4409-bcf4-f4e1dc3d69c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0adece-2f0f-42f8-8b0e-dd392ce53d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255f9ff8-d5f2-4878-9bb2-95985278887c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba05a6da-b5e2-42e2-a3ac-9e6585b4a015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b80c4b-53f0-4436-bc4e-27c490e59184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803c8ce3-30bd-4ff9-bc43-b3cc1a39f38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "29c8063b-dbd9-46d1-a6d0-f16d3e8a534d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c627ce-8e33-4298-b4fc-645ffcda6016",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421916f0-5d7f-4ba7-828a-581643f1e01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ac5adb-e1dd-4bb7-a86d-9cce4716ee4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3401885b-ecec-41b9-b6f4-c4c7114540c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fde901e-62ad-495b-aa6a-30d34e0509b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df27803b-4b8c-4019-98a8-f66f16bd8f9a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb29e26-cc49-4779-9c68-11a195044327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a149cddc-76d4-431a-ac29-c7b490d9b6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d62e06-4364-4316-a8f7-8c7dd5263546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd14c408-e828-40a8-8915-3e06b438f974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfa5dcc-4d65-45ac-ac9a-50e103eb1aa3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c1f49c-5a65-4862-8365-2b83e5d444b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75187cd-21f2-46a5-ba3d-3990878ed2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900509ce-0fcc-4d9e-b8d3-89227b5c96d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e284dc7-c672-41a4-ad08-913c2f457615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a374bced-41d8-476c-9419-6724d8737793",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450b1af2-247d-4c11-8c93-b108ae979c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e762c65-4c4c-464f-aada-bfb117f5e31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bba1e1b-d1b0-4979-9584-dc887d412b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a9cfbc-0573-4858-8a34-feebd9882b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655df4ed-9d2f-40a6-99ea-b1d6e067735b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc5a04c-054b-4e2a-a849-afcd85443dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669aa75b-3b6c-4000-8f61-5abddb6f41c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5a1a45-45d8-49f6-9781-80e3394ad593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "68656a9c-c3dc-42c6-9fe1-f70ceb701a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c359c17-31ed-4035-9cbc-43d43d952e21",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170a90d9-7809-4e30-bf48-1fe4b0c4dcac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc25cb5f-c688-4f81-9d7e-c5ae579ce856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8f7c1e-6d69-4382-bafc-3a9a93ced79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "46755b92-73d8-4252-8885-70004b4290a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900f7379-2af3-45d4-b9bd-5750179eea3b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07072b97-41d3-450f-90c5-e2ba44649831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896dd73d-52be-44b1-9658-7e86677b25a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c376a997-6233-4f19-aac4-dea813defe2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ddbb65-de46-4020-95c9-c7e3dc574bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b55115-ede9-4b74-a83b-9de039d8d765",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476d1137-d233-4c56-998a-aa79f8a50c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1441677b-a0e5-4a2a-9529-764abb426793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3637f0-a1fb-4429-910d-7183227ab12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e940f94-feda-4822-9c99-c9af9605d1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e89b5c-2068-4353-a1a8-d770c5ac02ab",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fee2fb-8515-4ba9-8de4-1f21056894b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6de7eec-bc5a-44df-b1df-0cb2188b9e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93ed882-a024-4f14-a364-000fa7921aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a717a4-32cf-4a87-951d-fc3f9a297e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1078a17-4cd8-4ecf-b9e5-7f901ac0b534",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026db104-cc45-46ca-9476-a4d628de351d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3328827-7232-4fb6-8aeb-e386fb3b9f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc87c18-32a1-4d9a-8e4a-a14d917e53ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d66ed77-8a29-41f1-bd62-df53f58d5aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf46179-29ba-4913-809a-8c2fa0fb40b5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0240f0e-75d8-47fe-b207-082ca01c3448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e45091-9b2a-4032-922c-d7187aca94be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a0d125-3285-47a4-8b54-c244b0a717fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c4874b2-7870-4b5c-8c0f-be747d8b5057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15ae356-9f10-4253-a884-a0d37fb7ca3a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1653f0-67a8-43fb-bf53-74a3958737a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4095ad60-4208-44d0-b663-46fbc890e6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7933ec28-a4e9-432b-bda8-8fdea2a9a180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2770836f-666e-4dc3-89ca-0d988f8abdea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f876a7b4-6958-4b2c-8919-cce372d8977f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6247c1-353b-456c-bef6-d7d1b2378737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12895114-c97f-40fb-bddf-d0b63735e126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592fd794-b30c-456a-8ed8-2cf77469eeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d578b7af-3ba9-4244-a352-47334fd47a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3891c7-5500-4295-8d72-b98a8663afbe",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1981cba-1807-4f51-a85d-f62982ce23c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2146b23-0e00-49ae-8503-ec4028d26ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf619c5a-f989-4bc7-94e0-a3ab58a33c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94884488-b2c9-477c-a13a-e4efea746baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb798ed0-b854-4354-a230-6729c964325e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adffd48-66a6-4a93-986e-9669d25d81b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c664f43e-2bd9-4e8e-9cf9-d49ce7e6643e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6995dc5-bcd0-400b-abbc-120b1bd5fa48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51e2aa1a-69b7-4de4-8b19-bc518d2178cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cf8139-ed7c-498f-91fd-484b2ac3f1e0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3760f2-f8bd-4827-b855-7e08b2be1288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "301b5fb8-4039-46e4-92fe-1519937cf918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9b22b3-dd94-4a22-9719-bd74fe29257a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf9dfb4-7078-4363-80bb-a8bf48f39199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0b15e0-a1fe-4c97-a54f-d9e17417504c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e3ee18-7b94-4210-ac5f-1e87d744e846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8253f5da-b7ea-4a4a-add1-1909528d4ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ced2a0d-d112-419a-a7f4-ecd362dc1640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac493276-7a68-49eb-903c-5994e737ca5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd93f13-c045-4103-94aa-fb81b7629231",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20172494-a442-40b0-9809-fb122c7d434f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e034ff3-1eb3-4dbe-a5ae-83c00d2f5e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e282f3d0-8515-42bd-aa1a-86de58153620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02a7d7d4-902a-4fd4-8e60-431f36e61bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e09172-d9a7-4e67-a80b-ed0ecab116f4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ffcea9-7f44-44cb-94c0-a2dc79ae7438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f05719-25f0-42ec-8742-a4676d1d66bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350c3e56-c0a1-480b-a356-b68150f229b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "718e9fd7-70b7-44e6-8457-09ec352588f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a13574-8f20-44ba-81e6-63d80c951fa5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b774762b-2c2e-4f41-bb7d-af98bd7d89fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce53375-78e0-40de-8e35-add661bb8c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f188740f-2650-4c3b-b51c-c62f32b419a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f996ab-979d-427c-92f2-d1765b461788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6793d4-830e-4f16-831a-bbb82686f6f6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5d884e-28d3-439a-8ed8-2c7b10c3cc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28c41e4-4d00-42e4-82cc-134920133794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ba4e7b-f1ad-4bcf-b2b1-3ca8e4bafc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f138a9f7-1d92-45dc-8c0a-938a68d4d376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdaa5cf-0fbd-47d4-9160-1290f0e69485",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9470a2b-db8b-46ae-b51f-2284733af9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768cc6f2-4c22-4849-bad3-aa80bec0dc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad7d73c-7546-4060-a4e9-13b9ff7af475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "477588d5-d9bb-4316-8f45-eee9dbdf909c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adccb4c-2866-4f64-8438-3f34fb1358af",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1569aa5-ea04-47a8-92ec-fd6b8a01fb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261b05f2-cdcf-4207-8e11-e97ea5f0a003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db223dd-bf22-4e83-8a24-455a7d0beadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04514b90-b8bb-4438-ad55-fe55938ab479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c0ad7d-3abc-4966-b14e-171686849fd1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551fec84-4b9a-4a59-b447-bd8b66db9c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f8575a-f157-42e6-8e3d-0833d4aa64d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce908135-5260-4a85-a727-39b05c191b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9971f3f8-c256-4317-9685-38be5414fa5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f79c60-2f25-4c8a-89e0-6e36c627866b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa1c471-25fb-4593-bea2-929bd2dbad5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264b6069-0498-4bda-92f9-963c954df7f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4c3820-9b76-4f00-b5bf-a5d0318f9648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa21fd19-08ba-4986-9593-7864f5ee4997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9daf489-b31b-4922-bd28-8143891aceb6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "497cf161-a687-44dc-98f6-2e8f1bde4e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa375d1-0039-4566-8445-c21262a715a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0fdd1c-3bb7-4987-9288-77157dc91c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c96c52e-87cb-4c01-8da1-a867c511dc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cf202b-a832-4786-9881-bba1abd074d1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b934bd-ca76-4e1e-9584-95118e7dcb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667f6e14-245c-48b2-bd65-91e72ecdccfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e5d466-8871-484e-a837-b65612832e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96ab709c-c96c-4cfd-bf11-637d4e0cdf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abeab0d-f6e0-4eb6-9e46-04028d4fd8a1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3c74ad-9627-404c-9462-e2e7159becac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359215fa-0042-4801-a268-343552db8eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769a7b4b-e25e-40fc-b880-00b0f360a5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f0b52d2-dc5d-4bdc-81c7-8d9696c0428a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afc4dee-b5ef-4530-9acb-d354c15fdbe9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052d2c12-4f75-4416-90e6-9b78c0d2ff51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ad59f2-b5ae-4e10-b6fa-38c911d11d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d87b70-b8cd-4f29-a3e6-7ff1ba78a911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8991a77-4b48-4afc-8b06-6cb5afe1c7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ca1cd9-f829-48a6-9731-96f544bc57a2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b47445-32d6-422f-b996-e77e1826d87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9deb5fd-1374-41da-8840-c710d9203a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9588820-0934-415b-be24-e4e666759611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a690fca4-6a82-4053-93c7-78ed4bfceb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb821e2-cfee-4c54-897b-691174b9bca3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544f83dd-623b-4d88-a314-0c3787b7a4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15fe6f4f-3beb-44fb-80d6-297351aa9add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acd18bf-105c-40bb-bddf-f297197f0810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf5fc30c-9549-473f-8968-67a6349e338c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dda2e68-67cb-4bbe-81d1-6c77bbf37584",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30334969-e31c-4abd-af56-66be6a5c3b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81fabad-1f8b-41f9-b459-ef6c1719c7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6e33bb-af3c-42ea-bb93-a2606454f188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c20333-cfb5-47d7-ba97-0c4f5c4d7f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e70c5ed-19c0-4fc7-8429-e8be77f3c5f1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b326a46b-133e-4fa4-98b4-52c4c05726ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b77054-f359-487d-9605-27df3634cf3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2744f470-e5e1-46dd-b0c5-602853df3391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3a4ac5-d518-410a-87a2-8ee3b3595d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52224e6e-8774-459b-808e-853282e16e7a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3806e2-b341-4f70-a090-f931ec8505fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd96c7e-d40f-40f8-86b6-029d49685e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb38e05-78ee-48f5-8931-17baaeb5d569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "65b62a67-a5d6-4ac3-88eb-6c1df35807d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb95f72-175b-4278-b84a-916f950c5f36",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c61837-403d-4158-92f0-47894e394f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc80b065-d210-4ae7-ae98-c906eebbf6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c29d33-d7e0-465f-b3c2-ff22fd91c9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f4975bd-6e37-45af-9912-0fbc139cfe53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ededb2a-c9c8-4959-a956-3c50479e0b71",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2ae80e-e79b-4479-a9a9-1202de74c55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8e5aaaeb-fe66-4571-9c73-9c7e9fcf57f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c203ef-e394-453d-8239-f71f3bb56133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d5acd2-45b4-418d-9486-1bfa109a19d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de3e794e-af4f-41a9-99df-317796f847e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53ab050f-348b-4ce8-bc07-b326de7665c9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3437489-6cb3-475c-8088-ce601cd2e032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdaf16fd-01df-4731-83c3-b9b3768cc961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45a2d10-14cd-443e-956d-d5b98c31f2f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f0e9c738-abad-45e3-9236-9e4032afb4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a32953-0eae-4ccd-bded-52e3e1e6a4a8",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfe636a-127b-4c6d-b5e0-6b0e425cb41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bc2c96a-a7ed-4db7-9278-28be42600eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a8d434-f123-48f3-ac6d-6cf06aee41a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "77a1224e-a33f-4670-96eb-438b5ad0d615"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58c9d3af-e835-4ec9-9039-8d46fe99e0b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16c3da47-052b-43cb-88de-f954553fe441"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dd3afb4-faed-44cd-bfc7-bda781679417",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5c42853-0ec5-4fca-903e-da3016bbd64b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6b15174d-2294-494b-8480-1b5bb8112ed0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c262a16-1286-441b-99b3-1ca044a5d04c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f7dc41d3-216a-4b44-aead-83bf4d56b7fd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ede55f31-b621-4825-bfb4-bfc7a3d6657c"
                }
              }
            ]
          },
          {
            "id": "a187c548-84d5-4c53-8a3a-1d84ab781f4b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "13510e65-e477-48d9-8988-24a439431971",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ac83475-ac4f-4cf4-b85a-f8a7d09d2236",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9da4040b-4e8d-41de-a642-37bc5862516c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf8590ab-ebeb-4155-b57e-b3ae9b0b1447",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9323632c-bddb-4a4f-857c-dfd119392cdc"
                    }
                  }
                ]
              },
              {
                "id": "1cb6daee-dce7-4130-9c6a-bbb0d013da0e",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0aed60cd-4433-437a-bb6f-15a5e59b465a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a3a0056-5244-4c51-b34d-303d39b88d08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c439008f-1af4-4537-b984-913797100a6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c40e8631-b5f0-4fd4-bcf4-014b0d1e0a99"
                    }
                  }
                ]
              },
              {
                "id": "2c8df227-ae02-40aa-9ca3-2b53b886a6d1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7e1cbb5-e38a-4fa1-b474-1093a3ea2924",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "01339043-21cb-4b5c-88fa-3d734419760a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5816c8a1-73fc-4f85-afd3-3b41609bba90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a6c4dce8-9017-42b7-8df0-bc5b8c9c6751"
                    }
                  }
                ]
              },
              {
                "id": "a56dcd9f-21f9-45ea-97e5-20f820ad9c66",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eccff5c7-1988-464b-bd07-3958eb77ccce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fca0386-871a-4bb6-b508-3cd9ed42239b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b5aeead-1299-4aae-a77b-c79a55b304d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "594a7fc0-ef51-4bd6-9676-241b94dfbda8"
                    }
                  }
                ]
              },
              {
                "id": "5a7a2c2d-c71c-4c8a-a6ca-2dc2b6349b4e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84509db4-a083-460a-ab6f-efac6d406fd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "983c8b90-0ec6-4348-9387-5291364f88aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7cef942-7cb6-4c76-87fa-1e9813a99ffe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "90edd2ac-6981-4b4a-bf14-4f686c28fc45"
                    }
                  }
                ]
              },
              {
                "id": "3492b763-2d76-4514-8542-cece15bc799d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2db76fc4-dd6b-4b50-9f6d-d6ca94e9b679",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f9702c4-d44f-487c-b22c-ac6f17e0687d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41c2e3c9-d9a0-404c-ae46-0797c6b1b662",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c7f03a5d-2f6c-4002-b161-53e02d4e1ce7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a151e78-dc83-4672-b145-6b6363f21763",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d48a099-11ce-405a-a3d5-d981eb1fe0bf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f8fdca6c-72fd-4291-ba1a-c194932242e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41fc68fe-8dc6-42a8-9156-f9dd2e27a66a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d540500e-8c45-4b15-9afe-870f78be4678",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c37e377c-3f58-44d8-b77d-d520ec69013e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20f5b222-b8d4-4545-bbb1-e67a88654a7f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8d9b717-7459-483c-8df6-66fd10efe9ff"
            }
          }
        ]
      },
      {
        "id": "efb5ab40-9108-4b21-afdf-42c4139042d9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1f681964-aaf0-401c-b85c-716a44035230",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57a54a52-bce3-4691-8303-29c86e957ef9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54d1db49-b50f-493a-92b1-55dd9a1d9e5d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34a8706-3101-4c42-999f-02a2298cdaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4687cb-acfd-4e9e-b7e8-4aeba613c367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f082537a-27b1-4a3b-b35a-1758ff565989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7d9d4f-45fb-49a8-a0fb-2e1488635456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b593244-4df9-446d-b053-1adac2585013",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46f2b87-3fb1-4c12-b00f-75b2c487e5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5b28f2-82ec-4c3d-8248-e0f83163abc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c97f400-389a-4dd1-b7f7-fa5cd2e1bb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "11a875a4-b5ec-4630-8e82-d2ef328d308b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0159982-fccc-4d9c-9382-cbddb93e595a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fe1349-56a5-468a-b383-49673b386029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616f7d3a-a713-4cad-a3cc-fede6bb9c31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70c6d4c-5219-49a6-88be-f0a7aacf0a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90b5bf62-1d4e-4c85-bdcc-567e9b518d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f54263-ac90-40a4-9af7-97661bc9ce33",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdc8b6c-52b3-4b3a-a03a-448f4f139388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9ebb72-9226-460f-a957-91551e97a062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfb2d2b-a87f-4e96-9426-b63a72a7971a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc1fb9d-b2db-46b7-894e-7aa4b2d02177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a22134-318e-4e3f-a3ec-88bfa989d035",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec713c2-d434-4de1-8231-85f016d96c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37c9814-8d67-4d7b-9282-7a0334e56747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a181686-6264-4175-b8e7-ceb475399bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d19a6c9a-41ac-4a23-adfb-ecde1338b9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3fe811-e6e7-49fd-b7a2-bab4d9e5a022",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d15d50e-90bc-4bed-9147-8a5f7b61ed7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1ea68e-75dc-4a43-88b9-51d2a6e47a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f855082e-c0af-4c05-8dad-98a585ab8766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a167dfba-a303-484a-9b9d-55a7a34e22fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080898b3-2f11-437e-a2ea-e23421d3ccfc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711dc1f2-6937-47c9-8fc1-6752b4ffcf33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905c6aa8-d0fd-4a4e-99ee-de311664d6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ac6098-2d0c-4b7f-8d99-19a4d7e027cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffce5c1e-5b2e-47c2-b73d-669a1677a628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c54b66-9276-4c8a-95f7-75661aea7f17",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebc0638-a9b1-4fc7-be92-6ca2de35dd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721da50e-168c-4280-bbc5-a11efe275ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4279fb8-08d1-4c0f-8713-abaf5bfe4786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dac6d710-203f-4e7a-a7a8-4b6d3f29d2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264d510d-6606-4b91-838b-834d18140172",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb685e1a-76fa-45a3-8795-8d808cc5f57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be2f5c1-34ee-4495-8c82-7db156f8a4e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ade9ea7-7aaa-4745-9888-9e60f444f74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4b43af-f10e-4751-b9c3-2ea54e9f584f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75efa117-60aa-4b5e-9e0e-aa8a327cba24",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23dd462b-a5cb-463c-8c32-88057b1e0dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d70a738-c22e-4ee6-be95-f92e7b3e5070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cb8c3e-b399-4d8c-b691-e6c4eef43727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f79166-0623-4a6c-b368-d7214c4a9ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff903524-b6ab-4ab7-a8d8-dce71553f48d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598c657e-d4c0-4ada-8d0d-89692ab8c12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "817afb4a-5208-4539-8a7e-89fd239d1a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8c9cb3-163d-4b4e-b38e-8bd14c449634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d2005763-8cee-411e-95a7-a5d1df013ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09eb8be8-e461-44d9-a580-caf95b7731c5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf06f649-4ead-45ba-b110-00e5ed476ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a089835d-d601-426e-aa81-7faed0f3d507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb9577c-e38b-47ea-af50-36ae4c75a1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e420e0a-7641-4645-8e5d-6e9f1d99a9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f1d7f7-9db6-4721-a9ce-ec024b8a0217",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a33881-4f61-4309-937c-2d02749530b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd487c3-8a20-43cd-ad05-b266e213a6d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d604a9d5-25e1-42e2-a326-eac69814d444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc106fa9-5f62-4935-b869-ac9a15f120cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97da9cc5-2817-4be0-8e6d-b75f275e948e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d429d8-661d-4a26-bf85-8650f561bb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6117336b-aefb-4663-87ab-8ae8e57d4ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ffa719-8779-4a23-b632-cc93d6cf66ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dad5cb2d-d2e5-4022-9e75-f6b579f0dd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496c696d-c9a8-41ef-bc59-b0cba167b65c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea103ca-75de-4038-abde-d72d68e2e612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3274302b-82a4-4bb1-bdbf-ade9405f0d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d96082-04b4-46c7-84cf-de339375d7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f33aa1e-853d-4554-a08c-8d6f972e2f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f17231-07a4-4f7b-adac-8327f7660cea",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabc363a-5be3-4f53-8632-08cfdb672295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cebb4498-a4bc-43cb-9158-89226a47446f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2461694-fc53-446c-a1c7-23daeaa18f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea2abfd5-f4c9-4de1-9c2b-000d6ec8d513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992631ad-e278-44e5-8a7e-f74045f1bd00",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab518e7-f10d-4f22-967f-4cae5b86c4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5f8948-8f6b-4390-8b8c-8e698264b8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e73635f-bed1-4a87-aac7-8841e8d73316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6b5143-b637-4f42-9abd-108f81ed9be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33405aa4-95de-42c7-9448-0b7df435b610",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549fb5fd-8fcf-4df9-8d78-9a5f1ce38659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1a8007-3fed-4be6-8433-e1a0ab50b1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be42c3a1-a324-4bd4-901b-9f8a8c6bd91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f0fe3a-2d14-4017-a12d-4076faee9eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8732b957-f524-4620-b100-9d9508ef6856",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f2bf86-3392-4c5b-937f-d0043baf3601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84af0479-f4c5-4750-a3ba-5732ea521efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d40ef60-b322-405b-b734-5c9f7ea8e49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "861b72f2-9645-4d30-8ce4-263355d4e82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c652e8b-a4b4-4aa5-a6b6-3384efa96e85",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f626f1c8-9d3c-4810-9f1e-1d367adcc84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726833b9-0f4b-4b9e-b12a-824e6dad89f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84916534-683e-4d10-aea9-519bbdc6cd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef547b5-edf6-4431-9485-5f12dc3c30fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4829e25-f2fc-4130-807d-15a8c56922eb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe8339e-33dd-4698-b96e-1b7e53771d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19bb075c-418e-45cb-86f9-71f03f4a372f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0006616b-27d4-4336-96fc-e2921f2477e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68429ad3-d867-4baf-a9ae-eef750c7f932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0021da5-dbd2-4a65-a1c9-36afa5d842a5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8fd240-f0f9-4c8b-8606-e941d0daf85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84911618-2b4f-46d2-8644-aa77f6c44589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2eafaa-1215-479f-aef4-48b06c0404e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "858a3c6e-068d-43be-8164-13ee4cf3f826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904fd077-ffc7-40d7-8d60-d2df54577136",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5d6362-c826-4b82-be4b-d3df9cd27281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "258c90cf-dfbd-4a63-8b5e-31b92631349c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe397f3-9623-4613-b106-421da9dcd86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9efe4d-7b67-4b47-8107-073293680b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd44ac1-8d5e-4ef5-86a1-67c99b4d09b7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df2fcf5-048b-4373-a123-6750862ae180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47759ff-ffa5-413d-aad0-1ced01ec78a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19dd6ec9-c720-409c-8fce-094ba082fbcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27ae6f8a-deb8-4224-8eab-4bc06bf7f76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8db4ac-fda9-423a-8cd9-8ca70a0ab3e5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41761c86-a4d2-4fc1-8e23-95dbbdbb289b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54e2ccd-293d-49c8-b34b-880db48e1eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c9fa97-7863-4850-833a-65dccf0401e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0eb0546-57e8-47c5-8125-40e75558bbba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4ea0c4-a9a2-43cf-9a87-335bb8c763dc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f56c15-137a-464b-b5fd-c62c83aa914a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449a9aa3-07a1-421e-a168-0b20bf2b4700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248e8b7a-9fc3-4949-aaf6-590ce6195218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3011d88a-265b-4cb9-93ef-b8db8849ee07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87b4ad9-99d9-4797-b252-0c873073203f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fba7ba-d112-4564-90f4-0e5d3fdf9aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc8e0d3-0f96-4882-8762-0d977a57a09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15874d39-c88b-4d78-a8b1-197b7b0a4c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2b4ffc-67fe-48f6-91c0-675a08910f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efc076d-6c21-4a95-9e09-bb67b06c5af8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ca3dd7-6813-4329-bf81-ebca83789585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9cdb50-0f57-4ab9-924d-68e5ef7ced5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0835bfec-dae0-4f80-b7c8-d74d9ea16ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d42f4d7-9940-430d-a64b-77806b44ef6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e2bc4a-ed68-41a0-8706-2fd4d58ff15c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09002f15-5ef2-431f-8e5f-88a6d7f8c6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afba8c69-b093-40ee-ab7b-d7ec7bcabf14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458ff25b-f3c6-40c3-8fb6-921d9e25061c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "804b311d-6b74-475a-88b1-2fce7f3b0b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f7b42e-bb4f-4bba-9564-2425ebedc8cd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e885d1c5-0476-4c16-afb8-d7d200f5fabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01b9adc2-ee12-4494-8bc3-254d7f78eda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6e7daf-8239-4547-967f-9697f30acba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f6155c-ab45-45c1-ad23-c72a54798285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9b5c42-a487-420f-af2b-54780bd40549",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683be13b-6d16-4d3e-8855-352c8f6d4060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d510db71-c235-434d-b1c9-4b7946fc23ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2587d42-571f-4b34-b5c9-dd2c360dcfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b51fa7e3-acf6-4dee-b7c2-c675885848fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b54bb6-725c-4c78-96e0-750a11427136",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508fa13d-6cfe-41ea-bda4-52dad052b5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09df4a35-a50d-4858-a6cd-9612df789caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08c8ef9-dd0a-45fd-b6fc-635118ba682c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bec635f-3013-4612-b283-afd63def0186"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "643ab681-f876-4b42-80fd-f8ea3bbc8c04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f50985a-2d9c-47fa-be6a-b2c90ca0dafc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46cfa43-dabb-42ca-a51e-a1988158e0de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d18acce-1799-49af-a52d-5faa54b95a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43550e9e-dff9-4f30-b069-69c64c85435c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "967298fb-7283-46c5-85db-3830643d7c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b091bf-3b4b-4910-b611-ad3c04202491",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb54834-760a-49af-ba85-625c0e004116",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "06d3da24-24cf-45bb-bd61-45c3709c440f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a538b774-fdce-4b8f-b44c-133e64818766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b756b76-c540-48db-b1d0-d39a6a842bf4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25454d97-5812-46fd-a669-c07950cd9534",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c625a43b-20ec-4230-9bc5-03dd5bf9a837"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "886267db-c6c0-4fc4-af59-3439d22adf28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dae49277-7bac-4ccd-98d0-5ebc1ec5450d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89b6a74f-806b-4586-9383-3fa744a9e8cd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb24fc21-61d3-464a-a409-275fc6c3f48f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a965374d-a7e7-43fc-9f9b-557dd0e44db0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b48d0bba-98d6-4894-9cbf-0c4aaa51a158"
            }
          }
        ]
      },
      {
        "id": "d7dadf7c-2dc6-46c6-932a-bb67e1f1fe77",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "284236c7-55af-4b0b-b950-190055f3b93c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb5f7477-091f-4b78-944f-34b9badf5d67",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "03b5d076-323b-42ec-8b1c-8ea5a13f44d7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3352d65b-fe15-40fb-9438-f8ef4b139fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d57779-f775-4217-a4d8-d991c39694ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a1b3df-5c4b-4483-a6dc-ab52b2c51105",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb22197-559e-4204-a706-30f5e8d108c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24188058-a3e6-490f-bca2-b359ced15ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e14169-b72f-4da2-8a41-4c6a480a51b4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6201d525-fd23-4743-af74-43a492f9ef4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88be3856-4e7e-4645-9a01-ae4b41c926f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2824d8e4-b9ab-45c1-a0a1-f9966e8375e7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d728cb-ee8a-4919-94b4-da2c9af465a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f98125-d41c-44cd-a2ab-4a88b2b81786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe5fa07-dcb6-427b-a02e-4c751ccbf570",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0f09bd-b01e-4242-8ddc-716c0a158952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bebfcc4-e248-4c14-8a82-9e40c46558b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2a6014-2372-421f-accf-6cebfbf48a3c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67969ba7-37e7-4181-a5e5-42286de89399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2bab668-7b8b-40cb-9d55-b7cf4b18a1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6505af-f3d4-4037-aed7-b440ce195e65",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dde3fd1-c696-43fc-b1af-36754309290b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd89414-ed3e-4f89-a132-afdc25eb99e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be63298-2aaa-483e-9a7d-416468c4417c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac338c2-91f4-43e4-b076-10a6ea00892d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719bbcb4-3796-4995-b620-6b771b56200e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add7198d-12f4-4d0f-9511-6801aa7c814c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2124d2c-d164-4908-a4d9-2f7f73346c4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a5d46e-e0dc-4932-94d5-abff90090a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce1ced0-cfae-44fa-8932-4d3e6c2b6dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5508d20-52f6-4729-9402-635ff03306ff",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63033cc3-5a72-4099-85b8-67fb5203c1fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "519e5c16-7227-46d1-bfe5-78e92815ada8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61663280-130a-4cb3-9a1c-d8104031a074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288aa3d8-8940-4430-bdf0-8b47ac0d76f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b362b7-daef-4f88-8da6-bedec4d18106",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd783342-66f3-4b07-94dc-d683025617c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d502abd4-692a-4eed-a200-e9eff135df80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "347385de-5195-4f90-b45e-15cdad3ecc90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c72473-a98a-4257-b18f-ac1765445d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9045e1a-b431-433e-91ec-be995b7d3c16",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5720c8ba-c566-4793-bc17-94dd4032785b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4bba6f3-8c87-4085-9d2a-1ec7d53aea64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e302228-425c-41aa-9f3d-2d52b68c0235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a81d3203-1a61-411e-a556-eeda77e5e851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc394cf8-c7f8-4092-b31a-60783783fb6a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84821cbd-6be5-4314-a9b9-92714f1ed22c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1e3956-a993-4cfd-9894-ac1dc11db884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ce6517-c502-42fb-bdb5-d2056de3dd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c57c57-dda8-4b04-8875-0c91b263bb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f1493a-cd08-4eb9-8289-f3c00b17aafe",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6a2a90-89cc-40fd-87eb-b108d471f699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2230086-f15c-4cd6-a983-bc097f5347a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6746df-5ee3-4c8e-aefb-f8932daebe9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0196092-4d58-4c6b-947a-505a24cf809c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75405300-8033-445d-a245-8e22e199e7f0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4867bfc7-54e7-4902-aa59-2d4d974d49bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6207bb40-6fea-4aa6-ae03-5b07adfdf8cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb67906-e284-4d94-a90e-d9e99aa9b8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0b955e-4cdf-47fc-9b86-c7aac63b30b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3960f637-69c3-4972-9ca2-bf9d8493eca0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f79a5a-07ca-42a9-946d-355d5b415b0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e59665b5-872a-4cc8-9909-c1df68623375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1296441-efdb-4a49-a523-454debfcf549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d20d09-3537-49ed-a6a4-daa8e8c0a6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45da45c9-45db-42b9-af10-b921d5a192a3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0739d2f0-cefa-4489-87bf-b055bd5015df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee053863-0c9b-4be4-b77c-c7fda80931ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2fc837-b9cc-41df-a9dd-6fa571ca46f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed84591-1731-4171-bce3-99344ac24933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7037b6db-745f-40f7-8851-5e503328ab3b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66aea5e4-41d4-44c7-bc1b-f74fee7e58da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e18cae3-e84e-46ae-9246-7b7e76110557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd04a3df-62b5-4bbe-b147-578e250e2f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef01862-ac5f-4313-9220-aa617484af14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e96efd-00ce-4ae9-b730-fadb28e35342",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab27ded-1536-4e48-9e0b-5758e378e402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1589d5f3-dfab-4925-889d-eac0b1c82516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "307b3caa-8f39-4ef6-a763-cf1fb9fc1167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873c1516-0636-4ca0-bfc7-6d3b1ea610ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab364142-2447-4d5e-9e0e-681eb43acf3a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd913d64-f6df-4cb7-a414-e164d0e6345c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b160c364-b027-4f8a-b82b-c3f44d042cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dcc02c-c70a-4cd0-a125-69b2334a910d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57d36b6-4667-4756-9421-84964a237e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5679c2-95b3-4fe1-af28-29b861a0a99b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e4c174-933d-427f-8785-7a8e70fbd1da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9177c4d4-20bb-48a0-9e02-90abc733c5de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4197d2e-3e90-4b3b-bfcb-f3b461c997f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186501a2-a79d-4575-8a08-2b1fd1f05c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7708e953-660d-4606-9934-a7d045f18ae3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219b3aa6-4ab3-4664-a318-9c034109796f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf267a6-a57f-4ecd-b6b7-70b7a077f97b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2d08b0-0eeb-4bea-a942-b5e3707e8476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8384768-393c-4128-a71a-4687e3e1bc8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0243aa-1d1b-4dde-a90e-44450c2bb1c3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2d9223-940a-47a0-bde3-682a63320c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd346d43-0426-4138-a0b5-ded79606224f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "577bfa33-607b-400e-9947-7201deceeb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19291f14-9609-4dfb-8bf8-82550d18d4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d2337b-f3af-4ed1-8b8b-8b170b20fc78",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ab046e-32aa-4749-9182-2067915b1e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be36992-48d2-4aa8-971b-bb75a69d6bee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8719711-2294-4362-9104-c03c49edeed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef917f1-5ee3-46e8-8678-755fd86b34d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b2d495-ad60-4f64-8294-fd7cee83eb98",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c27d1c-6ad2-4ebf-80d4-79d55c937937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2112434e-0bee-42d1-a54b-d65891aa35d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db122bd-ce31-4d34-9bef-4a7956caa752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d257a139-1e08-42bb-9ede-8d445da21dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ae8a98-910e-4791-98d9-efecf7b89798",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7758785b-7987-44be-9973-5ce280142278",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d3160b4-807e-4cbf-b316-5a25a58baeae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9264f38d-6365-473e-ad5f-9430d1e7208a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef11d2f-d1be-4eac-bda6-33031183bf90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c79981-fc62-4e82-a1f7-dacc711a8789",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea58d755-9b73-4e41-9bc5-d7bfe1379b8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af89f2ae-8500-44e8-8578-f78bbef867c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc40e6ec-ddcb-4724-a65b-1d0c41769147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecef7826-05a5-43f9-889d-082971f0f2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecce4904-98f5-47c6-bcb7-741ee96671a9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c31c12-a759-403a-83ef-83f29e7b5ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cf0ee77-e1a9-4879-8e18-96fafd8d63a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553eb042-7295-4a38-af9b-75da9d97a8ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24116a26-3ab6-4dca-a604-22dd747bc450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608524ab-f8c3-4db3-87f4-d921ce067ba7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29424bc-dc41-43a9-99e0-b15ee4273df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c68711-9f82-4985-b648-e4b8c02ed792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508ef4f3-f88b-4147-a791-6ee77224201f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d691a0-0f91-4f25-8df8-2c69a56d8bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780ddb0f-7f7d-4068-a2c1-a0962747fcc6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c9966a-ef73-4e18-a5ee-6dd8f52e9004",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f637733-b71d-421e-a336-00e7f5d465d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7e5834-db3c-4835-8a70-f6d8f387e65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4d9d30-7615-4e21-b1df-9a8995175ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ec02fb-27fe-4a47-99e6-b5c43dbe2afa",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87e5e08-a5ac-470f-b2ad-437bc746b9ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "030e2d8e-fbdf-4187-9ac4-11ac78cd76fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e7d352-80c3-4cdd-9975-0299c0bd7f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46d6d32-0290-4374-84cf-8fee5c8abdba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58f5470-a23a-49dc-aff9-d7fce811c673",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e2805e-0b35-4eac-90b4-36adc2d839f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0eaf4fa-c7c9-4c9e-9004-8d704d6ffe63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dade34cb-88c5-4155-b51d-37374aa09333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9fe9a0a-9c90-4246-b716-79271a4e6b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5188e44b-01b4-403e-9ec6-c8f582c44d52",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2aefee-3ad6-46e3-bfdb-49c9ef21ec8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4516374e-011c-4724-86ac-0075f6b37244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5809c005-404a-48de-9f48-1b394ae25434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6514e28d-d2e5-4c2e-99dc-367ebf1ec1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a6cf1a-6555-4c8b-b833-d3f28fe8b95e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb45270e-8266-452f-904d-4b7b4044ba96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13ad18b4-0284-430a-aa2e-ef4482fa460d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "940650b2-34c5-4f48-979e-f0773246325c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcc0f0a-b66e-49fa-adc9-d9eaca07a75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303d05c5-2947-4537-8327-98ffb29c2dd6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3dfb25-400a-444f-84b1-06133a2319b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb774d7-44c9-4bc0-b41b-ba2b89e186e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0cf42f-e1fd-4f0c-8d20-2c775a9652c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "721903c9-dee7-4f3c-a816-5cae8cee3c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44985e1e-6032-4c9e-b9dc-cebaaa019290",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c672c54-00f3-48f0-a979-a408843539a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0869fff-860e-439c-bd5f-b1ba820d6c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e75f801-34de-4153-9cae-48362bc236ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1259d21-1f1d-4da6-a8e2-69b80b7279aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b72255f-36b6-4af2-a2b7-1fcf233c6dc7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f4cb7a-5fa0-4280-b953-bf4b76fa51ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6706ee-86b0-461e-8626-4f51d98549bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9940ed67-7af5-4a87-8d45-bde91a517409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68494ee5-81fd-4162-9454-da9e9d7131c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f89853-97be-45ea-a19e-00a6bd94ec65",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e113ff-dfc5-4d92-b302-a6179216e261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c87820-4ece-4d75-af29-d4ad919f9746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cecf8dc-131d-4673-a81f-abc5c192000b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3420fbec-0a9c-4316-8f43-72240ec4ad01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd5e673-3c92-423a-911c-1f6f2ee0ee93",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6f00f5-ffd7-4003-bcd3-a08f5d724e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c4dcd2-15d4-4c95-aff1-1c717987ffce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2df496-5f69-4ab6-b707-a786d1391001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8894b1-6e8b-45c2-bf37-4b9c9d653393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b149c0a-252d-414f-85f3-a7c4e43c8598",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02f0d0b-a448-408f-b2ab-45b754d29000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7b146d-3d42-4ed2-b5f6-e6ed8b4c4b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e262ce02-6b61-4a34-9ee1-3c2567535747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea9a28c-ec58-4377-b78a-e8cec919eaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46498ba1-5941-4f90-b515-a6d755c44b71",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae631d4-e1ff-4cc3-b87a-3b2e75234764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572dca31-551f-44df-a81d-f758d58e49c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc1a3d6-1409-4923-8cf5-5f01ea48461c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cabcab1-9444-4180-88bb-4997b498bd14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609a3ab0-9566-4731-af4c-4451206843a4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23802cc5-8f4a-4544-bb9c-b4e3a1860da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ef6627-5faa-45b8-a016-92d21525ebe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df36586-4a0e-42a8-a7aa-ddc9df7c11ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0743a06-fc5c-4dc9-8b68-a8e5817a1127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6099ca-b672-4bd3-af12-dd78dc334c5f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6262c8ec-c2a8-4caf-bd03-17ae72db8dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24fabdc-3ec2-421e-9d1b-cfec27aa757f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be504d7d-7573-4687-ae33-f9131319fc41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234873d8-f6a4-4db2-aed6-185f9d24816b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9de6c6-c285-44b4-a56b-39779b3456bd",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53f4529-ba35-4deb-9ea9-aa8fd28b886f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5fb71c-f7c7-4e19-8ffa-715481c278e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed58531-4b99-4b92-88dc-c7c6c6e1809e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32aa301-b2d1-4501-a8e6-c87597cc1050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb77e0f9-c7d8-4dc1-8c65-a134f38a12f0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f552302-e81f-4a4b-9262-7f5f583f4a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae41cad7-2c8c-4c98-b3c2-dfe19775afc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cac3cc-219b-4479-9569-635e699bb96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f25b3a8-b9e9-4fe0-b35c-c70ba116bd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2520a2e6-d907-41d4-8a79-498d3a3629ea",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4e59bb-1ba0-41ac-b00f-58e109c899da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a6e4aa-8743-48df-ab2e-9978e3d19e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce05bea-3401-4b92-8503-6da25f50dfe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec23b43-e3a5-46d3-8bf1-dee354e5cd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252ab796-47e1-448c-8de0-89ce5474afe5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39a1e0f-c383-45ed-bc2d-9856adb83761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d811ed-be45-4be1-bf4d-ca5e967064a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28a6776-1f35-49df-b064-edc3be1b4c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a26be7-974d-4575-840d-c193ef171790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ea8d8c-aa72-405d-8a93-fb835bc96f73",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a6720b-6508-41af-a957-a5211cd8eea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373c2dee-29be-4095-b3d7-5cd68aaeabbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7185d728-0d16-47ed-af05-468104dd2d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d085ce-507b-4bae-adfd-7af47e599be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118af17e-033d-4d6b-8546-56e7cae9c04b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daadff58-0bc8-464e-95aa-a9b5b008d976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "134f8e39-a832-44e5-a7f3-0947876fbdda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a845a37-7340-472b-a76b-01dbff872107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf29a0f-1231-4a38-b65f-c0b42fb3f652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37342f98-451c-4901-bbc0-058f96b11fdf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2107287-526c-49f7-b328-0ffccea3d20a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7fec70d-3d52-496e-9f19-567570f44640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9084869-058a-4a16-a374-d44d07916227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d45a8b7-ce45-46cf-979d-d29023b42065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9574b6-7e44-41c7-8140-49cb712677cd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02733ad2-43d7-4038-a38a-d5eddff084dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45eb2238-1ae0-48d8-8eb2-8e2495e25cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8bfa90-218d-4ab1-9d7b-b0d7891d6c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6ccb11-a6de-463f-a308-34da8e87c36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de365f3-e797-4b55-953a-2525dce6749a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0231bc6c-6b2c-47d1-a768-0ac4de6c96be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9be60ed-5da2-4fbc-b050-29a465c0bb8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a53c255-10b9-4d45-9960-aab48f9a4603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8208f844-32ed-4cdf-a58f-3978737644e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88cf93cd-7553-4294-9e83-849de96e04ae",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc32a83-a2a0-4861-9495-62f3e80d32c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a9caa8-a735-4a4b-8efa-3bc966027e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed106117-ce18-47c4-bab2-da6b3851e282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc31b4b7-b4d9-41f8-b777-220871f54629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70335c3f-1c10-402f-b6eb-118cc0fcec60",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2026d470-46c0-4994-bd77-245b8a6506b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17281f22-5a45-47eb-89de-3c95e7e6a7dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d701920-451e-42ef-a14f-d8def6b34e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de3b887-b3a9-421f-88a2-a1865d6a7f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdaf456e-f45b-4a90-ab00-0bf0e1104a1d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afffdde5-6cf4-4b06-b61f-8016fed08d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a44bd1b9-2d93-4902-9b50-6cc9cbc3f1ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1650f6c3-933a-4757-9620-c36107a889af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0c7446-f008-47fe-aab6-110d994e254b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9574bcce-8042-4db6-9fe6-9d23a5d3f82a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab611fd5-f75e-4657-903a-bb6ccd1d5818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b80fa526-cb09-42df-993f-fecae704479e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86f33e6-3a5c-44e9-878d-1f9d364f1910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75106f2a-c179-4b07-9a4d-a6a9a1dd7329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f00602b-4212-47c1-9db5-d7be0ed97cef",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff812db7-a4ab-40c3-bf9e-5d09cc5a4091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2504d26-8cc4-4a1c-bfad-4750e6b8bff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39989cb3-ffd4-4b1b-8480-186d4983ca8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e737bb-6a7a-4e8d-920e-34b41587dc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b339205-d013-4810-b03a-556c47afa53e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc029b4-57c5-4df9-b58a-2f62cb3d87e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a19e72c-c066-4d1b-a928-77654e93a4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "411317c6-655e-4239-a8df-837822548e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569f6859-82a0-463c-8408-0eb52cc4c920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9774b973-c47e-407a-a6dc-6fc680601379",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6113ba16-bcf2-4c55-bb68-bcc1fc68ecf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d12d74-3f9a-4c3e-b059-c1c0234deeba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818d9812-1d44-4349-8c0a-cf9071831ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9228f1f-d977-4f0b-a6f4-163b426c2017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cefa07-c3ce-4fd6-90bc-6b7652a1e31a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebe067c-9591-46ac-a374-d80ce3d6f4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e78dfd-8e84-4050-b099-dca6962bb0ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ca254b-5058-4148-9583-398a85632078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8afc68-698b-45fb-bf28-73ffacfca21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64983bd4-de2a-4e73-92d7-ff330c772a2f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1205a465-68ed-40ef-8e9e-1a171004f25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41854a20-fb6e-48e5-aaed-6b0c24003eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da76c23-4f09-492a-893c-909043723e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28544591-fcd2-4ed4-8dab-36383af4c18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71fd698-4638-46c0-8345-c606902b0d10",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a091f45d-9981-4638-bbe1-c97ebb053e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a11551-93c3-482d-bab2-2e22a1f1a399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50d5b4b-7ef9-4d72-9b42-98a1481df66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d3e1e9-770e-4bfd-998c-1fd9e420a1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1ce7d0-4e98-40f5-925a-a9a82fd7a3f1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebeeb05-7e73-4a9c-8b9a-8b955510a80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e7573a-ffbb-4220-b399-ebbc3e81dd26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c45ab5a-b19f-435c-b6ce-bf1346fec616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba33f699-3e3c-4f85-bdf1-d5ae1c50d0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ecae062-1325-4042-b8ac-ed9499b4dc19",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01075050-6c2e-4b8e-9265-77f0ef9d251d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374f0a72-0afe-4a37-81f8-0abdf7494dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a7fb04-97b9-4b70-8633-6a587b37feed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ab1582-4b53-4478-933d-c3c96eec0789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff46929-b747-46af-96d6-d83a2d81388e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77350037-74dd-4323-9ddb-3172162f1b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab2a0251-624c-4d78-a8a7-d4653b4e1af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cb67a1-3421-44f0-a2b1-78827d837e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d9d655-2072-4f81-b463-2520790d4a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d32129-26a3-4cb5-911e-8327011591db",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8c84f2-9407-4f98-a4a4-6c428d3df6bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16836009-2c4d-4256-9677-8dd6415abf09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b8ad86-267f-4347-889b-6e31fbbfd94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6719b494-2ba7-4d44-a2dc-131c3abef8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c5f72e-268a-4e98-bc34-fff2f63d0b2b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22644d92-9154-4f6a-b50f-793605f69715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c523cdc-27bf-4b5d-b957-f0ea56492174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51f5e07-9b06-48c3-881b-a4ec54b93052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d48497-955d-44cf-9a72-3dfdb14c194d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfb56d5-8074-4e5d-afbf-8ce33c5fcd41",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637fbd7d-0bf8-4280-825c-2d002ff3f488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4441cd53-3c6e-42b4-9c9a-f3bbd39d84c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81df2ed8-ba75-4d78-a42a-515a0e5f89dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea376cf6-f19b-47ca-a9e1-77ed5c8daf16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136f1a2a-ab7e-4f35-b70f-765b5967a994",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0dc485-07fa-49b8-b12b-3a0bc633e099",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1731c13a-3338-49b9-a2b8-95ea7fa86bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb96810-d18e-4f58-85ac-ce1f21d3cbdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78568f2e-08c3-4acd-997c-ce245000c2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e67f039-2c3d-4263-a2f0-f9f760499e8e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a7fde5-ca35-46bd-acee-ce6192116547",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "458ed8d1-986d-423c-8b9c-aa8302fd584e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38a7a0b-a7b3-4e96-a1f4-c9cb51734fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2627f673-f7d3-41b8-a2b2-79c258260757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe77f0e-1de4-4f91-842d-02af7d9d724d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad10933-3576-4ad1-9bf6-7902852a6501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3068fb85-ab05-4107-9c54-5981799e6541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1752715a-6283-4719-bd83-5e42eb763c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95238fab-b4f7-46a3-8c22-53c2e6b8c00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea5c81d-8e24-4cea-86dc-3a4b6c552773",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82a6a20-7eb7-4280-ba6a-fb77bc52572d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0ceed2f-c753-4662-a0dd-60fe2da3d684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4372c44-8831-4b6e-91ad-153191d8c62d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3371f1-5c26-4808-bf68-a86779b3854c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a85c83b-d606-4db8-8f6e-6aba4edca5e9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83245243-9342-4fab-8c32-e6f2ff06eb03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adcfab4c-8b63-48f7-b236-b21f72b7ee76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff4c299-ba91-4d37-8441-e00fb433bf6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357004db-f2b1-451b-aec0-3b979b7ff8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36b719a-c9ac-457e-a0df-fc85c4c601fd",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d3386c-1722-4ad5-9909-6c41043ae4a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f89e1a1e-1e0f-468b-bc35-dd22c7881504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaecd1bb-cf74-4aa9-ac3a-8b5512859bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a83fb43-f3e7-4ed5-b497-fcfccb9fa78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f28b6aa-4e6a-44e5-8b93-c19d00449512",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9987256-27f0-4ab9-bcf9-5e06ec58c248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcb1fd43-67c1-45a3-b788-2d0d819585eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaa24bb-c7c7-4f0c-a25a-266cfc668f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f83951-a710-4cf5-b511-9939ac0e45a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743d49fa-8b70-4485-bb43-77fb71a8ebf1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca651442-5aee-4c87-82e4-dc1947f68fd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe6e915-511b-4c5f-9053-c53687a39554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18250c1c-8e9a-4ee4-92ff-81dd4c78b1ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2b264b-c05b-4c13-bd0b-5cf5d6920db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee59cbe-9514-42f3-ba91-d95bfe0d284e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68519d2-a1c3-4936-a4bd-c55ba59d31b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e002c9c9-1e8f-4fa7-9065-ef85270ffc01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47a4901-2b0f-4eae-8957-697a90d4adbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a9c010-185c-4a2f-aad7-e1e5fc332c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcaf83bd-8fda-4934-a1f1-090d503dac7d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32ad7d3-37d7-4d78-80c4-242eccdd863d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d5e5185-3a1f-4e3a-acdf-ce64d1f53250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bafc29-b8aa-45af-a288-e274a29b92c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d9a088-622a-4415-a292-cd5606a98c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0bec2a-aa90-4cfa-800a-f3f9971d8cda",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca4399c-f438-4a32-beae-619afe51150e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1a28fe6-b8c6-4cd5-9706-7b79f55ca23b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d983e85c-2037-4d82-b56c-b5812549401c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b6c2a3-b1b5-42b2-961e-27c9211c719a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8266a3-ec6f-4d21-8ebe-395dd912a82d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d48900-1542-4807-8c31-8ef818e84a40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4df3468-e1d2-4481-96c2-b5a6655daa9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54028b3d-7b81-4f78-a2ce-5b7081778974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefc6279-d57c-40c9-a32d-032ed11c7f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4584a6d-ee1d-4952-a349-db452fbd4b98",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fff314-5c2e-4221-8fec-35855d0a33e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4459f6e8-d42a-4542-9bdc-5c30bf130816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177da530-615f-4373-af98-dbd8e4dd6197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae05bc56-8cca-48d3-b6ba-e164c9b20b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcf4d82-a6ef-4d0a-857f-9efab43fe3a4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7c7d83-1e29-473e-996c-323ab16ee858",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44f82cd5-f89c-4bdc-8763-aa54910ca2b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "492fc27f-d2db-4315-9be5-8f0b8241dab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d98f5f-da10-463e-8b2d-13a5b0080c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43e16d1-176b-41f5-81ed-0e49471db191",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc9b53b-edf6-42b2-ae82-b51a88bdd5a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f47ab8d-3213-43af-a795-1b3cb5b3022c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d613005-619d-4b1b-a779-0aa9083e964c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3b95bb-c2fe-4130-8363-baebf3d00842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b07c59-5b58-420a-9347-3d1674fe5e0d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6a8452-aed2-4f92-99d7-ce8ae4d8eae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "615c7d80-300a-4a60-85bc-6749e3fa7944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c66497b-9928-48a3-92af-d2818f488dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba9dbf1-4b0d-43d2-ac71-013eb353f0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2780d9f-d949-4681-9995-0089d83af5f3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90741319-df3c-4411-b978-bb6fa02378ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7abbcde9-17ba-4307-bbb6-ea67d3fa8f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac9d40e-f0c2-4c57-958e-ae016d3f3388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c1917f-9397-4bed-8dce-7b25688794ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c341afe-8021-4492-a479-59ebfea6d763",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69803766-a811-41ef-a584-7806d06ec091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "182ee04e-241a-443e-a65f-e5ece2c51d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a0675a-b324-4912-bf62-d70cc544a135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eefaa22-7f75-422c-b47f-1676ae6a6a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c9cf68-7268-41d5-9538-f69a4506f3ae",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f47a26-4262-450c-b97b-be7068bfd4eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03db789f-bf7e-4c2c-9852-df119a92bf43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ccfcd9-026a-49d7-9d7d-a6152a4655f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8c5f05-74f1-40f9-9b69-abb59ccb13a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda8ab68-db4e-4000-afa7-f16fc5ef4f2d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaafec0-61b8-46f6-aef6-2ee99319555c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "233cd741-0468-4a80-b3af-7371773030cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57aa0980-badd-4afb-a2d1-3bd8f1d0fee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea91dbb7-2a05-4710-b036-56c2a10260bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b06894-282d-459e-983f-4026b8084240",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e16033-76ce-44df-a962-c7995b698fa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ef483d7-9a41-4672-aaa9-b91e249dfed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe08642-5296-4816-a74d-f42e397e5117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e11ec6a-6465-42a9-b998-02e266931f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f914c508-9d12-40a7-acdd-ab1519a381c7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d5deb4-3781-4199-9e99-33421f9bac23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db633250-9972-4d4a-8b00-76bfff42431d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "890b80a5-636c-45b1-952c-41c29d6b02ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79bd6537-228a-4651-a24d-ee0be9b07a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb18f89-eef1-4378-bba0-5dc69afec089",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7ebd61-b2b5-4949-841e-8521fc23e214",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "185fc536-ed82-49f6-a3c5-e4760293118e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7c4155-ecbc-4487-9fd6-c5a2bcb2201d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8031cb5-b6bc-42b6-95d0-400d44605153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6c539f-9277-4e59-ac9c-5d2559c77438",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715b6a64-59cb-4bf8-b919-c4d28e79f404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50766aa4-d3b0-421a-8a8f-0f94831173ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89da045-2c04-4e2d-81db-7a97505c46bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59eb4289-d951-4254-995b-6aacd52c5b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec78191-07f4-4521-a7fb-eb6327e646b6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f11caea-ccf2-4199-87cf-61ac3a321d91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6be5d2-7f25-409b-9404-38302a25857d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d91acc-296f-4f9d-94e9-1abc301fbc8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "654173fe-6ef4-4eb7-b66c-f682720ec4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fe86b5-3673-4ee8-82fa-4c7eb63d4567",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c908d2-c719-4a4f-bdac-ee3e86ae6ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b97dc90d-4f87-4263-9a90-0cc2e2342545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f986617-7999-414d-9ca8-1aa7dc6935ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eafa2d9-db6c-42a7-9002-72c43d86c670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbdf9aa7-df40-4a43-8d98-55838dd7bb59",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8488d44e-d2b8-4451-8f85-b0979f68f066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6fcb8bc-87c0-4709-b2c9-cc7431513f0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aaa2a06-d615-4968-8269-0d364d9e872c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd0c5687-df98-44d3-9844-fa1033d98360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b774328-f133-4ce5-bc68-2b0873cd806b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddaa088f-4725-4fca-921a-5f003aa7e59c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a60c94df-3858-4bab-917d-7af140d39d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548fb007-8a96-4a66-9a4f-37f42c77c447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b50bbf-e6e4-47dd-8d85-e5e409c6fb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96e8bee-face-470e-88e8-0cd20c72af0c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc15769c-3d1e-40c3-8872-d4155ed16988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3a8bafe-d290-4f86-a503-453e78a2fc44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ca0d3a-ebec-45a1-a6f1-3e13b7faa9ac",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b0597a-731e-41df-9444-dfa394a00da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b91f12-5973-449a-bf8b-409609a0680d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f74f3a-2813-4a38-90fc-0ba2a7a0203a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c1ecaec-b23f-4b9a-908e-352df5717165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa816d6b-a0c8-4c83-a7b3-5114fd3695d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47ff492-87c8-4f39-912b-f831f53b5ba9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "591423d4-e067-4dce-b008-633360098d3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ae916c9-1660-47c5-b961-05ce78a9f326"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61c8f06a-da1d-456f-b741-5860cf52a027",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c4e0c2a-8b25-47cb-a5a4-3bccf0a85353"
                    }
                  }
                ]
              },
              {
                "id": "44b85dfe-820f-4aba-a55f-6af586d096ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7dc353a-6574-4ad1-9fba-b03e0c1827f5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7e735f-ace0-431f-b5e8-9cca2d52be00",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "81ecc416-8a64-40dd-9ca3-0f1aea28074d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26db4e6a-6037-4ae4-a0f3-15020c90c0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b54d94a-a608-4f10-94c3-7795076db482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0e2cd6-3834-4061-b102-45083f8adb8c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac80faf-72db-43fc-b4ba-4aa0b4089cad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6746c1c6-8c41-48a2-9672-20c4f4bc6e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b97940c-6861-4477-b68e-dceb0af5c42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26089117-ecc8-40cb-9031-08ab0310b0ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d57606a-2819-4038-9ca8-a834146547bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fe50d74-3ed8-4a6c-bbaa-d28ccb832180"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ca43044-d621-4025-bd79-b486a86f06de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ce25eed-6471-495d-b98b-6cd83b8823c2"
                    }
                  }
                ]
              },
              {
                "id": "1c0bdf1b-54a3-4622-878c-10e4063e3451",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "fb9aa89a-9a0f-46b8-827f-811604d91070",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9fc7b4-9ca4-4c1f-a3c0-2cd8511f5752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "296d27ba-5843-477b-8a7a-86a2935141b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b3c340-eb46-40b5-8b41-1762ea50e752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5482a99f-3562-4d58-87f8-5a81d70ad739"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a895f4c5-41f1-48a4-a8c9-7dd183d526a0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fa24bb8c-3ad0-4f02-892d-eaf57ee4a545",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0ed627c-7edb-4325-b573-c72b30a3cde4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "88ff3d1f-76c5-4eda-af8a-fd9266bda594"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93e98155-0134-4d97-b1d8-76cb59581e50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d4a6226-62fe-4e8f-ad76-4292924e3e60"
                    }
                  }
                ]
              },
              {
                "id": "12c5bba2-ef20-4e39-afc2-49569bfd2ef6",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e26ecbb4-d87a-43c7-b14f-6a221ffb8068",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0c0d4198-50bc-43f4-b705-aad743d40f83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "921cee8e-ec74-417b-bb8a-bd196d38c793",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9db765bb-9da6-4775-9c3a-281aaf2248c4"
                    }
                  }
                ]
              },
              {
                "id": "cdf8c6c9-7e4a-47c9-8871-5a2cb488b09d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "819d4683-bb2a-46bf-b030-9f9882356604",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ae626bbc-43d0-44a7-bceb-9d5b90e65f7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c49e213f-fda6-469a-a8eb-b05b4bee6286",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aeceee36-c173-4b7f-a1b2-d96b79640e72"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d11a5a5e-d331-48e0-83b0-069113c9cf2c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "44a33d20-2bdb-4855-8c9b-849207f3bb67"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "273d320b-114c-442b-9b94-e6c3c2b75ac7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "275cf10e-e227-486f-af42-8c185a0786d2"
            }
          }
        ]
      },
      {
        "id": "dc2876ca-4231-4dab-9911-8b47767d5d07",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e3f5d0c6-4482-439a-9636-3304985284da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24d116a8-1617-408c-bce2-39f9fd49fac6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6466c15b-8d7a-44fc-ad6f-478fca58a6d3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db1151b-6fd4-479f-8492-ed0e4ea32b20",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "23475680-9c2f-439a-b412-dbf5d57fae5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dddbd42-892d-4f5b-810f-2d66debfca55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "645769d3-f9c1-4fd1-9bd9-c7c7538d4047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0eec33-07a4-49db-8456-88bd3d2b47ed",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58280df8-564e-4bfb-ab1d-80454112d50c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1f4f89f1-0947-47b5-92d5-bf9e0d81fc29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7e2a9a-58d4-4776-8995-e8ff957b27d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38ccbe17-1700-4b26-81a9-de6fc84deba0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74bf17b6-eb8a-457c-ac33-bca21aa605ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89d511cd-3502-4c1c-bf87-3411540c3a5b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "525abedf-0621-40b7-b482-96f73a70d092",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5d52910-662d-4906-9da3-6a14fa1aea7a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f52a33a-d9c5-4a60-a174-e6e4985bb7da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b84392a8-c36c-4888-a708-c5e311ef6874"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a00920c2-ea6d-43bc-9c48-243935dcfbee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf44bd20-ed6d-4266-a159-4bc61faf121d"
            }
          }
        ]
      },
      {
        "id": "762d1714-6254-4eba-9288-2059522260b7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5c00e63e-8009-49fa-9518-00c2f3ef4a0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1413fdba-0431-4d45-9838-0c554fd52727",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "018079c1-fcad-4a62-8458-7e25c806b3e2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c23ee0-d415-47ea-8949-52375b802ccc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "254047a8-39bc-4f97-abbf-ecba132c3e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94d56e3-4563-466b-bb96-775c993b79f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e94e96a-278d-4aed-bf96-4760fa0523b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5336677a-3724-413e-a577-e23b916a6fb2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3468dade-7a6b-48e5-844d-6d7849df1433",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7bac915f-66f0-43f2-8ce1-d3daeb2ae8bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "514b39e9-75d1-443e-9ba4-2ca505d49a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd2bf9ec-3ea5-450e-a7fe-6fd53de1af25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9427dd06-29ee-4046-95ae-13ddaecf08fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bedfac2d-765d-40e5-8080-0e0baf3c7a5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea6fd0fb-5dce-4c8a-b7ab-6b102ab72e35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd88094d-2f8d-4e14-9ce0-9e001dcda6dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b4561c1-08e3-4587-b8ee-ccbccb7f15f3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c45d3011-684d-4ae0-ab29-32cc77f63806"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e9ba712-0793-4711-b69b-9293d30adf55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a8618dd-d9d2-4399-bd87-e2e8a160338e"
            }
          }
        ]
      },
      {
        "id": "f21556a1-374a-4600-8265-4e07a33735ec",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0f6bfe9c-5e93-4b36-8c8a-1ac8092230f0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa8ce19b-7dce-433a-bd24-e6c78751e83c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41d44566-517c-41a8-b395-8e7cb08dca52",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d61c787-69f7-4c4c-85c1-e897402fc2dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "41797dfd-3fd5-4e7f-9cb7-85e3ce4105a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ceb86c-bcfd-440d-b75c-9c98bc214bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd682c0a-a046-4e77-9666-4103d0225d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917a1969-7b47-4d0c-a24f-ba47bea8219d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66d8eb3-4436-44b8-90bd-3090e4e93b43",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cf1faf4d-8553-4134-83ef-e84ad7975116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3031f531-01e7-4bae-bca1-fa52e6467dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5a7c5c8-bd71-4fc5-b20e-e562b0dad3e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ad41e56-918e-4cbf-b4c9-aa0066dc1edc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4dc0fb1-ac3e-4664-98d1-4b67dc066104"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eca31244-93d3-4e96-b891-349f58b38bf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "754ebb55-1d9b-4252-b9eb-382ddb6fb82b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01026d2f-1f75-4c2d-a3fc-80b46716e4d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5cb21ab3-ea35-4652-b262-646746db6067"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0abc2cea-4d69-4bc4-a719-de0a52ab8200",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce1f4bd1-a99f-404d-b50d-bcc8aa1361e2"
            }
          }
        ]
      },
      {
        "id": "a20d3828-9cf9-486f-8ae7-7a27c99958c5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb0e871f-c725-421c-892c-8b24688c24e5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd28d8c0-fbff-43d8-99c0-1e8203f1d623",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "06a1499c-b42e-461b-939a-45e431049c33",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc06e54e-6b8b-4f31-9db5-371f29025406",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3aeac07a-4261-4f7a-8d2f-d4b31a309f4b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.21072796934864,
      "responseMin": 6,
      "responseMax": 701,
      "responseSd": 107.02868541549456,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668991527582,
      "completed": 1668991555488
    },
    "executions": [
      {
        "id": "2ee16a87-300c-44ff-be99-315b2b0583b0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c50ceeba-d2ed-4029-90c9-f2b04831dfe2",
          "httpRequestId": "71ded11f-6da1-481a-b6b9-d3f3821d0c91"
        },
        "item": {
          "id": "2ee16a87-300c-44ff-be99-315b2b0583b0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "52ad0917-cc2c-4df4-8784-e394f23f39c4",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "d88908eb-7924-40e0-9f24-71a22ca6ce03",
        "cursor": {
          "ref": "9b1d35fd-80d3-4286-836a-95246adcc773",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9a2b6026-eb9a-4b24-8780-1b41dc91c733"
        },
        "item": {
          "id": "d88908eb-7924-40e0-9f24-71a22ca6ce03",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0cf57f68-2f5d-4154-9852-4e6af4694470",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "1309f56f-b8d7-4427-b021-ab0454e53c55",
        "cursor": {
          "ref": "9bd88079-d0bb-42ec-989f-350932d7d4d8",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e56aeb52-5730-4e0c-9e5e-6e7a4098e7c4"
        },
        "item": {
          "id": "1309f56f-b8d7-4427-b021-ab0454e53c55",
          "name": "did_json"
        },
        "response": {
          "id": "e1e78c1e-8b20-444c-8bdc-8195b5936e7d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d81c516-09aa-4476-a3a3-fdbb85146a34",
        "cursor": {
          "ref": "c877797c-3174-4edc-a92b-5f6540ea0aaa",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6cb597c7-31a6-4707-8c81-857e812b29d0"
        },
        "item": {
          "id": "3d81c516-09aa-4476-a3a3-fdbb85146a34",
          "name": "did:invalid"
        },
        "response": {
          "id": "605b2b71-4a56-4660-92e6-3565d9425c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d81c516-09aa-4476-a3a3-fdbb85146a34",
        "cursor": {
          "ref": "c877797c-3174-4edc-a92b-5f6540ea0aaa",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6cb597c7-31a6-4707-8c81-857e812b29d0"
        },
        "item": {
          "id": "3d81c516-09aa-4476-a3a3-fdbb85146a34",
          "name": "did:invalid"
        },
        "response": {
          "id": "605b2b71-4a56-4660-92e6-3565d9425c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cec685-5b37-4bc2-8529-d7ed0370d3ec",
        "cursor": {
          "ref": "df5e71c7-aa27-4a90-8665-110f03cf49aa",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4e2f4d86-545e-4a3a-bfa2-abc90e868273"
        },
        "item": {
          "id": "c8cec685-5b37-4bc2-8529-d7ed0370d3ec",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1fd6905a-dc7d-44cd-b4d3-324c0cff7ff6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bcff8b-60da-4cb3-8502-6b28cc9cc1a5",
        "cursor": {
          "ref": "29e5ce03-92ce-479f-9b8b-7ead5f1ad69c",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "edc5d579-24fb-467a-87c2-5bab9153dca8"
        },
        "item": {
          "id": "93bcff8b-60da-4cb3-8502-6b28cc9cc1a5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c8ef0c4c-1ea5-4c0e-a157-e580d18bf844",
          "status": "Not Found",
          "code": 404,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fbca6f-a28c-4f0d-9df9-8c8f169ccb3e",
        "cursor": {
          "ref": "94950550-ce78-4e1c-8242-e6440a29c9af",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f4b606a1-3b63-4d32-8ab5-3f9db8f6892a"
        },
        "item": {
          "id": "d1fbca6f-a28c-4f0d-9df9-8c8f169ccb3e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "23ad4bf4-acfc-4ee0-9b3b-8505f40a338e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1567ba3-2fb5-4178-9e62-eed493a64f4b",
        "cursor": {
          "ref": "6ac9399f-4dd2-4c42-a64c-9d2a65686136",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "af9e8f51-6914-4201-b18a-8c701a6540af"
        },
        "item": {
          "id": "f1567ba3-2fb5-4178-9e62-eed493a64f4b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c83b964a-56bb-4e92-9a4f-6deddb982535",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1567ba3-2fb5-4178-9e62-eed493a64f4b",
        "cursor": {
          "ref": "6ac9399f-4dd2-4c42-a64c-9d2a65686136",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "af9e8f51-6914-4201-b18a-8c701a6540af"
        },
        "item": {
          "id": "f1567ba3-2fb5-4178-9e62-eed493a64f4b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c83b964a-56bb-4e92-9a4f-6deddb982535",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892a3044-18b8-479d-8eab-7b9305a2c3f5",
        "cursor": {
          "ref": "0d163fb1-3558-4d41-9af2-0a16a0e01220",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2c51a79c-4e52-4c7b-b0a0-d79e02752417"
        },
        "item": {
          "id": "892a3044-18b8-479d-8eab-7b9305a2c3f5",
          "name": "identifiers"
        },
        "response": {
          "id": "4ff2fe08-0155-480b-b7d5-d96e22aefbe0",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b0d816-38c3-4a75-8f6e-16c9bf92dcc0",
        "cursor": {
          "ref": "db02cd59-8deb-46e0-b9bc-d1dd9d981096",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4b9017a0-786a-4198-9729-b89f722927e0"
        },
        "item": {
          "id": "b1b0d816-38c3-4a75-8f6e-16c9bf92dcc0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1d297c28-45d3-4f5f-94b8-147634e52504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b0d816-38c3-4a75-8f6e-16c9bf92dcc0",
        "cursor": {
          "ref": "db02cd59-8deb-46e0-b9bc-d1dd9d981096",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4b9017a0-786a-4198-9729-b89f722927e0"
        },
        "item": {
          "id": "b1b0d816-38c3-4a75-8f6e-16c9bf92dcc0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1d297c28-45d3-4f5f-94b8-147634e52504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779707d7-d8ee-45c8-b4a8-986a28009b1f",
        "cursor": {
          "ref": "39a98f04-50ea-4139-8205-4da4eda07bce",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "78f21628-9c29-4b3c-a4d4-f9ac963b6e6a"
        },
        "item": {
          "id": "779707d7-d8ee-45c8-b4a8-986a28009b1f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e15fbecb-6f94-4a11-856c-8b472ecc330a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6769a987-a0ed-40ba-9ab8-3d50cd8be997",
        "cursor": {
          "ref": "3f988fcd-7f71-479f-b640-c2642fe98581",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "09394eb8-42aa-4aed-950a-efbcdf06a77f"
        },
        "item": {
          "id": "6769a987-a0ed-40ba-9ab8-3d50cd8be997",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "cb34d533-046a-4537-b6c4-41c6ee556e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccde1ecd-aa93-4b30-b967-018512a00e7f",
        "cursor": {
          "ref": "73248e0b-6ecf-4fe5-b0a0-f38d3d0e28c5",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "81579489-356c-4bc1-a260-57e2fefb79e4"
        },
        "item": {
          "id": "ccde1ecd-aa93-4b30-b967-018512a00e7f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "eed8f46c-9445-40b9-9fc7-232729ede6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231af2f4-d830-4956-848e-33075b76228c",
        "cursor": {
          "ref": "55917a07-5260-4a94-a29b-651d4356010a",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b9213646-fd23-4276-adda-3df864ec8898"
        },
        "item": {
          "id": "231af2f4-d830-4956-848e-33075b76228c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4a3d617a-245b-4cdd-ba7d-b2c528969c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc94a47a-8cfd-412d-b1d0-324c7b7ea6c4",
        "cursor": {
          "ref": "ebfe769a-42fa-432f-8d60-dc7c3da6b26c",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "42a60961-623d-402b-807a-993e2785b563"
        },
        "item": {
          "id": "dc94a47a-8cfd-412d-b1d0-324c7b7ea6c4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "38571db0-c222-4f4b-be74-c2cfad2bdfcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3056f2bf-3b0a-49c2-bf5d-5c2a6b2bb5f8",
        "cursor": {
          "ref": "ac4f1211-fb9c-47c3-a668-72b83c397d98",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c4cb9ecf-1f61-4a1c-ab6c-f25b30a8b6de"
        },
        "item": {
          "id": "3056f2bf-3b0a-49c2-bf5d-5c2a6b2bb5f8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "74ea3697-92ad-41e3-b923-8ce253e2e360",
          "status": "Created",
          "code": 201,
          "responseTime": 405,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b97b4e27-8761-40f2-9989-b177be9c8fe2",
        "cursor": {
          "ref": "5555667a-4bd9-4841-a380-2b2ba6dc1f35",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "781f6994-3a62-4341-8ba5-85c7ee074ec5"
        },
        "item": {
          "id": "b97b4e27-8761-40f2-9989-b177be9c8fe2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9de13d54-e5ef-42b4-a16d-d29b23226117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941164a5-916a-45a1-b359-1f32b5a54b8c",
        "cursor": {
          "ref": "d2f17c95-4e34-4a9d-91d3-70a959460736",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bdc17b38-1925-4eee-b952-3df58ff5b9af"
        },
        "item": {
          "id": "941164a5-916a-45a1-b359-1f32b5a54b8c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "27d4d46f-d66f-4728-b283-802efb3d4c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8ac49d-3089-4782-93c5-f4192fd41ad4",
        "cursor": {
          "ref": "b8b46b92-5be6-4559-820e-08be97b61452",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "eacc6b44-0273-42e0-b616-ec0c433bb51a"
        },
        "item": {
          "id": "9d8ac49d-3089-4782-93c5-f4192fd41ad4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b518527f-44a6-41a9-a6aa-106dae5c9045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae9814c-b1e2-4556-b87c-109447ccd20b",
        "cursor": {
          "ref": "3a7f5830-8b13-490f-988a-902a64a36b87",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "daeb0f76-8b3b-4a1e-a786-0a93ba53a097"
        },
        "item": {
          "id": "4ae9814c-b1e2-4556-b87c-109447ccd20b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a8f4eb6c-fb71-4214-81ff-923652c121a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f47c75f-ed41-4b30-9104-1707eac6989d",
        "cursor": {
          "ref": "cd2de9be-b469-4c89-86be-6708a7529db6",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1ba4f194-314a-4aad-bb12-d8d6f1fc048e"
        },
        "item": {
          "id": "9f47c75f-ed41-4b30-9104-1707eac6989d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5408eb75-4d30-4cf4-9002-1dc991c7366d",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8bae0752-898a-4b7d-9840-b56aa3b2257b",
        "cursor": {
          "ref": "f65ed204-7e3d-4e6b-8164-7a773a1de434",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "381b19ee-3ac4-45a4-9cf5-dc70b89625b9"
        },
        "item": {
          "id": "8bae0752-898a-4b7d-9840-b56aa3b2257b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a76e89a5-316f-4106-a7d4-695536412041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1576335f-4b55-4f31-9b61-e2cd00462efe",
        "cursor": {
          "ref": "428d3abd-1f8b-47ff-96e2-6f09b73b6f40",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ff875448-5078-4d11-ac9b-30717a1d651c"
        },
        "item": {
          "id": "1576335f-4b55-4f31-9b61-e2cd00462efe",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b29b2753-0164-4664-9700-f957e3c200b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71b0b95-64b0-49dd-ac6e-8a00e8d4e1a7",
        "cursor": {
          "ref": "b69de464-9662-4b7a-be1d-85fff893a57a",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "eba5ad84-0ba2-41dd-b0cb-3401e63bf6c4"
        },
        "item": {
          "id": "e71b0b95-64b0-49dd-ac6e-8a00e8d4e1a7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "708df556-bef3-4bd0-bbff-aa07dd523a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5742cef1-1e30-4fff-b911-d398d9619b74",
        "cursor": {
          "ref": "cbaed12b-af52-4e71-a6ee-1c7d392fa7e5",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "aa37cf64-a534-49f2-bdbb-a5a07bb04d39"
        },
        "item": {
          "id": "5742cef1-1e30-4fff-b911-d398d9619b74",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "39fc3675-7d6b-49a9-8d3c-7f8d00eedc00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7fd875-8300-42af-ab6e-6d68f3e39e1d",
        "cursor": {
          "ref": "8f53ee1c-8613-4e1e-a549-eb279dd134ce",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f1bad4f4-cc06-4d4a-a804-8acd752dcb6e"
        },
        "item": {
          "id": "bf7fd875-8300-42af-ab6e-6d68f3e39e1d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0d639bec-086d-4253-b0a4-ed21add124a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ead290-d037-41a6-ab35-f076e4de81aa",
        "cursor": {
          "ref": "dca7c67b-ce3c-4289-8cb9-6d9f2c28bdbf",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "abd8a2a3-08b2-4b2b-8814-5a072c76cb3c"
        },
        "item": {
          "id": "54ead290-d037-41a6-ab35-f076e4de81aa",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "596b2d4f-dbcf-4f94-a586-0f4310e0c10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f1f5be-8b12-4de0-a7a0-f5a3bd78e553",
        "cursor": {
          "ref": "925f4a2f-5502-4802-817a-b7a6f4fb5319",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c2cba898-b94b-44f1-8597-01f8c3e6f8a5"
        },
        "item": {
          "id": "08f1f5be-8b12-4de0-a7a0-f5a3bd78e553",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0c51f656-fd38-4520-8264-382c0c325fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecce1815-daaf-4c89-abf0-76afba0ef6b1",
        "cursor": {
          "ref": "25013637-15ef-49e6-ad1c-99242070e3f6",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6ae65450-6627-4e9d-9707-32372a1c8320"
        },
        "item": {
          "id": "ecce1815-daaf-4c89-abf0-76afba0ef6b1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0788c1fe-8b72-4243-a195-ea608eb7d105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82d9b43-57cf-4bf2-a858-a09802dc04eb",
        "cursor": {
          "ref": "f4c6fb86-ff19-4b5b-a26e-ad4f406af124",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2790a357-7b30-4d7b-9efe-93e35220a188"
        },
        "item": {
          "id": "c82d9b43-57cf-4bf2-a858-a09802dc04eb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a1fecfc6-409d-4f8c-8b61-c36852a36c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c598e20-1b81-4f43-b227-5a4296417c43",
        "cursor": {
          "ref": "4f5b4558-f0ee-49e1-b22b-92d08668ade2",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0ce4445f-ce7b-4e30-ad25-bcc6c42bcbc0"
        },
        "item": {
          "id": "9c598e20-1b81-4f43-b227-5a4296417c43",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1f03ef30-d3ac-4376-9184-cc4a5f6188ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090c2c07-f9b4-4a7a-b794-113351ec1ba6",
        "cursor": {
          "ref": "3c003e89-aea5-4cd9-8db9-e32aca8f28aa",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a1ad5344-fe43-4925-97ea-31ad88f514f3"
        },
        "item": {
          "id": "090c2c07-f9b4-4a7a-b794-113351ec1ba6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "990665af-8024-482c-bf43-e5328ff97c98",
          "status": "Created",
          "code": 201,
          "responseTime": 422,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "68d9bc8b-6083-4551-995f-4b0d9e467263",
        "cursor": {
          "ref": "f30b41b6-1703-456f-9c00-bcc8f2094357",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "01e35380-17ee-4121-aed1-dab91e579cca"
        },
        "item": {
          "id": "68d9bc8b-6083-4551-995f-4b0d9e467263",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3e9004a1-3d03-4909-b392-1ea75e2860c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f4dc4f-d478-45e3-aaf5-7a5eb499c019",
        "cursor": {
          "ref": "709a4811-371c-4208-9d5e-60b574fdea9c",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f1be7cc6-2d86-4bcc-8727-fe0830516608"
        },
        "item": {
          "id": "20f4dc4f-d478-45e3-aaf5-7a5eb499c019",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fecc5bd1-1509-47ac-9755-a9bdc9a18af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bddd8105-c109-47ce-834c-a9d54ab4c24d",
        "cursor": {
          "ref": "943521a0-cc51-4fc8-853b-fdebc3408805",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ce2fb2ce-c8bb-4926-81f5-42eb488b2827"
        },
        "item": {
          "id": "bddd8105-c109-47ce-834c-a9d54ab4c24d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7d486c91-0697-4db7-a73b-0e99a52fcd03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27770c95-d06c-42b1-a96a-35a0ddd0dc95",
        "cursor": {
          "ref": "f5174c40-dca2-464c-829f-750fd0c0675e",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f1a376d2-0e64-4c10-a83a-58e4dc6ebab0"
        },
        "item": {
          "id": "27770c95-d06c-42b1-a96a-35a0ddd0dc95",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0490685f-d54a-4b39-ad14-492df51e4d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b738caa-9f5a-4eea-8087-8ddbe80e4dab",
        "cursor": {
          "ref": "fd910946-7ea4-4682-8d91-ffd470c114bc",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5bcdcb3c-1084-42a4-b703-82ae9622b857"
        },
        "item": {
          "id": "7b738caa-9f5a-4eea-8087-8ddbe80e4dab",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9e82d01e-aa33-4034-9bff-b704da67ceb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d6fb74-e69d-4edd-8a7a-eeba1eea8a6e",
        "cursor": {
          "ref": "99362705-b7df-46d2-8482-dbdc122b6471",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d6e14aaa-85f5-4c00-a03a-ee5a6219d77a"
        },
        "item": {
          "id": "78d6fb74-e69d-4edd-8a7a-eeba1eea8a6e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d84380ea-ea9b-46e6-a092-d316b103a63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59fadc9c-f066-47f9-8cd3-03a3e7f9f897",
        "cursor": {
          "ref": "5992b736-b2f5-4a80-acc2-6e8f9e3b2851",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b928a911-5278-4a0a-ba5c-38c96c226c13"
        },
        "item": {
          "id": "59fadc9c-f066-47f9-8cd3-03a3e7f9f897",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7a17a67c-e573-4b1a-ae7d-ff29334a3fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e157deef-833b-4504-8036-ebf51f93f246",
        "cursor": {
          "ref": "1360d24f-f198-4bd5-932a-eab9aa1bc708",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "13ede11e-9738-4a99-b785-299b87fc5f94"
        },
        "item": {
          "id": "e157deef-833b-4504-8036-ebf51f93f246",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e800c637-1632-4357-994e-45150a651669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3259ee7-28a0-4830-b72b-06e8ecbb5e25",
        "cursor": {
          "ref": "f43b5ea5-b342-4c95-b55d-f32a8e5caade",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "48305cbe-7c94-4476-8ef4-3183e91512c7"
        },
        "item": {
          "id": "f3259ee7-28a0-4830-b72b-06e8ecbb5e25",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9689620a-7956-4c48-bbea-b7d438df4c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbacee41-1393-4bcc-898e-ad1b6747b5fa",
        "cursor": {
          "ref": "3936f7c2-d25c-40c1-bf38-6d0a21e67781",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fc3a6f58-2402-4bea-bcb8-0882cc5753bc"
        },
        "item": {
          "id": "fbacee41-1393-4bcc-898e-ad1b6747b5fa",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ca3ec412-ae6e-4aab-a17f-136f956eea80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c28b0fd-3279-4fd0-86bd-8d57706153c0",
        "cursor": {
          "ref": "e276d293-3b62-4b16-83e2-2a9ff5a06af1",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "095dea1a-7b1d-4623-ba47-f9e4f8ab86ef"
        },
        "item": {
          "id": "6c28b0fd-3279-4fd0-86bd-8d57706153c0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2f0cc950-496b-419c-bb9c-063a6aa083da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87216ca7-5bdb-4324-b5e0-cae2b91621b4",
        "cursor": {
          "ref": "a96e6f14-7c82-4103-bb1f-42d0440fbe77",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a53d8123-0b42-47af-9d0f-60d7b2d2a1ab"
        },
        "item": {
          "id": "87216ca7-5bdb-4324-b5e0-cae2b91621b4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "de79649b-766f-4ecc-a964-64ef8a1baf4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae62bc5a-1cec-4507-aa90-6467e58fab4e",
        "cursor": {
          "ref": "fd29f358-9081-494f-9110-1bfde1103f1e",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6d7406d8-0ba1-42af-9773-009902889a63"
        },
        "item": {
          "id": "ae62bc5a-1cec-4507-aa90-6467e58fab4e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "38628401-c0bf-460c-8991-5e4fdcf195c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f16fd637-5101-46ee-9c73-45f7d1589193",
        "cursor": {
          "ref": "b1a76391-75cf-4cba-a9b5-e596b01dac8e",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f4de0693-c7df-41be-9ce4-2964085feb1a"
        },
        "item": {
          "id": "f16fd637-5101-46ee-9c73-45f7d1589193",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "44431ab5-c0e2-4d49-b077-5537df62a142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65842432-1e96-4735-b195-c286c2842ed1",
        "cursor": {
          "ref": "b07a6822-eef6-4e46-9969-09dfb4a37338",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0337a878-a2dd-4f0b-93fc-f63dc4a8fe4e"
        },
        "item": {
          "id": "65842432-1e96-4735-b195-c286c2842ed1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "84354a21-54d1-4c12-90de-dbc84dc7aad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f7500a-e95b-49d9-9327-5e969ff4cd10",
        "cursor": {
          "ref": "7cf98e57-74cc-4b9c-9616-e46746ac2327",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "359def08-f86e-4988-b7b6-99b2f4127619"
        },
        "item": {
          "id": "87f7500a-e95b-49d9-9327-5e969ff4cd10",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9ce88160-ff80-45fd-8859-a6999e06ac8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6936be48-66c6-4d9f-be80-1ae1c954263d",
        "cursor": {
          "ref": "b5cdafc3-a568-446b-a482-84f851b0e15d",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dda56474-e3f9-44c8-8157-82ef4543981e"
        },
        "item": {
          "id": "6936be48-66c6-4d9f-be80-1ae1c954263d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "31410a05-76c8-4d0b-8f21-a67023b99caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951ac18c-f6d5-4a38-b6ae-6f199e97a815",
        "cursor": {
          "ref": "fb1f00b3-b9cd-47cd-b849-8715f0fc3520",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7070501a-c0c0-4320-960e-fc6379f70e76"
        },
        "item": {
          "id": "951ac18c-f6d5-4a38-b6ae-6f199e97a815",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "66e01131-08f0-4df4-a06d-3c120b3d6f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70c3fe1-6ede-40f5-a794-2399658b4054",
        "cursor": {
          "ref": "9b0f513c-9853-4193-9e48-4d65d5655889",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fead58c8-2c6b-47cb-b893-4c15ae72c7d0"
        },
        "item": {
          "id": "a70c3fe1-6ede-40f5-a794-2399658b4054",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9e921dc5-51a5-4af2-9021-8f5b32922fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae8b14c-02f4-48fa-bd49-8490f1817188",
        "cursor": {
          "ref": "71a8b2eb-93a5-4a59-b92f-30b3c22598c0",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f8161b39-bf4d-4bed-870a-e3ccc2acfbc8"
        },
        "item": {
          "id": "eae8b14c-02f4-48fa-bd49-8490f1817188",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "77e778de-6102-4bb2-8340-0571b1bc4e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "11a86535-7965-492e-8925-27f3dcf9bb10",
        "cursor": {
          "ref": "ce155069-16a2-4b2e-95b1-d847711a9cbb",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "216e64e2-cee7-4ed3-b174-e04279ad8130"
        },
        "item": {
          "id": "11a86535-7965-492e-8925-27f3dcf9bb10",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "eaac6e76-8890-45ae-ae28-a2ed0b175b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40147a79-6180-4e36-b418-d1e45907c1e5",
        "cursor": {
          "ref": "d6c6d4c8-ceaa-4d0f-ac3b-cbc32a3a4190",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4e0fc61b-22a2-4fd3-9373-3d443ea86219"
        },
        "item": {
          "id": "40147a79-6180-4e36-b418-d1e45907c1e5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "117abf4c-d6e8-4a29-9338-f039481676a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d916983-d86c-4215-ab46-a2e81564fdb8",
        "cursor": {
          "ref": "95a0e0c1-8d6a-4384-a1c2-65812798260e",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e88101f0-2697-4eb0-b881-6dcaf7d93ac3"
        },
        "item": {
          "id": "6d916983-d86c-4215-ab46-a2e81564fdb8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "96275b53-1b34-4624-baef-08848f8c2b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08175c6d-8a01-428f-87e1-0f1570a53893",
        "cursor": {
          "ref": "1d3fe5ff-aac2-48cd-9440-64d8d9993a8d",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4598a7af-37b7-457a-a059-76fbb79196c3"
        },
        "item": {
          "id": "08175c6d-8a01-428f-87e1-0f1570a53893",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "958fcd2c-e865-4d3e-bea2-c96c8f576656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6e54c0-97b5-49f0-870d-c1ae7c1f8c88",
        "cursor": {
          "ref": "5d7e9fe2-2724-4e90-92ee-34b294c21209",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1042fc0c-1073-4615-a9a4-01283a0db94e"
        },
        "item": {
          "id": "fb6e54c0-97b5-49f0-870d-c1ae7c1f8c88",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f0df539d-4bd6-448c-bad3-93d845c0848d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c28342-2a61-404c-9dc9-938c485c3385",
        "cursor": {
          "ref": "df0b82d6-ee88-4f0f-b95b-2fe17837aae1",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0fbb6916-5def-4e33-a0eb-c3274c987efa"
        },
        "item": {
          "id": "e9c28342-2a61-404c-9dc9-938c485c3385",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7a870f70-f208-4b1f-9b35-f7ca8f84c48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414ec6e8-9a21-4ec4-bbe1-d2daa60bdb9a",
        "cursor": {
          "ref": "3a8cc8cd-55e4-4c14-9c8f-71c91552560d",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3b156096-2956-4223-ba5b-98d0348dae8d"
        },
        "item": {
          "id": "414ec6e8-9a21-4ec4-bbe1-d2daa60bdb9a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bcbc6b00-1394-4a45-9929-0b35daeab6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5819e3-fdbb-4b28-8dba-55c065a2161e",
        "cursor": {
          "ref": "c83c2959-b789-4d36-8740-0666d8bcf7de",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e517cab5-b2d4-4769-937d-e9aae4582c91"
        },
        "item": {
          "id": "be5819e3-fdbb-4b28-8dba-55c065a2161e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "71b1e82f-4634-4a52-b207-119af4b52bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e231147-5b27-4057-b198-b020ad6c962b",
        "cursor": {
          "ref": "fd441101-88e8-4eff-9fbe-3cc300bd21a7",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "85cec600-de28-4c20-ae5d-fcd80b2870a1"
        },
        "item": {
          "id": "4e231147-5b27-4057-b198-b020ad6c962b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4cec5428-8bcd-441f-b74b-e2f80c001c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282d7b28-1eb2-4ff6-a5a9-c0b7690d96bf",
        "cursor": {
          "ref": "7fe5c4b6-4878-4c84-bdcc-a3d7284394ba",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1d95a01f-026f-40b7-bc51-523f178afb9d"
        },
        "item": {
          "id": "282d7b28-1eb2-4ff6-a5a9-c0b7690d96bf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "331c76ff-9c37-43e3-a4f1-b5e5ce016863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066474d3-331c-4d93-b2af-8b3bf4e177b7",
        "cursor": {
          "ref": "30ba0f90-292d-4011-a794-0f01522042c7",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d5873c6c-a52c-4373-92bf-162a1e194d3d"
        },
        "item": {
          "id": "066474d3-331c-4d93-b2af-8b3bf4e177b7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a7bd5e6a-ff0c-4a21-a5ec-98fe17e70c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7381fa9-7e26-4a3f-9eac-98907213e5fb",
        "cursor": {
          "ref": "cb548522-bb22-46f6-8798-c137f15d8cda",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4b9dee9f-f156-4bf6-9b92-b0c4b09d5e61"
        },
        "item": {
          "id": "a7381fa9-7e26-4a3f-9eac-98907213e5fb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "833f0aec-3d8d-46a3-ab6b-4aaf20c41c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255f9ff8-d5f2-4878-9bb2-95985278887c",
        "cursor": {
          "ref": "dd411820-8491-4e2f-afe0-502107744383",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "47da29ba-9716-404c-9eeb-007d6d91bcc1"
        },
        "item": {
          "id": "255f9ff8-d5f2-4878-9bb2-95985278887c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "881d37b8-6152-4db9-8dfa-50c9dae60ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c627ce-8e33-4298-b4fc-645ffcda6016",
        "cursor": {
          "ref": "5d214b2d-a352-4166-83f0-9ae0730169d9",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f96750b3-60e8-40d5-8dbf-a0260cb35cf7"
        },
        "item": {
          "id": "94c627ce-8e33-4298-b4fc-645ffcda6016",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1b93b162-60ca-423e-9eea-1dcea62a7eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df27803b-4b8c-4019-98a8-f66f16bd8f9a",
        "cursor": {
          "ref": "d6a9dbe7-b06b-41be-9658-bc0ab611348c",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cc753b95-f7d2-4def-8c77-17a72d616743"
        },
        "item": {
          "id": "df27803b-4b8c-4019-98a8-f66f16bd8f9a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bdfb2874-a03a-4ff9-ab4f-6059ead28530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfa5dcc-4d65-45ac-ac9a-50e103eb1aa3",
        "cursor": {
          "ref": "150c0019-5a2e-4242-9d53-786c769b5170",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ac8d3333-6bdb-4c49-b3c5-b89c679e7467"
        },
        "item": {
          "id": "6dfa5dcc-4d65-45ac-ac9a-50e103eb1aa3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fa937487-a301-43f9-a0ae-48f8d96e889a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a374bced-41d8-476c-9419-6724d8737793",
        "cursor": {
          "ref": "6936f73a-8ddc-4872-a1d5-893ce68a260c",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4a1d128f-d0d6-4660-82fe-285de3b957f9"
        },
        "item": {
          "id": "a374bced-41d8-476c-9419-6724d8737793",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8e73613a-1472-4913-9d53-8b3bc1410ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655df4ed-9d2f-40a6-99ea-b1d6e067735b",
        "cursor": {
          "ref": "10c11d38-baba-495f-a901-e10365c2dfdc",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fa2e84b3-69db-45f7-ad83-0f0b5566a608"
        },
        "item": {
          "id": "655df4ed-9d2f-40a6-99ea-b1d6e067735b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6ad3a4ad-efca-4aac-b5d7-3131d1ea4462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c359c17-31ed-4035-9cbc-43d43d952e21",
        "cursor": {
          "ref": "b68402d4-fa23-483f-8d13-d7ee98f0306d",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "57765719-6a8e-42fb-9a07-00bdd8226ef6"
        },
        "item": {
          "id": "0c359c17-31ed-4035-9cbc-43d43d952e21",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9220f5b8-20e5-4d90-8f29-8b02f3f531f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900f7379-2af3-45d4-b9bd-5750179eea3b",
        "cursor": {
          "ref": "a8edf54c-76aa-416b-86c2-ec66133b202c",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "11058ae7-0e76-4f87-8ab3-1491335a9f79"
        },
        "item": {
          "id": "900f7379-2af3-45d4-b9bd-5750179eea3b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "82fb7e34-6a96-42ad-8b07-9deb1e16664b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b55115-ede9-4b74-a83b-9de039d8d765",
        "cursor": {
          "ref": "db9710ad-cf67-4a0d-bbe9-ce2927a37410",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3ab4b770-870c-4a1f-a0f7-fe092d85015b"
        },
        "item": {
          "id": "d7b55115-ede9-4b74-a83b-9de039d8d765",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "adb67cbb-8031-41b6-9865-49094fa3afe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e89b5c-2068-4353-a1a8-d770c5ac02ab",
        "cursor": {
          "ref": "ae028f68-ce8d-432f-a70e-d11deaff64cf",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "452d5559-8fcb-4569-a1d1-c4b9fe3b1f05"
        },
        "item": {
          "id": "61e89b5c-2068-4353-a1a8-d770c5ac02ab",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "747ce62a-3d30-4ff2-844c-c1074249ca84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1078a17-4cd8-4ecf-b9e5-7f901ac0b534",
        "cursor": {
          "ref": "bc5531ce-5815-459b-9831-22e7de86955a",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1f2f8b0e-747f-4260-bd14-138736bde598"
        },
        "item": {
          "id": "a1078a17-4cd8-4ecf-b9e5-7f901ac0b534",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2dc8dd29-47d3-439b-8a8f-5350f26c2155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf46179-29ba-4913-809a-8c2fa0fb40b5",
        "cursor": {
          "ref": "ee54778c-e002-4746-a5d2-8ffd45e97d36",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a167d89a-9287-407e-808c-fdf0f7aab61f"
        },
        "item": {
          "id": "cdf46179-29ba-4913-809a-8c2fa0fb40b5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a0a9ee89-128f-472a-a26b-e6d82304ccd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15ae356-9f10-4253-a884-a0d37fb7ca3a",
        "cursor": {
          "ref": "46eeb044-90e2-4070-a241-a830bdf91e64",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b03fd983-e823-411c-801e-b366fb43bcb9"
        },
        "item": {
          "id": "f15ae356-9f10-4253-a884-a0d37fb7ca3a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c844c665-6a13-4e8e-a79d-7e2a8403922c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f876a7b4-6958-4b2c-8919-cce372d8977f",
        "cursor": {
          "ref": "1a0d293f-9c2d-4a98-a2a3-a2adfc7f4e30",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "16fcba9a-0be0-4a46-b667-0c955a63c3aa"
        },
        "item": {
          "id": "f876a7b4-6958-4b2c-8919-cce372d8977f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d96c3b7f-71b5-47a2-bd36-930b49405056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3891c7-5500-4295-8d72-b98a8663afbe",
        "cursor": {
          "ref": "a1e94321-cb3e-401b-88a5-8dfba2bdb565",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "857ab72a-26c6-44ca-be39-babba8862a85"
        },
        "item": {
          "id": "4c3891c7-5500-4295-8d72-b98a8663afbe",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3ac285b1-3719-4611-a1ac-97b38e6073a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb798ed0-b854-4354-a230-6729c964325e",
        "cursor": {
          "ref": "32d51719-a77f-4a42-a512-bb6007583e17",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e7854e1d-5990-4b05-8ef6-2f880c6df960"
        },
        "item": {
          "id": "bb798ed0-b854-4354-a230-6729c964325e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b3e62510-8643-482d-b805-2e6b220874c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80cf8139-ed7c-498f-91fd-484b2ac3f1e0",
        "cursor": {
          "ref": "39d6bd10-bd71-434f-b8f9-a743e899f42f",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d5e9e223-7e4b-4801-a359-351ff9a2032c"
        },
        "item": {
          "id": "80cf8139-ed7c-498f-91fd-484b2ac3f1e0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9eb47522-e4c7-4f8b-811b-1e8d47dadc07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0b15e0-a1fe-4c97-a54f-d9e17417504c",
        "cursor": {
          "ref": "aa8ee1f9-f4a9-4478-80bc-1e527e224715",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "71a1f01f-0ef4-4aa4-b3ab-6cfb849c3eca"
        },
        "item": {
          "id": "9f0b15e0-a1fe-4c97-a54f-d9e17417504c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ff81c4b2-59cd-4c6b-a0bb-ec1dd56a200d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd93f13-c045-4103-94aa-fb81b7629231",
        "cursor": {
          "ref": "1187ff5d-b0d5-441b-8e72-1611ef809f2b",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4a514aae-9737-4f6b-9492-24a652cf8597"
        },
        "item": {
          "id": "1fd93f13-c045-4103-94aa-fb81b7629231",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "598b59fd-ca1e-449e-95eb-72d939a79f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e09172-d9a7-4e67-a80b-ed0ecab116f4",
        "cursor": {
          "ref": "112b99a0-0f68-4ec8-afc2-1db67924e8a9",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8c1aa839-6470-4803-8079-72ce2d3ee5cc"
        },
        "item": {
          "id": "03e09172-d9a7-4e67-a80b-ed0ecab116f4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "06a0d04a-163b-4422-a1de-329287138672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a13574-8f20-44ba-81e6-63d80c951fa5",
        "cursor": {
          "ref": "50d2f366-e009-4b65-97e7-7ffa7050421d",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9662698a-53d5-4fdd-b0a9-f12df650aab9"
        },
        "item": {
          "id": "11a13574-8f20-44ba-81e6-63d80c951fa5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d9069314-6a3d-4c70-b0d6-2b6ee5103bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6793d4-830e-4f16-831a-bbb82686f6f6",
        "cursor": {
          "ref": "ba5ea29f-4357-4ac5-9a2f-ecc9cb224bcc",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6f84ed9b-c362-43c4-9365-1ca9c82cade7"
        },
        "item": {
          "id": "5d6793d4-830e-4f16-831a-bbb82686f6f6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5bf853bf-a9d9-49f1-9e8c-87c0d4c2b40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdaa5cf-0fbd-47d4-9160-1290f0e69485",
        "cursor": {
          "ref": "18157fd6-7bf6-4e9e-b5d1-2a9cea53455d",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fc67a409-08a5-4b9c-a6ce-66eeeceb0f40"
        },
        "item": {
          "id": "7cdaa5cf-0fbd-47d4-9160-1290f0e69485",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "47a65a59-c6ef-4c87-b31d-80e34e32b583",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6adccb4c-2866-4f64-8438-3f34fb1358af",
        "cursor": {
          "ref": "18cfa01a-50b3-4f3f-bed1-5db053a66bf4",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "eca92048-6328-47ad-a969-02cef5269f5d"
        },
        "item": {
          "id": "6adccb4c-2866-4f64-8438-3f34fb1358af",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fe02a375-a3e4-4c42-8014-6506bc5bd5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c0ad7d-3abc-4966-b14e-171686849fd1",
        "cursor": {
          "ref": "7858adbf-cd11-4261-97a3-3150ef7ffba2",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "162c6338-1977-4c49-8e0e-699cb00ead52"
        },
        "item": {
          "id": "91c0ad7d-3abc-4966-b14e-171686849fd1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8e605e6c-b932-4d92-9c97-2b57ff304885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f79c60-2f25-4c8a-89e0-6e36c627866b",
        "cursor": {
          "ref": "6f3b7571-6c75-4b91-a008-8bb9e3b03c38",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "08521aa3-654e-4de1-9eed-ef988d91d988"
        },
        "item": {
          "id": "d8f79c60-2f25-4c8a-89e0-6e36c627866b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a96eb4e6-48db-4f68-b98c-5bc475f522f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9daf489-b31b-4922-bd28-8143891aceb6",
        "cursor": {
          "ref": "241db5cd-d345-422a-805b-56537ba25df7",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f97db1aa-6236-473d-a430-54f3e11d0eb2"
        },
        "item": {
          "id": "d9daf489-b31b-4922-bd28-8143891aceb6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2e98d3cb-4c34-4e36-afa0-e3c554db9aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cf202b-a832-4786-9881-bba1abd074d1",
        "cursor": {
          "ref": "d784fea7-bf20-42e3-bcec-5cb175fd9dda",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "965f4f97-62bd-473d-ad43-7de95410c511"
        },
        "item": {
          "id": "a0cf202b-a832-4786-9881-bba1abd074d1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1d9b9c93-ecff-4d9b-9981-2bee06f3baec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abeab0d-f6e0-4eb6-9e46-04028d4fd8a1",
        "cursor": {
          "ref": "6f053592-a973-4d7f-b51c-f8128a4005e3",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0a1d3882-621f-484f-bb00-30572af2c20c"
        },
        "item": {
          "id": "0abeab0d-f6e0-4eb6-9e46-04028d4fd8a1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5d6f538b-e2ce-4ced-b66d-b14028a6ce3b",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "2afc4dee-b5ef-4530-9acb-d354c15fdbe9",
        "cursor": {
          "ref": "cb4aec35-b364-4132-b804-2ef53f9ceb24",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fd47f244-434f-4229-8bd6-210ec38adef5"
        },
        "item": {
          "id": "2afc4dee-b5ef-4530-9acb-d354c15fdbe9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a2fd893c-efff-4158-a96e-d66e5f71c069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ca1cd9-f829-48a6-9731-96f544bc57a2",
        "cursor": {
          "ref": "44828599-3d6c-47b2-bc6b-31c5425b2158",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5f37d42d-e5c2-4cdd-b2e0-fb430d9b40f9"
        },
        "item": {
          "id": "52ca1cd9-f829-48a6-9731-96f544bc57a2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "66ee0bbf-4739-497b-989b-428d08530599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb821e2-cfee-4c54-897b-691174b9bca3",
        "cursor": {
          "ref": "6b7c8cf6-9be2-4e7d-839b-7d62b7ecf29c",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b41d359d-fff7-4a3f-a11a-040c260831e0"
        },
        "item": {
          "id": "5cb821e2-cfee-4c54-897b-691174b9bca3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4e0b7f44-f62a-4525-8b3e-07d60ccd8c2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dda2e68-67cb-4bbe-81d1-6c77bbf37584",
        "cursor": {
          "ref": "16f79178-3255-4382-8722-309f70753570",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d05a542d-9959-438f-935c-3921976b1a75"
        },
        "item": {
          "id": "0dda2e68-67cb-4bbe-81d1-6c77bbf37584",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b43e55e2-079d-421b-a6b6-10b85dcbefc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e70c5ed-19c0-4fc7-8429-e8be77f3c5f1",
        "cursor": {
          "ref": "80cd1bc4-c863-4589-9fbf-ebe7cbd31021",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7c88247f-e1f4-4cb5-89d3-b0466295027a"
        },
        "item": {
          "id": "7e70c5ed-19c0-4fc7-8429-e8be77f3c5f1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "50a89c60-fc3f-4633-a4e7-956b6ff717d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52224e6e-8774-459b-808e-853282e16e7a",
        "cursor": {
          "ref": "5cf214f5-20f7-455f-bd9d-7368acb69a54",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5327d2ff-05a8-4386-a823-9136346027ab"
        },
        "item": {
          "id": "52224e6e-8774-459b-808e-853282e16e7a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b6e107c6-3e48-426c-af81-982b7337a219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb95f72-175b-4278-b84a-916f950c5f36",
        "cursor": {
          "ref": "7d9ce318-6c5f-41c9-bdfd-d109eb1b1d45",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "08ba3b2b-6da7-473f-b552-3141e9f305e6"
        },
        "item": {
          "id": "9fb95f72-175b-4278-b84a-916f950c5f36",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "250fc504-8187-481a-92f2-0db50500bcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ededb2a-c9c8-4959-a956-3c50479e0b71",
        "cursor": {
          "ref": "560e2a2b-bb22-47ab-8d6e-1c2942400ca3",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "473f762e-d1f8-4776-8c83-efce72c12e81"
        },
        "item": {
          "id": "0ededb2a-c9c8-4959-a956-3c50479e0b71",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b02d473f-17e0-4fc5-94d4-c948ba2fa034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ab050f-348b-4ce8-bc07-b326de7665c9",
        "cursor": {
          "ref": "a421d7c8-e55b-49ee-ba10-eb352c28c7a3",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "57a6441a-880a-4055-99e8-847dbbab5498"
        },
        "item": {
          "id": "53ab050f-348b-4ce8-bc07-b326de7665c9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "929b79ca-d53d-46fb-89c7-12672f545e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "89a32953-0eae-4ccd-bded-52e3e1e6a4a8",
        "cursor": {
          "ref": "e02adc94-bbfb-4c0f-8a12-762c9b7f13ed",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "27c38a26-7e8b-4549-b558-bd5c0ded7880"
        },
        "item": {
          "id": "89a32953-0eae-4ccd-bded-52e3e1e6a4a8",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "6c29512d-c7ff-4984-9f64-fd7f3200a96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "13510e65-e477-48d9-8988-24a439431971",
        "cursor": {
          "ref": "b43fead1-aaa5-41ad-845b-2921e22b8f9e",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "28a79f8a-23d6-464a-a01a-e564312b7f05"
        },
        "item": {
          "id": "13510e65-e477-48d9-8988-24a439431971",
          "name": "credentials_issue"
        },
        "response": {
          "id": "01661178-6a72-4566-a7ef-a2e3495f18ef",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb6daee-dce7-4130-9c6a-bbb0d013da0e",
        "cursor": {
          "ref": "9f50c2d8-4005-4ce4-aa25-5239f2a28e4a",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "13d3834d-ea6b-41ee-96b7-0fed2d1569c0"
        },
        "item": {
          "id": "1cb6daee-dce7-4130-9c6a-bbb0d013da0e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "4c51f193-4ab9-4cef-ab99-df4e60ee23ec",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8df227-ae02-40aa-9ca3-2b53b886a6d1",
        "cursor": {
          "ref": "65490ed3-c6cd-4b4f-a157-56a830dcb693",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "eeb7f53f-6ff7-4d77-b96b-53327150246c"
        },
        "item": {
          "id": "2c8df227-ae02-40aa-9ca3-2b53b886a6d1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "14d9ebe7-15ee-48c0-a1bc-7fb05144334d",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56dcd9f-21f9-45ea-97e5-20f820ad9c66",
        "cursor": {
          "ref": "e94a4207-844a-487d-9985-dbef4ecfdcdc",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b61c9ca8-df3a-4a12-ab1d-52ed72573df1"
        },
        "item": {
          "id": "a56dcd9f-21f9-45ea-97e5-20f820ad9c66",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "443b86fd-aaf1-4519-9d60-961b9fdbc2df",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7a2c2d-c71c-4c8a-a6ca-2dc2b6349b4e",
        "cursor": {
          "ref": "441df0d4-3f6e-45c9-b8ca-a056ad853199",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3816eb44-698d-435e-961a-7c66ad28afb5"
        },
        "item": {
          "id": "5a7a2c2d-c71c-4c8a-a6ca-2dc2b6349b4e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7d650444-b62d-4962-b9ae-1ea2f55e72c3",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "3492b763-2d76-4514-8542-cece15bc799d",
        "cursor": {
          "ref": "ca662fc8-745c-4234-a8d3-2be64f52d406",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fc29bde6-b389-4bd5-93f8-e4ad3e594bb4"
        },
        "item": {
          "id": "3492b763-2d76-4514-8542-cece15bc799d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3652d17a-6722-4495-8c43-b089bc512375",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d1db49-b50f-493a-92b1-55dd9a1d9e5d",
        "cursor": {
          "ref": "a601aea8-ca73-4a6d-a9aa-7121c630f4e4",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bdb10d4d-db29-4597-b6cf-983cecbf7474"
        },
        "item": {
          "id": "54d1db49-b50f-493a-92b1-55dd9a1d9e5d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b78e6419-e2a7-4805-a4b5-91b1bd0fb49c",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "54d1db49-b50f-493a-92b1-55dd9a1d9e5d",
        "cursor": {
          "ref": "a601aea8-ca73-4a6d-a9aa-7121c630f4e4",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bdb10d4d-db29-4597-b6cf-983cecbf7474"
        },
        "item": {
          "id": "54d1db49-b50f-493a-92b1-55dd9a1d9e5d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b78e6419-e2a7-4805-a4b5-91b1bd0fb49c",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "3b593244-4df9-446d-b053-1adac2585013",
        "cursor": {
          "ref": "1bae3bf8-e861-493c-b541-8498562d0f2d",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8eb16ae1-4b31-4cd4-b491-81ad73ed9065"
        },
        "item": {
          "id": "3b593244-4df9-446d-b053-1adac2585013",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0fad7240-5643-4baf-9914-121477730777",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f0159982-fccc-4d9c-9382-cbddb93e595a",
        "cursor": {
          "ref": "3869d679-cdf5-49a6-af0b-e3bbf59cfb0c",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c8a5ec2b-556c-45ca-bc56-f112d32d0d11"
        },
        "item": {
          "id": "f0159982-fccc-4d9c-9382-cbddb93e595a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "57cc78d0-ce6c-4516-9b1b-96b0d6daa9b2",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "82f54263-ac90-40a4-9af7-97661bc9ce33",
        "cursor": {
          "ref": "7e408017-80ad-4524-90b0-8210618b9dd0",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cbcc08c3-cce3-446b-98d2-b15c5d7ac5a6"
        },
        "item": {
          "id": "82f54263-ac90-40a4-9af7-97661bc9ce33",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "787a6481-7250-4852-9eef-353553555a4a",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "70a22134-318e-4e3f-a3ec-88bfa989d035",
        "cursor": {
          "ref": "0a0a728b-05e9-4be9-96bc-2aa101f05c26",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d2051041-65b1-4fec-aa1e-952ec688bba6"
        },
        "item": {
          "id": "70a22134-318e-4e3f-a3ec-88bfa989d035",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "60df4b91-f008-4953-a029-f97f273798ae",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4f3fe811-e6e7-49fd-b7a2-bab4d9e5a022",
        "cursor": {
          "ref": "5bc79928-d95b-42bf-8020-43ee8c774dd9",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ed346e72-b531-41ac-ad65-a4368c008bd8"
        },
        "item": {
          "id": "4f3fe811-e6e7-49fd-b7a2-bab4d9e5a022",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2ea8d350-f319-4bd6-b8e0-4006c865ff51",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "080898b3-2f11-437e-a2ea-e23421d3ccfc",
        "cursor": {
          "ref": "e9a83317-c230-4da7-9df5-fa48ed18cbc6",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "411ad3d0-c4b1-48a7-9130-c98a35bc5ed1"
        },
        "item": {
          "id": "080898b3-2f11-437e-a2ea-e23421d3ccfc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8829add6-153e-45f2-8147-b5cf82975987",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "81c54b66-9276-4c8a-95f7-75661aea7f17",
        "cursor": {
          "ref": "68dbe35b-85be-4dba-aadb-ce74a592ac67",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "04cbc1d8-009a-48f5-b8ca-7c4c2b97bb07"
        },
        "item": {
          "id": "81c54b66-9276-4c8a-95f7-75661aea7f17",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "64ed8925-a97e-4dd2-8774-13a5f6a4735f",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "264d510d-6606-4b91-838b-834d18140172",
        "cursor": {
          "ref": "e90015b0-7ec4-41e8-8329-9248f70d25d5",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a99a9786-1718-435d-8ae5-8515d5e4f5c3"
        },
        "item": {
          "id": "264d510d-6606-4b91-838b-834d18140172",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ea121ccd-b369-4be0-bd1a-bff04e87ca3d",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "75efa117-60aa-4b5e-9e0e-aa8a327cba24",
        "cursor": {
          "ref": "77517e47-fb80-4521-99ce-b2d74b76fe29",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8e73a7ec-8ca7-4389-a775-afc27dbd6257"
        },
        "item": {
          "id": "75efa117-60aa-4b5e-9e0e-aa8a327cba24",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c3ee10d1-be75-4c84-9f3d-69ec56ecf740",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "ff903524-b6ab-4ab7-a8d8-dce71553f48d",
        "cursor": {
          "ref": "9faa51cd-6ab1-4f91-88d7-4aae48fb5be4",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0c7568f6-cdf6-415c-bf1d-0dec150e434d"
        },
        "item": {
          "id": "ff903524-b6ab-4ab7-a8d8-dce71553f48d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c689e27f-af44-4146-a3ce-d42326e66bbc",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "09eb8be8-e461-44d9-a580-caf95b7731c5",
        "cursor": {
          "ref": "25b3b46e-d492-4d9a-aa0e-332279c725a2",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8b905d67-0aa6-4ef8-af1b-522c4ad0291e"
        },
        "item": {
          "id": "09eb8be8-e461-44d9-a580-caf95b7731c5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2e940a6e-bf07-48de-8f8d-3faaea1613b2",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "86f1d7f7-9db6-4721-a9ce-ec024b8a0217",
        "cursor": {
          "ref": "32485498-2e3b-48ef-8eb9-220e2f5a3163",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4e3932d0-10d5-42f5-888c-9883a10fe98f"
        },
        "item": {
          "id": "86f1d7f7-9db6-4721-a9ce-ec024b8a0217",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5289e51d-2725-47c2-a789-9867df88adfc",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "97da9cc5-2817-4be0-8e6d-b75f275e948e",
        "cursor": {
          "ref": "42064617-886c-4c9e-a879-c3aa604581c8",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "981dc632-324d-4019-855c-093376e841bf"
        },
        "item": {
          "id": "97da9cc5-2817-4be0-8e6d-b75f275e948e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "09246181-4322-4a18-a4e2-dd148aa55ec9",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "496c696d-c9a8-41ef-bc59-b0cba167b65c",
        "cursor": {
          "ref": "9e4a2760-7eb3-4b97-beb1-b669aedd0f36",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "68f7428d-94c4-4be6-8f30-0a8b79a58399"
        },
        "item": {
          "id": "496c696d-c9a8-41ef-bc59-b0cba167b65c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4dfa06a8-d0a7-46b7-9dde-473c63592bdc",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "21f17231-07a4-4f7b-adac-8327f7660cea",
        "cursor": {
          "ref": "cdaf667d-c89a-4c06-ad97-bba93d176518",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "71b9fdfb-436d-4572-b459-449f11453b04"
        },
        "item": {
          "id": "21f17231-07a4-4f7b-adac-8327f7660cea",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3143fe1f-2ac6-4bdf-b329-788000426845",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "992631ad-e278-44e5-8a7e-f74045f1bd00",
        "cursor": {
          "ref": "9d9401f6-68df-4df7-a2f8-041b0654b378",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4be239b7-9277-4089-bd2d-d478e6c0f5bd"
        },
        "item": {
          "id": "992631ad-e278-44e5-8a7e-f74045f1bd00",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dfcb25a3-8155-4204-9210-016fa240cc6d",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "33405aa4-95de-42c7-9448-0b7df435b610",
        "cursor": {
          "ref": "c97c6e6e-38b7-48d3-b8e1-5fce5294ec1d",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "17108d28-37ce-4d86-a35a-64641e7e245d"
        },
        "item": {
          "id": "33405aa4-95de-42c7-9448-0b7df435b610",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "acc8133a-f9c0-4dcf-b0fb-bf0da888f59a",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "8732b957-f524-4620-b100-9d9508ef6856",
        "cursor": {
          "ref": "76d9616e-ca80-4d9b-a191-4899a1684277",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f17d3784-7bfb-46fb-9de4-f3d1be2f8388"
        },
        "item": {
          "id": "8732b957-f524-4620-b100-9d9508ef6856",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a3c095fa-798b-4c93-9e5f-18772d0b3b68",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "4c652e8b-a4b4-4aa5-a6b6-3384efa96e85",
        "cursor": {
          "ref": "3582039e-f89c-4974-ade5-20a1e9cd6f5c",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f1de7676-6eff-4a68-8622-d5100a8a70e0"
        },
        "item": {
          "id": "4c652e8b-a4b4-4aa5-a6b6-3384efa96e85",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9ebaef64-cf5f-448a-8562-05d84d5f15d5",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "a4829e25-f2fc-4130-807d-15a8c56922eb",
        "cursor": {
          "ref": "17a73820-3208-4ba7-8bc7-8b315098c3e3",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b77672b6-28a3-45ee-8bfd-aecf06e0d2fe"
        },
        "item": {
          "id": "a4829e25-f2fc-4130-807d-15a8c56922eb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1d126118-c843-4377-9e87-c422a5a81181",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "a0021da5-dbd2-4a65-a1c9-36afa5d842a5",
        "cursor": {
          "ref": "f4c7d646-9ecd-4f4d-92ff-fa32df4eb17c",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b0d3266d-ad17-4a35-8273-245620a65822"
        },
        "item": {
          "id": "a0021da5-dbd2-4a65-a1c9-36afa5d842a5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "86bb962b-fe93-4022-9815-6959c29c9ba6",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "904fd077-ffc7-40d7-8d60-d2df54577136",
        "cursor": {
          "ref": "772e2234-2e4b-463c-bd9c-db396a717237",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0e93ed52-044e-458d-9a11-a6b3aba5d221"
        },
        "item": {
          "id": "904fd077-ffc7-40d7-8d60-d2df54577136",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5dd438c9-0aee-4be5-b8fa-5ba47c9a4933",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "cdd44ac1-8d5e-4ef5-86a1-67c99b4d09b7",
        "cursor": {
          "ref": "fdb71f25-1be1-4fec-9eba-c3dac1503167",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "65966eb7-4841-41dd-9049-e213e146ec8d"
        },
        "item": {
          "id": "cdd44ac1-8d5e-4ef5-86a1-67c99b4d09b7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c2760657-0be5-4ed3-b0b0-1c05c6239064",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "fc8db4ac-fda9-423a-8cd9-8ca70a0ab3e5",
        "cursor": {
          "ref": "0d27a75e-ce94-464e-b092-0cbf854dd5c4",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bbaadee9-d99d-42b5-9073-e7ed25505f1d"
        },
        "item": {
          "id": "fc8db4ac-fda9-423a-8cd9-8ca70a0ab3e5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "83f39afe-5e71-40f9-a119-ee3e59f2363b",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "5d4ea0c4-a9a2-43cf-9a87-335bb8c763dc",
        "cursor": {
          "ref": "26353cd5-70aa-4c7a-b090-8c4671c2c03e",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b2e75212-3eb4-4608-9513-84815941f3ef"
        },
        "item": {
          "id": "5d4ea0c4-a9a2-43cf-9a87-335bb8c763dc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a007be82-5d43-47c2-a213-8d8677a10c8b",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "c87b4ad9-99d9-4797-b252-0c873073203f",
        "cursor": {
          "ref": "fc52a5c6-260c-42f1-b786-3b0f85389e22",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6218c642-ba6c-4eb1-8dc7-a5ae3118b08e"
        },
        "item": {
          "id": "c87b4ad9-99d9-4797-b252-0c873073203f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d2dd9758-e802-4927-b8aa-e6de91f5ad97",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "5efc076d-6c21-4a95-9e09-bb67b06c5af8",
        "cursor": {
          "ref": "cf014e8e-c0cf-4791-8539-8b9953ba8a36",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "34d21ef3-a51d-4585-bdc9-55b2bbe632c2"
        },
        "item": {
          "id": "5efc076d-6c21-4a95-9e09-bb67b06c5af8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "02b3ae69-2ef4-46c3-9e19-435ce8d582dd",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "27e2bc4a-ed68-41a0-8706-2fd4d58ff15c",
        "cursor": {
          "ref": "a529a129-2038-4c83-8515-e932687e5116",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "27737e58-8652-4ba9-8ee5-8b2da9a549bb"
        },
        "item": {
          "id": "27e2bc4a-ed68-41a0-8706-2fd4d58ff15c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "894ec6c9-7b2b-4573-811c-d7d042eb0a5e",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "50f7b42e-bb4f-4bba-9564-2425ebedc8cd",
        "cursor": {
          "ref": "ee6772d3-98a5-4e8e-9d98-988d7d19dcc1",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "94428fc2-fef0-4d0a-a10e-b30521fea018"
        },
        "item": {
          "id": "50f7b42e-bb4f-4bba-9564-2425ebedc8cd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "73eea16b-0a2b-4040-9b40-b1c7f2878f3e",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "cd9b5c42-a487-420f-af2b-54780bd40549",
        "cursor": {
          "ref": "54001cab-9e79-45dd-be3c-a04fec4b5ace",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f20871b7-519e-4519-8c28-b449d181a519"
        },
        "item": {
          "id": "cd9b5c42-a487-420f-af2b-54780bd40549",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9f6be622-63bf-4b05-8f0d-cf2705d7f1ff",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "77b54bb6-725c-4c78-96e0-750a11427136",
        "cursor": {
          "ref": "5b5ff959-1a92-4c05-a4e0-40bd43605ee6",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ae8c37fa-34c4-4b51-9632-ae567bfa40c5"
        },
        "item": {
          "id": "77b54bb6-725c-4c78-96e0-750a11427136",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6badb737-887c-4fc6-9233-b83b80127494",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1f50985a-2d9c-47fa-be6a-b2c90ca0dafc",
        "cursor": {
          "ref": "7d969eca-9be1-4621-9598-a6dcf36a03a3",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "798ae6b7-5ce3-4c15-a065-30ec1f3c7134"
        },
        "item": {
          "id": "1f50985a-2d9c-47fa-be6a-b2c90ca0dafc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d5ffb18b-41b0-43be-8ed1-2911524f97f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b091bf-3b4b-4910-b611-ad3c04202491",
        "cursor": {
          "ref": "485f6456-4920-46ab-b587-1979cd97d250",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2556d747-5ae3-4b6b-824c-3f3011768c72"
        },
        "item": {
          "id": "95b091bf-3b4b-4910-b611-ad3c04202491",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2584929f-35b1-4a4f-a841-ff2a5cd049f2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 19,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b5d076-323b-42ec-8b1c-8ea5a13f44d7",
        "cursor": {
          "ref": "08539f09-02ea-46fd-b015-620f15de811b",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5b51f0bd-b5a8-4b62-a0e3-a32ad3f0ad65"
        },
        "item": {
          "id": "03b5d076-323b-42ec-8b1c-8ea5a13f44d7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "25fb0f2b-7dbf-430a-bf43-478f25d70fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b5d076-323b-42ec-8b1c-8ea5a13f44d7",
        "cursor": {
          "ref": "08539f09-02ea-46fd-b015-620f15de811b",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5b51f0bd-b5a8-4b62-a0e3-a32ad3f0ad65"
        },
        "item": {
          "id": "03b5d076-323b-42ec-8b1c-8ea5a13f44d7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "25fb0f2b-7dbf-430a-bf43-478f25d70fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a1b3df-5c4b-4483-a6dc-ab52b2c51105",
        "cursor": {
          "ref": "46a021b0-0e70-4b99-81d8-67b43946bd74",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2c4c6bec-7476-4a7f-ba86-475daa36807f"
        },
        "item": {
          "id": "37a1b3df-5c4b-4483-a6dc-ab52b2c51105",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "07827c23-f390-4aea-bd54-88003101a177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e14169-b72f-4da2-8a41-4c6a480a51b4",
        "cursor": {
          "ref": "57118605-f016-40a5-a840-db4f0c581b77",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f83ce65f-25ef-424a-ba88-c48ac209100a"
        },
        "item": {
          "id": "f8e14169-b72f-4da2-8a41-4c6a480a51b4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d114e9a8-8f52-462c-a2ef-77875a5eb0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2824d8e4-b9ab-45c1-a0a1-f9966e8375e7",
        "cursor": {
          "ref": "90c0b70c-e412-4c56-b9a4-19d8babf05a2",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "94d0b5da-078d-4898-9d60-20f4a14e50c4"
        },
        "item": {
          "id": "2824d8e4-b9ab-45c1-a0a1-f9966e8375e7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b3a78380-df50-4903-b163-79a9392979ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe5fa07-dcb6-427b-a02e-4c751ccbf570",
        "cursor": {
          "ref": "69b064cd-f217-41a1-b379-29856698ff3c",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "820d2262-811b-428a-93fc-b041b9ad4779"
        },
        "item": {
          "id": "2fe5fa07-dcb6-427b-a02e-4c751ccbf570",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d069c020-5216-4c03-9284-899ea1fd7830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2a6014-2372-421f-accf-6cebfbf48a3c",
        "cursor": {
          "ref": "8e39cf17-97eb-40cf-800b-7ef18e9b41f7",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e94b587a-e2a3-4219-ba51-2dc2b94137ae"
        },
        "item": {
          "id": "4f2a6014-2372-421f-accf-6cebfbf48a3c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a8312711-9c1b-464c-8ca0-4e49d5a52913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6505af-f3d4-4037-aed7-b440ce195e65",
        "cursor": {
          "ref": "b81f779c-748f-4a5f-8d7e-84a8483960e3",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2ceadc76-02d7-434c-a503-a707976bb247"
        },
        "item": {
          "id": "0f6505af-f3d4-4037-aed7-b440ce195e65",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5a14e9d5-f868-4642-b44b-5f31702e99c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 573,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719bbcb4-3796-4995-b620-6b771b56200e",
        "cursor": {
          "ref": "797b1aa2-71c6-4366-9c71-2abb4c65cd5f",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ce927661-631d-4ddf-91eb-fbba970958b1"
        },
        "item": {
          "id": "719bbcb4-3796-4995-b620-6b771b56200e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "193b4d43-b4b6-4798-960c-53b55fbaea19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5508d20-52f6-4729-9402-635ff03306ff",
        "cursor": {
          "ref": "0d7ecafc-0193-4fb6-8123-b41004fa11c1",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c413f3f1-e0d1-4e1f-88cf-a68af528bc94"
        },
        "item": {
          "id": "a5508d20-52f6-4729-9402-635ff03306ff",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8e7f9e9b-0bab-424a-85a0-ed7a5af64559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b362b7-daef-4f88-8da6-bedec4d18106",
        "cursor": {
          "ref": "3d28e692-1bee-4888-a810-da2141899b01",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "de7eedb6-12e8-4812-9285-649855b5ae83"
        },
        "item": {
          "id": "61b362b7-daef-4f88-8da6-bedec4d18106",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e690293c-eef1-4e77-8361-e17aeb80e0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9045e1a-b431-433e-91ec-be995b7d3c16",
        "cursor": {
          "ref": "36b70d28-0d90-4ced-a54e-b55f4191d4ab",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "38879018-d9e3-4dfc-bde8-961dd5d2f3a8"
        },
        "item": {
          "id": "a9045e1a-b431-433e-91ec-be995b7d3c16",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e317324a-329f-4f1d-a938-0c71ca806dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc394cf8-c7f8-4092-b31a-60783783fb6a",
        "cursor": {
          "ref": "72f5f451-af31-4ca7-8c65-27062cb06622",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f31f54e9-df8a-4ce0-83f5-301272eebe8c"
        },
        "item": {
          "id": "cc394cf8-c7f8-4092-b31a-60783783fb6a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "22357f83-48df-42b0-83f8-ca95716b4ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f1493a-cd08-4eb9-8289-f3c00b17aafe",
        "cursor": {
          "ref": "24346f0e-dc74-4e46-b92e-876b9f3420f9",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "51fd9ecb-2399-41ee-bf2b-abe03b728b2c"
        },
        "item": {
          "id": "b0f1493a-cd08-4eb9-8289-f3c00b17aafe",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9b13a8bf-cd06-4fc1-b989-e4ac52e779b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75405300-8033-445d-a245-8e22e199e7f0",
        "cursor": {
          "ref": "3cfb035e-3714-481b-953e-dccc8964802a",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5086eb25-4e67-4e53-abf1-1089c5c6d687"
        },
        "item": {
          "id": "75405300-8033-445d-a245-8e22e199e7f0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "13325b92-f376-4e0d-a597-752c5754d6df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3960f637-69c3-4972-9ca2-bf9d8493eca0",
        "cursor": {
          "ref": "2911bbf1-abf9-47df-a7f1-67175f85af9a",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a836ddad-26c7-4801-8499-d0e82d199bd0"
        },
        "item": {
          "id": "3960f637-69c3-4972-9ca2-bf9d8493eca0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b9e3ee0d-5618-4c31-9414-3517896a9b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45da45c9-45db-42b9-af10-b921d5a192a3",
        "cursor": {
          "ref": "833161c1-f00f-477b-9a7e-b550f3c2af27",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f9a4c227-92ce-4b0f-994b-7b71e1eda245"
        },
        "item": {
          "id": "45da45c9-45db-42b9-af10-b921d5a192a3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "02a35716-bc4a-47dc-a2db-c33d73321ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7037b6db-745f-40f7-8851-5e503328ab3b",
        "cursor": {
          "ref": "59f704ea-f066-4fbd-960d-c92a2bcf4005",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3b439489-f1a5-4792-8737-c7bf37764eaa"
        },
        "item": {
          "id": "7037b6db-745f-40f7-8851-5e503328ab3b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9f1988d9-9c08-4bcb-97c7-e41fb8600753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e96efd-00ce-4ae9-b730-fadb28e35342",
        "cursor": {
          "ref": "c956a238-eca3-45a3-911e-7e90ca77322f",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "20575b68-7073-47df-8af4-09cf177513f8"
        },
        "item": {
          "id": "08e96efd-00ce-4ae9-b730-fadb28e35342",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7c5f6f46-355d-4fe7-a464-f27910e6d7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab364142-2447-4d5e-9e0e-681eb43acf3a",
        "cursor": {
          "ref": "c935a0f3-bed0-4ea9-accf-d954a15206f9",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b52ccaf8-0a9b-44ca-9a65-0a58453e7716"
        },
        "item": {
          "id": "ab364142-2447-4d5e-9e0e-681eb43acf3a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7807ecb5-fc40-44f6-bcf2-0bbe60424566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5679c2-95b3-4fe1-af28-29b861a0a99b",
        "cursor": {
          "ref": "73f5b527-3af5-46ca-aa2b-2d4a4b58b29d",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "20830572-8abd-41ba-b60c-49b227cb57c9"
        },
        "item": {
          "id": "da5679c2-95b3-4fe1-af28-29b861a0a99b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0e50cd53-88de-435e-9d33-231f7a4ab761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 398,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7708e953-660d-4606-9934-a7d045f18ae3",
        "cursor": {
          "ref": "4ada6f30-16c0-44c6-b49c-ed2db4e32b30",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f191cbdf-945c-4e66-98aa-046262cad4d8"
        },
        "item": {
          "id": "7708e953-660d-4606-9934-a7d045f18ae3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2e97321a-f0a7-4314-bde4-7e370f4b2519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0243aa-1d1b-4dde-a90e-44450c2bb1c3",
        "cursor": {
          "ref": "7315a002-3c92-423a-acad-38d70052d938",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "54ee655c-14e3-4fd6-a7fd-4fe7b15d0d10"
        },
        "item": {
          "id": "5f0243aa-1d1b-4dde-a90e-44450c2bb1c3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "54125a82-8c23-4b9a-83dd-953c23dd2e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d2337b-f3af-4ed1-8b8b-8b170b20fc78",
        "cursor": {
          "ref": "17008c8b-56cb-4bb5-8e5d-decadbcfc616",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c56adc92-5d67-4467-b729-918127f2b342"
        },
        "item": {
          "id": "c7d2337b-f3af-4ed1-8b8b-8b170b20fc78",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0d08b9d9-3868-4666-9d37-61823bd601a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b2d495-ad60-4f64-8294-fd7cee83eb98",
        "cursor": {
          "ref": "dd6af9a2-bb1e-46db-9684-c3c34a0f9ff2",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c759b4a0-4f7f-4317-b520-d56ac9b14f33"
        },
        "item": {
          "id": "d1b2d495-ad60-4f64-8294-fd7cee83eb98",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e8a5e539-bd84-49ac-95b3-49c6b1823f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ae8a98-910e-4791-98d9-efecf7b89798",
        "cursor": {
          "ref": "a1668bb5-1004-4a6e-b515-f463b5aabece",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b45e3c17-c8cf-49dc-a13d-da3f502aa948"
        },
        "item": {
          "id": "e3ae8a98-910e-4791-98d9-efecf7b89798",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "164b25c7-1cb4-471f-aab3-8662421bb37c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c79981-fc62-4e82-a1f7-dacc711a8789",
        "cursor": {
          "ref": "c4841991-c233-4b9d-8727-21652920c786",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fbe796b5-89c4-46ca-bee1-b4b81bda3da2"
        },
        "item": {
          "id": "f5c79981-fc62-4e82-a1f7-dacc711a8789",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cbcaa72f-665b-4c3e-b72f-2c61cb25f143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecce4904-98f5-47c6-bcb7-741ee96671a9",
        "cursor": {
          "ref": "8284c0e8-61c2-4fd8-85d5-e30665157398",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8fa4aa46-0a8f-4dc0-85ba-b3b2146ddd9d"
        },
        "item": {
          "id": "ecce4904-98f5-47c6-bcb7-741ee96671a9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "640934d1-3e1d-4c75-a594-d067848fb357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608524ab-f8c3-4db3-87f4-d921ce067ba7",
        "cursor": {
          "ref": "d179c2f6-194e-47b9-98b1-c92f3ec1f4c3",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "66a0b25a-2930-4d83-9501-6dff6aa273fc"
        },
        "item": {
          "id": "608524ab-f8c3-4db3-87f4-d921ce067ba7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8111f07b-5a09-4f5d-a56a-3b20bf34591f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780ddb0f-7f7d-4068-a2c1-a0962747fcc6",
        "cursor": {
          "ref": "3dc0fe4d-deaa-4907-bab1-8fe5e7f2a5f7",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "779e952a-7347-48f0-84eb-95f15cbe5b7d"
        },
        "item": {
          "id": "780ddb0f-7f7d-4068-a2c1-a0962747fcc6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1316aad1-058a-48a0-b911-5a959b8d6b2d",
          "status": "OK",
          "code": 200,
          "responseTime": 244,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "18ec02fb-27fe-4a47-99e6-b5c43dbe2afa",
        "cursor": {
          "ref": "5837db56-9628-4b51-ab8f-602dc1df7bc9",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bc83514c-108d-40dd-b189-8252b88844b0"
        },
        "item": {
          "id": "18ec02fb-27fe-4a47-99e6-b5c43dbe2afa",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c785a81d-e1ac-4f08-87a7-3bb2a3feb376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58f5470-a23a-49dc-aff9-d7fce811c673",
        "cursor": {
          "ref": "ad7f6cc3-a2d9-4e02-883f-76fb007d8d0c",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "843f7a14-1a18-45b4-8921-f94ffb442f4a"
        },
        "item": {
          "id": "b58f5470-a23a-49dc-aff9-d7fce811c673",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ad3f9ecf-200e-483c-a1d6-69eb246e0f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5188e44b-01b4-403e-9ec6-c8f582c44d52",
        "cursor": {
          "ref": "a6c61603-28b7-4f55-b46b-064e9fcccbdd",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "93fd425f-4351-4d64-be6b-9f88ad6ac811"
        },
        "item": {
          "id": "5188e44b-01b4-403e-9ec6-c8f582c44d52",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "749c9226-aed9-4e9f-a8e1-b0ec3ec1f944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a6cf1a-6555-4c8b-b833-d3f28fe8b95e",
        "cursor": {
          "ref": "230e8f08-5b6f-4775-a68a-59897caad82a",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "29e7250c-3281-42f0-82d0-8c05c838b850"
        },
        "item": {
          "id": "21a6cf1a-6555-4c8b-b833-d3f28fe8b95e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ad71970e-1c1c-4cef-83db-5c20fd19d9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303d05c5-2947-4537-8327-98ffb29c2dd6",
        "cursor": {
          "ref": "a61a1bae-a205-47cc-808c-5f4eaf768cc5",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "54710289-15c0-458d-af9e-b64c99669dea"
        },
        "item": {
          "id": "303d05c5-2947-4537-8327-98ffb29c2dd6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c6328d1d-4331-4c92-aa7e-3f57079cb040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44985e1e-6032-4c9e-b9dc-cebaaa019290",
        "cursor": {
          "ref": "7a0d7325-9503-4aaf-9e0c-8ef76826a237",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "897eefd9-37f0-4514-867a-33567c950333"
        },
        "item": {
          "id": "44985e1e-6032-4c9e-b9dc-cebaaa019290",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e59330e2-ec7e-49c9-9552-dbe36f9b29b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b72255f-36b6-4af2-a2b7-1fcf233c6dc7",
        "cursor": {
          "ref": "52de83e6-a07d-4c98-b409-e64f06a14ccf",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e3c89155-ffbf-4f47-be87-e98462821502"
        },
        "item": {
          "id": "0b72255f-36b6-4af2-a2b7-1fcf233c6dc7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "96746b62-8016-4f15-a72c-0f03c8aeb3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f89853-97be-45ea-a19e-00a6bd94ec65",
        "cursor": {
          "ref": "1d5e162d-a543-42e6-b7a6-3eba25379814",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "235c02f6-9aa2-47e1-a52d-e222c73160ca"
        },
        "item": {
          "id": "48f89853-97be-45ea-a19e-00a6bd94ec65",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "93ff8aef-9f2d-4618-9af1-713defcc0381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd5e673-3c92-423a-911c-1f6f2ee0ee93",
        "cursor": {
          "ref": "7e7a4b6e-d486-4b63-bc4d-e368e31dcfbc",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2c10d4c9-2335-400f-a34c-77b6dba6fa4b"
        },
        "item": {
          "id": "cfd5e673-3c92-423a-911c-1f6f2ee0ee93",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d939c0ff-9dd1-4a16-aea4-d9fe111757e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b149c0a-252d-414f-85f3-a7c4e43c8598",
        "cursor": {
          "ref": "656ac9e8-eedd-4b0a-9299-e04a4c2d65d2",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "81c28833-0879-465c-bfc2-aff0e21ebf58"
        },
        "item": {
          "id": "6b149c0a-252d-414f-85f3-a7c4e43c8598",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8362b268-a8e6-4eb1-ba47-d37c4ab71f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46498ba1-5941-4f90-b515-a6d755c44b71",
        "cursor": {
          "ref": "ebfa2aaa-a055-4ec7-8b6a-fc43891bcbe3",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fdc851b4-7038-44c7-ac58-07633c780c01"
        },
        "item": {
          "id": "46498ba1-5941-4f90-b515-a6d755c44b71",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "28f9caa9-683a-4f06-8477-3976799008c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609a3ab0-9566-4731-af4c-4451206843a4",
        "cursor": {
          "ref": "e06be1ae-d32d-4575-8507-69d5d9e4de94",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8d202e7e-f460-43e1-a97b-aa70c9e95540"
        },
        "item": {
          "id": "609a3ab0-9566-4731-af4c-4451206843a4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "30c6958b-9f4f-42ef-9a4a-b87ccdcffe7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6099ca-b672-4bd3-af12-dd78dc334c5f",
        "cursor": {
          "ref": "0461e738-3727-4336-9691-4973baf6c622",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "009bad6b-b107-40e5-b995-227ea032c3e4"
        },
        "item": {
          "id": "8c6099ca-b672-4bd3-af12-dd78dc334c5f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8f4fe732-7af3-41d8-8e12-42db64673fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9de6c6-c285-44b4-a56b-39779b3456bd",
        "cursor": {
          "ref": "a8b542e4-7d7b-4037-a89b-b55f8a04c9fa",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d33cbb28-3425-43c2-b89d-b6e54868ae6b"
        },
        "item": {
          "id": "2f9de6c6-c285-44b4-a56b-39779b3456bd",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "feddc0a0-4203-4d6a-bb70-1490d35e9130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb77e0f9-c7d8-4dc1-8c65-a134f38a12f0",
        "cursor": {
          "ref": "760d6b49-1135-4f3e-991d-772f5e327858",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8543b8e4-db3d-4bb0-872c-0f42b5b82304"
        },
        "item": {
          "id": "bb77e0f9-c7d8-4dc1-8c65-a134f38a12f0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "99472fa7-6566-4009-8ee3-4990c2b06ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2520a2e6-d907-41d4-8a79-498d3a3629ea",
        "cursor": {
          "ref": "792b54ca-df4e-45af-a538-f8b52eec57e7",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1941217a-5e53-4afa-9e3d-9221d3193d14"
        },
        "item": {
          "id": "2520a2e6-d907-41d4-8a79-498d3a3629ea",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4d0f71a8-ba27-4a3f-aa36-4c7225a7dad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252ab796-47e1-448c-8de0-89ce5474afe5",
        "cursor": {
          "ref": "9dabc0b2-bdb3-4407-9945-028f4c6ce4a2",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d0fa2392-db00-4083-8d93-5cf4b8781e08"
        },
        "item": {
          "id": "252ab796-47e1-448c-8de0-89ce5474afe5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "51f85d69-ca09-463a-8dab-5bd331f3aacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ea8d8c-aa72-405d-8a93-fb835bc96f73",
        "cursor": {
          "ref": "ee42373e-b615-4da1-87ce-83c566da6727",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "12833ff0-6053-40ee-9505-b854ab722d48"
        },
        "item": {
          "id": "87ea8d8c-aa72-405d-8a93-fb835bc96f73",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7304c4cc-1161-4c90-80ed-0bd721f4075d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118af17e-033d-4d6b-8546-56e7cae9c04b",
        "cursor": {
          "ref": "e0dd9aa9-56e3-4292-9785-cc201635ca6d",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f66a8114-67fa-458a-a856-0a06916372b9"
        },
        "item": {
          "id": "118af17e-033d-4d6b-8546-56e7cae9c04b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "153c5c41-73d6-4d94-9fea-fd32635d421d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37342f98-451c-4901-bbc0-058f96b11fdf",
        "cursor": {
          "ref": "1caeab3a-7f1d-4a63-972d-ae43b59c78a9",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f4567ef3-4c0b-43a2-a918-ca2d3e02051f"
        },
        "item": {
          "id": "37342f98-451c-4901-bbc0-058f96b11fdf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fb807112-7a09-4404-9719-506eb1e8ab8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9574b6-7e44-41c7-8140-49cb712677cd",
        "cursor": {
          "ref": "edb92711-df29-406f-8bea-5e62d479422b",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e84ab8cf-549c-4721-8311-a421c35ecb47"
        },
        "item": {
          "id": "ad9574b6-7e44-41c7-8140-49cb712677cd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "96eff4b8-73bc-40e7-9f36-5e364fb03503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de365f3-e797-4b55-953a-2525dce6749a",
        "cursor": {
          "ref": "9a73a858-c64a-4e47-b1bb-cc3633e17837",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9b75def0-1573-4fdb-85f9-306f0068a1dc"
        },
        "item": {
          "id": "2de365f3-e797-4b55-953a-2525dce6749a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "73cc11da-5205-4796-a02d-b7cba46a7687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cf93cd-7553-4294-9e83-849de96e04ae",
        "cursor": {
          "ref": "cbdbbdbd-3864-4e08-b63c-274891f0e839",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a91840fc-ca25-48e0-b078-b1aec449a7ef"
        },
        "item": {
          "id": "88cf93cd-7553-4294-9e83-849de96e04ae",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d6bd424d-dfae-4008-b63e-30d614bbfac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70335c3f-1c10-402f-b6eb-118cc0fcec60",
        "cursor": {
          "ref": "e96e685b-cdcc-4e57-9146-8d71cce8070e",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "26775f0c-cd02-41ba-bcf2-db3c7fba96c1"
        },
        "item": {
          "id": "70335c3f-1c10-402f-b6eb-118cc0fcec60",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "77ff1c75-0c23-4dd9-b6f8-3d684bf0682f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdaf456e-f45b-4a90-ab00-0bf0e1104a1d",
        "cursor": {
          "ref": "d7bc31e2-69e8-475f-85e7-0d73c049c9e9",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3a997268-1195-403b-af32-9fe8fd514cc1"
        },
        "item": {
          "id": "fdaf456e-f45b-4a90-ab00-0bf0e1104a1d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f5c28649-cbc2-4fed-b775-4b41d0333034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9574bcce-8042-4db6-9fe6-9d23a5d3f82a",
        "cursor": {
          "ref": "1c34a820-411b-4342-9a42-d216be649c79",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "65f3a5a4-21ad-4524-82ea-416ba4e1b81e"
        },
        "item": {
          "id": "9574bcce-8042-4db6-9fe6-9d23a5d3f82a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f16d91d3-45ad-49e9-863d-1b9ae61337c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f00602b-4212-47c1-9db5-d7be0ed97cef",
        "cursor": {
          "ref": "37a9923e-a18f-43e2-9b05-5bf9dd2d157d",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "41b45731-0b47-48d8-85e0-3e711ed0e697"
        },
        "item": {
          "id": "4f00602b-4212-47c1-9db5-d7be0ed97cef",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9cff1148-9ee5-4e16-9de3-09f851d12efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b339205-d013-4810-b03a-556c47afa53e",
        "cursor": {
          "ref": "f45e39ac-a856-4bd5-834a-0e459753eee8",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "10c8cb07-b948-490c-bfe0-4df031f49d6b"
        },
        "item": {
          "id": "4b339205-d013-4810-b03a-556c47afa53e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f4d57072-6245-4584-91c5-a68ccb90ab9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9774b973-c47e-407a-a6dc-6fc680601379",
        "cursor": {
          "ref": "fc72f464-ae11-4a73-8691-db8547a49cbf",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "aceae51c-15c9-4310-8495-9d48f280cec9"
        },
        "item": {
          "id": "9774b973-c47e-407a-a6dc-6fc680601379",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f2803444-14c6-4a55-ad2f-e2c4a2368249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9cefa07-c3ce-4fd6-90bc-6b7652a1e31a",
        "cursor": {
          "ref": "23b3c6e9-c615-4314-95b4-27267fd2d017",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cb788760-9917-47a2-8f8b-8b2fd60bd5c6"
        },
        "item": {
          "id": "d9cefa07-c3ce-4fd6-90bc-6b7652a1e31a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c3647db3-569b-40e2-9c4d-febc95b6eefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64983bd4-de2a-4e73-92d7-ff330c772a2f",
        "cursor": {
          "ref": "c503f58a-6ca0-480b-848e-24e7fba8b713",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e4e87c6f-c9fb-49af-a427-5d9ea06df6fa"
        },
        "item": {
          "id": "64983bd4-de2a-4e73-92d7-ff330c772a2f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c1f454b4-2ff8-444a-a7a4-1e0e8854cbc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71fd698-4638-46c0-8345-c606902b0d10",
        "cursor": {
          "ref": "b7fec43d-d983-4b5b-9efe-fb367260ba0a",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "184fad08-d99e-4f44-9fbb-b70ca2a75476"
        },
        "item": {
          "id": "d71fd698-4638-46c0-8345-c606902b0d10",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c5accb51-841c-41e0-8fcb-31e2f5cea39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1ce7d0-4e98-40f5-925a-a9a82fd7a3f1",
        "cursor": {
          "ref": "b0fa3c38-2f77-4728-b49c-0f341617fe02",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fd3db7ce-80d2-4736-a7fb-a8f3fadc4909"
        },
        "item": {
          "id": "9e1ce7d0-4e98-40f5-925a-a9a82fd7a3f1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "edb13d34-f075-4d9d-bcdd-72b192a169b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ecae062-1325-4042-b8ac-ed9499b4dc19",
        "cursor": {
          "ref": "4dd5e0cb-9be5-4bbb-b754-b83168635beb",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f9723692-78e0-4344-9180-71c90a168032"
        },
        "item": {
          "id": "1ecae062-1325-4042-b8ac-ed9499b4dc19",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "31826149-ecb1-4380-adda-c8f8b6d011c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff46929-b747-46af-96d6-d83a2d81388e",
        "cursor": {
          "ref": "92790ab5-c65b-4c4c-9311-7338dce28383",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c7331f8a-7640-4911-b497-e9bdb6ec2c4d"
        },
        "item": {
          "id": "2ff46929-b747-46af-96d6-d83a2d81388e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c0272a00-1593-4f23-8309-62faf5ad559c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d32129-26a3-4cb5-911e-8327011591db",
        "cursor": {
          "ref": "e8273e46-23ee-4faf-b902-f92b2528d834",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cd7ac504-d043-48ea-aeef-8f01b855b4fc"
        },
        "item": {
          "id": "b7d32129-26a3-4cb5-911e-8327011591db",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "53b83643-f164-4b26-b8c8-e097c252eade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c5f72e-268a-4e98-bc34-fff2f63d0b2b",
        "cursor": {
          "ref": "be7179e7-09f5-4e5a-b31c-b367fa538517",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3a1b7e20-8be4-4649-820d-e02f627366cc"
        },
        "item": {
          "id": "42c5f72e-268a-4e98-bc34-fff2f63d0b2b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a4b88bd0-a59b-4104-8632-436faf43aa39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfb56d5-8074-4e5d-afbf-8ce33c5fcd41",
        "cursor": {
          "ref": "11d1739b-73b8-491a-93f8-71d98db12986",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5ad3ade1-6a6d-41d7-8bfa-2a535b2b2cc4"
        },
        "item": {
          "id": "edfb56d5-8074-4e5d-afbf-8ce33c5fcd41",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4615f97c-0cdc-4d9c-bb57-547a3dc30b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136f1a2a-ab7e-4f35-b70f-765b5967a994",
        "cursor": {
          "ref": "508c23b0-a6d2-4be9-a28c-ac709cb397ba",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3c9187f4-5376-4679-ab49-f46a933f91f0"
        },
        "item": {
          "id": "136f1a2a-ab7e-4f35-b70f-765b5967a994",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5bd3b79a-c309-4f3f-839e-843032c12180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e67f039-2c3d-4263-a2f0-f9f760499e8e",
        "cursor": {
          "ref": "8ae39f80-e459-45a8-aeda-b9e44855fa5b",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b29534e5-3b93-4f46-a624-7216228628d2"
        },
        "item": {
          "id": "3e67f039-2c3d-4263-a2f0-f9f760499e8e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4fbadf03-a3c9-425a-8633-9e9202fa0630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe77f0e-1de4-4f91-842d-02af7d9d724d",
        "cursor": {
          "ref": "88f9a3ba-3e5f-48fa-9cd2-187df569e81e",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7a189148-9f76-4028-bdd6-07316ccc601b"
        },
        "item": {
          "id": "fbe77f0e-1de4-4f91-842d-02af7d9d724d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8c71e455-4489-40e8-beb8-33445f1cb35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea5c81d-8e24-4cea-86dc-3a4b6c552773",
        "cursor": {
          "ref": "14df89dd-44f7-4904-95a3-0fe6b6dd1734",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fd31d53b-baea-48b9-8dc0-710caffa53fa"
        },
        "item": {
          "id": "1ea5c81d-8e24-4cea-86dc-3a4b6c552773",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3cef99f9-6fc7-4b02-8bd2-89fe7c0a4264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a85c83b-d606-4db8-8f6e-6aba4edca5e9",
        "cursor": {
          "ref": "e3b1db49-0d74-4916-b801-6764b206c2cc",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "025b4b28-7bca-4db3-ba54-869366bf9070"
        },
        "item": {
          "id": "5a85c83b-d606-4db8-8f6e-6aba4edca5e9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0d5e262f-7ab1-4576-8473-882ed9d66bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36b719a-c9ac-457e-a0df-fc85c4c601fd",
        "cursor": {
          "ref": "1a607ac3-0be8-42d2-9c89-6b5c98fac2b1",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "dfaf51ab-627e-4fd3-a3f3-c47e94a01499"
        },
        "item": {
          "id": "e36b719a-c9ac-457e-a0df-fc85c4c601fd",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "090ae82f-554f-4b49-afda-27ed19486bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f28b6aa-4e6a-44e5-8b93-c19d00449512",
        "cursor": {
          "ref": "531b855f-2ac9-46c4-8b73-d5ddf46a5db0",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4b5a6d9d-304d-40a9-9a51-6b79df4aab62"
        },
        "item": {
          "id": "0f28b6aa-4e6a-44e5-8b93-c19d00449512",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1aeee056-6be9-45ef-b0e2-8612505e067a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743d49fa-8b70-4485-bb43-77fb71a8ebf1",
        "cursor": {
          "ref": "19db1b3d-5eb8-4430-ad8f-edff82fe313c",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "faf87cb8-74a2-4989-957e-dbe04abfce7f"
        },
        "item": {
          "id": "743d49fa-8b70-4485-bb43-77fb71a8ebf1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "de0b6160-d7e7-4754-964f-edc977f79706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee59cbe-9514-42f3-ba91-d95bfe0d284e",
        "cursor": {
          "ref": "dec74798-b32b-4dd9-8e25-04c1d6863a54",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8a8728f0-ade0-4c14-aed9-dfec8f0b2426"
        },
        "item": {
          "id": "eee59cbe-9514-42f3-ba91-d95bfe0d284e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "46d1972b-a6d7-4ce3-8b49-e3ecc00bf78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcaf83bd-8fda-4934-a1f1-090d503dac7d",
        "cursor": {
          "ref": "73b52576-fbc4-46bd-b636-c120a5fdbbee",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "20939a24-dd7b-420a-8dd9-c543865b7509"
        },
        "item": {
          "id": "dcaf83bd-8fda-4934-a1f1-090d503dac7d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "31323c50-6fe7-4380-9b12-7863783e6e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e0bec2a-aa90-4cfa-800a-f3f9971d8cda",
        "cursor": {
          "ref": "95c6aa7b-3c33-4b47-abdb-52b308822939",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1396183c-0cb1-435d-91f0-b3b39da9269f"
        },
        "item": {
          "id": "0e0bec2a-aa90-4cfa-800a-f3f9971d8cda",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "12e1ea26-a706-412f-80a3-9a02625fd208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8266a3-ec6f-4d21-8ebe-395dd912a82d",
        "cursor": {
          "ref": "fdcfea03-aed3-4d86-b1cb-b2949ca6eb6f",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "757c2566-c086-498c-8d3a-be4333f0a252"
        },
        "item": {
          "id": "ee8266a3-ec6f-4d21-8ebe-395dd912a82d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7e4ce589-7b86-43f2-a11b-5b65e3169324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4584a6d-ee1d-4952-a349-db452fbd4b98",
        "cursor": {
          "ref": "63b7b85a-aed4-428a-a1de-473f6ca6093b",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bb63e64c-7930-4105-97c6-8df1d994b225"
        },
        "item": {
          "id": "c4584a6d-ee1d-4952-a349-db452fbd4b98",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "eedd623f-aacc-4805-8a9f-fdae628d1031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcf4d82-a6ef-4d0a-857f-9efab43fe3a4",
        "cursor": {
          "ref": "d7f0d166-d63e-419a-9ff2-f1abccf822d2",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c9f21a36-9390-4178-9e4e-209e739b93e2"
        },
        "item": {
          "id": "3dcf4d82-a6ef-4d0a-857f-9efab43fe3a4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9db1a2c9-a446-49a8-8909-9f44ee7a5869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43e16d1-176b-41f5-81ed-0e49471db191",
        "cursor": {
          "ref": "1a976b3e-f13f-4be6-bd9f-6a546e6891f2",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4514d548-edbc-4b23-9cb8-057268fba78b"
        },
        "item": {
          "id": "f43e16d1-176b-41f5-81ed-0e49471db191",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "22b70c77-3c93-4558-9074-427a8187ad2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b07c59-5b58-420a-9347-3d1674fe5e0d",
        "cursor": {
          "ref": "af095272-1202-4bca-afea-45bd18824ea5",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6b6a3c64-6f0e-43f5-9187-6e8e3c09ab46"
        },
        "item": {
          "id": "a6b07c59-5b58-420a-9347-3d1674fe5e0d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ca458f59-6219-4bc5-83b3-fe7916d44bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2780d9f-d949-4681-9995-0089d83af5f3",
        "cursor": {
          "ref": "c5462dd1-3539-4645-89f3-e2cd395a3f2f",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "78167caa-639e-40f9-bed4-9f9c2272bc2a"
        },
        "item": {
          "id": "b2780d9f-d949-4681-9995-0089d83af5f3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ae0a934d-502f-4684-9b37-5227cefaf0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c341afe-8021-4492-a479-59ebfea6d763",
        "cursor": {
          "ref": "52f9b944-e458-4783-ab49-2a1fff1af407",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3fffedac-533a-4b6d-9274-47ccd2da19ad"
        },
        "item": {
          "id": "0c341afe-8021-4492-a479-59ebfea6d763",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b066bc2e-4068-40bc-b9e7-b69ae7bf2af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c9cf68-7268-41d5-9538-f69a4506f3ae",
        "cursor": {
          "ref": "90b15d16-e4c9-4fd9-9499-4d41f3f913ee",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "245a6bbc-1af9-4531-87db-aeb014099ae8"
        },
        "item": {
          "id": "36c9cf68-7268-41d5-9538-f69a4506f3ae",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "08fa1849-9bd8-42e0-957d-4e4b249e7c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda8ab68-db4e-4000-afa7-f16fc5ef4f2d",
        "cursor": {
          "ref": "f46cdc1b-0377-4143-9b6b-7b701acd62f5",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4f6d63c0-a9f8-4c02-a5c1-ad0be1716523"
        },
        "item": {
          "id": "eda8ab68-db4e-4000-afa7-f16fc5ef4f2d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5c691845-6774-401e-9c45-94f959f9b1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b06894-282d-459e-983f-4026b8084240",
        "cursor": {
          "ref": "5e281169-ba18-491e-8d39-89359ce9268c",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c9ede407-6fb1-4a45-b59c-6fefa465ad7d"
        },
        "item": {
          "id": "b5b06894-282d-459e-983f-4026b8084240",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e2843e23-8cd7-4bda-a049-a78a3011a909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f914c508-9d12-40a7-acdd-ab1519a381c7",
        "cursor": {
          "ref": "c7814d01-8b29-46c1-b14e-cc612de8752d",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0ed56820-dc42-4dc2-9a3f-0cb859d028ff"
        },
        "item": {
          "id": "f914c508-9d12-40a7-acdd-ab1519a381c7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "07c55982-b1e2-436f-bae1-e05c5096e7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb18f89-eef1-4378-bba0-5dc69afec089",
        "cursor": {
          "ref": "06f7efd8-9b65-4d5c-9802-44d0aacd2aea",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0d88d899-f3ba-4852-b19d-ce786f690f7a"
        },
        "item": {
          "id": "0bb18f89-eef1-4378-bba0-5dc69afec089",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3d8da52f-174b-4c65-b29a-7d4ad527e6a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6c539f-9277-4e59-ac9c-5d2559c77438",
        "cursor": {
          "ref": "1b0dfed3-b3d0-47c0-a92c-2bf3439721f5",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d689215e-83e3-41da-b49c-4e4b70ad7f90"
        },
        "item": {
          "id": "0c6c539f-9277-4e59-ac9c-5d2559c77438",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e1ea06dd-3c5b-4526-b26b-b202c19e9369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec78191-07f4-4521-a7fb-eb6327e646b6",
        "cursor": {
          "ref": "3d704cc1-d0b9-4e07-9fac-11b240f1c620",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "85ec2e7c-d250-4315-88aa-8d887e122224"
        },
        "item": {
          "id": "1ec78191-07f4-4521-a7fb-eb6327e646b6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "86f576f2-95d5-4c33-9a21-5de3db33de9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fe86b5-3673-4ee8-82fa-4c7eb63d4567",
        "cursor": {
          "ref": "75f6e778-8618-4386-9f58-eb4e079ed824",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "087153fa-d5e0-4692-8f92-700d10e57197"
        },
        "item": {
          "id": "83fe86b5-3673-4ee8-82fa-4c7eb63d4567",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d1b323ce-4d4a-4c2b-a22f-69b230238b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbdf9aa7-df40-4a43-8d98-55838dd7bb59",
        "cursor": {
          "ref": "3df38faa-fac4-4c3b-8ebc-93fa45a3b330",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6d829da7-caf1-43b8-8fca-023acebf51b3"
        },
        "item": {
          "id": "cbdf9aa7-df40-4a43-8d98-55838dd7bb59",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "44a6f060-3360-4ca6-8ac8-be43701e401e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b774328-f133-4ce5-bc68-2b0873cd806b",
        "cursor": {
          "ref": "4b62c5e2-ff98-4275-b42c-81852d6dd527",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "10446178-7b44-4a60-8e3a-e6f3863ff002"
        },
        "item": {
          "id": "3b774328-f133-4ce5-bc68-2b0873cd806b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bce41c63-30f3-441d-a97b-78211476c275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96e8bee-face-470e-88e8-0cd20c72af0c",
        "cursor": {
          "ref": "b1157628-83ed-471e-98ac-809760df5161",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5ad7ea29-7c9c-4196-9885-d3d24802e4a5"
        },
        "item": {
          "id": "a96e8bee-face-470e-88e8-0cd20c72af0c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "df66ab10-f460-4a59-a4cc-9ef1db66e7cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b91f12-5973-449a-bf8b-409609a0680d",
        "cursor": {
          "ref": "8927acd5-1617-49d3-adaf-385e983f0168",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "06204e64-c136-4cc5-a600-c3935343e721"
        },
        "item": {
          "id": "d2b91f12-5973-449a-bf8b-409609a0680d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bc0b79ad-8111-4601-8cbe-0528d77721f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7dc353a-6574-4ad1-9fba-b03e0c1827f5",
        "cursor": {
          "ref": "7179cbe3-229c-4202-9f5a-ddbe7934f64f",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e6654b6b-b104-46bc-aaef-87d6af53f5ce"
        },
        "item": {
          "id": "c7dc353a-6574-4ad1-9fba-b03e0c1827f5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "484f4319-6c2f-40b3-849e-4c1da081ca8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0e2cd6-3834-4061-b102-45083f8adb8c",
        "cursor": {
          "ref": "be4e2eea-4377-4f4b-971c-49a192a32a09",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "67140b5e-e4bc-462e-a540-f939fce7456f"
        },
        "item": {
          "id": "0f0e2cd6-3834-4061-b102-45083f8adb8c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c7596dd8-6254-481b-a159-bdcf4be901c3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9aa89a-9a0f-46b8-827f-811604d91070",
        "cursor": {
          "ref": "eb1733a7-d2c0-495b-a658-b2ed68145f13",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6c2e1a49-3d34-4042-be4a-9b5ef90ab1a6"
        },
        "item": {
          "id": "fb9aa89a-9a0f-46b8-827f-811604d91070",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "86c35a0e-52ca-48a9-afbf-f49f2caa38dd",
          "status": "OK",
          "code": 200,
          "responseTime": 313,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa24bb8c-3ad0-4f02-892d-eaf57ee4a545",
        "cursor": {
          "ref": "11d36e8f-ccbe-44ec-8556-f0bc6834b23d",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "97ac9406-c4ca-4f5a-ab7a-3c6f981b35ef"
        },
        "item": {
          "id": "fa24bb8c-3ad0-4f02-892d-eaf57ee4a545",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7132a6e8-7698-4b3b-82af-8e044c2ac044",
          "status": "OK",
          "code": 200,
          "responseTime": 308,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c5bba2-ef20-4e39-afc2-49569bfd2ef6",
        "cursor": {
          "ref": "f680ec47-4be0-4e52-a6c8-c8d77369f8c3",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d036b11c-e650-426d-b584-04c30af7b156"
        },
        "item": {
          "id": "12c5bba2-ef20-4e39-afc2-49569bfd2ef6",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "89d2d290-9f60-401b-8940-dc63401b0f09",
          "status": "OK",
          "code": 200,
          "responseTime": 701,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf8c6c9-7e4a-47c9-8871-5a2cb488b09d",
        "cursor": {
          "ref": "ac145751-c418-4543-a32a-8993337be61a",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "22d75190-ea77-4a1d-bf3e-6f376a81204c"
        },
        "item": {
          "id": "cdf8c6c9-7e4a-47c9-8871-5a2cb488b09d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6cf62ecf-da24-42c4-8eac-d164383e4178",
          "status": "OK",
          "code": 200,
          "responseTime": 316,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6466c15b-8d7a-44fc-ad6f-478fca58a6d3",
        "cursor": {
          "ref": "1baa4a6a-c178-4a7a-9b07-b9ca5a6d2aa3",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5541d1fd-81f5-4fbf-9b5c-a57bae50c9b9"
        },
        "item": {
          "id": "6466c15b-8d7a-44fc-ad6f-478fca58a6d3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3be18a4f-f6b2-429c-bd85-e7101f847af4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6466c15b-8d7a-44fc-ad6f-478fca58a6d3",
        "cursor": {
          "ref": "1baa4a6a-c178-4a7a-9b07-b9ca5a6d2aa3",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5541d1fd-81f5-4fbf-9b5c-a57bae50c9b9"
        },
        "item": {
          "id": "6466c15b-8d7a-44fc-ad6f-478fca58a6d3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3be18a4f-f6b2-429c-bd85-e7101f847af4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6466c15b-8d7a-44fc-ad6f-478fca58a6d3",
        "cursor": {
          "ref": "1baa4a6a-c178-4a7a-9b07-b9ca5a6d2aa3",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5541d1fd-81f5-4fbf-9b5c-a57bae50c9b9"
        },
        "item": {
          "id": "6466c15b-8d7a-44fc-ad6f-478fca58a6d3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3be18a4f-f6b2-429c-bd85-e7101f847af4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0eec33-07a4-49db-8456-88bd3d2b47ed",
        "cursor": {
          "ref": "3f4b6250-5945-4d9c-bab4-488572613761",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bda28d0c-835b-4fd1-91b9-4027bfb2c014"
        },
        "item": {
          "id": "ae0eec33-07a4-49db-8456-88bd3d2b47ed",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ef17629c-3647-4882-847b-112300ce26e7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 19,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018079c1-fcad-4a62-8458-7e25c806b3e2",
        "cursor": {
          "ref": "1a905906-afad-4bd9-98e8-1019eda56f82",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "42657a68-8c35-4148-aeb3-e07b698823a5"
        },
        "item": {
          "id": "018079c1-fcad-4a62-8458-7e25c806b3e2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2b803654-31a1-4bc7-a1bc-73803d65edfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "018079c1-fcad-4a62-8458-7e25c806b3e2",
        "cursor": {
          "ref": "1a905906-afad-4bd9-98e8-1019eda56f82",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "42657a68-8c35-4148-aeb3-e07b698823a5"
        },
        "item": {
          "id": "018079c1-fcad-4a62-8458-7e25c806b3e2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2b803654-31a1-4bc7-a1bc-73803d65edfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5336677a-3724-413e-a577-e23b916a6fb2",
        "cursor": {
          "ref": "6207fa32-11be-491a-a937-3bf8c72a3672",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "64a75f27-df1a-46c8-b81c-e7a2008ae470"
        },
        "item": {
          "id": "5336677a-3724-413e-a577-e23b916a6fb2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b58d036a-f088-4566-8a6c-d117a34f6a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "41d44566-517c-41a8-b395-8e7cb08dca52",
        "cursor": {
          "ref": "7c0d1e42-bcdd-4c1b-9f9e-e99b02826f3a",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c4541266-9cf0-4d85-9b4e-fd5b9b6e6139"
        },
        "item": {
          "id": "41d44566-517c-41a8-b395-8e7cb08dca52",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0cf23788-f881-4d26-84f3-e09d6caa8605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "41d44566-517c-41a8-b395-8e7cb08dca52",
        "cursor": {
          "ref": "7c0d1e42-bcdd-4c1b-9f9e-e99b02826f3a",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c4541266-9cf0-4d85-9b4e-fd5b9b6e6139"
        },
        "item": {
          "id": "41d44566-517c-41a8-b395-8e7cb08dca52",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0cf23788-f881-4d26-84f3-e09d6caa8605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "917a1969-7b47-4d0c-a24f-ba47bea8219d",
        "cursor": {
          "ref": "7654a5a6-14b4-4f04-bc60-3e910169da91",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9cc41d75-a0d1-40c9-91d5-b891b5beb1a9"
        },
        "item": {
          "id": "917a1969-7b47-4d0c-a24f-ba47bea8219d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6586ee62-adaa-4aa0-8a1b-815dfc31d48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}