{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "750a279d-c713-4f91-91d3-e2bb17a082bc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "946ca89a-7410-4b11-8efe-fae62a71c760",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e25b1fe0-7814-4205-88d4-6480bb426f0c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7b821f51-284b-4309-b4ee-b4884e70a491"
                }
              }
            ]
          },
          {
            "id": "a6672dbc-5140-4885-ba4d-56ba1fb9638b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5a5ffad-f17c-41f3-9297-a4c43a0c1141",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1d23f375-ee1c-4827-b0bd-0b43089486a9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "709defaf-9ba5-4143-b696-cdc2faa57e03",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d26c5bf6-08b4-4e4e-bbb7-0a99ec442d25",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccea319b-c208-42d6-8dd7-c8cc5484aa42",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54f2042a-e299-4a4a-a36c-25f4464a70fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f6ea3ad7-20c6-4798-ba16-853effcc6089"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9762f918-d5c7-426e-9a23-ab92637ae486",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1bfadf5e-14a0-4d17-8443-d91308faa10b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "98585310-068e-48f7-908a-237bb9482c85",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "462c0ed5-5b87-42d3-9ed7-f5a77b3abe28"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0dcb543-ec42-4d44-960d-52b5587a03d4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8782f8c7-c33b-4271-a9cc-d8a0561e0fec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5da5740-1711-4a49-90ce-35038e038704",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e87bb0a1-ef57-4e55-bc5d-1e878c20d2d7"
            }
          }
        ]
      },
      {
        "id": "2f6906a2-6dad-4df8-b64f-d2a6d5ad4e9c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fb307d02-429b-44d2-8855-eb273d883cfb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67dbcea6-5a20-437b-ad84-d8265885d83d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e3f25251-3bd7-43b2-9011-78fcbecbcad4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5210e67-a5e1-40b5-ac74-008f0487ba9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54ff9f03-84a4-418b-a17c-00738e7c607b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fecbb33-2fc7-4689-ab47-4d41f287e13a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beed89e1-2ed5-4135-b760-35f1fab0d292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca5640b0-edb0-4435-be2b-f932f9ed8670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850230b5-6041-4985-abde-ec15fba19aea",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a73a0a-a525-4226-8ac3-0025659b9779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "501efa4e-de95-466e-9f2c-9a4cb4fbda54"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "218d8d13-3362-42db-9572-94b1b28fc0cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f1f2b51-f121-4e8a-8494-9ef6586b9174",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cc5845-576c-4df1-84cf-bb0516dbb04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95068ea9-fe0c-43c9-84b9-bcbdb4667778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d165a6fc-0a19-4c19-a86f-a48758274571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7dccf3-c355-4667-8e8a-a07a845d695c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af08dfb-6ed4-4a75-b678-7cb5034b3bcc",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae8e132-1f47-4a92-a807-860a9efd3f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77b14d27-5221-4730-bf55-e258677148ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d147a118-4157-420f-ae49-f2ce7240f419",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "90814533-bea7-4a19-869d-e1b0964e024f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c39a0ea8-457b-4caa-812c-8db1c1e41410",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0dd048c6-7bf5-4cf8-8d0c-35704df72f49",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d66328fd-812b-4c22-9306-af646af19d47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "77f5203e-78ed-435a-95ec-674d8bcea06c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "037efb5f-8f40-418e-bcf5-9c5a308426e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5be8b8b1-83b3-452d-b2b0-dbfe34789c3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5767594-4958-4561-9912-da65e8ae935a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80176c8a-c27a-439c-a1cc-42cb8eabb630"
            }
          }
        ]
      },
      {
        "id": "b8226923-70d9-406e-90bf-7cd853a70a41",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "947e54dc-0887-49fe-8f65-22841caa7969",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41d68dbb-d115-4974-80bd-5de35a7e1cf5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "337305bc-f9f1-49e7-8ff2-d78bcfba042c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f6b606-e546-48a1-a06e-e50cb116430b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22252295-1fda-457b-bef9-f2c89ca76e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b18ab9-9eb3-4a85-b477-4202d0424141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfdb52a1-0ec0-45b9-a81b-91d4da3bc6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6e3e76-4d63-4220-9e1a-c1455f826713",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce652a99-8ab4-42d0-b59c-e7c497b96434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a8d4ab-7294-49c3-8143-a80ffd6ccd14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59192394-4409-4a66-9356-6ae205a9b60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "495362cd-96ad-42b1-9374-84bd7dc4b24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee4d563-7b96-4cb5-a9dc-3565ee5eeb36",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62866635-71e4-4c64-afd3-c0933227a89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34bbac4f-fa32-4589-a6e8-43c31f618d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7e95e7-1401-4a01-baf8-8addd38c374d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f548d1eb-505d-45dd-9b6e-6ea322770ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20acfe45-bce8-4d38-9017-5eb7bba51c62",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43d0a26-1e15-4b2c-9a7b-d598e9bd3ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57d4a39-d142-4f8e-8e1c-9df76f49a9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6988c7aa-a1d4-468c-bf8c-ba558962e30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18147748-2564-4e24-b2f9-758119a1d426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3761072a-2591-4a3a-a3f1-9b6e161658ec",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1526b002-6fb8-4804-9eb7-126616281fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8997cf-357d-4020-b930-dec8ffb2b77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32cb0ea4-b705-42d6-95fe-1c5186116052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d8b4a7f-5c3f-4d96-8c4d-d1983c28d59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da108ab8-75d4-48c6-8067-f78f5aa6ded0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7f1111-b91b-421f-a657-6a914f70338d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b02e2a76-6a28-4279-9295-11198dd94c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8137ea-de6a-48cb-828c-a9bad88f52ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62403745-8b93-4bc0-ae53-72a57fd77109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de6f74f-1c2e-45e3-b6a0-e686770eef58",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1fb625-1869-41e5-9327-577d081998b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041bbc64-69e8-49e9-a26e-20f18f19c6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b895933a-0d70-4d9a-aa7b-8c88eb0be9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1d4f574-2059-4dc4-9a6f-27908380be98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414259a0-1580-4a63-917c-fc41c82f85d7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492e249c-aa68-4c6a-972a-9d4ce6c3c2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf1ae66-7ed8-4a45-b4ac-0925971cbf03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25d4a93-50da-4152-b050-ff6838c263ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7d1b3e7-a810-4276-84ab-2a90d2130eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284079d4-c123-4ef1-82e2-f517b66c984e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6fba77-f746-43a5-9de1-d9d9998b054b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657c28dd-28c6-4094-8b48-c63a194d854d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05b9be8-3ca3-470e-925e-590aa65415b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c391bdd-2bf7-490d-9083-367bdfe9b57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451c2f88-781a-434b-b58c-5bba5eb6feae",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae94ad97-aea9-405b-b549-86fc923cb2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3871755e-de92-4eb6-8573-0f64bb9139a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552090cc-2da3-471e-a6a4-73c1894fbe59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9f0b59c-f788-4ee5-b977-27e43ffbd829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698c39a9-18dd-413e-97d3-1a5da1b59357",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adff1072-a7c9-4cbf-96ff-9ef74c598b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d9fd53-df05-4da4-b58d-d28df1cafdb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655624c6-399d-45cf-83a5-58dc4f25b4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2612b717-5393-47af-b5ba-f58c5f71575e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d195f78-857b-44b7-9224-04aecba77738",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13678a3-f5bb-4219-89c0-3754187913d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623f8269-7fff-4fd9-afcb-d07147a354ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db64b769-cb02-493c-8f98-c1f36a905dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5026a82-366e-4f12-aa45-857fa70952c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeab7b4f-192c-4591-8b00-52029930825d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf64d990-5bc2-4120-81ce-a34d6161a489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568f1487-b217-4bf0-b1a8-fc8e9f10846d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c6e7b3-d793-4e7f-93e5-28d3f9ffad64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ed61b24-beee-4ac2-83d0-3572b9176cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85bb612-6a2e-4396-b96c-7a37c3fe2380",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d900dd4-4793-4a5a-8956-447d903bdc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35381194-19e3-4eaf-b5ac-a993f2d11305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a3eadf-d92d-48c1-927e-355d9b95de5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6a2464d-67cb-4130-b296-50ab76a556a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88e17c7-d26f-4279-a084-fca04749f35e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9fad2e-2004-49b7-af2c-b3a556758344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba8ca36-7706-40b7-87e3-c86b8790da67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bc08ca-e5b3-4ac9-9da4-7f7b2fb87ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2b7c092-baaf-43a6-918f-92b00807cfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab2f908-5430-4ef3-a55b-91b888395cde",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfbf5a2-c5a8-47b8-b68b-2aa00bc1b606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e096fd4-4845-4aed-8762-6ba5d01cb881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f417face-570e-40cd-8b89-73d7b86ee258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37989cdd-009b-4f60-857d-fc3446ebd976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99de4d0b-4558-48cc-bb1d-0a41f68f49cd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3a3eb1-7f54-41a0-ac06-c04fc14cdb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a96039-24f7-42dd-a4f4-df8e5b9e3fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d37a84-a758-4138-a64d-99b8f39f62a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "394b69a1-8875-451a-b627-134e17505ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48fc5280-3821-4223-b8be-cdfccb3e1d5f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19855e07-4594-4866-b948-662af8918392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80b17b8-5c3f-46c5-b8fa-dd672428f2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b442473c-caf0-4b6b-84b2-137b92da42e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0dd7d79-a7b2-494d-adee-74e35a2e85c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf30460-fe86-4da2-a79f-002a3c9e3352",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "946c8ef5-d2aa-4139-9e0c-94d45b15f07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2db962c-2a51-4ae9-9cbc-4ffe24a785a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0abd2c6-7d26-43b5-8afb-50768a83d640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0338ca93-bea5-440e-8765-37717644569b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65ffba7-41e6-4e4b-b3d8-86c824895985",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee35fc1-b1fa-4d03-81e9-ee250c3c6d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af931ec6-0269-4a60-82a5-b3bc4afe9ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84aded5-bc03-46de-bddd-aa8a6fc0e707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22aafb59-2ea2-4156-b702-01cd96ed64a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9fed9d-aabc-43df-b3e1-27833dbf5115",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54c9079-74b8-4911-897e-6d42c8f09bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e8f8ab-5727-4cd9-9d7f-7004ccc4196b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4f552b-c3a5-4573-93db-4985333e198c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "defb5611-e6de-4a92-9618-f1ae18151195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87982ce9-c4e4-4b2e-a173-ce57e0c5a57f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd52e394-2416-4ec0-bf44-24a4356209d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c44c9eac-9dc7-4a18-a475-a220ff6b52e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e3b834-48bd-4bb3-981f-1b5df11ad201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f07bb199-6598-4228-a659-2a3119d4aa6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3d633c-1819-430b-a47a-982aa70cb1b7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a38d70-7988-4b28-884b-dc840e6dd414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4923f78a-7208-4990-a11a-a3e6d592c8b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b7d8c4-b5f6-4d08-b4ae-e5cbc6b344f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf21724-db33-4bcc-95aa-3f3d41eee876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884ec4cd-3233-44cf-a540-8480413b6264",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03275ad8-1cd7-4bb9-b3db-d84a3804c774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1739ad6-9e99-4133-9cb6-31cc1f0911a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a6149f-0993-406c-bec3-573e940a185d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "78548e61-3a20-4bd3-af1b-ac316f4ddd05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44801541-c479-45bd-bed7-4100c32edab0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c166c6-6cca-4a3d-9d9b-652c67f434e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa13fdf6-7478-4dff-95d9-6ef53c5cc9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60ff01f-81c1-4d5e-bb90-3069815330b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1652fb5d-363b-460f-866e-0d615b2cc533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d026d541-0cdf-4331-9729-61c376b9d428",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85cefc27-388b-4545-b6eb-203c3d2563a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526b6e16-d28d-4db7-972f-ae9ebe328392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f2d1e9-9e32-4bab-ace3-437d58c54ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a4e0856-a2af-4285-9255-b3781b1b1f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473b3ed7-87c9-41c7-ac2c-024429abfd6d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2257a9c-2b16-4dbd-b30c-0bbcb0676d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1521841-4b55-454e-999c-916e593a473c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb9062a-7550-4425-8eea-c4ccb4285b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "95770d6a-2db6-441a-ba44-9b4eb70a6798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051bfc4f-afed-4be4-91f3-d7e2cee8c686",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e73c8f-7450-4c7a-990f-493993a4e971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ae10bd-0c1c-4e99-b92c-4d5a60de1766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a25d894-d34f-49d3-acf8-926786bc02b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ede0681-2622-406d-8508-1e99c909c748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7886de8-d987-4063-8d42-44511589a653",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afa36e1-f3de-4ddd-a91b-abb54adc7450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f8fd18-f524-47c7-88f9-b794eb247b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24440d1a-b0cd-4877-a923-69d67e070073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3aa7e83-8d80-453d-acc0-7d1be4f3a965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e32967a-6b5c-4af6-8afc-a4a59ef48c98",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8cb60a-030a-49bd-90f3-eaa1a824f80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e0a38f-25fd-4898-8183-bbc89e2a9eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7da004-6572-4bfe-abad-e8300f96429b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc86e5d-68d9-4c0c-969c-0490b95bb169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a05b03b-9b9f-4f49-96b6-3a8952e5f61d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f3311f-f538-45e6-a891-3d1062c2f869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1475be35-6292-4969-9b7d-2aaf66f57555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb04f2fa-8c6a-4ab8-9111-2db81fce5993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "17666338-b68c-4162-acee-b3773e8621c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31cc19d-98ce-429e-9638-94723ef808b6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28154b77-749e-4dc5-8a0b-7e3e7716a281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c74d415e-63fe-4a1e-a3a4-eb431b59f5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607cc897-516a-4019-bb7c-091fd9ab59c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7272dc-a390-4be4-b164-6f851f21b6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0f23ee-ed96-4c82-899d-dc8ee2a95215",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cce6092-78ce-4649-a168-e149c153a276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4695a740-dece-459c-b088-ccf4b46b7cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e50cc3-b274-44ad-9512-9132b34e16d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5b5105-b247-4630-bcaa-55264df21442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade6ebd9-9eeb-456e-9849-abc2987fecb8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ecbc46-5c98-42b7-9493-bf99dad8efd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d68a18-97a1-444f-80f7-0baa86eb7264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098b88f0-0270-4dc1-a339-67c94616141a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76dbb627-f6f6-47ea-9732-25c9626be297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3735409-2e9e-42d8-b036-0f7f85e35ff1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73d1fac-be27-41c1-804f-95a61146ef45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22137398-18ed-4c4d-a49c-08bc28dd9501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba7b298-cd4d-4358-8278-309878072910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "77ff65f1-c208-40b9-bcc7-629ecbda808e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6b9102-3dbe-42e2-b91f-f85980daff59",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcf44d8-5b6b-4713-852c-8d3a504c38e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14613767-814f-432c-800d-08809ebd580c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dd896f-b6d3-437f-8fbc-3d6027820641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e71ee0-cbc2-4e47-b528-93c3d192d3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21667a80-5310-421e-8862-b88f98f14231",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180a4587-1d7e-4c99-b3c9-ae3b0c6db096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7050377b-2349-4753-86ea-be6249fe998e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc78c07-9928-4476-9608-92cd3ea69b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24cfa449-c87b-4398-a44d-7bfdd34a8987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984fe166-64c1-4db2-9f7f-1eb56351ecde",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fb9bb9-eded-4436-8c69-21e80c251586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd5990d-77c8-46d3-a8a5-8db0837f0938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa17a6e-6d87-4dd7-a2b7-f5a9678d4ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ddcb991-651b-4059-8540-f0ee883016dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f3de3a-0269-4450-b0bb-be804b31f318",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fe79e8-1ab7-49b9-9826-20305f075c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9482f4e-2dda-4363-8236-80fa8da1be21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c753d203-57e1-48c6-b8e8-23c7377675ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e673fa4-0b5a-4e16-9a60-a59889c724dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49df7418-52de-4df9-975e-3874ba675dcb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4920c9a-430a-421d-b3c2-46a04ef93a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a8779d-01f4-41ad-ba02-7984be4efaf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53d2d17-eff7-44b3-95ef-f7e687af6f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "73444271-e721-4708-a78b-2d1317c21426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef30d7b-c9b2-43e7-931d-ae6eebd58db8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c088a50b-ad01-4a2d-bc1d-626b8704b464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f419bfb5-3fc6-4ad2-b35b-fd8803d52547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb35554-287c-44d3-b054-04b7b69f812a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd81233-c57d-4ff2-8db6-18b8d2a5e997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d36f93-6db0-4823-917e-943a4d72fb0c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5754f045-6bd3-4760-a92b-742e35de18e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a8a33b-225b-4f70-9614-fe2bb173aa1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc8d919-5cde-4022-ba4e-63a461af9715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "11c4f6fd-f297-433f-bc81-b78daffbccfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6852b21a-86d3-4324-b2ee-0f38353a1cdd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2d1b2d-17f0-4410-9ca6-113536b609be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985f0190-facc-40ce-82e1-2ec4ea98d554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526c642f-3ee3-4c4d-9390-d088bc6b908e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc78e04-ed04-42ee-b91a-71d7d8ec93dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd147df9-a035-4fab-ba06-a245a74b5369",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e1be11-5901-4c3a-8869-7a24e29bd741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968ae5a1-af34-4562-966f-cbcb4f5698dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda8e093-cafe-4dce-9bb1-0b52a520f11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "150d91bd-9446-4fda-99d8-8f4815119978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740a769f-2f7b-4e5e-a0d8-6e00f0624972",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c8aea6-8ff4-47cd-904a-69157115a6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ae7d65-30d6-4c68-b635-de1cf7947804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d0dada-7229-44df-a424-9360642d476f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5e4748-9e5a-4594-ab50-2a8abb1f2eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a0ec59-fbe1-44bc-a600-8093f2109e7d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f7cc84-8921-4b81-95c8-df6dd84f41ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ff3c85-9bd6-4e3a-b5fe-0170c9fffd9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7640a53-e340-481b-a423-cb3df8640706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa065841-3c79-4495-8d1a-0f9ddd421894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f69d9f-2561-4edb-999d-4d6af991a735",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcf3f69-87f5-493d-a0e1-7c1da6ff7c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1b1571-a6d5-44e3-82b4-0db1782b378b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560175f6-93ed-4008-8896-30ea39d70b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4efa36-0a4a-4a8e-8f5a-d596141ef334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213b89d2-58b9-4b39-b229-9e8221fbc942",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c47739-0cb8-4b5a-9505-b4f314671494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f19f2dd-e4c8-405b-a298-b7651c23542c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9429c6d7-6c43-4cfc-8ccc-2d41b308af2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12e9a7cb-03cf-4a71-9855-5cccfe811c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d491c2c6-a2bc-457d-9d0e-4eaca621d470",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3325298d-b325-4cf1-902c-f2c4f05c3665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc76fcb-f699-4108-a7a1-9ea1b99df222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e85a7d7-210f-435e-bea8-042a3d33c782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a20f4fe0-a3b4-43f3-8098-e61b512a3f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645802c3-783e-456e-821d-ef15404035f9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01b7ac1-7c81-4f99-9f18-e9a34e5d6730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3330ff-fe6c-4ec3-a16a-26ede50ab259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9d2df1-b267-4033-ba58-0447c17bbc4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14d5e60b-1be9-4242-90a4-18a29276113d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a09fa9b-f417-48b0-922a-0dfe8025c3d5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d742a72-d1da-4e3c-aae3-76ec44350acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3244e028-7099-4b0e-adbb-d9aac0e24038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17d9bb4-17ea-4fc4-93dc-8e28c8d37283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1937c231-c2c0-4c80-8192-dd7426630ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20aa913-070c-4145-a2e6-35e3b1d76b84",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02746f57-b2a3-42be-b932-9bae6b4e7e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062ba18f-35ec-40ac-a631-7926dc25bbd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80143221-b262-4daf-a82d-24ee25941c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e07d5e36-a690-4318-8ebb-ff302b38e570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fec14eb-f590-4d7d-9d67-8483a65210f3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63da4d66-7dec-4722-9e9a-53a329df11ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de860670-952a-43ce-ab14-71b08f485656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a8e86b-cb86-448f-84e3-130253e2bdab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe532ca2-fc1e-4ed4-a2f7-0128eed9d98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e4dc7d-af62-482d-989a-f4f38bd90f97",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d538bfd-6949-4531-ae3c-e51d880ea48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48787623-b2b3-4640-be0a-ef56637fd661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237b4b7f-c1c9-42ff-bdcb-66882e102132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bde3488-e744-43e3-8ed8-c3c6c9c812c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fcd6ef-905a-4cb1-8c3a-09b6f8d3b198",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4318bea-96b5-4b5e-b8c5-75739e4149ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6da75c-a925-46c8-9136-aeea96a76b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83a899f-8615-4670-8fbd-425cc171f182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6527d79-2530-4024-9c77-7071cdccbd9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3fc186-1044-423a-ae2a-6f79b5993eb8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce9f499-600d-41f2-96bd-c6ffd7518e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d71ffb7-3c8e-4692-8416-d792df833e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5788ca6-3fcf-4194-933c-44773e0b48fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2e18cf-a3a2-4aa1-9ba1-f9dea4e1e05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a21f9c6-0cd8-41f0-bbb7-49a7a44569fb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3aa419-5188-4618-b71c-934164caf855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aae8cac-fe01-47ad-bc5e-089ec25d9667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5504bc5d-997b-4d81-92b0-20bef246a729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c7428ae-cf44-4221-9835-246b7c146a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9093d4-c8be-4a64-9dfc-b7c9f7fe7d1f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89238d7-6efc-4895-85bf-5dc290f1c6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70cfb86-ba3e-472e-bfb7-85a3a9ac0675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0357ded-74ec-44a0-aea8-21187b984bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "63a67a00-6f6d-44ef-8c91-2f31ea863e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da7ed92-9e9a-48d0-b966-6251e682e9db",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e507e40e-ddb5-40f8-9c92-844b9271d66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8aad52-2dad-4165-9031-73ec2d0c8506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf423ac-3c6b-4350-8560-bf4f0fe6a935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "419557e6-436d-4d61-8c1a-78d596e60285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31280aa-ea05-4b99-ac60-6bd81c5cff85",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72c7fda-cb2d-49da-af86-c72289d72852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb9ea735-93da-4057-841c-f8fcc4fe94ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acbad0e-34fa-459d-8d46-7d7de760a58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0ca083-3bd5-4bac-b31d-d129f6dbc0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2618f939-cedd-4ca5-8dd8-c7b5d8082220",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2927b68f-bb22-49c9-ad22-541e67cc4071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15cb0a60-3443-48f1-adfe-fc010629e616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f944c3b-a94f-49e5-9f00-46a414ba4630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d66e92ae-dc8e-4ada-a96c-a5b51e293d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171cf4a0-6857-402f-9d47-8205c7f7998c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d01f6d-2a00-4ad6-a3ab-5c1312693903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c145784-4840-4f5d-bff1-83f6a4d960b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20876462-2924-410d-b79a-1d242fadc86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5d7c96-c4c9-478a-a8af-c8a57e160bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955ba0f8-221d-48a9-ba8e-7b9c54db00e3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88169fa1-c4b7-498b-b733-8cc406c5407d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92cdd221-c862-4d8d-a3ec-e6d03aacac54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e00dc2-01ba-47d7-abe4-d4916589a530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "275c4adb-5c24-46ed-9e76-da777cd36991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacb1a6b-2a25-40e0-a856-7d8e22564e03",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fa19c1-9c2e-4c03-8531-16ebea822876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65c378b-15c6-421d-9d0d-84bac591a1a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01b50bc-be19-457f-9abc-00a82d231d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "210917d1-cab9-4a2f-9eca-6694a1955f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934dbad0-c498-4606-873f-2ce58548b8fc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41aa5616-39a8-4a00-b8ee-03e7c76b78e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9323b7-acb9-475a-80f7-82ebf406f803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6683e69d-1b6e-4a9b-8796-201c7d27581b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "899bf2f8-1dd0-4a63-8787-8b0e10053c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3513fcf-77b5-495f-a26e-dc1fb2ddfe80",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e61d9e-475c-469d-bc1f-1b3207d344b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141c4dbc-77b4-4d7b-bb36-d1e08dd86254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5799f3d-dafe-4919-ad6b-bb7abc33f8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e5b39f-9973-494d-8053-995864d88d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fef10e6-dd11-4c56-bc96-485a2f8e3d39",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481ab3b8-5af6-4e85-a347-0ee74cd929a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3549047c-c4c0-4db0-a678-108ff4089ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53603687-4ab8-4679-8a95-b4a40f6c94c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c470b312-251c-43cb-90e8-4ceda8592db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d134c0-a93c-4fca-aa55-991624d68189",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7702ed0-b813-4713-94a6-40ffa89ac5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b44a96-db65-43ce-b25f-112d01263cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2889aa4b-3b90-4fa9-b5f6-0670a6b29171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb712cf0-f40c-470e-bd86-a3957a39e233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f9a9ba-3a91-48f7-a45e-ff4ebd6c2900",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69085e09-3049-46c1-8284-51adaf443287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f9a0cf-0937-415f-a4ee-1e4729830fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16ff5f9-ce3c-4fe1-8fe1-9ab2808c2e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a33aa2b1-a993-4f6e-8ef0-787d09ba569c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbef2df4-9e93-4bd5-9550-80018f7ad408",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4100ed-3c9d-467d-9992-6cc6fe841a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb7329d-4bea-4dba-9d68-58d2f2b8dadf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de17cdb-4857-451c-8e33-0e08c9028332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "569654c8-beed-4b96-9157-55d3fdd49156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b0b54c-373e-48e0-89fb-7e79a8a25e9e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93979439-bcc7-472c-8412-f88b19e9e29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1535c5f-f45e-4ac8-bf4c-a5fa17a6d024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a70219-6d1e-47d8-9c7c-e0ae7499442e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33d153cb-9040-4172-898f-2bcfdb092c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8818f1-84ba-4d5c-882f-9aa39e812500",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3d362c-6abd-4b9d-8e88-1e50dc16f75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b730792-862e-4540-952b-96552ec074c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85721d61-c185-44a3-bdd1-4def305736ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df6a0ca3-75b9-4323-88ec-a3f0d1056d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810f63b7-8231-43a0-8de1-2cc8023e9060",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c02e64c-706d-4118-b346-38dbefe1b229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5c7d66-4e6f-4652-b676-aa737e49d623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe1e43f-7475-499f-82fa-78bb26ddae48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "228255ec-a1f7-4c63-b3bc-75e87c6881be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebc1b00-6ff8-41a7-a82b-ec83a257227a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2751eb3c-d8ea-4c4b-968a-931f0de9d4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbf0f34-73d8-4920-bdbb-0de206a5729a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1434b035-68f8-414a-b205-007ef0c8c6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65ce3ee0-13b9-4b15-a851-03a3bfcf4801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c0a972-7275-4531-bda6-4bdff973b4bf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e417907e-25de-4377-a2c0-37c2e69d993d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f09d42-2aa9-4a59-903c-dea281e42b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49896bff-3da9-418b-95e3-dec6c996f232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "73c22695-0b68-40ed-be25-d0c39a0ebdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d911a536-73e1-450e-a37f-6801073a597e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad46ba0-5070-477d-b47b-dabe6e7c4c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "104bc556-6eab-45e9-bf2e-202522ae999e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fd88fd-f0e1-4530-8296-f58ce73b3228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0995ed5a-9e2d-4190-908c-b34171084161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001510e7-dbdb-4a51-b74b-8de466b14cc5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a92575-b401-406e-8572-27c76ff5d1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4796c20-55ae-48b6-805c-2ac0dd10970a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72b6126-365f-49cd-b7c5-f5d36f3349e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3686ab32-9061-4e65-8f28-fcb21fd44209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea18928-5e28-4dd9-99f7-7337bd253753",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc58c51-f88d-43a4-8d71-496ff29a98c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06abb3a-3cf1-45ab-bd71-41de7e58003a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b4d300-181d-4ed9-ad18-03a54e324d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28e60fd6-1269-42b6-845c-7185ebe4ee01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0876862-ed9a-4a04-92a7-6eb01f7fa594",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17adca6a-b001-44a6-87af-a2358cc4a00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff59a24-0985-470d-8886-460bac1ea00e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1863d1a8-843b-4dfb-8b42-e370ceb9936d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b467a1cf-41a2-4d6a-8d7f-11c6151d321d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38e36dd-b0ab-4569-a006-a80d6c2283a5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf9b63d-3724-4bfb-9c64-91e2f5adcc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b830e391-8bbf-409c-ae6d-c2409691bc75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91677d0a-a9e4-4f4c-86ca-2ae4cb0de870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77e7c7d5-a42e-4004-9928-5bd8eda51a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a956b51d-a606-46c2-8916-0715824aee12",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b88be7f-0947-4985-ae56-40cb83f552cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040b6ffb-c9f2-466b-86bc-227e754a5557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c396aa19-529e-4c47-93ae-d8cfd39263c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9abe7c-f0ed-4935-b7be-8a7d6be8a906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0907a90e-acdf-4e23-87cb-b6e35a2a3b19",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8256de-68b0-4d3f-abf2-f86c22eb837a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c0b975-b8a2-4db9-a5aa-1a2a9e377fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5ba263-204c-417c-b2db-5fb149431b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f90ec6c-7472-4427-b9b0-d7ce27c3478f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3ea7e7-9a62-480a-9136-7af301b2ebf9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41eeef4-412b-413a-b3fe-ffc5d2bfda57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29423f1c-71d2-48de-809e-557700104259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5f7ce3-53a3-4aea-b02b-a176413fc07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25bd50c0-1cc5-45f3-862d-b0c1eb527f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2bbaf4-434e-47f4-b312-855bf5975842",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82386a5-3024-400d-a5f5-b70dccdd9203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9e928b-9ddc-40c4-a081-b8c9b674f3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92873cd-f6d6-4a71-ab1d-823ead5d5929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83efd379-3a0b-49a8-97e4-01010b97afd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddad816f-2be5-42c3-9d14-351ac7d2456f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f71232-43a9-41e3-b751-fd670e458819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0540eef2-19aa-492c-aae0-0cc54db8ea3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5565216-1188-460f-b835-ab9811b85853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "52d770d4-06ef-43e4-980e-c9ead9737079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56790b16-f3bb-4080-98eb-f5ff2eb9e9d4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b1491d-fc5f-4df6-8745-6a160f1176e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b4cf56-6309-4cce-bfb7-0be00946ecc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ea3f7f-1ae9-4033-ba29-66ba2aace8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "103ee7b4-cee3-4953-9d8b-726e0f3803d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092bfeaf-0a9f-4889-a63e-8b9d81c1fb37",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38a050a-c838-44cd-8ab8-9ac8e51c7465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c33b56e-302f-48ad-9276-1952c30987c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa438bd0-45f8-44c0-9514-9b126af0acc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffbfc592-dff5-49f3-9e9d-db37c031e098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c199841f-fb87-4afa-9f1f-9bab4943543a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd26edbc-609a-4ccb-9289-dd645dd9e19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8121ecaf-6d76-4ada-a35e-580b6f4be787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310d87ba-1e40-4bb2-a729-6de1706fd57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa98b62-535e-41cb-83e7-7c8c470b0f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8dea39-0d1a-44af-bd58-f38dc8ae3abd",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad71e486-031e-4cc0-b6d1-498c609a84bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187dc391-d398-49f9-ab6f-62aa9a81dff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4330f0e-9831-47a0-8ca5-c629e132984a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc5359b-c305-438b-b065-194af2d7b877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd472364-cdcd-4153-9c69-4cf407d5ef24",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ea3f61-a0a0-4a06-9a39-935f0bddab55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1046ea42-dd65-4fc9-9832-2e5f573f9fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49d11e3-285a-4543-bc70-65de6e7ee0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d43e751f-0b8a-4238-9cc8-a472c43ab68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496192c2-1b11-4750-a73a-7e152151e755",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5130598-5d43-40b1-ba0a-2c70f49fda4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9e35c1-2fe1-4c5f-8c11-dee39d52e8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d5b990-4833-4255-aecb-d468eab43c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd4feb0-abd5-429c-97f8-7af3007093bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135517a6-b514-447a-a066-04f93b172401",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48c0b59-4320-481f-88c2-542a548b24a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6e8cf0ea-5b9e-4252-8662-f2935d5cf71b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c97e3b-514c-4a53-a30f-abadee3fa12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "85369c64-a509-43fc-a778-79e47d7ffc3f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f0063f0b-cbf3-49ad-a511-9492be9c0366",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5689238e-0083-42c1-85c9-c51a7279c957",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a45a35-237f-4f1e-917d-aa96528d2aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62e704a8-5ca3-46ad-8ff5-e44945a8806f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dd4c30-8b55-48c5-b49d-467273793d77",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "35b9ffd3-e9ca-4d36-ad53-0128dc9fa0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4074a91-9031-47f2-a054-d854481ce731",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8261a7-6286-4bb5-bfca-90f8a0d0e5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce63537e-a5dd-42a8-a1bb-51f21cfe0e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90840e9-c22c-424d-9166-74250d96c305",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1a58073b-aa8c-4e4f-be72-eaffcb477b42"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a8c6657-3fee-47b5-ac03-7945a2d9e5dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ab315bd-b965-4fd0-b4d4-93b41d0bebc0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f51b81a-53f6-4312-84be-f369bb7d5e8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "273f09b5-5e48-497f-8579-be35f728551f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9235cf7b-78f3-4063-8a6e-47e6e73ab0ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d602e266-1571-44f4-845c-4cb374833a1a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ba295d5-356c-40f6-b871-84ad032224d5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "47f360d6-88e8-4f44-a9fd-3608be1a51af"
                }
              }
            ]
          },
          {
            "id": "14128e37-5ba3-43d6-bc61-743b43d744b1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2fee31bb-6a14-4a0e-aa42-b9fb96dc501a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "087d89fa-32a7-4a87-aaaf-275691e36981",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb54fef2-f39a-43d1-aa30-f00f892a0c6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d78aeecb-15c0-49df-9c38-bb1e5dea72df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "05ed1b19-5f30-43f3-9931-337f7fc83e1c"
                    }
                  }
                ]
              },
              {
                "id": "e62fd0be-5a5c-43c6-9cc6-8e1981777677",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be9142ee-39b7-4466-a58c-cfe94eb04fdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e3a8a7e-b8c4-4c61-a4bd-65cd826115c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d04f2a6-7eaf-4dbe-b592-e30c6db5c19b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "69a04893-e8c5-48f9-84f4-e18167eedbce"
                    }
                  }
                ]
              },
              {
                "id": "15cbbfb5-be38-4df6-a097-33fe66ba0b0d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "421718b1-2d96-4113-915e-f75bbddce599",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0809e0d-6a82-4267-b0b5-6c0ff9917b07"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "989b97ad-9235-4046-bd6d-b90162da9212",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cba2d3b9-a4fd-4ff0-9756-f2d9a1359138"
                    }
                  }
                ]
              },
              {
                "id": "01a3bb00-c47b-4141-b2b4-d7fbb116a4bf",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ee8ce72-d22d-4980-a565-42c2d54e2434",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a093e31-bc0d-4bab-8fb1-48ebf9248c85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a23d89ee-fb74-49b5-8169-4735e4704d62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4a2a3a41-3adc-44fb-a606-2317200363ac"
                    }
                  }
                ]
              },
              {
                "id": "4ed77d1d-8e67-4e19-afa3-c3caba257023",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d0babff-cb34-424f-ab50-6b5df5b82c39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f27e782a-7a27-42de-a491-10ea4d6b9169"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88846584-1a73-4614-b10c-9a45ce4463a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "49d2a35a-2015-460e-b66a-55c97ebab7d2"
                    }
                  }
                ]
              },
              {
                "id": "54f3efb3-9805-41a4-a25c-b57ab7e69a8c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1b595e8-7208-494b-a332-43994b05bb3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16a9fe3a-0e03-4523-b48d-03ed64523062"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1ba0a42-b506-4d78-a2c2-7f6eaeaf78e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7e91c922-0ca2-4e55-9a92-0d17155515a5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a528b801-c09f-46e2-b683-f60e1a6976cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a3db58b3-4760-4299-871d-62ea05860a95"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2d19b003-a91e-4996-90d8-d0441042efb9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30703d05-12b3-4851-b18b-5c71f76cf442"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c676452b-4e7e-4c2b-b10a-3ba449d1e1aa",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2e5a4aa1-2969-4ac0-b007-1fee74ee03fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d58ad35-bbf8-4532-9ea4-3d8260c12058",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "074d7cd2-c846-487d-ae1d-fc2edb1349ae"
            }
          }
        ]
      },
      {
        "id": "9b25389d-8cc1-4ab7-bf75-c8f73332d43b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d92fe1aa-8b76-42fb-9932-ca053cae9ef3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "599ad6d9-bc71-48d5-8397-1542d7d90cc1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d78e3f91-1870-4670-9311-c803bb88090e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d54a02-3e3b-4468-b8ba-61b25533ebbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1734f3-23cf-443d-9191-dbaf9375e5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6920bb55-b548-4f9d-965d-27db06bdb071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5800abd6-6041-4f29-b257-be7b281b29fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751532da-7fec-4371-ae49-0f26bdb4e3f9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ef1983-ce8b-49e1-be34-8649ce5d414d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1744b5-c50d-4fc7-ad59-5b2d54afd22f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a50296e-6dea-41fe-92f1-0618f5d3431d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4172a74a-4484-444a-abc0-6fe61df61e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554251c4-7778-4a4a-ae92-ee49a805bde3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06048e50-1fed-4a8f-a66a-27db710b583b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd77c74-9b5d-4c4e-8681-18c426cfb975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4251ebb-ed31-48d4-ac14-187c88c72680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4da359f-794d-4512-813d-7799e263187c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2358773d-30c9-417c-8812-442d1c42d340",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8391d9c3-c438-4dd8-b16a-0d01373b034e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771d8ad9-be10-41eb-9269-4b37ee70a95e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb107e4-0076-470b-8dc0-0051f203b1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30ccf085-248e-4da8-9142-7a8f6a05d33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab565019-71bc-46d4-8462-aa1efa9b3759",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d55427-a539-4915-a12c-38c559239864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f8bc93-b947-4777-9e2f-f7f739ad5bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e26f63-4796-400e-8f86-af9fe99e3870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0b5b59-5e54-460b-8691-2ae85a593eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1e0318-0522-4874-aeba-76c340e2602a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8896444-65ed-484b-945c-3fe609e7f0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa831be-580d-4a04-a850-eaa082dbc1b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad9ef15-c948-4fd1-81fa-8c8477a2a519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "837e6787-9b44-4735-818b-431986fa0632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10510d17-c6af-40ea-982b-1fbc118afc2e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74db7115-2d1e-469f-b8bb-a6191e951a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6fd7c3a-21c2-4dd7-8ea3-118e4309e117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2000df0-404e-4731-80e3-381acb52e8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5986c313-7939-4f40-85ff-0f5f3a212f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39338679-0d5c-4e1a-9226-d83bcd323b8c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8b3278-6e6a-462e-ad3d-7b8f0318f031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb925e4a-2ebf-4e7f-ba5a-6eef7f05f4d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6c19c1-87ce-4f17-a72b-f2fea218cb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e2da1c1-e267-4471-880c-675c3c25fe20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2c56cc-fa21-4505-b6f3-30d709144826",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385dc109-3866-4eff-9d31-5d2c3cbf78c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89278d9c-8d1c-470e-87c3-4947759eb7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223c48ad-62ee-491f-b558-c0c97d3cfd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36ceb529-fb99-43a7-a32e-0c7b0fccc8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9595c005-f46c-465f-8379-f858cbfb8847",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4de25a3-ecdb-43cc-ae12-c84598c381cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87951469-5cd4-48b0-97ff-9ae1cacabaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb8896f-417b-4dc7-9aff-411e51762b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66b9c153-606a-4886-a57d-a1f48dd775f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb87126b-422a-48da-802a-d8cc4051d08b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc13a75-e94b-4efd-b690-c0b651e3837b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b15282-9951-4517-b8a8-9a0a6896b3e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1e5945-fdb8-4253-8e1f-003951cbd170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6beeb8-833a-4b19-a26d-e88ff771787f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c31c1c-1ce7-421f-9d75-dc52853316a7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71b7cab-a2cc-40f6-8235-9f7f5a5cbdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a576d260-ef05-4f7f-b464-5f11bd95897a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffd5a8c-5e9a-4c16-8b5c-09ec2620fbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4bdc86db-db7e-4671-9d20-32ccf8757296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7703fe-c9a9-47ef-9316-77ae4d680a57",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6eab093-8432-49f0-9af3-4f3a9596e1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea5a79a-f746-427a-b2fb-24852c1816e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e48f07-6f19-4489-905c-b524bbc6aa23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2135824-8d96-47e7-946e-10ba8cb071cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363c6827-c329-467f-aa87-99d6d429a785",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea08a869-dd4c-473a-961d-96f95499ab73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977bb8cf-d787-4305-a05c-e8193ac5744d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a8eef7-3307-46d3-a912-45a09008cb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc403ee-56eb-4100-9bd0-37a193c5d637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4ab835-1e9b-46e3-957e-aa9cedb59de0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e11168-626c-4cab-8840-43d7b626812c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c06ca7-ee21-4f4a-96cf-66f3470c268f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4880038e-f517-4491-b8af-7267572e50fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f91fa0f-3db4-42f5-8f66-36de8842c224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff144ed6-a4ed-470e-bf52-6d287addba15",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea55f87a-e7af-46ad-9614-1777fbc72112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e7aa9c-74f8-463d-9d5d-2e2592368663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9eb3217-962c-486f-9d27-40bd6cf31ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c73527e0-5f4a-4eba-9ef9-6f9213253bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78a06c4-aae2-4b4f-9c11-9afc285da894",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc727a7-1e47-4a15-a628-b99fb2151230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b00711-83ac-4d1b-9b17-10f56e89cf83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d39b44-ece1-4533-a389-1d5a2001899c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "919a533e-9f5c-48b2-9acd-57cb09e4b635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4060aa9f-d608-4001-816f-707f63391599",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b639f1f-7d31-4a4d-94ad-149bb85235ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c827fb-7459-44ce-88cd-ce7ed4c18f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7373f93f-3767-45a4-934d-79e3a9c91d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0252e2-b5b1-46b5-ba92-b15bee56f613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5276c8b8-53ae-4aa6-bb15-3f61beb89211",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6e60c0-f137-41f8-a689-fe06ecd0185d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39314b40-28b6-4d6b-9a72-e3d59f0bc736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd8c404-377b-434f-bb29-a04adb1952b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "184bba17-c5c7-48d7-a09b-af368cf8442c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8def6bef-9261-4731-8b48-cb1ae605a307",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c59d5b-ad22-439a-b821-0c064c645b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206c6df9-878a-43b9-a3f3-7df088421f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b764aa-1598-4a7e-9b9e-3d3930f9269c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9190a0e-ae34-4c64-92c5-a93cb5fe1a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c57448a-16eb-4213-82cc-fa5593b80bb8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff54ad12-2048-4e0b-9ffd-46d2604c7687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef11039-cddb-4128-a9d6-1c0b33a4a5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5e6df4-1984-4944-8468-d7632943e1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f13c211-5b87-4b0d-b0cc-9d2f4ed099e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ded6c1-0b83-469a-b319-8953340f9cac",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98ef944-a606-4bce-ac09-588f218f1c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4b9f61-66aa-47bb-9760-f5a43b326ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f770caa-feeb-461d-974d-f917770b6b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80b3b350-c1c5-48a3-b499-0b38b3955674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab4f08c-b315-49f0-a4e2-c7142dd32119",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fc0593-93ac-4c08-8aa6-31fd4c8a4200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79530c7e-0be4-498b-b143-e31ecca739b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efedbd0-7c79-48f7-bffc-443f8b738704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c48b34-2da8-4d49-9764-ad3d0220504b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8163913a-4c72-4431-bdb8-a2a5c570b026",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcbde48-a7dc-4745-9526-ff156c57e948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337cd3dc-16ab-4a2b-845c-c8102118b597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9de6a7-7d1f-4b30-bf3a-b9f21e2f2f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ab8227-3057-4f12-99ad-6e9e22299daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d58e26c-d516-4f7e-8a04-ad9817bcfd25",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f42b81-335b-4b7f-97a5-b5b602d7feb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0a9030-0b11-4ab2-806b-7e8758eb9230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278698c5-79a3-49b8-8663-654a4d1ffc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74a8d5d4-8735-420e-8261-de6b4213e521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d75fc65-10ef-49fd-9c08-fbff6ed3f869",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d077a1-92f0-453e-95ba-bd1e7db83fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca2f80c-8ebf-499c-815a-58c213588132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc59cf6e-0dfb-4554-971c-e0330a06bbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31a0dff3-1c31-436e-8ba7-5402a93bd93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c6e2dc-9c24-4bf7-88b2-7e7f0813d1fa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be81e936-9abe-4ac4-9d04-2ad56f62c7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40270496-982c-4a71-b55a-05099bfcd1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58dd1001-5e63-45fe-9481-a51567e74c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "076f6ccb-e3ee-477e-ab4a-3d6b9222bb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff4829e-1262-4659-84e4-95300a2acc25",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b660a9d9-63fa-46b3-8d91-13a2bd5d4069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdca08c9-535f-45ca-ab17-7e8e3ce77bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6179acad-68a5-4cf9-8be4-aa81a7450a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "870c2567-537f-4e62-9ac0-1aeb471385f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404a7de3-8e65-4455-b46b-97d4a78e3f94",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18d7142-d10d-47a8-823b-dc0426bba3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e31052e-4edb-4628-b17a-186876ec853f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83326ea-be72-4b32-a941-0806500b364a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43b602b3-0bc1-4b6f-a0ad-c187bedd7cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5391387d-b57b-4b7e-8c0d-45f134a7dbb9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82080d04-783a-46fb-8eda-beabd1c57db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5110c5d9-0099-4087-b6fe-7f7205dff5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9ac94c-f28a-4741-8a5a-aa21280d8c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fffb22b-9555-4a8e-b284-f5bd50a29f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24b4b4a-a6e1-4831-a336-d0b852590b50",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c61f892-ed77-4786-950a-bdb601258efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9e6e22-3876-45bd-a589-2854656aae65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96d9bb5-e88e-4540-875d-162d80f800a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e216a596-e47d-4af8-a31e-a9ad1725df14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126f00dd-9aaf-4bbf-ada1-a3f8642287e8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044dd0c6-4bdb-450e-9f54-6d01adc74197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89bfddc3-2d4a-4844-96d0-1ac18e2db4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17735ac-5b6d-49b4-9911-0bc29b75a428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4295da-f59f-4944-9195-41a3a043f117"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8e30d244-32b7-46ce-8cea-bc0918c834da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0463e7cc-518c-4c99-a5bd-726979c68158",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cc94b7-c843-4dc1-897a-7143699ba50d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e51ac20f-f4fe-460e-a333-dd5cf1434e2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3790aca8-b314-4c62-8906-8d3f0cdd52de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f91e3df0-1dbf-41e9-b642-deb0a444e023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee893e36-2bc7-4fc6-b748-ec6b9fa58e5c",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93565ed-6ca3-48a5-b74c-b144dc270b73",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2cfb3447-1834-47d3-8664-ecbaa780f3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb5b0ac-444f-432e-acfc-a0b7a813eaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc5f110b-749d-43db-b225-be65cb245f3c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf31cb28-5431-443f-b1ac-23f2091bbac7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3de824d-44f0-4079-978b-b2d862c190b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "435ecf85-e270-4339-9850-e4a952a2e1ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "025fe28c-9334-4b5b-b15f-6d49c76f0093"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a50d8bb8-bfdf-44dd-b462-41b4d9a9049a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2d084077-a381-47c6-8da1-45bae3d8c854"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b924df38-a6e5-4c66-800b-9fef13493ca4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42e467e3-ab7f-45d9-a0e0-f5d022691052"
            }
          }
        ]
      },
      {
        "id": "082c6d12-d654-4e26-9aeb-634827110be9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7ca23e7e-c26c-4220-9502-b0525ae7f939",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66bdbee1-948a-4ae3-a088-ceadfcd2ae16",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ad1b2e68-00d6-4077-9b69-e2bc9a39bb3f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036b661f-264f-4e18-884f-c86e6781ad18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70ca393-4ffa-407b-a994-60ffc9b5620a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523a8243-d796-4e32-8331-4e77c131e37b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2196ec30-44ed-4506-91e0-1f6b8232e365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b4701b-d722-4c6d-87e7-31f61cfe47f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99b9f33-0268-4fec-8a60-337e6aebe9ee",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d039061f-b6b7-48cf-ab7a-91f224767744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fbce379-d4e6-4dcc-8052-8c815502fa26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681946bf-245f-47f4-8517-b068270728a6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0aec3b-0b69-40ad-b5f0-4dce94028ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1e873d-8a91-45ec-a05e-d0592418b5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f69808-5c80-4a09-a980-431f25b56c8a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb1d650-0d14-4b98-ad19-660af5e80bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8357928-bdce-49f4-a559-c46aa3695b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca03619-d0f9-4b87-8b7a-e70df5d2f497",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d586d0-4b2d-469b-b5b4-28e3f0f3ef9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba0964a-d284-444e-b855-d898365f14e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0656528-163f-4a0d-8323-ed17d7820f86",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657c1397-22d3-499a-96ec-8be1cd71140f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12391b84-aae0-4b7e-b5e9-fc15795bbaf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfce00a-8e25-4df5-864f-11e7ef420676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de167862-6900-448b-b1ae-3cf2eeee5702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f204c1b-86f4-4673-969c-7b478e7ac0d9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f23dd9-124c-4953-8411-f566045837c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "893fb958-9527-4657-b977-6021b3e3679b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d719480a-3abd-4df3-83eb-1b1cd31c23f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91801377-48ec-4009-9db5-2cd79cc8425b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0531d7-89f4-4ad2-8b06-8ce92de794b4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc22998-85d3-47e4-94fc-5a1e29896b30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bcf2b1d-f3de-4062-9a46-a8c061fa7896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "711b27b8-9025-4552-9437-a542ea144744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8e09f6-5755-443d-8537-0f73050168fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a473f0-9e51-435e-af6e-5a026652483f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88c9787-a67d-468d-9e1d-73a4db0dab81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d82b3cd-f38d-47b9-8716-0f5d86fe8dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad4df02-e662-465c-bcc7-a24adaa8eac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c8315a-baa5-4711-9a59-be11da0c45f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5adce7a5-4e07-470d-a872-35fac70470d3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf82efce-b653-4e3d-adc5-f027d87bb94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f90275-0fc2-44e4-b43a-d889ab05a9e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda37e4f-eaad-4e14-9fd8-8dc0e4996dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767fa2e6-007b-420c-bef1-56824fe5ff70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182c8310-87c0-4d7a-9593-116abdc61e26",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9558c1d5-2335-487c-8eed-af8b2941b10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508d2a26-e7b3-4a00-a886-38a300a5864c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d5b0cf-dc27-4bd5-b515-1766f55d807a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76f823d-e330-4b90-a38d-e94e655640b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c667462-05b3-4bf4-b0af-14fd6b2d923e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8259d53d-cfb9-4929-910e-0f517099e2ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7478801c-b1c3-4ea9-8fef-64570f560df6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be7c8ab-dcbb-45cd-9233-94ab96c95c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff33994b-5311-4d09-b78b-25be0dd8d1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2dd990c-4813-4f20-b6be-807ff2565862",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71be904b-38ea-4cd3-a3a6-09d34e030e8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b44ddf12-013e-4c1b-8c0d-127ca8b8efa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a19206a-927b-4c4a-a1f0-a08af140aee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60c45b6-9f69-4e63-ba0e-ccf431ccbe85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449f9785-b572-4f31-836c-9923573bd0d1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14ae4be-d46c-4874-8b34-a05f522b7728",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b99ca80-b968-47d4-85c4-870b63c2926d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ecfb40b-35ad-4efc-8822-866613f720da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db400f1c-77ba-4dee-8f76-5f8b26024dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd64be9-01b4-4c2d-9410-f85826360f10",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7811d169-b06d-49e7-b60a-2b56680fe773",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14e2d70d-22d0-4086-8bcc-cc7f94cbc792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1feac9dc-c74b-4eff-9fff-9f6acce9be4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1bbdfb-e36e-490d-a4bb-a6f40e1bd7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2ad323-8242-4ee2-8444-007fd592b0ad",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64749e4-3384-4298-ad92-a2be5c6db231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7612991-68bd-44a0-a302-b519ea869138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7372b6c9-2f5a-4dde-ac7d-0e00904b50ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e167a02-a859-4d77-903a-bcb225231eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37cedfe-3ed8-4f6a-902c-9ea45bcd9467",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a21e090-3a8b-40f4-85c4-02b58f1575b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6beca3ba-1d59-4bd0-9b02-b408b1884ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbdc115-10cf-4da3-92c2-e4f357066670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e434df-5632-4807-aa01-716ea155a5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e136e00-34c3-4f44-9154-6041e35417dc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a03b804-cce7-4aa3-8c35-a02d9e52d5b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f71ef49-f18e-4a8e-9dbc-de4cacdf5fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16df3035-2523-47c0-a351-ce4cf05c3330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e063980-b8b1-4ea9-ad67-28cdae3536e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24892c8-fff2-4304-8ae3-3b7448e2c876",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37eb6956-26f8-4fb4-b675-feafe6cb0ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a145de7-4c16-47ea-b088-ae2fa20ffec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0ef9de-a5c6-431b-9505-66e3bd1df214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c9878d-602c-4d25-bc6d-431f4f98ef0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2bf8e9-0a50-4ae6-b309-ac998d04098a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2869e2e2-e768-4e0a-8395-293dd533dc17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb37e567-99c9-477e-be91-cef1f4aa1997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d364778b-6b97-41e5-bf49-66badbc81345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d5f9e2-b57b-4e48-821d-5fb02a3e245e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de58c00-6d8e-42af-82c1-35810eb0f337",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed43d5b6-cea7-4e7c-af16-c872b905f964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fadc9f0-31b8-43a0-9046-bda984245e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "899d9f18-8818-428a-a9e7-8ffb05d56493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c51bc6-3a57-4db1-a5a7-fbb758832973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5678d859-fe1f-41bf-86b7-dd1b3f3c7c58",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e19527-87bc-40fd-8fe2-3ee71407dcec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff14e02e-0f40-480c-b0bc-bb74da0365ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec13f98-c0b0-49d6-b6f6-0232de922cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ed8788-62ad-4a16-91e3-983b80fbd4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e3e3d5-107f-492a-8f2c-2d4ec7b3ebe7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbe3a58-0efd-430e-8f89-dfa632ce1fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e09b7ca5-073c-44f2-965b-3f8d8ddc2383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85115b7-3d75-45a4-a0b9-2d1598a16640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eead2252-1b94-493c-a2d8-ea93d05f5b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361d97f1-648a-4a12-bab7-2446ecb6510e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc76c41-f2ed-440b-a483-94b51a68a902",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e84753e-4d94-4284-9be1-35f995c02390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f32f07-79d2-424d-88ad-44ae49d95a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1492d3-f40c-4274-bb26-d23630fa6893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b476d8e5-9d8f-4125-8a4b-0a13c5241bd2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a4a96e-c86f-4055-8c87-38b75feaa072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52b78fe0-2945-4227-b1c4-0343903a58f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1de93f-d852-4ba8-aa97-7b0feaa74829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d4d7c9-73b3-4fb9-a5cf-24be9699a99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4e061f-4415-4d8d-bf7e-ca5920f8e58f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9660bd29-334b-4467-a1d2-857fcd2abb0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25fe8159-3296-4de9-acf9-a6ba6f21d870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "919fae18-b962-4eab-817a-6834fec2237f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742be980-8ba8-46f3-82e4-338c3e55c61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65521f23-42b3-43da-b7c2-8dd4b35f9d06",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4510b3-5323-44ff-951d-817af9eeaad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6028c708-0acb-4cd8-9cac-ad2b6ea86ff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d783aa9-9c7a-4147-91da-e87f2d3ce59a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb2381d-d4c6-4fa5-b4d0-06ca6f285cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25bc0a0-e4c4-4bdf-9107-f35af993a28d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6804f699-891c-409d-97f5-0100ba937877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de064144-04d2-4f0a-958f-4840f9274c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9f581d-5078-4a70-87de-b270123039ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5f2f16-7dcd-43ed-bb31-dc2d40fb8ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e824ba-571c-417c-8afe-83fa62e38c13",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f148c3-9f95-4d19-88ce-9a9782a63c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d86e481-3b39-494b-8754-d53809540362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d047ec5d-644a-4c01-83ba-4b4555581c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ba9643-eece-40d0-bb10-2cd9adc41282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8544e0-b3d3-4ee4-871d-d8128b461f9f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43116ef5-4f39-4a69-a784-5008660df747",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd084d8e-a769-4d04-b5c5-16ef43ee2988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6658a2c-b694-41d5-abb0-682557e0b7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881538c7-1975-4e69-92e2-4774e1fe8a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc30c0e-b6b0-4fad-8bda-5389e66eb433",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac45164a-31b2-4e88-889b-81fd18e90fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c944ac09-d46b-49ab-b14b-fab4ad8bcbe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6040a7-2ebf-404d-9225-28f5cc478172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a9df87-18fa-4362-a8ba-3029af73db4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabb1e16-c020-4ed2-893e-42718b881585",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207f21e6-5486-4695-95ca-70da14707b71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0689829-980e-4b5e-98f4-5aa36dde7d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ec1154-cb47-49c0-8e87-645ed74d79e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa648b9-ea1e-40ae-a7a8-71a42ef156b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383a9d54-59c4-4dfe-b954-d1151dbe3949",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da77e9f9-3ee8-4028-a7b3-91f13c65e33a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f430cf35-8ef2-4c24-8277-4b0c4dc66389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ba06ba-41b8-448e-bff4-5c164af6ad15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77ab1171-1f17-4e98-ba18-3da9ce408afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee3f87a-64f5-4a9f-ac5c-70fcd9dac708",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e9a051-635a-4a1e-95c5-d9a98818d597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e95fa1-88e1-443f-85bf-4eba99613368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e26aad7-963b-4adc-a5ba-c1fda48b5581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bc8cbb-5ec1-490c-97de-64e1b5421d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa96e935-4b1c-4ade-84b5-62487e1e6766",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eebc62b-861f-4955-bb18-7a6383103e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c686e163-8fc0-4cf5-b5da-7e3b1127a312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f98295c-c2f2-4f30-b002-0e5e1d425ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c5db90-4d1e-4f06-b260-1d297fe090da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364467d5-9c88-4988-9fac-25a50b74c5c2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea25f1c-0d29-41c0-b43f-fec007a2ba67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cae4b6e-ac6c-4021-a1d6-c02ebb35e8d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b68c99e-6a0b-485f-bdbf-82af496f194b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe3ba15-f284-475f-b854-aa83647ba32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5caf3c3f-457b-41b1-8686-cc7f33f03c94",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecbc316-2366-4e46-a4f0-db5e69136b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09794bcf-8487-41a1-8aa9-5682437c4077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b1941b-3976-4590-ab27-d394e144a2fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f4ee51-2cf7-4788-b0cb-2c6a3fea1f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b41fb07-fae5-442c-893d-0499fd2d7272",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b7679b-5f74-4e3f-8c0b-49373564f13c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd80dfc-d60f-49cc-a1e0-8c557790cbb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b8fdd0-6c1c-4d5c-91e6-a66c0a50be7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac6c907-932b-4d12-b6d3-099385a7c288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abec32b9-83c0-41ca-bf30-74885db2ac00",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c064c154-f54b-4db5-9a86-bceec9e4304c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d922981-190f-49f2-8c1b-0715c35df893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafea231-5de4-499d-8b8c-736212e3a173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2674ccb-2411-4c0c-a091-8689d6c92f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f64492-782b-4730-87f7-41598cc37bcc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ab95a8-85cc-4343-a55f-090e01940fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58adb60-2ebd-4cbb-9f1a-a4796df82de0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95758002-1090-4be3-92f1-109e817a4fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ba93f6-efed-4554-b8bb-9a068759a833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4230fe25-7af8-4af8-b302-863e30d55bd1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce27c9d4-ef52-439d-89dc-4f1c7a454e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1d70f3-14a1-4a7e-a4c7-715dd2ed6c66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f56696-5fc4-4e61-b3c9-0deded556589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7440e342-e992-42cf-a24c-da20687c5742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f29076-21f8-465c-83aa-b0cc35fe28e0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834684aa-b0f8-4e45-8bdb-cb1c395c2abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e60741-fee4-4dd5-89c9-85aaa5667e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1854314-0419-4527-8154-518ab20efd98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be38b544-1737-4c91-9839-7e5a8be690cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f2ac2e-43a6-4c82-b7bd-96ab72ea7940",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0d3751-e1e9-4770-9963-d0ea4e011455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d705ca33-93b1-49a7-b692-26161ff6af9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1970c0c-d18d-41da-917d-2d1c298d676e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bd35d1-2142-4afb-8bc4-a2c8c9aad8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0bb3e3-9305-4104-bac2-4aef9d1232c8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccf5252-0d40-4601-80b9-5118cf9ead3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806f7e06-aa93-4566-aaf9-0848dd4a49be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b71983-b91d-4f64-9c31-8f132cffe0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ebaaeb-1cb3-45e9-ab01-5b15415cfb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4075e2-9a81-4bdf-a815-558146c5d18f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c82ec4-bf4c-47d5-9bd5-7805f66b8530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd89c9b-7d85-4d09-8a06-32b213c1edd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a2d84a-661f-45ee-a3b6-590ac0e37834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d247ee1-0941-40d0-8600-6eaa95eb7f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cca372f-7370-4346-a740-e6295f3155a6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb8725d-df88-4f89-9b54-c411846f52f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8559f9c-a51f-46eb-88fd-4a5a4cc0894f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ab0282-8c92-43a7-b9cf-30eccd70b75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197f8a68-7d77-49a0-ac30-84edac9f8215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7ee0a3-866f-4759-a494-682b3bbae7fb",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d1f4ad-7275-4348-aa8c-1211ae70b183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2fc8557-1267-4e58-bcc1-7b7eb178cb8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f684ef6-6405-44e7-b9ad-390004779099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb46455c-f13a-4a25-a16f-c0e8b8f7aacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4094ca05-08b1-4083-9e51-bf3876c05e2e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac2acf5-8f9f-4a2a-8904-a7d11337067a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a314c494-ac7c-4b83-bb39-b6a0dfc8357e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85156a3c-52cc-4ae1-bdbe-3565a63ad174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee23aeca-5872-4785-86f3-4a93b0201d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d2193b-e612-4554-8770-6f828996f318",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82af4e2c-1e97-49e8-9bac-1707a2cda5fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed55d39a-5a88-4caa-afde-1272452fd858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be3da44-d699-48cb-a952-e349b6b26d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ad32b0-afe7-4eda-8364-0847fe7011c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b0fa54-215f-4723-aeae-a8633c9793ea",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626bef65-2ab8-45f6-838a-a82415fa1cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "654b891d-e75a-4339-ade1-c128e8ce0c4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2504f5-445c-4742-b6be-81663ce609a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f233af6-3f2c-438c-9d5a-011e80b148b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fb8a50-c56e-4718-be55-d4d64b623009",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3948c99e-be6e-47a7-8202-37ca74ba99b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "327ebc1c-d138-440a-ae58-7d48c5a2f706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75317f1-a254-411f-96d7-03ccb89511c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3436d9-a5c1-4a9d-b03e-b5c8dfecaec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d42da7-3423-49a9-ae6a-5bc9f65fec29",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f181059-49f5-41ce-8326-e6340af95de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2227bbfb-9879-4f53-ae5e-39e0d7e0aedc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "499d512c-49ff-419a-a497-d4faca956ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f259e1d0-ab76-4d4b-8051-1455e489f8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a27de0-2f7c-4c2f-89e6-dd5a3df7e0cf",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31a59b3-a51a-48ec-9289-db9dad67c8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19dd71a9-816d-4b90-8b9d-895014b89174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52414b37-8dec-4153-8e68-98227acb4d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66007cb-0c67-47e7-afb7-fb7b68e275e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4e1c32-77bb-4738-aada-b7cbf609748b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a75248-2f38-4b59-a0f0-d1e98b10595b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0894209e-bd40-49fe-9686-00758a4b2234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e0b387-dd56-430f-8553-799d7802a541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d94bad-e72a-4553-aa25-dbd1f881e2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491f3474-506e-41ed-874c-aa9368ecf6d0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d296007b-59cb-43d4-9af5-eb72c9e95773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "520b4ef6-c139-4b89-bdd4-c98871d32eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61317dd-3a36-4005-9177-1f77ac1c755b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3b521c-a6f6-49a2-be67-7da0a0e993dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6393fb3f-19bc-4d06-909d-3b9da6f46d67",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbaed52-d814-48f3-896a-dd34e331d96f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8d737a-53c3-465b-a71d-215cce6b7d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa735eaf-d44c-4c5c-b3d5-ddc37f86615a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1d20f7-f19a-445f-a851-9e28dc5d83b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0632e4d9-acde-4150-bbdd-4f451c7c466e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e55e72-ee5d-4685-aa31-159ba84efdae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f9cb48-693e-4220-a1b5-d309186b6d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec25b56-c141-4dc4-8db3-1f1615b13257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b8b784-f784-4390-833d-53dbb9910dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a849e1cd-333e-4066-b046-fcbcd1516f37",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1add7596-7ecf-4936-82da-f6179904a5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f86f4d6-95b3-4f37-96bb-be31ff44c7d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b80b51-b298-44d5-8037-9f8c8256edcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1f5578-d0ed-4c5e-9e40-a51cfd1bbfd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0d87f7-7373-4489-b47e-4de648b1d640",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8694c636-6bbd-42ce-996f-a1e659e96de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a3cea9-992c-481a-bef5-b163e0e9486d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f725e1-4ec6-44e5-ad2d-81162ea9c542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddb23f5-fd76-4feb-ae85-c816150b7baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b197344c-4a77-474b-82ab-70345792fe06",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5065a568-b2f0-4b66-90ae-df3292fdb230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4839e5-6700-478c-9166-c9f9ed27767e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bb4063-eab7-46b7-8b1a-de5ed3e17a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451f32ad-1b58-4528-92ac-4f87b3d83950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c1e898-e925-4629-84d4-8d72d4dca5e7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16a1b41-a5b1-4c11-9bce-b34112aa758f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20091ce-e078-4066-a5e1-76d06909fba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "349c0970-8427-4f1d-b420-2d8ee3e033c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e12f2aa-ee00-484d-aa8c-2b67ed61dee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196438d8-3573-42bf-881a-ad34841d29a2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309e32e8-a5f2-4b3c-9da6-4a66879f5ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62540050-2f97-4c95-8e98-0c9640a0ad25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "953613a2-f12d-42ad-8f63-3b05d6b77246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a77274-d594-41cc-9f20-977ce7143f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40040a75-51fa-446e-af55-bdb71db2610b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c851e3-b098-43a0-af72-f3822a344fe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "889434c0-5bae-4737-b9bf-1ba2685247e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90b1759-0fe8-42f4-ace4-90c3abe0250a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd169e8-dabf-484c-b5b3-c7219af330b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295770f7-a5cc-4cea-9dbe-5a73ca4e241d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09bbcfc-d458-4ed4-9c40-106f9fdcf726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8827162b-2596-4a47-bbcc-c92481e1e462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef86e06a-6af2-47e3-848e-e552a22768a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2694957-774d-47f9-9a3e-45e1251ba9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70e51ea-d6a9-43e8-bb38-ff8dc67d6ea6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17105ac0-19e7-451a-ac0c-bb124a446d66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb61bbd0-0a57-4cf7-8a60-84956cec399f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca5a3a4-4927-4a32-b48f-f954d3dabaae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bafd8b-9e21-4785-a785-d16a8a597bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650db872-33ba-467e-82c9-2d8fc8ffbe87",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bda2543-3cf3-4a46-b1fb-a7f9073bad24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c5e22a4-e3ab-4f57-9da8-c95c43d9931c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60d8240-2b1a-47b7-ab67-e1396475fad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eff2795-ec46-4046-bab9-3e5dbf0ff5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9a4457-9fee-47b4-93a6-def1ddb3c4d7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171dbb1e-3524-4b82-a435-5f94596c782f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6208b6ea-f3fe-494e-b9c4-ed8e6087eb4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f143e1d-9795-4be5-89ae-ee2a1e1eda2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3a4fe4-10f9-4ec1-b7f6-d1276ffccf44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df94a98-6c93-4b62-9bba-af5577ba1742",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e31609-1087-48fa-85cf-84b6f934ba88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57e7be43-6658-4681-9b5a-3e91269966d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49323f77-6d54-4869-8f63-bb322cc3dddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a928ee76-9632-4149-a588-a306481dbca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9eddfa-79f3-4d2f-a60f-c9c547bd4a78",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015421d4-27ad-445c-9c3f-6b15728a45fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f31af44-6824-4fa4-be1c-dbd3f39ca565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0053ac0c-2302-41ce-99d0-c6a1d551965f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09181516-5db2-41ff-a123-f9c40c3eae68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd6f2c4-4cdc-40c0-9223-921f39b4cc43",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bc8ad8-1796-4992-9059-eceae617e890",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d6abf5a-3c0e-4dda-a529-447f96aa387f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f857e681-19ac-407b-873e-df72914c45d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc52965-b9c8-409e-a2ac-c59243c2ffaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0795692-1e2b-409e-ae32-5d7e95654f5f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296ba86f-bd06-43dc-9521-e7d9d4042757",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5b00e1b-c48e-4e57-b790-41e2aede2f19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66cb0c4-8c88-4ecb-9e30-5a4eea8eab32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3eb8c46-675b-4456-8c97-4204e7f1981e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d470fb77-40f7-48e7-9854-d24221251c1d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9687ef9-b4b1-4a03-a386-6187cdffb794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df004866-0c32-4db7-aefd-1eabd8912076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb82dfcb-67ac-4500-a0bb-bbd5c434c54f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb1ebece-f807-4b63-937a-a6ceb5927a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e22ed8-6370-4c80-a0e2-d996802173bb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13e1f11-be7a-43a6-8966-eba5003a21db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61cc74a4-d2aa-4afe-9287-fab5dcf912ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf645a6-0be2-4721-80a9-88cfa1bbd293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4516ccb-2dea-4835-9ee8-16a4f7a41f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cc7497-1a08-46f4-9896-05c90f04c1af",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe19677-efe2-4322-a860-ac6140b702c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a50588c1-dc2a-43bc-8475-c92d0dd71412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b200c731-3eaf-4ced-8986-eaa384c4eb2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a088b158-d902-487e-bcfd-8d4fe7ba7f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d0c194-1d10-49fb-91ce-47e736593278",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6631d50-149a-44b2-8b2a-6c5d81b9b97f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc30cbf1-29e6-4c72-a817-d8cab474390a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c0fcfb-adb5-4dfc-8201-f942c60c729a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d435bda5-ba05-4f7a-a37a-b56aa50f7291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ec1c67-670f-46bf-b432-bcf04845bc63",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3397a6-e0b0-4677-821d-58e23a4a4b7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "063a5675-3c6a-4ae0-a027-2c46730ed804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a75a38-ea4a-461c-8c13-5b14a04f606d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ffda50-c11d-4e6c-9f88-4cf23fe21acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4730d719-67f9-4ec1-a517-5388ca33f6db",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa398bc4-cd75-48c6-87d3-ade29b8dc447",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "286b76ed-d40f-44db-9d76-d86efb216813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b2c13a-2c61-4226-b8bc-ab55af36ff8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ccefb91-a758-4b1d-93b4-6ae9f9cd2973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d7a4a6-c294-4107-a315-6168fcd48e2b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd9ccaf-9c1a-4edc-98a7-61073cb2399c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9bee4bd-feed-4d28-a008-da59c064f23d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "603b63fa-dd86-4779-8075-caecd4bdca19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723e29dc-afc0-4d03-bc0c-d1017954649e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b946ede-ac7c-4142-9287-b73afd0af28f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2af1c4-cc81-48fb-a060-d95fa195f1e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd97cd56-ff7d-4906-a940-07af455a2cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f392c729-1a99-4df3-8980-faeb878654fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f2cec6-62da-4afb-8d2c-92307e0cefa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d854b0a3-3b29-4804-94c0-9ae5709d9c81",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1870e4-91f6-4453-8df5-abacce7cbe35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efcff714-f9ff-46e4-a55d-7fe5c1025346"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00de8c2e-8b80-4944-8cb3-015b21837ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8446309f-4cd8-4491-9687-98698c722d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358ff10b-f334-4630-a2d5-a07725ccf00f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cbf96a-2512-408d-b3e7-f9500311b484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "747edc58-9d5b-4898-8878-4da9eac50b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74664872-1078-4571-ba80-15266a5eb9c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535d77fd-9e24-4cfa-84ad-94d447005f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f9576b-6455-4490-83f9-e777fa05583a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd4cd68-39ba-46c3-9953-83347c5515d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52ac9c09-860e-40db-91c8-be7ddb7f9b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc4a373-7c8e-4c93-b07c-d6ae5bb601fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3c32ac-db4d-423e-9e68-9de5a6030250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48a94a3-6203-40ff-8b71-7abf1f709941",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d290b0c-8ad6-4ec0-89bf-982c4195439f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4999edb-6989-44b6-a981-b99f88a9fee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77a9f24-df19-4b8b-a34e-d8ee07f7584a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597278da-860f-48d3-99fc-2e9c3a7c2f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd080fc-0bdc-4675-a286-412cc26e98e7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a749d360-f2fa-4e08-8ae6-78268b38629a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "131f9f86-0151-45ed-b9c5-813af512af1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f54210-c065-4b8d-9e47-a5d509b95986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c300a83b-4875-4f9d-b34a-62c723adab93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b9c86e-7e41-4e3b-8a00-24c504912558",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fe1748-9692-4e04-80c2-ed9e14b7d844",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4f46ee6-c960-4e2c-bd28-68d987496668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec68fe87-1c91-4080-bf77-42c4cc1ee05c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5de2704-38a8-4385-a2b2-3a7dcb95456d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7504dd4-f370-4552-b46e-be35fa80d978",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807bf7ec-98c3-4339-b7dd-9cfad61ae13e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "393dd52f-676a-49ac-9ca3-c77f31cb1eb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adb3cb4-f905-4e59-9326-e08082c6f8c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18784307-4b21-4ce1-b9ae-bb0cef04a035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c648403-b9e2-4008-b66d-cedf12983b91",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171cb9f6-e42b-41e2-ae0d-8ecfd6c08ed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ed5c930-184f-430c-91fb-0d11ae328801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f689df-c001-4de0-a245-8c30f7e779a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5dc314-c7bd-4053-8125-0bfdde6adbfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0340e9d-64ee-4d8b-8af1-bcdde09dbda0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b724331-1ef9-4600-b3eb-63a88d169db1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab549eb2-7d6b-49d7-923d-80479025b755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51c0be6-5895-4ca5-9382-3ceaa7a3d982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d65873-7531-43b4-aaa5-4f715afd3e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3c31b5-a173-4915-a0db-70fb100099bd",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85f30c9-169a-4755-894f-d800fd8f9a78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3fcbc24-5a2b-4aac-afee-de2963798a9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5f7027-b179-4c99-ac68-f83738f810a4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7089d94c-1f78-4309-a841-13f1cb308db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957ffc98-dc5e-46c1-8e7b-7bff29f1551d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3633c5c2-d669-4b29-8c98-fea367639dec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfbf2462-a55d-45f5-ae85-3c10d6592e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba05d3d-520f-4d5f-a4b9-83b17db039ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e66cdf-6826-49ac-9fee-35b539648602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079b315c-d588-4dc7-b53b-8b8f122765ae",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd77fa1-19c7-4e6b-aa9a-783acf2b555f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c0ade49-2922-4fca-9c92-98d496cc9725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb0a287-b53e-4387-abab-f46efdb5dc2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de0c08b-aaea-4074-ba3e-4a471a7dc395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc45ca4f-139f-4892-a9db-94296361d7ef",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905de4f2-d80a-4018-bdae-f705f43e0334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "908daaff-4ea0-476d-9522-eeeecacc77a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9853b694-72be-44f0-a5ce-07e983995906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7a00d5-a82d-4af3-bb7f-3203871b0bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a72bea-4736-4cb9-b812-486b607a47af",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00992047-5c12-4011-978c-70fdadd5d204",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0400362c-4dd9-4877-894e-6abde9db5907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fef699-0fbd-45c3-b3bb-415125811b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e6400d-c07e-4251-8c18-7f5dcb6a19a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b06cdef-8d27-4900-a6e3-45f8be4620ac",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a31e1c-957a-4b93-89d5-1b11853c62df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15e4357b-83df-465a-9241-ed5590a9bb15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffbe3be-dc39-4d86-a8ee-4bd8fa011d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bfa8a9f-351b-4650-91c5-5664128651f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af9fcec-3058-4191-829a-56e20f44ed41",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d02fb6-6a5b-4f82-9d0c-bd67add0b051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "557cf11e-d33d-4fed-99ca-116ff44295ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82c8f04-96e0-4e89-afd1-e1005777f1eb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e12e155-3cf8-433b-8116-1cae70c53bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76065acf-7c77-43aa-b04a-7cd8067a9e8e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e156fed6-fa04-4e51-b1ad-8b850c2727b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "243ac032-cefe-4655-b2f8-bcef0185a577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a496d2c-a135-42cd-87f6-ffe7a03d8933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e068cc-dd83-4816-ae41-2ecae9beb6ed"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85437b81-fb32-4a72-ac68-21b5a35e1eee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1297ac28-68ed-4341-b47d-d22dc536c17a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec395fc0-b66d-4263-a689-950adc366551",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04694166-89bf-4f52-9d87-e7174ad71581"
                    }
                  }
                ]
              },
              {
                "id": "906ff2bb-5dc7-489a-8f45-a6d4d063c8ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4338e8dc-d770-4637-b762-6f0e5aa1f71a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d78a85b-a63a-49e3-bb8e-e3bae77eac13",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "12341ff8-a269-4087-a153-d2e892429565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8d97ea-ab34-4a63-bdf3-df5b4a8ba61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cab662a-70c3-4ea2-beaf-f93e851d12f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4c0d25-62ff-4a1c-bd9d-2b159b60a67d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5c4c2d-6fae-48a3-9c70-5bec28252422",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0410f5ec-9b0c-4481-a91b-d1af66ceafc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c82f350-4d5b-4fd1-8c12-e1281938fb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d49db514-5716-47c9-90ff-377ed549fa8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fa31601-86b9-4fec-8ad0-458efadde3bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84997e70-3bff-48f0-ad74-2b1eec75bb76"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2f3ce31-aba4-4f4d-981f-97e0f80583d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8be0e394-a2bd-459d-8de5-070555a85d1e"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "5ff861cc-93bf-4f53-8095-9ba0dfda2fb5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e8d74af9-dce1-46c1-9b57-2bd690bf0129",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "110e4b81-2fa1-4066-8587-0bb5ed4eff09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ac03393-c977-4829-95f6-ab2224346485"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "022f9ffd-4e13-406b-8d00-54dea5b5139d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f44a76fb-6265-4cea-b4bd-6674e0a5529d"
                    }
                  }
                ]
              },
              {
                "id": "359963b4-9e13-4743-af8c-6675c7268929",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4dbe51a-33d9-4915-b86a-3f1a249909f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff511033-5538-4a93-8cf2-ff5e275ef9ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed1dcc78-4f6b-4b8e-8243-0b89b7b934fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5aab6837-3614-4d6e-8a5d-42994a0d727c"
                    }
                  }
                ]
              },
              {
                "id": "061dc980-f51d-4a52-a391-c243af4837ef",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59bb6581-019d-4419-83f6-00be70baa7d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2fd5f1b3-ce6e-42b5-a798-bd126749ca67"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b050a8d8-73d2-4ca6-ba98-4bf79086cb6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ae5c0b7-b8de-4b24-b14f-f30cb6daa71c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07ed5e23-c6cc-416c-8776-30a72a905046",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "63ec30c1-9022-4344-aeff-9abe39abf546"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8e198c6-fa04-4573-9da2-4e404aadf90c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6b947ac-88f0-4ebf-b3b0-8fc80ab98c10"
            }
          }
        ]
      },
      {
        "id": "deae8ade-b197-4f3c-8477-248def42313f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ce6fa2fe-155f-49e1-95b2-8eb164514f0b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41195a72-1f95-4981-a3f8-abb736aea8ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eedbc6ec-25c6-4162-ae4b-d2f2482ad29d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60aec0ef-73ca-48a0-9b9b-e9fdea46dcb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4b7bb874-e889-4625-92b3-5e8bfc014b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db50952-0751-4221-9ac7-e823ec706dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fa68a9f-d872-48ab-8220-21183a8d60cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ccbd08-91f5-4252-80a5-894e8585f2c5",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9d01ca-6916-456f-9490-9a7557f3dd23",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fee010d5-2275-4de5-b92d-425e080644f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ca949e-d818-4057-aa9d-5e41060ba3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "696affce-add0-47c7-b239-d2309e9bb903"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b151d28d-b23a-4467-8f62-5b39655b75c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b95d250-b713-4cc8-a976-6a88c1c70c13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5191adb-f327-448e-ac23-42dd4b60da84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7db47f69-aeb7-49b6-9636-de0bbb217471"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e87e447f-6d61-4365-8fb3-f31f9f108a64",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "84551067-6bb5-414e-82bc-b037a576c324"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "847e1443-2689-455d-980f-12098e65b9ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16beb356-767f-461d-9138-59f96789a385"
            }
          }
        ]
      },
      {
        "id": "faac2bf7-3d79-4982-80fa-af0329c7b2d6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "41e22b5b-f3db-4d8e-8e58-e1b5dac60094",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e27a99f-cdde-4915-b936-d6a4e6d5aff3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4ce8143-dfa5-4527-a9d6-36e60a48b5b1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a9cfe8-894c-4015-a265-953d40d92493",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5cec124e-a2ae-4834-8345-585e6c4ae122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5570709b-47b0-411a-bbd0-6c84453089c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ab50de0-6e24-465f-b20b-f84cb8b1e4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d99c0a-d1db-43c9-8326-9ca89c1fde94",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005c2441-6eb5-4ca9-b300-62ca536b4e53",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6fb73858-2eec-4572-882c-cab8ed613814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4de00e-317c-4e65-82b4-b4088b0d7bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fb514af-d0da-4d95-b868-c6dc9cfc93a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "317dd460-5eb9-4b94-8963-6b400f6e214f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71d24328-bc30-4926-977d-ce36c696ad0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc57f6a3-b36e-4d48-8462-df7172dab162",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "231296cd-bf76-46e3-a2ab-c0fc4dbd9b4b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d86ce7af-39f4-4b88-942c-67ef5735ce86",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "48da15b9-b936-473b-b5df-df75bb7b048e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5484eaed-0122-471b-aaac-ef048dc7133d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c50651f-1a1f-4d04-9eac-c8ac822aa1ab"
            }
          }
        ]
      },
      {
        "id": "9987cb98-2f31-4bde-9f97-4139a6d68842",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "810a172b-e0d8-439d-8c1f-26c71df5afbb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90a1b1fd-35b1-418d-9d62-53ede94cfd10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a30054d3-e2df-4443-9e8c-d3173964a348",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d48782a-cf0e-4789-af13-5df0c40cf3a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6a436810-9bae-4a15-90d6-aeeed78c7f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e57eb88-d4ce-4ed6-836a-e2c03e63b121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7792655-7b69-4706-8a95-298fad162983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b3170c-c47d-4277-98e6-89293896c04b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccfbee2-04a5-4a16-9924-19194129d5ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9af8e5c7-cb6f-4e35-8fa8-1f0e16118128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fdbcba-02fe-4cb8-8bce-6c5581e7c65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4ecf65e-5fec-49af-b48f-2c9b2ee5958d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60920729-e150-44fd-a423-04af33a403d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ecdb90f-6ee4-44e5-8d96-11c701a79905"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56a418d7-d5ab-4deb-a8a3-7d90c5f24842",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea179c88-0af6-48ea-94db-a2da815531c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28c1a1cb-6bdd-4b97-a5eb-04101174d9e5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "034ac19f-0a6e-4fcc-a406-63e2a647b23b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7094d493-8cac-44b4-ba4d-8120056902fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef490a2f-c64b-4681-b935-66325d1297f7"
            }
          }
        ]
      },
      {
        "id": "a936c00e-87f5-4e1f-9aa6-6ceaa9efbe0e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43e64f03-c17e-48ea-966b-080b0a92fced",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f545f364-687b-427e-af76-7b190b75764a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6a15c222-87fc-467b-8acb-1bee06c17aa3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cc7db1e-c9f3-4735-9866-9cefc10d5cdb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4cc56c80-8e4e-4b45-a745-2710d997fe36",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 90
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 128.50769230769225,
      "responseMin": 6,
      "responseMax": 896,
      "responseSd": 122.02110448946287,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667609448842,
      "completed": 1667609495992
    },
    "executions": [
      {
        "id": "946ca89a-7410-4b11-8efe-fae62a71c760",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d70897a6-d6d6-48a2-89ef-23752231cb54",
          "httpRequestId": "d948985b-be00-4ea4-8ab9-bbdd0cd740bd"
        },
        "item": {
          "id": "946ca89a-7410-4b11-8efe-fae62a71c760",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b48a27ae-30d1-42bf-8e6d-eb93322d39f7",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "a6672dbc-5140-4885-ba4d-56ba1fb9638b",
        "cursor": {
          "ref": "4afd86fc-30c8-453d-b497-2327f49dee59",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8d4fbede-a8f9-456a-8eeb-9a03ccd5e126"
        },
        "item": {
          "id": "a6672dbc-5140-4885-ba4d-56ba1fb9638b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fd91673f-a9bd-4830-8e86-5392c5a8826a",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "ccea319b-c208-42d6-8dd7-c8cc5484aa42",
        "cursor": {
          "ref": "92a36836-ce5e-4ec4-ab4c-2e77c3439007",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "df652baa-f025-4b76-8ce2-c2f75e754d12"
        },
        "item": {
          "id": "ccea319b-c208-42d6-8dd7-c8cc5484aa42",
          "name": "did_json"
        },
        "response": {
          "id": "73a8ca2d-0a46-4052-a0db-908c6e588edf",
          "status": "OK",
          "code": 200,
          "responseTime": 253,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f25251-3bd7-43b2-9011-78fcbecbcad4",
        "cursor": {
          "ref": "d54a489b-b339-4946-8e52-ce12024d1f77",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "85566d6d-7188-40e2-8eb3-85a01c697d57"
        },
        "item": {
          "id": "e3f25251-3bd7-43b2-9011-78fcbecbcad4",
          "name": "did:invalid"
        },
        "response": {
          "id": "a2614e9a-5ea4-48c5-9218-00095cf2cf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f25251-3bd7-43b2-9011-78fcbecbcad4",
        "cursor": {
          "ref": "d54a489b-b339-4946-8e52-ce12024d1f77",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "85566d6d-7188-40e2-8eb3-85a01c697d57"
        },
        "item": {
          "id": "e3f25251-3bd7-43b2-9011-78fcbecbcad4",
          "name": "did:invalid"
        },
        "response": {
          "id": "a2614e9a-5ea4-48c5-9218-00095cf2cf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fecbb33-2fc7-4689-ab47-4d41f287e13a",
        "cursor": {
          "ref": "91656841-bab4-4ec3-b39a-94a13b4ca00f",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2bf7bc4c-cd84-40f5-ad34-2a44ef7dff36"
        },
        "item": {
          "id": "5fecbb33-2fc7-4689-ab47-4d41f287e13a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4500c9c2-9464-4dfc-9dad-51b7f4cde478",
          "status": "Not Found",
          "code": 404,
          "responseTime": 203,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850230b5-6041-4985-abde-ec15fba19aea",
        "cursor": {
          "ref": "75d894a4-192b-46c0-8d04-a9ab7e548dae",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "79f227a8-4a16-4766-b1b4-75ee60575ea5"
        },
        "item": {
          "id": "850230b5-6041-4985-abde-ec15fba19aea",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b3a72433-34bd-493a-ac8b-7afd52680db2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 75,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1f2b51-f121-4e8a-8494-9ef6586b9174",
        "cursor": {
          "ref": "87ea30f3-f77d-4446-8458-ef35c210526a",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "17110281-c41c-4380-b967-bacb3fa7c877"
        },
        "item": {
          "id": "5f1f2b51-f121-4e8a-8494-9ef6586b9174",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6a3d5f04-47fc-4eca-aae7-d0c930b2faa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af08dfb-6ed4-4a75-b678-7cb5034b3bcc",
        "cursor": {
          "ref": "24333f96-37db-46f6-a586-65e016f0ab94",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1b5ede3-8ca4-4162-affb-634c777748d1"
        },
        "item": {
          "id": "2af08dfb-6ed4-4a75-b678-7cb5034b3bcc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2eb7b80f-f505-4474-b1f4-2e241c7c0296",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 69,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af08dfb-6ed4-4a75-b678-7cb5034b3bcc",
        "cursor": {
          "ref": "24333f96-37db-46f6-a586-65e016f0ab94",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1b5ede3-8ca4-4162-affb-634c777748d1"
        },
        "item": {
          "id": "2af08dfb-6ed4-4a75-b678-7cb5034b3bcc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2eb7b80f-f505-4474-b1f4-2e241c7c0296",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 69,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd048c6-7bf5-4cf8-8d0c-35704df72f49",
        "cursor": {
          "ref": "f5a9a23a-5527-41d3-8bc7-9b893caef5e7",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a9319a52-deeb-4a99-b351-f055acd74a3e"
        },
        "item": {
          "id": "0dd048c6-7bf5-4cf8-8d0c-35704df72f49",
          "name": "identifiers"
        },
        "response": {
          "id": "6c1cf5c7-d66c-434c-9b52-7fddae7dc43d",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337305bc-f9f1-49e7-8ff2-d78bcfba042c",
        "cursor": {
          "ref": "5183948a-c584-4077-8508-765435578637",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bf203deb-654a-4ee0-9987-2c3868a8eb61"
        },
        "item": {
          "id": "337305bc-f9f1-49e7-8ff2-d78bcfba042c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f18c0293-ee2e-4ba1-b395-7093d1d99806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337305bc-f9f1-49e7-8ff2-d78bcfba042c",
        "cursor": {
          "ref": "5183948a-c584-4077-8508-765435578637",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bf203deb-654a-4ee0-9987-2c3868a8eb61"
        },
        "item": {
          "id": "337305bc-f9f1-49e7-8ff2-d78bcfba042c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f18c0293-ee2e-4ba1-b395-7093d1d99806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6e3e76-4d63-4220-9e1a-c1455f826713",
        "cursor": {
          "ref": "1dee2912-3009-4c33-ae1d-b021cdc32191",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2efaf807-20f3-4124-a754-b4c10fb2543e"
        },
        "item": {
          "id": "8c6e3e76-4d63-4220-9e1a-c1455f826713",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "515a0672-ce51-44c4-861a-7089de78d3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee4d563-7b96-4cb5-a9dc-3565ee5eeb36",
        "cursor": {
          "ref": "b7481fce-1cba-4611-a087-bbb8a41fb0e0",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e3cff7ed-48bd-4b51-b392-322a9c962c8b"
        },
        "item": {
          "id": "3ee4d563-7b96-4cb5-a9dc-3565ee5eeb36",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7b4ab3a4-0d79-425d-af03-c7fed91601f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20acfe45-bce8-4d38-9017-5eb7bba51c62",
        "cursor": {
          "ref": "f4446b89-b95c-4d5f-91fc-3c82a537eed8",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1e2734e6-c3bb-4e9c-b213-d7dc89eae08b"
        },
        "item": {
          "id": "20acfe45-bce8-4d38-9017-5eb7bba51c62",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "daadab3e-7a44-492d-86ae-549f7f9b4b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3761072a-2591-4a3a-a3f1-9b6e161658ec",
        "cursor": {
          "ref": "a088f2d9-2bd6-4e15-bb6a-1c9286a7afdc",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "034890a8-910b-4d6d-a9ca-e3ef77969fb8"
        },
        "item": {
          "id": "3761072a-2591-4a3a-a3f1-9b6e161658ec",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1f04dec8-54fd-4c7c-9adb-bd2241ec5e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da108ab8-75d4-48c6-8067-f78f5aa6ded0",
        "cursor": {
          "ref": "1cfa4a0d-eaa3-4dd4-8ae7-9bdc80ddc177",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "04aee3fa-8ef2-4303-bbb9-9af9fff8e3ad"
        },
        "item": {
          "id": "da108ab8-75d4-48c6-8067-f78f5aa6ded0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "10b52a98-ab60-4f1a-999b-2e884ccf7213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de6f74f-1c2e-45e3-b6a0-e686770eef58",
        "cursor": {
          "ref": "03302a3e-3a9b-41ef-bde7-c0196606f74d",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "64a1517e-d1f8-4d93-8e1a-775fb49ee490"
        },
        "item": {
          "id": "6de6f74f-1c2e-45e3-b6a0-e686770eef58",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1549d8da-d1b7-4dbc-996d-88ca9b6df6e7",
          "status": "Created",
          "code": 201,
          "responseTime": 780,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "414259a0-1580-4a63-917c-fc41c82f85d7",
        "cursor": {
          "ref": "1d3d1647-b391-4376-a93e-9f1f9c9d0e2a",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "65219f8a-5f9f-4cf2-961d-965201f42c4c"
        },
        "item": {
          "id": "414259a0-1580-4a63-917c-fc41c82f85d7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d720344d-c252-4c24-b3ae-3edfd749738a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284079d4-c123-4ef1-82e2-f517b66c984e",
        "cursor": {
          "ref": "3d829282-48d7-4000-b5d2-dddbf4bd8dc4",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f70e513e-dd94-43fc-8819-33094ba2dc6f"
        },
        "item": {
          "id": "284079d4-c123-4ef1-82e2-f517b66c984e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5c062ca5-f78c-457a-9461-18ef601a0e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451c2f88-781a-434b-b58c-5bba5eb6feae",
        "cursor": {
          "ref": "d680780b-538e-4fdd-81a9-d60f852471a4",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f642ac7e-227a-4712-bc36-54958e988323"
        },
        "item": {
          "id": "451c2f88-781a-434b-b58c-5bba5eb6feae",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "49c0e8b3-a218-4f09-81e1-8846ae430a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698c39a9-18dd-413e-97d3-1a5da1b59357",
        "cursor": {
          "ref": "a21c9553-fa79-43db-ae5c-627b58483d0b",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3ddf7a6a-be07-472a-8c15-c8fcdf688e31"
        },
        "item": {
          "id": "698c39a9-18dd-413e-97d3-1a5da1b59357",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5db83685-0502-45a9-8c7e-219d41d75d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d195f78-857b-44b7-9224-04aecba77738",
        "cursor": {
          "ref": "a831ac57-1663-46a5-a6e3-538b5fc5f34a",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1a09623b-93c6-4235-b4c6-c5eb2bc04fdf"
        },
        "item": {
          "id": "3d195f78-857b-44b7-9224-04aecba77738",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "40df3ccd-cc2b-4e83-b163-27bc7fc5bb99",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "eeab7b4f-192c-4591-8b00-52029930825d",
        "cursor": {
          "ref": "226f853f-ee0c-4956-b4d1-5fc7e35536ab",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bfe2d33f-f327-473a-821b-4aaa2e10eec4"
        },
        "item": {
          "id": "eeab7b4f-192c-4591-8b00-52029930825d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e985b9c8-efc3-4c88-bdb6-e0173fcdb677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85bb612-6a2e-4396-b96c-7a37c3fe2380",
        "cursor": {
          "ref": "077ff1eb-5ce6-4678-8ae2-4e87600459f4",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dead1d6a-5b16-47d3-825a-7d213237c30c"
        },
        "item": {
          "id": "c85bb612-6a2e-4396-b96c-7a37c3fe2380",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "42b954d4-3cff-45fe-b5a6-40ffbe00f0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88e17c7-d26f-4279-a084-fca04749f35e",
        "cursor": {
          "ref": "590fd050-d3db-46bd-a2b0-1735b7a5f684",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "11e4b405-e10c-4e66-9b20-ce5c4af3e3bb"
        },
        "item": {
          "id": "f88e17c7-d26f-4279-a084-fca04749f35e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "edcc3d44-a19d-4fc5-a4b6-c2a4a750f379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab2f908-5430-4ef3-a55b-91b888395cde",
        "cursor": {
          "ref": "b8473646-ccf1-4d6e-a0cc-967944491e29",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5a9cfe73-b5d7-41bd-bdff-a2badc16a4fd"
        },
        "item": {
          "id": "0ab2f908-5430-4ef3-a55b-91b888395cde",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "160a20c6-5b50-4356-8d43-fab27ef9cc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99de4d0b-4558-48cc-bb1d-0a41f68f49cd",
        "cursor": {
          "ref": "46470cad-d2fb-4a99-9537-0a7f45b645b9",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6194bec8-7052-4138-83d5-b20dd88500a0"
        },
        "item": {
          "id": "99de4d0b-4558-48cc-bb1d-0a41f68f49cd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fb0d5d37-940b-4e7e-b871-6ae3596de029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48fc5280-3821-4223-b8be-cdfccb3e1d5f",
        "cursor": {
          "ref": "d4abaae4-5ad0-4d00-856b-c962cb045b89",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e4682d3d-a8db-4fcc-897c-221ecad0bed3"
        },
        "item": {
          "id": "48fc5280-3821-4223-b8be-cdfccb3e1d5f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "690da440-5829-465a-ad77-2a2ce14fd5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf30460-fe86-4da2-a79f-002a3c9e3352",
        "cursor": {
          "ref": "971fecc3-846f-43d1-99b6-5195e111468d",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1712ab91-b63c-44e0-881c-c937bfacb7e0"
        },
        "item": {
          "id": "7cf30460-fe86-4da2-a79f-002a3c9e3352",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5418bf9e-0896-4880-a6bf-419d70c0cc54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65ffba7-41e6-4e4b-b3d8-86c824895985",
        "cursor": {
          "ref": "f0273d6f-5ea2-4030-a1fe-a77c766f0f44",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "72e2974a-445e-4ecd-b98d-345c77f08bdc"
        },
        "item": {
          "id": "c65ffba7-41e6-4e4b-b3d8-86c824895985",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6c4cfa75-7276-4b2f-8aa3-67963dd0e591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9fed9d-aabc-43df-b3e1-27833dbf5115",
        "cursor": {
          "ref": "e3e62445-79ea-4165-8a63-e13b539583dc",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4eb78305-645a-425d-90e9-4c149d817968"
        },
        "item": {
          "id": "9a9fed9d-aabc-43df-b3e1-27833dbf5115",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9a37e233-c1ec-4008-82fa-54f7438afc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87982ce9-c4e4-4b2e-a173-ce57e0c5a57f",
        "cursor": {
          "ref": "4ce4f6d3-7937-4021-9e9a-511e5244a0ff",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "34b04525-3c3f-40fe-9777-2b52b9bbd7e5"
        },
        "item": {
          "id": "87982ce9-c4e4-4b2e-a173-ce57e0c5a57f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b5a0f995-4411-407d-ad7b-f7aa3d6f817a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3d633c-1819-430b-a47a-982aa70cb1b7",
        "cursor": {
          "ref": "442bb6b9-10af-41b5-96c1-6b365fb1eb51",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b55f9d2f-4ed4-439d-86a1-4d73db6e398a"
        },
        "item": {
          "id": "5d3d633c-1819-430b-a47a-982aa70cb1b7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "aca91b6c-b0ee-4024-9437-69add166c102",
          "status": "Created",
          "code": 201,
          "responseTime": 460,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "884ec4cd-3233-44cf-a540-8480413b6264",
        "cursor": {
          "ref": "31aa8515-7d46-4e25-959f-61b3713420d6",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bf8e2991-9efa-420f-b30f-d131df140b76"
        },
        "item": {
          "id": "884ec4cd-3233-44cf-a540-8480413b6264",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3dca3c24-2bbe-4a91-9d0a-a6b55b10abe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44801541-c479-45bd-bed7-4100c32edab0",
        "cursor": {
          "ref": "e2e3e905-30f5-48dd-a816-5ca5089f207f",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "389e7154-3c8c-45f8-999b-f3a8fd2b167b"
        },
        "item": {
          "id": "44801541-c479-45bd-bed7-4100c32edab0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6baf922f-34ee-482f-811e-99a1c03a112d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d026d541-0cdf-4331-9729-61c376b9d428",
        "cursor": {
          "ref": "712e191b-35d4-4d97-a866-3d6d9055f517",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cff5846c-2a62-47d6-8f19-b9849f40c233"
        },
        "item": {
          "id": "d026d541-0cdf-4331-9729-61c376b9d428",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2264972d-1c29-4150-a959-bdac15861095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473b3ed7-87c9-41c7-ac2c-024429abfd6d",
        "cursor": {
          "ref": "e767bbf1-8981-4319-adbb-1fb2e8871971",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fb8211ba-0258-4bcb-be7e-1bd60804a749"
        },
        "item": {
          "id": "473b3ed7-87c9-41c7-ac2c-024429abfd6d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "25a33fa3-08a3-4f32-8bd4-a43d79ab8b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051bfc4f-afed-4be4-91f3-d7e2cee8c686",
        "cursor": {
          "ref": "c60dfe23-e10e-4901-9d0b-d2b126b45c51",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9672d639-1abc-4db8-a6f8-469ab59a8ee9"
        },
        "item": {
          "id": "051bfc4f-afed-4be4-91f3-d7e2cee8c686",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "73a4e98a-825f-48c1-9cad-0a8956b54573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7886de8-d987-4063-8d42-44511589a653",
        "cursor": {
          "ref": "b23ee517-e7bd-458c-ad70-0fe47c315d20",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "71d5f798-cbf1-4587-b343-96ca86363eb5"
        },
        "item": {
          "id": "e7886de8-d987-4063-8d42-44511589a653",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e199dba5-3a83-4072-a703-c7471013a9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e32967a-6b5c-4af6-8afc-a4a59ef48c98",
        "cursor": {
          "ref": "a09f6419-7ec9-4172-acea-711ab777c075",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c66482d4-998a-4ea6-9733-0c6f82b6b6f3"
        },
        "item": {
          "id": "3e32967a-6b5c-4af6-8afc-a4a59ef48c98",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "97aff105-8876-4ce6-9566-a992349daea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a05b03b-9b9f-4f49-96b6-3a8952e5f61d",
        "cursor": {
          "ref": "319f8343-b5ad-4a55-8ba5-bec3d060a64c",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4dc021b5-aff6-4494-bc28-e045bff681f7"
        },
        "item": {
          "id": "4a05b03b-9b9f-4f49-96b6-3a8952e5f61d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "33ae303f-c7c4-4f9e-9fe3-a51cc7f2a92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31cc19d-98ce-429e-9638-94723ef808b6",
        "cursor": {
          "ref": "e4511192-117c-4a80-b084-435de48598ed",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "676f4d1f-a090-4e56-bc92-0677824ab231"
        },
        "item": {
          "id": "d31cc19d-98ce-429e-9638-94723ef808b6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c26ea482-c757-499a-ad56-1e6d294fec33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0f23ee-ed96-4c82-899d-dc8ee2a95215",
        "cursor": {
          "ref": "a42f64f6-25f1-47c6-a9be-c98ce10b0e68",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "01f49905-5dc2-4725-8cf7-cea1e8c452b0"
        },
        "item": {
          "id": "fb0f23ee-ed96-4c82-899d-dc8ee2a95215",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "88d1f8d1-9e7d-4a73-b1d4-ef6e24509f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade6ebd9-9eeb-456e-9849-abc2987fecb8",
        "cursor": {
          "ref": "314e723c-170e-454b-976a-28c8127c7d3f",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "51d69e6c-2b34-4b8a-93e6-6cf1c8df5eee"
        },
        "item": {
          "id": "ade6ebd9-9eeb-456e-9849-abc2987fecb8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9f558d26-89c2-4791-8e77-d865aaf206df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3735409-2e9e-42d8-b036-0f7f85e35ff1",
        "cursor": {
          "ref": "4bfb655c-4907-46a6-a9c7-3aebb2e1459f",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c4134032-d73d-48f3-8b7c-f6c02f0b688d"
        },
        "item": {
          "id": "b3735409-2e9e-42d8-b036-0f7f85e35ff1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fe497159-f44c-447e-b5d4-7191b352acf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6b9102-3dbe-42e2-b91f-f85980daff59",
        "cursor": {
          "ref": "2492a9f3-16cd-4779-ba88-417a36a88721",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "da75e122-d9b3-40e7-9f03-6ae2fd4e22f9"
        },
        "item": {
          "id": "6e6b9102-3dbe-42e2-b91f-f85980daff59",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "84ca8dd3-8e11-4673-96c4-5d0ec8a8835f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "21667a80-5310-421e-8862-b88f98f14231",
        "cursor": {
          "ref": "8b5a1201-35fb-4a1b-8cec-65e4c1b38416",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7a1eb11c-49d5-49cb-adad-f4e1b66dd029"
        },
        "item": {
          "id": "21667a80-5310-421e-8862-b88f98f14231",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a243e750-dfd0-46dd-bfdc-ea45ba1a5f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984fe166-64c1-4db2-9f7f-1eb56351ecde",
        "cursor": {
          "ref": "af7bffa9-7803-4610-90a8-433530a245cc",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7bf695e6-b5a0-421a-86ea-3c6deb23fe41"
        },
        "item": {
          "id": "984fe166-64c1-4db2-9f7f-1eb56351ecde",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "633284d6-0d9a-4f2b-bcf4-0bee84e5df40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f3de3a-0269-4450-b0bb-be804b31f318",
        "cursor": {
          "ref": "4cd4014d-6aa2-41e7-a45a-da2227d77aed",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c651c9d5-61de-46ce-9281-051c35f66e95"
        },
        "item": {
          "id": "e4f3de3a-0269-4450-b0bb-be804b31f318",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "83b20367-bab2-4bd2-990a-dbb40352ff74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49df7418-52de-4df9-975e-3874ba675dcb",
        "cursor": {
          "ref": "ab972ec6-4aba-4440-8c37-b99ae464ea83",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b80c8fcf-22d7-431d-9e52-48e120650ee7"
        },
        "item": {
          "id": "49df7418-52de-4df9-975e-3874ba675dcb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3ae1ee57-8064-414d-b330-0c8008b84008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef30d7b-c9b2-43e7-931d-ae6eebd58db8",
        "cursor": {
          "ref": "96b8ac38-5783-4b73-b40b-ff7ba5df018f",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "246597c3-6029-4f8b-bb78-21da0ddeba99"
        },
        "item": {
          "id": "0ef30d7b-c9b2-43e7-931d-ae6eebd58db8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "35539a09-964b-4006-a58f-1a332aeb5562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d36f93-6db0-4823-917e-943a4d72fb0c",
        "cursor": {
          "ref": "c0cd8824-d1c7-47f4-a976-7e3f87d15655",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6a7a394e-a499-497c-a89f-35fdf3454a10"
        },
        "item": {
          "id": "a0d36f93-6db0-4823-917e-943a4d72fb0c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0f78711f-bafb-4ba5-8cc3-d8602cb8c2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6852b21a-86d3-4324-b2ee-0f38353a1cdd",
        "cursor": {
          "ref": "dce4d699-5377-4758-af0e-bd818246e87a",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "846ac3b7-6a58-4b2f-a025-1b390cf6cf5a"
        },
        "item": {
          "id": "6852b21a-86d3-4324-b2ee-0f38353a1cdd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f905a861-5e68-49e9-ae33-e8eb0cb766e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "dd147df9-a035-4fab-ba06-a245a74b5369",
        "cursor": {
          "ref": "541d1fb0-4640-4ba5-94f4-25a05f807eb5",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4ad57942-b84a-4ca3-9cfd-04d58a87cd31"
        },
        "item": {
          "id": "dd147df9-a035-4fab-ba06-a245a74b5369",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "46b93674-5a1a-4fa0-92a5-34976631d0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740a769f-2f7b-4e5e-a0d8-6e00f0624972",
        "cursor": {
          "ref": "082f49ff-8ae9-427a-8fbb-943b252eadef",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8334377f-52d2-48ff-810d-6053583be444"
        },
        "item": {
          "id": "740a769f-2f7b-4e5e-a0d8-6e00f0624972",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "87e451e8-b9d4-4d32-a9f6-82bcca3a5420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a0ec59-fbe1-44bc-a600-8093f2109e7d",
        "cursor": {
          "ref": "b6828e28-7dc9-4369-b673-c372e46e0a19",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "160f6228-5c70-4a5e-a5c8-58c62b2329da"
        },
        "item": {
          "id": "56a0ec59-fbe1-44bc-a600-8093f2109e7d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7addaac4-a19f-4b85-98e6-5a9c1be459de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f69d9f-2561-4edb-999d-4d6af991a735",
        "cursor": {
          "ref": "37384ddf-8a8b-4481-8ce0-5ce04d9d39d3",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "436f9c9f-b6a8-4067-8aea-fa5241b7f248"
        },
        "item": {
          "id": "27f69d9f-2561-4edb-999d-4d6af991a735",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ebcecf58-a7dd-4097-a558-5d87defb4d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213b89d2-58b9-4b39-b229-9e8221fbc942",
        "cursor": {
          "ref": "65b48c1e-83f7-472c-bd52-1f46837f50d3",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b0c90142-7eeb-44c4-8339-93fb08fc2121"
        },
        "item": {
          "id": "213b89d2-58b9-4b39-b229-9e8221fbc942",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ae4e7d68-d4e3-4073-8350-fb580d1328b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d491c2c6-a2bc-457d-9d0e-4eaca621d470",
        "cursor": {
          "ref": "98fb3608-5000-4a4a-a2ef-2447e3670b5e",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "309c87bb-a34a-4fe8-abda-1333f7c1321d"
        },
        "item": {
          "id": "d491c2c6-a2bc-457d-9d0e-4eaca621d470",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "401cc5a0-8534-42a7-9e06-ce2632dd45c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645802c3-783e-456e-821d-ef15404035f9",
        "cursor": {
          "ref": "6c3017ef-ec01-4bf2-8a8d-d6246ae3f710",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6814f5ea-62a1-413c-a1fb-43d1b7a90dc0"
        },
        "item": {
          "id": "645802c3-783e-456e-821d-ef15404035f9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "91822ff1-799f-45fe-a771-3d1496f8cba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a09fa9b-f417-48b0-922a-0dfe8025c3d5",
        "cursor": {
          "ref": "37af2c4f-48e5-4c0a-a525-bb45dca9d1d9",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d6ec7995-6a59-48b7-bf0b-a48d44817da8"
        },
        "item": {
          "id": "7a09fa9b-f417-48b0-922a-0dfe8025c3d5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c4bf84c0-3935-4bee-8ca8-8cea6194393b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20aa913-070c-4145-a2e6-35e3b1d76b84",
        "cursor": {
          "ref": "8f898e50-1d23-463b-a0ea-a23d61ec5bff",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "32f1349a-df72-45ac-a015-1d3183a93c08"
        },
        "item": {
          "id": "d20aa913-070c-4145-a2e6-35e3b1d76b84",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "eef31c37-ba2d-4bb4-9772-0756b6916de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fec14eb-f590-4d7d-9d67-8483a65210f3",
        "cursor": {
          "ref": "92ac67a3-4aaa-44bc-bfc0-e1518718b359",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0b3db70a-eef3-40fb-bdaf-8e6ff1cfae14"
        },
        "item": {
          "id": "2fec14eb-f590-4d7d-9d67-8483a65210f3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "04179337-2502-46f7-a8d7-0cd90f29a140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e4dc7d-af62-482d-989a-f4f38bd90f97",
        "cursor": {
          "ref": "43adb91c-2bd8-45ae-9d19-49ae0190a747",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e5c1bd31-7eef-4ffe-b0b6-0c1269d98a57"
        },
        "item": {
          "id": "a0e4dc7d-af62-482d-989a-f4f38bd90f97",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "831ac839-f6a3-448b-836b-d976acd8181a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fcd6ef-905a-4cb1-8c3a-09b6f8d3b198",
        "cursor": {
          "ref": "0ab21f35-3ea3-43b9-ab0d-5104a66a4b96",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "36b17919-fcfd-4641-9d83-fb1d500b238c"
        },
        "item": {
          "id": "13fcd6ef-905a-4cb1-8c3a-09b6f8d3b198",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5125ce2b-2ab8-43e3-9781-97880b3ea1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3fc186-1044-423a-ae2a-6f79b5993eb8",
        "cursor": {
          "ref": "16fbaf1d-0c79-445a-b133-58b28302f5ba",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "251128af-6661-4067-970a-7e7c6e155ab4"
        },
        "item": {
          "id": "0c3fc186-1044-423a-ae2a-6f79b5993eb8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0c348e7e-813b-4ec8-9a02-4c89d489c860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a21f9c6-0cd8-41f0-bbb7-49a7a44569fb",
        "cursor": {
          "ref": "f2e0f0a9-0ee8-4d4f-9789-a107d51de1cd",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "688e72e1-57b9-4e92-a44a-7bea2f7327f5"
        },
        "item": {
          "id": "2a21f9c6-0cd8-41f0-bbb7-49a7a44569fb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1a4695db-0d2a-4ac0-af4f-9f41dab86190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9093d4-c8be-4a64-9dfc-b7c9f7fe7d1f",
        "cursor": {
          "ref": "79e0be50-df95-4623-bb3f-d3749b212669",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d59f8169-5d6e-4615-afca-ceda53d1937a"
        },
        "item": {
          "id": "3a9093d4-c8be-4a64-9dfc-b7c9f7fe7d1f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2d1fe6c8-805e-4aee-bebd-2262c611f1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da7ed92-9e9a-48d0-b966-6251e682e9db",
        "cursor": {
          "ref": "609a4f0d-2de3-4d3a-a443-810e2320812d",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "534cd3a6-55b5-455d-87c2-cc2df604cf35"
        },
        "item": {
          "id": "5da7ed92-9e9a-48d0-b966-6251e682e9db",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f4d20a85-f17d-45aa-96b9-07b3905ae811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31280aa-ea05-4b99-ac60-6bd81c5cff85",
        "cursor": {
          "ref": "b8663ef7-f621-4dc2-9ab4-b6ec2408a467",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6f06168e-0f3c-4dcb-b1d2-1d6d2f6a26eb"
        },
        "item": {
          "id": "c31280aa-ea05-4b99-ac60-6bd81c5cff85",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e9fe1261-a4b2-4a56-a02e-35ec3509c2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2618f939-cedd-4ca5-8dd8-c7b5d8082220",
        "cursor": {
          "ref": "5a4656c3-5221-4498-a956-10077c02b4a4",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "93dceb07-ba2f-4b3c-b1b1-86e028a626b4"
        },
        "item": {
          "id": "2618f939-cedd-4ca5-8dd8-c7b5d8082220",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "acd3b6c4-9200-444c-907f-4fc5ae6e274e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171cf4a0-6857-402f-9d47-8205c7f7998c",
        "cursor": {
          "ref": "ec0957e7-3b65-4d75-a852-7e4050ff9e61",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "092b49b7-b836-4e36-81cb-6a0fdb37029f"
        },
        "item": {
          "id": "171cf4a0-6857-402f-9d47-8205c7f7998c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ee728dad-588f-4802-9533-1d2ff26fe476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955ba0f8-221d-48a9-ba8e-7b9c54db00e3",
        "cursor": {
          "ref": "12bae942-861f-4714-95f4-cc02b4029b97",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2cbc8580-d476-46ba-921e-c4ac803d803c"
        },
        "item": {
          "id": "955ba0f8-221d-48a9-ba8e-7b9c54db00e3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c04fc9a0-61a0-4818-ba45-0ee2bdef5da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacb1a6b-2a25-40e0-a856-7d8e22564e03",
        "cursor": {
          "ref": "35f80537-82fc-45e1-967f-3edd33d69d0b",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a31f65ed-3e8f-4004-a18e-99147e502227"
        },
        "item": {
          "id": "dacb1a6b-2a25-40e0-a856-7d8e22564e03",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2cf9926f-72e7-4f16-bccc-f7d6368b835d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934dbad0-c498-4606-873f-2ce58548b8fc",
        "cursor": {
          "ref": "f0f0cebe-e2e3-4ba5-80e2-54e8315eb7c6",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c76ef8ef-e20f-4547-b171-debaaed5b6c7"
        },
        "item": {
          "id": "934dbad0-c498-4606-873f-2ce58548b8fc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8b213994-7034-40dc-9029-676f526df13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3513fcf-77b5-495f-a26e-dc1fb2ddfe80",
        "cursor": {
          "ref": "84abce4b-91e9-4a0c-af9f-ecc3c9196946",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1b5e852d-4986-407d-b672-79d19cbb99b6"
        },
        "item": {
          "id": "f3513fcf-77b5-495f-a26e-dc1fb2ddfe80",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2a8e2df5-102e-448d-ae24-e8bd0fafeda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fef10e6-dd11-4c56-bc96-485a2f8e3d39",
        "cursor": {
          "ref": "a5a65bc6-e095-4f21-bb1f-4c21922fbab0",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "148ebfd0-9206-41ec-9e6f-a366d2d1ccb3"
        },
        "item": {
          "id": "8fef10e6-dd11-4c56-bc96-485a2f8e3d39",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ba3d4c8c-b329-4aac-8f5a-0d54246b62e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d134c0-a93c-4fca-aa55-991624d68189",
        "cursor": {
          "ref": "d6010a2d-6ec9-477c-a5a7-ca5df11d02f1",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "000f785c-eb5e-4b46-8eb8-bc309b857b63"
        },
        "item": {
          "id": "60d134c0-a93c-4fca-aa55-991624d68189",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "55836f87-7a4b-4be7-b6a6-2db30ff258ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f9a9ba-3a91-48f7-a45e-ff4ebd6c2900",
        "cursor": {
          "ref": "6dcf2182-24fd-4136-9e54-2e5d016a73ef",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1efbe3d5-bfd3-425b-a9b2-2d6de76fe055"
        },
        "item": {
          "id": "69f9a9ba-3a91-48f7-a45e-ff4ebd6c2900",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "54d044ee-23c3-4321-bd1b-6eee59b552f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbef2df4-9e93-4bd5-9550-80018f7ad408",
        "cursor": {
          "ref": "e2c8d316-e7bf-4081-ba11-cc75a6fcecab",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "76f1a5ea-554e-4730-a168-4e70a567d75b"
        },
        "item": {
          "id": "fbef2df4-9e93-4bd5-9550-80018f7ad408",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3fc7ebee-bcf4-4834-9186-26f2a53ba89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b0b54c-373e-48e0-89fb-7e79a8a25e9e",
        "cursor": {
          "ref": "ed32831f-b604-4a5f-af9d-4d0ffdfc50a5",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "03ffb3dd-7be7-4c8b-b317-1a64c4cba086"
        },
        "item": {
          "id": "93b0b54c-373e-48e0-89fb-7e79a8a25e9e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "99f4e5a4-1511-479d-973f-82d8d1a95663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8818f1-84ba-4d5c-882f-9aa39e812500",
        "cursor": {
          "ref": "eea91446-0aac-4eb3-815b-85978e12ed6d",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ab7da066-5f1f-4980-9769-b15141a843d5"
        },
        "item": {
          "id": "7c8818f1-84ba-4d5c-882f-9aa39e812500",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7beaf445-45ae-4535-b892-d86f8303b3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810f63b7-8231-43a0-8de1-2cc8023e9060",
        "cursor": {
          "ref": "04c994fc-75ec-44db-a182-9ce742445ea6",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "568a617d-dc4c-44ea-ba52-febd37cc4d79"
        },
        "item": {
          "id": "810f63b7-8231-43a0-8de1-2cc8023e9060",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3278df26-dde5-46d4-b580-cce549b7b541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebc1b00-6ff8-41a7-a82b-ec83a257227a",
        "cursor": {
          "ref": "8f76c2df-5553-4a7b-bcd4-d1b99bf99a0a",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "95419784-2083-4d55-bafb-a2bfc867534f"
        },
        "item": {
          "id": "aebc1b00-6ff8-41a7-a82b-ec83a257227a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "08fbcae0-1490-478f-98d7-363b0ccdf010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c0a972-7275-4531-bda6-4bdff973b4bf",
        "cursor": {
          "ref": "480e7eb4-30ff-48d3-abe6-ab2976bc5266",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a1e805f2-ff22-455e-8888-e44f76d25535"
        },
        "item": {
          "id": "20c0a972-7275-4531-bda6-4bdff973b4bf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c94c453d-4b18-4187-ada8-75f4f089fae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d911a536-73e1-450e-a37f-6801073a597e",
        "cursor": {
          "ref": "666ed4d0-3c50-4e90-a888-feec733bafc7",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7a97583f-1348-40fa-85f8-030d87d870a2"
        },
        "item": {
          "id": "d911a536-73e1-450e-a37f-6801073a597e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4409d62d-c05f-454a-85aa-ce8f144d07f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001510e7-dbdb-4a51-b74b-8de466b14cc5",
        "cursor": {
          "ref": "36687428-73c8-4928-b9a5-28f05d0e6008",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b5956cdb-eb6b-42b6-8767-3e8e5d05a353"
        },
        "item": {
          "id": "001510e7-dbdb-4a51-b74b-8de466b14cc5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e5c8b3d4-7965-4670-919a-aacb470932ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea18928-5e28-4dd9-99f7-7337bd253753",
        "cursor": {
          "ref": "784f8521-adc2-4cdd-b5cd-8b6936c5ca55",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b93807d5-6b25-4443-a6b9-d0d20f70a2d0"
        },
        "item": {
          "id": "5ea18928-5e28-4dd9-99f7-7337bd253753",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "56822721-78e4-4374-9570-b8a9812811fa",
          "status": "Created",
          "code": 201,
          "responseTime": 394,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "f0876862-ed9a-4a04-92a7-6eb01f7fa594",
        "cursor": {
          "ref": "0cde10a2-e274-4bab-84b9-b45961c68e61",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4272a7ae-d669-4b22-9aaa-c96e12e4027a"
        },
        "item": {
          "id": "f0876862-ed9a-4a04-92a7-6eb01f7fa594",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "223757e8-3271-4f06-823e-d7b554843890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38e36dd-b0ab-4569-a006-a80d6c2283a5",
        "cursor": {
          "ref": "244a6887-b2ee-4520-a6fc-f7b41ed7564f",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b1378e45-7be9-48d5-8b67-a675538df6bd"
        },
        "item": {
          "id": "c38e36dd-b0ab-4569-a006-a80d6c2283a5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c8fe6e5e-2b37-4023-bba6-7c42adb19a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a956b51d-a606-46c2-8916-0715824aee12",
        "cursor": {
          "ref": "47641411-37a3-481c-b57f-fb22e89ed9dc",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "932aaa7c-0db5-4188-9b31-f43b14cdea6e"
        },
        "item": {
          "id": "a956b51d-a606-46c2-8916-0715824aee12",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1fe4ffcc-e048-4cdf-9120-8a81abfbd562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0907a90e-acdf-4e23-87cb-b6e35a2a3b19",
        "cursor": {
          "ref": "bcda68ce-640f-4800-8f77-c6e2ab5e3cdd",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "eabcdd06-c313-408a-9f60-0ab64907e8ca"
        },
        "item": {
          "id": "0907a90e-acdf-4e23-87cb-b6e35a2a3b19",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ea240ea9-c804-4b2b-8a35-66912c888263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3ea7e7-9a62-480a-9136-7af301b2ebf9",
        "cursor": {
          "ref": "32cd99fb-bb1e-476e-a067-cc68f8467d4c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5daa7c26-0e02-4d5c-81e0-7b3bf9964bde"
        },
        "item": {
          "id": "6d3ea7e7-9a62-480a-9136-7af301b2ebf9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "963dcd28-e1d0-48ab-946b-bcabe97ed6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2bbaf4-434e-47f4-b312-855bf5975842",
        "cursor": {
          "ref": "49b44755-ef8a-4a5c-9a32-fdf38fda4177",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "13ad853b-2c46-4e49-939c-5b80855006bf"
        },
        "item": {
          "id": "3f2bbaf4-434e-47f4-b312-855bf5975842",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "88a2a308-1b25-4139-bf3d-20107bbfd48a",
          "status": "Created",
          "code": 201,
          "responseTime": 524,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "ddad816f-2be5-42c3-9d14-351ac7d2456f",
        "cursor": {
          "ref": "26e44426-0817-4249-9250-482f66ca0e54",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2ad011bb-fdf2-4989-a4ce-660a51c2bd16"
        },
        "item": {
          "id": "ddad816f-2be5-42c3-9d14-351ac7d2456f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2843f047-5dfc-4ae3-861e-6d80bf3f4b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56790b16-f3bb-4080-98eb-f5ff2eb9e9d4",
        "cursor": {
          "ref": "454a0449-042b-42d0-a068-12077d7a16ee",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d3d05197-c6fa-4b11-a164-8ff0b4aa7edb"
        },
        "item": {
          "id": "56790b16-f3bb-4080-98eb-f5ff2eb9e9d4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "29e9365d-e0dd-4a02-a3a5-3c361e4fe407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092bfeaf-0a9f-4889-a63e-8b9d81c1fb37",
        "cursor": {
          "ref": "d4119fd2-b4d6-4081-8067-e583698d32ab",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cca0b8dd-325b-401b-a6d0-847abd5abf10"
        },
        "item": {
          "id": "092bfeaf-0a9f-4889-a63e-8b9d81c1fb37",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9ad2c5cd-34f0-4212-80f7-55ac539dfaf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c199841f-fb87-4afa-9f1f-9bab4943543a",
        "cursor": {
          "ref": "e2899e35-f270-40e7-a8ec-9d3d2d47dcac",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1e0d6e0a-6776-46dd-a2d6-f9d5764a4438"
        },
        "item": {
          "id": "c199841f-fb87-4afa-9f1f-9bab4943543a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bff94bc0-cecb-467a-9c12-0102cfa2cfa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8dea39-0d1a-44af-bd58-f38dc8ae3abd",
        "cursor": {
          "ref": "fbb51182-4ba9-47fe-b37c-0f43e3269348",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d4145f29-a3f8-45e1-9aea-97ca0ef15e15"
        },
        "item": {
          "id": "9c8dea39-0d1a-44af-bd58-f38dc8ae3abd",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "db75e9e8-5f93-4798-b393-f3cb7845ed24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd472364-cdcd-4153-9c69-4cf407d5ef24",
        "cursor": {
          "ref": "76fdbf55-d93d-44c6-a78f-7cfade67687e",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "229df1cf-99df-4385-9c1d-b129735060e9"
        },
        "item": {
          "id": "bd472364-cdcd-4153-9c69-4cf407d5ef24",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "43cbc95b-51d6-4288-b288-90a5e7e25b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496192c2-1b11-4750-a73a-7e152151e755",
        "cursor": {
          "ref": "a862c0d8-07a3-4ded-b346-960138677b66",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7b1d5c56-367c-42da-b0a6-1ef3b7a4243f"
        },
        "item": {
          "id": "496192c2-1b11-4750-a73a-7e152151e755",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0b028a1e-2369-4817-880f-685d90406587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135517a6-b514-447a-a066-04f93b172401",
        "cursor": {
          "ref": "13bf57ce-e6db-49d9-a2b8-55f32e729870",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9bb38375-74a3-4ed7-8e4d-256d0b6eb7b9"
        },
        "item": {
          "id": "135517a6-b514-447a-a066-04f93b172401",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f66da2fb-c274-492e-89f0-5f12ba1bb0e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5689238e-0083-42c1-85c9-c51a7279c957",
        "cursor": {
          "ref": "5144a653-a973-49b3-91ba-e029822d8eb7",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3c902c8c-059a-4ba4-989e-4eb438f16408"
        },
        "item": {
          "id": "5689238e-0083-42c1-85c9-c51a7279c957",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "38755651-caac-4d86-9373-6ffb1f10f8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "c4074a91-9031-47f2-a054-d854481ce731",
        "cursor": {
          "ref": "db78b204-042b-465b-b1d0-377bc7c4f0d8",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "45c0b6ea-432b-49b2-9a1e-7ec84277b745"
        },
        "item": {
          "id": "c4074a91-9031-47f2-a054-d854481ce731",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7d58182c-a40c-4d13-94cc-3bbfb89a8b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "2fee31bb-6a14-4a0e-aa42-b9fb96dc501a",
        "cursor": {
          "ref": "afada720-be49-4daf-997f-8b598e481584",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "52eb8bbb-a4bc-444f-9b4c-6470de26df5a"
        },
        "item": {
          "id": "2fee31bb-6a14-4a0e-aa42-b9fb96dc501a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c6063f98-6f03-4664-b495-811ba02f094c",
          "status": "Created",
          "code": 201,
          "responseTime": 445,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62fd0be-5a5c-43c6-9cc6-8e1981777677",
        "cursor": {
          "ref": "1b493c4b-23ef-4235-aa2e-17651822067b",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7b2c1423-4a34-42af-9c9b-f59cb01a8067"
        },
        "item": {
          "id": "e62fd0be-5a5c-43c6-9cc6-8e1981777677",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "5387327a-ef0d-4b7d-bbe5-4bd8ea94c3ab",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15cbbfb5-be38-4df6-a097-33fe66ba0b0d",
        "cursor": {
          "ref": "bb96626b-463e-480f-8cda-37bc4b8710b5",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "61595785-f2d2-4dd0-a2c1-60df1a684409"
        },
        "item": {
          "id": "15cbbfb5-be38-4df6-a097-33fe66ba0b0d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "72d014d7-6732-4ef8-bbe4-ad4dc8109cfd",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a3bb00-c47b-4141-b2b4-d7fbb116a4bf",
        "cursor": {
          "ref": "f9e87c73-0806-48b4-913f-b4c5740efd7a",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e592907d-5e29-44e0-92fd-aad6c70878fd"
        },
        "item": {
          "id": "01a3bb00-c47b-4141-b2b4-d7fbb116a4bf",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "be7dc877-6b15-4874-8fa0-bc697f440f5b",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed77d1d-8e67-4e19-afa3-c3caba257023",
        "cursor": {
          "ref": "237f920c-7917-4d3c-a62e-fd28bb3156bd",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0a801cbb-87cd-4abc-b3ad-3e940baec7eb"
        },
        "item": {
          "id": "4ed77d1d-8e67-4e19-afa3-c3caba257023",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "52affd00-6cd7-4f0c-a897-071cbec0db46",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f3efb3-9805-41a4-a25c-b57ab7e69a8c",
        "cursor": {
          "ref": "3985785c-68a9-475a-88c6-5b0b610bf5e1",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e263846c-80ea-4ef2-9c18-5d2f4b060990"
        },
        "item": {
          "id": "54f3efb3-9805-41a4-a25c-b57ab7e69a8c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "26269baf-f470-421b-bf73-8a2bddb9bdf5",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78e3f91-1870-4670-9311-c803bb88090e",
        "cursor": {
          "ref": "05b47c43-9ab1-48bc-aa13-c7a13484b8dc",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "575b1c60-cb1b-44e9-930b-25dd96e8c6e0"
        },
        "item": {
          "id": "d78e3f91-1870-4670-9311-c803bb88090e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "45d948b4-86bf-4ae1-8bf6-2465d4770d66",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "d78e3f91-1870-4670-9311-c803bb88090e",
        "cursor": {
          "ref": "05b47c43-9ab1-48bc-aa13-c7a13484b8dc",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "575b1c60-cb1b-44e9-930b-25dd96e8c6e0"
        },
        "item": {
          "id": "d78e3f91-1870-4670-9311-c803bb88090e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "45d948b4-86bf-4ae1-8bf6-2465d4770d66",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "751532da-7fec-4371-ae49-0f26bdb4e3f9",
        "cursor": {
          "ref": "8797ae9f-afdc-43de-9dcf-649f2e7370a0",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "652574de-a71c-45e7-a89b-98039108dd85"
        },
        "item": {
          "id": "751532da-7fec-4371-ae49-0f26bdb4e3f9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ffdcedd3-4169-4354-9ddb-d5248dc92598",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "554251c4-7778-4a4a-ae92-ee49a805bde3",
        "cursor": {
          "ref": "3bb8c671-226d-49d7-9fe2-2839a143910c",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5c807223-dd66-4b60-9de7-dc279463caaf"
        },
        "item": {
          "id": "554251c4-7778-4a4a-ae92-ee49a805bde3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9eb6fec3-0096-40a4-a628-280a6b43c3ad",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "2358773d-30c9-417c-8812-442d1c42d340",
        "cursor": {
          "ref": "f5321edf-a6e4-4be8-8777-26db080e8013",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4445e437-6d70-47a8-822d-e3c7ca700079"
        },
        "item": {
          "id": "2358773d-30c9-417c-8812-442d1c42d340",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6bdf6998-bd42-47e5-bfc5-21556f5b7c8a",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ab565019-71bc-46d4-8462-aa1efa9b3759",
        "cursor": {
          "ref": "fdfaec5a-83e3-4e52-a0ee-d74f6380a98d",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "997d88a7-fc99-46b9-9f2c-87c9813cfd24"
        },
        "item": {
          "id": "ab565019-71bc-46d4-8462-aa1efa9b3759",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "164e5986-fb48-492c-a6a4-f3c7a9b2118f",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "0f1e0318-0522-4874-aeba-76c340e2602a",
        "cursor": {
          "ref": "c8f50b33-f4a4-4cd7-aa3c-44401d76ed72",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6d27e963-fa2e-4cb5-8863-89744779bac1"
        },
        "item": {
          "id": "0f1e0318-0522-4874-aeba-76c340e2602a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "79b215d4-f7bc-4e9e-8fd2-9cdb62b7eefb",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "10510d17-c6af-40ea-982b-1fbc118afc2e",
        "cursor": {
          "ref": "85352e0e-2731-4b44-a06c-f530edaac1fb",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0c9b80ff-6000-41e8-9306-d3a8b6b0c51c"
        },
        "item": {
          "id": "10510d17-c6af-40ea-982b-1fbc118afc2e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ab91e9b2-f822-481e-b7a7-03f2f6c2fd7d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "39338679-0d5c-4e1a-9226-d83bcd323b8c",
        "cursor": {
          "ref": "0d173e51-4852-4fb8-abfd-87a0d8cf30d7",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c6238a5a-93a9-43d7-9215-c61447d031bc"
        },
        "item": {
          "id": "39338679-0d5c-4e1a-9226-d83bcd323b8c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b67c9a94-eedb-4b76-912b-4fe0830f17a6",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "6e2c56cc-fa21-4505-b6f3-30d709144826",
        "cursor": {
          "ref": "76f8f00e-6ca6-4ece-bf6b-a9e7028ce49d",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7cabd985-7439-4c28-8274-d18c48b94fee"
        },
        "item": {
          "id": "6e2c56cc-fa21-4505-b6f3-30d709144826",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "592bd133-bab1-4ff9-9c72-1205a8be052e",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9595c005-f46c-465f-8379-f858cbfb8847",
        "cursor": {
          "ref": "f827c372-8ebd-40d0-9ad8-6285a7a9ddcf",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "687cbe62-0424-4277-806d-8f5a8f1b609c"
        },
        "item": {
          "id": "9595c005-f46c-465f-8379-f858cbfb8847",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8bd2075c-0f62-4794-8022-6f579346edf3",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "bb87126b-422a-48da-802a-d8cc4051d08b",
        "cursor": {
          "ref": "1fb92fe5-b2a2-47e7-9a4a-4bff4a1deac4",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "06515287-87cf-45cc-9ffb-a58ae3e57c66"
        },
        "item": {
          "id": "bb87126b-422a-48da-802a-d8cc4051d08b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cbe3821f-d643-4ca1-b7a2-5a86f31aa9b6",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "c0c31c1c-1ce7-421f-9d75-dc52853316a7",
        "cursor": {
          "ref": "67535edb-d83b-4da4-9417-d597ed0a73dd",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f7067e54-24bf-434f-92d8-2703da620bd7"
        },
        "item": {
          "id": "c0c31c1c-1ce7-421f-9d75-dc52853316a7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b2568547-9584-4f49-abd5-a8f12cdfefad",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "fe7703fe-c9a9-47ef-9316-77ae4d680a57",
        "cursor": {
          "ref": "b289a038-d916-4418-a421-0f7b25493935",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0877cf6e-4b16-484f-836a-b280da37dafc"
        },
        "item": {
          "id": "fe7703fe-c9a9-47ef-9316-77ae4d680a57",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2d647d34-b394-4d51-b264-b2ce38032ff5",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "363c6827-c329-467f-aa87-99d6d429a785",
        "cursor": {
          "ref": "142c2188-d234-46d5-bc1d-6fa98c8f8742",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9136a03b-6034-4038-aed3-d3d4fb987d21"
        },
        "item": {
          "id": "363c6827-c329-467f-aa87-99d6d429a785",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8c8c8359-7954-4fd5-95bb-ac857ffe2cf6",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "5c4ab835-1e9b-46e3-957e-aa9cedb59de0",
        "cursor": {
          "ref": "4d6e0520-5481-400c-95b1-88cfa9afe94c",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2e44c981-aa37-4291-b014-2df3b7a85063"
        },
        "item": {
          "id": "5c4ab835-1e9b-46e3-957e-aa9cedb59de0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "44179503-198b-413c-9fe7-50d5dfe56904",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "ff144ed6-a4ed-470e-bf52-6d287addba15",
        "cursor": {
          "ref": "b952b0ab-feab-409f-a5a4-e1fa15e9efb0",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f8177be5-20ac-4ed7-91af-74b7efa1f489"
        },
        "item": {
          "id": "ff144ed6-a4ed-470e-bf52-6d287addba15",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "27ed8439-976b-4e9e-a13e-06dd6cfaa116",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "a78a06c4-aae2-4b4f-9c11-9afc285da894",
        "cursor": {
          "ref": "bef6650c-48ec-4119-b4c2-99f2c9789072",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bd8c535f-4af9-4949-8618-d42d2e66f33a"
        },
        "item": {
          "id": "a78a06c4-aae2-4b4f-9c11-9afc285da894",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9d069274-7129-4bf6-959f-5bc8908bd68f",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "4060aa9f-d608-4001-816f-707f63391599",
        "cursor": {
          "ref": "b5257e2e-894a-495f-b5cf-ec36f85e2740",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fc891b23-1f89-4803-8134-a0af8ba6bcd3"
        },
        "item": {
          "id": "4060aa9f-d608-4001-816f-707f63391599",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2f6b8060-6500-4baf-99ff-f02c16640c8f",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5276c8b8-53ae-4aa6-bb15-3f61beb89211",
        "cursor": {
          "ref": "70b10afc-caa3-433a-bfc5-20f5c92596b3",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "bdd9d768-1bf1-4943-8775-0989d5254230"
        },
        "item": {
          "id": "5276c8b8-53ae-4aa6-bb15-3f61beb89211",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e345de62-77bb-4fbe-95c3-17b4609af730",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "8def6bef-9261-4731-8b48-cb1ae605a307",
        "cursor": {
          "ref": "a7454108-c285-4e38-8880-4be4d6050efd",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "302e273a-e879-4fa5-87a3-8f0b158f3035"
        },
        "item": {
          "id": "8def6bef-9261-4731-8b48-cb1ae605a307",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2cae169b-a285-4ce9-b5b4-a988f0b348b1",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "2c57448a-16eb-4213-82cc-fa5593b80bb8",
        "cursor": {
          "ref": "eb464cba-eba8-40fe-a8ae-4680255692fa",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c8835fcf-958d-40e4-b5c7-cdf8dc00ff73"
        },
        "item": {
          "id": "2c57448a-16eb-4213-82cc-fa5593b80bb8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "90a9fe45-f910-4771-b9c0-f4f55315f472",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "88ded6c1-0b83-469a-b319-8953340f9cac",
        "cursor": {
          "ref": "4c893b31-56a1-49b9-ba09-049dcab09051",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "929fe560-4c6e-4c92-b23e-11228430c134"
        },
        "item": {
          "id": "88ded6c1-0b83-469a-b319-8953340f9cac",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c8149756-f6fb-4728-ac2b-f863ce1a0750",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "0ab4f08c-b315-49f0-a4e2-c7142dd32119",
        "cursor": {
          "ref": "7b9dfdfa-94c4-4451-9d70-d3cb2955df66",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c1c13efa-e32d-4d7e-86bb-24245a677c39"
        },
        "item": {
          "id": "0ab4f08c-b315-49f0-a4e2-c7142dd32119",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "208460f8-6219-4f6b-a288-1640edefa1b4",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8163913a-4c72-4431-bdb8-a2a5c570b026",
        "cursor": {
          "ref": "c2271248-3897-437c-827b-675d809ba271",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "214a2a2d-2c12-460c-835d-4e5fa4152750"
        },
        "item": {
          "id": "8163913a-4c72-4431-bdb8-a2a5c570b026",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9503218e-d7ff-4c62-8237-cda38cba5c64",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "1d58e26c-d516-4f7e-8a04-ad9817bcfd25",
        "cursor": {
          "ref": "898e7565-bcff-4b08-a4ec-d33007dee656",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b0f42cef-9f3f-4731-a13f-641c94494003"
        },
        "item": {
          "id": "1d58e26c-d516-4f7e-8a04-ad9817bcfd25",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fabb61dc-10ca-4818-a9f8-6dca63b6595a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "0d75fc65-10ef-49fd-9c08-fbff6ed3f869",
        "cursor": {
          "ref": "09161556-1e3a-4c43-a494-fc3c77dcfe9d",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0d5e799c-4f3d-45ee-8988-cc32c3fa2d67"
        },
        "item": {
          "id": "0d75fc65-10ef-49fd-9c08-fbff6ed3f869",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0fa0cc5e-d44b-47bf-aba1-b274aa9351f2",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "02c6e2dc-9c24-4bf7-88b2-7e7f0813d1fa",
        "cursor": {
          "ref": "ecbf43a3-62d8-4f4e-80b5-ea276ec3b109",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7132e1cc-0aeb-4f50-9bcd-1ee94c7bd4f3"
        },
        "item": {
          "id": "02c6e2dc-9c24-4bf7-88b2-7e7f0813d1fa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2e0c47f1-febf-45e3-b7e5-22e554542255",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9ff4829e-1262-4659-84e4-95300a2acc25",
        "cursor": {
          "ref": "bd146c05-43da-4787-8257-56a7394eaade",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f3ae6844-9c77-449d-a7e2-46cc3a83209a"
        },
        "item": {
          "id": "9ff4829e-1262-4659-84e4-95300a2acc25",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "81b68fe2-5812-4c63-82b0-749c732a18f8",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "404a7de3-8e65-4455-b46b-97d4a78e3f94",
        "cursor": {
          "ref": "dbb3cb91-b66f-4a8a-b049-de1bfdbf7543",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "19b276ae-9b61-4e9b-9e74-e915a8863c0b"
        },
        "item": {
          "id": "404a7de3-8e65-4455-b46b-97d4a78e3f94",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d9132991-c787-478b-9aa8-7197b81741f9",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5391387d-b57b-4b7e-8c0d-45f134a7dbb9",
        "cursor": {
          "ref": "49e466b7-4044-42b8-a1d6-9ee8a039cbf2",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a879dcf3-a423-49f3-a71d-f7ae91e543fa"
        },
        "item": {
          "id": "5391387d-b57b-4b7e-8c0d-45f134a7dbb9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "043067a9-90fa-46d2-a7e9-a0ed98978cdc",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c24b4b4a-a6e1-4831-a336-d0b852590b50",
        "cursor": {
          "ref": "66badb19-8c1e-45d1-8ca8-16ba000c0e17",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2b66e98f-8bbc-45f7-bd61-ae0598376390"
        },
        "item": {
          "id": "c24b4b4a-a6e1-4831-a336-d0b852590b50",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a29d8b11-e4df-4f14-ad41-4d0d402ec134",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "126f00dd-9aaf-4bbf-ada1-a3f8642287e8",
        "cursor": {
          "ref": "835fde56-37ee-4c91-b8e0-4417bdfc6724",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c88057c4-8e90-42bb-a438-5adb3466ca51"
        },
        "item": {
          "id": "126f00dd-9aaf-4bbf-ada1-a3f8642287e8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "166d148f-7d6d-465b-ac83-ac1fa935ed21",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "0463e7cc-518c-4c99-a5bd-726979c68158",
        "cursor": {
          "ref": "97d16071-9fb9-4f46-960e-31b5ca86bd4f",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4c2b49ca-3587-43b4-9dae-a49d6bf8119e"
        },
        "item": {
          "id": "0463e7cc-518c-4c99-a5bd-726979c68158",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "602adbf2-eaaf-4a9a-8cf9-dc72724d4617",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee893e36-2bc7-4fc6-b748-ec6b9fa58e5c",
        "cursor": {
          "ref": "4668fb37-0f94-42db-b9e4-eb0420f6db3b",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bd52239f-a177-40e0-88eb-06297d7573ba"
        },
        "item": {
          "id": "ee893e36-2bc7-4fc6-b748-ec6b9fa58e5c",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "0d906735-5cf6-456f-b549-504298bb4f0c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1b2e68-00d6-4077-9b69-e2bc9a39bb3f",
        "cursor": {
          "ref": "3cc5dfb2-f201-434f-af96-bbf8bfe7f79d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "29d31fc3-bbeb-42f3-8bf5-a2654bc6579b"
        },
        "item": {
          "id": "ad1b2e68-00d6-4077-9b69-e2bc9a39bb3f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4f4e536f-cb24-4359-afb6-6c87953f5c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1b2e68-00d6-4077-9b69-e2bc9a39bb3f",
        "cursor": {
          "ref": "3cc5dfb2-f201-434f-af96-bbf8bfe7f79d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "29d31fc3-bbeb-42f3-8bf5-a2654bc6579b"
        },
        "item": {
          "id": "ad1b2e68-00d6-4077-9b69-e2bc9a39bb3f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4f4e536f-cb24-4359-afb6-6c87953f5c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523a8243-d796-4e32-8331-4e77c131e37b",
        "cursor": {
          "ref": "1a0461ae-ce85-44d7-a27f-5d1bb16165bb",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6799e37f-4491-4631-b3d2-27beaa271808"
        },
        "item": {
          "id": "523a8243-d796-4e32-8331-4e77c131e37b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2fbd0a29-5f94-42a8-b253-6961cece183d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99b9f33-0268-4fec-8a60-337e6aebe9ee",
        "cursor": {
          "ref": "1602a317-6bd0-4eff-9c72-dc9011d6bf85",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "705264bb-c936-4b4e-a762-9d58ac7f3fbe"
        },
        "item": {
          "id": "b99b9f33-0268-4fec-8a60-337e6aebe9ee",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3adf1907-2019-4105-95d5-f1a5dbdf3623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681946bf-245f-47f4-8517-b068270728a6",
        "cursor": {
          "ref": "e9829d7b-6d14-4354-b40a-5e20d41c85e9",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b242aecc-b3bb-422a-bffe-6a89180c41ee"
        },
        "item": {
          "id": "681946bf-245f-47f4-8517-b068270728a6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ca186855-932c-4898-8ffa-6b92e45fb3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f69808-5c80-4a09-a980-431f25b56c8a",
        "cursor": {
          "ref": "d2796382-f9c2-49c7-a4c2-97b9d0942b0a",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3ae63ac1-413d-4d71-a0a9-edfdf094d5df"
        },
        "item": {
          "id": "f5f69808-5c80-4a09-a980-431f25b56c8a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "530b98e4-81c7-46d3-a3de-f58608bc0382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca03619-d0f9-4b87-8b7a-e70df5d2f497",
        "cursor": {
          "ref": "6d709f38-49b9-40c0-8ca7-8861bb7d3bd6",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "47765618-0419-4e48-8283-43601a1fc215"
        },
        "item": {
          "id": "dca03619-d0f9-4b87-8b7a-e70df5d2f497",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ec98a010-7367-4c71-879d-98f36973037c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0656528-163f-4a0d-8323-ed17d7820f86",
        "cursor": {
          "ref": "317b49fc-48e2-47ef-a714-c7e677005d04",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "62ccae4d-426d-48e3-9cc4-fbe3bbc643ac"
        },
        "item": {
          "id": "b0656528-163f-4a0d-8323-ed17d7820f86",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "608d077c-4450-4429-9d74-abc1213fca26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 514,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f204c1b-86f4-4673-969c-7b478e7ac0d9",
        "cursor": {
          "ref": "f4e3b64d-b14c-412d-8689-063987f4941f",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "66c3c961-5f74-4e92-be3a-4883e81c6203"
        },
        "item": {
          "id": "0f204c1b-86f4-4673-969c-7b478e7ac0d9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ace7420d-e345-41b5-814a-7247b2d0a50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0531d7-89f4-4ad2-8b06-8ce92de794b4",
        "cursor": {
          "ref": "7aa7c399-90fe-434b-8ddd-7dea00b74836",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b61f1528-e144-41ae-a506-27564a576818"
        },
        "item": {
          "id": "fc0531d7-89f4-4ad2-8b06-8ce92de794b4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "af555b86-3bfc-49ee-840f-4987d9ab37b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a473f0-9e51-435e-af6e-5a026652483f",
        "cursor": {
          "ref": "3b34c03d-3720-4712-88f9-aa502ec2d73e",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8582222e-1793-416d-85bf-52000024fed3"
        },
        "item": {
          "id": "a4a473f0-9e51-435e-af6e-5a026652483f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a13dc239-e0f2-4099-a1f6-7afaf7adf307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5adce7a5-4e07-470d-a872-35fac70470d3",
        "cursor": {
          "ref": "783372ae-64e8-4520-a53d-cd138f9b4e9e",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1bed115f-ad8e-4a2e-93ac-e18cd5c1bfbc"
        },
        "item": {
          "id": "5adce7a5-4e07-470d-a872-35fac70470d3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a97b8e08-fc6f-4cd4-9445-a338f8040ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182c8310-87c0-4d7a-9593-116abdc61e26",
        "cursor": {
          "ref": "ef00bb9a-74f1-4468-b064-027005786044",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "33a6cc6e-651a-43d8-9de6-375fb5faa5fd"
        },
        "item": {
          "id": "182c8310-87c0-4d7a-9593-116abdc61e26",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "fc0d4bb4-bfad-4d50-a549-aaba025bb089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c667462-05b3-4bf4-b0af-14fd6b2d923e",
        "cursor": {
          "ref": "6fc73095-246b-42ab-8236-c3c86c2555b9",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "bb3b1286-c441-48f5-89fb-b85c65242d8b"
        },
        "item": {
          "id": "7c667462-05b3-4bf4-b0af-14fd6b2d923e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0895f142-35ae-4343-bfd5-7c1491686de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dd990c-4813-4f20-b6be-807ff2565862",
        "cursor": {
          "ref": "48326587-6176-49f9-8108-2cd5c9bed7c7",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1f0a77d8-28d9-412b-bdd7-828f48e9ad1f"
        },
        "item": {
          "id": "c2dd990c-4813-4f20-b6be-807ff2565862",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8c3ab483-e60a-4d0d-b403-6287d9dc2cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449f9785-b572-4f31-836c-9923573bd0d1",
        "cursor": {
          "ref": "3479dcc1-4b11-4d66-aaa1-8e67bcc6b4e4",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7361c972-9d96-4c9d-b7ae-94063080fa0c"
        },
        "item": {
          "id": "449f9785-b572-4f31-836c-9923573bd0d1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7295217f-0689-4713-90ef-4f8545ef46bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd64be9-01b4-4c2d-9410-f85826360f10",
        "cursor": {
          "ref": "c74a2eb5-8563-43e0-a47e-921cdb5b0090",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4a8da3f1-154c-474c-b3c4-e135dda269f9"
        },
        "item": {
          "id": "0bd64be9-01b4-4c2d-9410-f85826360f10",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5f85b9ff-2492-453b-ae5a-1351d4580511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2ad323-8242-4ee2-8444-007fd592b0ad",
        "cursor": {
          "ref": "72e9abcd-dbab-41dc-b1bb-f605c2952107",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4f6762c9-2dc8-4df8-b9ee-cf0a3b5ef3a8"
        },
        "item": {
          "id": "9c2ad323-8242-4ee2-8444-007fd592b0ad",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "09893d4d-4066-4969-ad91-d9319503d07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37cedfe-3ed8-4f6a-902c-9ea45bcd9467",
        "cursor": {
          "ref": "3160fc2c-2474-4fa1-824b-6b0d81de3ccc",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f0e4e872-274c-45b9-b659-0cc565ea724e"
        },
        "item": {
          "id": "b37cedfe-3ed8-4f6a-902c-9ea45bcd9467",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4274d5ef-744a-4138-8889-9dc08645868c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e136e00-34c3-4f44-9154-6041e35417dc",
        "cursor": {
          "ref": "08bd7bf6-2fcd-412b-866c-d511e18ae05b",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3f72f27d-640f-456a-9850-d536d7acdcbf"
        },
        "item": {
          "id": "8e136e00-34c3-4f44-9154-6041e35417dc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "12c8c51c-9bb2-4a9c-81f6-646b9e99f9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24892c8-fff2-4304-8ae3-3b7448e2c876",
        "cursor": {
          "ref": "5c347f99-1e71-40e8-9583-55cf71ee427a",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c072d70f-cdfb-40da-8847-5841c2f962fd"
        },
        "item": {
          "id": "c24892c8-fff2-4304-8ae3-3b7448e2c876",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4ec1b7b4-c474-4dd3-98a3-f01ffbbf2d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2bf8e9-0a50-4ae6-b309-ac998d04098a",
        "cursor": {
          "ref": "b9571a8c-0f72-44a0-94a2-6d9ddc8a4722",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "de29f142-5add-44fc-b9a5-5a404f1a8bd3"
        },
        "item": {
          "id": "aa2bf8e9-0a50-4ae6-b309-ac998d04098a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "817a38c5-143b-4295-a1ec-43cfc551039b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de58c00-6d8e-42af-82c1-35810eb0f337",
        "cursor": {
          "ref": "092c3d55-4830-48ab-af84-114333031fdb",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4855c2f5-0860-4cda-9d14-a214df1fb6ff"
        },
        "item": {
          "id": "4de58c00-6d8e-42af-82c1-35810eb0f337",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3d19efea-d24f-470c-8d30-2e836bd5771f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5678d859-fe1f-41bf-86b7-dd1b3f3c7c58",
        "cursor": {
          "ref": "e7418333-ea7e-4b18-9957-92ff1bc81bf4",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "faaad5a0-f77f-4bf1-ac66-302a1ab61afd"
        },
        "item": {
          "id": "5678d859-fe1f-41bf-86b7-dd1b3f3c7c58",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4e92367b-a4cf-41a1-a187-e854034e07fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e3e3d5-107f-492a-8f2c-2d4ec7b3ebe7",
        "cursor": {
          "ref": "0297ece7-a618-4140-a501-1b55061b924a",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ee5f0003-c1dc-4eb6-9310-05935ea924ac"
        },
        "item": {
          "id": "71e3e3d5-107f-492a-8f2c-2d4ec7b3ebe7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4a761352-cdac-4332-a555-b19cc9067853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361d97f1-648a-4a12-bab7-2446ecb6510e",
        "cursor": {
          "ref": "3f71fa5b-0492-4a8c-8339-0dab7cf994a9",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "aaa825f7-cb5b-491c-b26d-8fa91489ed63"
        },
        "item": {
          "id": "361d97f1-648a-4a12-bab7-2446ecb6510e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dbadb7ae-64f3-425f-88a7-f3b08d00b866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b476d8e5-9d8f-4125-8a4b-0a13c5241bd2",
        "cursor": {
          "ref": "d3c010d2-af0b-4138-b808-5db0973a4093",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "21d3c499-c73d-41e7-a08e-a6124bdf078e"
        },
        "item": {
          "id": "b476d8e5-9d8f-4125-8a4b-0a13c5241bd2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4fcee9d6-16b3-4234-aab6-0a06438fae5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4e061f-4415-4d8d-bf7e-ca5920f8e58f",
        "cursor": {
          "ref": "21de0939-4542-4d45-9621-4b75863d59c9",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b71d051f-2f20-4d26-afc9-294c472866b9"
        },
        "item": {
          "id": "aa4e061f-4415-4d8d-bf7e-ca5920f8e58f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "00493f0b-0ba2-4096-aacb-c32a723dbd74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65521f23-42b3-43da-b7c2-8dd4b35f9d06",
        "cursor": {
          "ref": "41e81da3-cbb8-49cf-bc69-52ffa6cafd60",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "60446c0c-113d-42f3-901f-69f03e7e7d36"
        },
        "item": {
          "id": "65521f23-42b3-43da-b7c2-8dd4b35f9d06",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ada7202a-4ed4-4e11-9539-d6e35f293246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25bc0a0-e4c4-4bdf-9107-f35af993a28d",
        "cursor": {
          "ref": "973a8ade-40df-452c-8f20-20e2aee04b49",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7e3301e5-9bc5-453a-a4ef-cebc08cf41cd"
        },
        "item": {
          "id": "f25bc0a0-e4c4-4bdf-9107-f35af993a28d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "613f9e84-d87b-45ca-a7c5-f8dd6311fce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e824ba-571c-417c-8afe-83fa62e38c13",
        "cursor": {
          "ref": "3a0cfe0d-f7b2-4eaf-89b8-ef65da843c52",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "87bafaf5-bb31-42bf-ac3e-be7bce904c88"
        },
        "item": {
          "id": "b0e824ba-571c-417c-8afe-83fa62e38c13",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ef664991-79e0-46e2-9e83-5cff65b95b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8544e0-b3d3-4ee4-871d-d8128b461f9f",
        "cursor": {
          "ref": "8ba2da82-a964-490b-a9f1-49a84114dd91",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ad7efad6-3871-4c67-acae-24000b1dd854"
        },
        "item": {
          "id": "eb8544e0-b3d3-4ee4-871d-d8128b461f9f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d9a248f2-dd2b-4cfc-9351-7e58f325e618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc30c0e-b6b0-4fad-8bda-5389e66eb433",
        "cursor": {
          "ref": "2c61b43f-47c9-4101-ba32-5094786891a1",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "06136561-e430-4640-a6ec-f5fbdcd66c44"
        },
        "item": {
          "id": "0fc30c0e-b6b0-4fad-8bda-5389e66eb433",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "69ebb6ea-bc87-47f2-8b21-ff042dbc7ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabb1e16-c020-4ed2-893e-42718b881585",
        "cursor": {
          "ref": "bb2f65b4-4f03-49fe-bbfb-3bc18d165b21",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d1ef5785-4838-4fd4-a496-7c36e9046891"
        },
        "item": {
          "id": "cabb1e16-c020-4ed2-893e-42718b881585",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "46c707a3-b30a-419a-b29b-0fc8419139a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383a9d54-59c4-4dfe-b954-d1151dbe3949",
        "cursor": {
          "ref": "739f7161-a108-484b-8965-c8b8e771bf81",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7c68604f-7c21-411b-a9a2-4dcfbb7c3bff"
        },
        "item": {
          "id": "383a9d54-59c4-4dfe-b954-d1151dbe3949",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "893e5d2a-829f-42f0-b442-37d420b4b499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee3f87a-64f5-4a9f-ac5c-70fcd9dac708",
        "cursor": {
          "ref": "4d58e874-b1af-4ecf-a35d-6475ef8d7b49",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dfdacd01-1025-4574-8d0b-23d8caf2e492"
        },
        "item": {
          "id": "aee3f87a-64f5-4a9f-ac5c-70fcd9dac708",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c5ec06b3-5bdf-496e-9324-48c36857cd48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa96e935-4b1c-4ade-84b5-62487e1e6766",
        "cursor": {
          "ref": "73aa8c42-dfa2-4861-b58b-4ce406116df0",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "276f8a1b-f31c-433d-bac4-938ca28d6877"
        },
        "item": {
          "id": "aa96e935-4b1c-4ade-84b5-62487e1e6766",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c67c3b87-8288-47ab-bf37-a8fb059f0e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364467d5-9c88-4988-9fac-25a50b74c5c2",
        "cursor": {
          "ref": "9ce29d1f-52a5-4e67-96ee-504bdbfe056c",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ab3b702d-11f7-47e4-a1dc-668e3c151bd1"
        },
        "item": {
          "id": "364467d5-9c88-4988-9fac-25a50b74c5c2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d6edfcba-bbfb-45bc-886a-24b5c51ed7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5caf3c3f-457b-41b1-8686-cc7f33f03c94",
        "cursor": {
          "ref": "ca443866-5839-4290-9f1a-5a8148e3594d",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "760ada19-9244-4867-9f2f-c571e98407c6"
        },
        "item": {
          "id": "5caf3c3f-457b-41b1-8686-cc7f33f03c94",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3a51912d-e21c-4651-b235-b0c26cc8a0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b41fb07-fae5-442c-893d-0499fd2d7272",
        "cursor": {
          "ref": "5c22ce96-bb5a-4c92-b960-acdb0b5f35ec",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "63987a01-d659-4ae7-832d-bcb7c6299ec5"
        },
        "item": {
          "id": "8b41fb07-fae5-442c-893d-0499fd2d7272",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9430314a-6ebe-49c1-bcd7-c94b774be583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abec32b9-83c0-41ca-bf30-74885db2ac00",
        "cursor": {
          "ref": "58988fe7-e577-4b2e-9328-bc6185a9c76b",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8121e5e7-77df-4fb2-a510-ae5dd53cba12"
        },
        "item": {
          "id": "abec32b9-83c0-41ca-bf30-74885db2ac00",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cd442607-f914-4f93-bb6b-db083df07389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f64492-782b-4730-87f7-41598cc37bcc",
        "cursor": {
          "ref": "85dffa7c-d865-4d06-bda4-f19df587f197",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "557f8322-0037-48c3-b43b-976cba35c104"
        },
        "item": {
          "id": "85f64492-782b-4730-87f7-41598cc37bcc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "12bbf285-8052-4309-88a8-3c058a2e794a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4230fe25-7af8-4af8-b302-863e30d55bd1",
        "cursor": {
          "ref": "ea1e6770-e14a-4a89-96f9-d8b0915f202b",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3db61676-4075-47a1-8663-ed9888ec79d4"
        },
        "item": {
          "id": "4230fe25-7af8-4af8-b302-863e30d55bd1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7c7bbb70-8dab-467b-891a-01f94019a68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f29076-21f8-465c-83aa-b0cc35fe28e0",
        "cursor": {
          "ref": "af4bb9fd-c646-47b0-8574-350b79ba9cfd",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "71a65bc2-7be2-499d-9251-0bbd82c6e83c"
        },
        "item": {
          "id": "98f29076-21f8-465c-83aa-b0cc35fe28e0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fdf5b7c9-af04-48b0-a980-50f7e1bc9a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f2ac2e-43a6-4c82-b7bd-96ab72ea7940",
        "cursor": {
          "ref": "61ed7215-c417-4d69-9a92-870ece0d08ec",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7c26d137-2937-4e15-b4d8-3f07550fc01e"
        },
        "item": {
          "id": "a3f2ac2e-43a6-4c82-b7bd-96ab72ea7940",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9c3afd55-a010-402d-8d0c-f7ff4f139336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 436,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0bb3e3-9305-4104-bac2-4aef9d1232c8",
        "cursor": {
          "ref": "f20c8a58-7d07-4d0e-acc7-5d0a86e92c5d",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "375c9123-df8f-4052-9c56-e9e42ef61ef5"
        },
        "item": {
          "id": "2d0bb3e3-9305-4104-bac2-4aef9d1232c8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0622a55b-1612-46e4-a0f9-255344ac2618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4075e2-9a81-4bdf-a815-558146c5d18f",
        "cursor": {
          "ref": "ec9e0189-5b72-458b-8ea0-a96ec115c9c6",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a7afd02c-7655-4af1-8eed-1f43921184ae"
        },
        "item": {
          "id": "3a4075e2-9a81-4bdf-a815-558146c5d18f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "81aedd5d-576d-49da-a2c0-f08c0fbbc8c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cca372f-7370-4346-a740-e6295f3155a6",
        "cursor": {
          "ref": "105649c1-1b82-4bff-b920-453fa81a6a58",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5b8e89fa-3dc5-41ec-a5a1-1ca305cf51db"
        },
        "item": {
          "id": "5cca372f-7370-4346-a740-e6295f3155a6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b3bffc78-7f75-4ea5-9c5e-28491bde04c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7ee0a3-866f-4759-a494-682b3bbae7fb",
        "cursor": {
          "ref": "764a22fe-ddd4-4760-9126-a82f4037e293",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "efe50b3e-92a7-4094-800f-caff427e0dcc"
        },
        "item": {
          "id": "ee7ee0a3-866f-4759-a494-682b3bbae7fb",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a932e2fd-a9d3-4525-9df3-93d859fd71e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4094ca05-08b1-4083-9e51-bf3876c05e2e",
        "cursor": {
          "ref": "2c4c18db-05a7-4a4b-8380-78bbb74c5469",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f8b33786-172b-436a-a746-99d48309ef14"
        },
        "item": {
          "id": "4094ca05-08b1-4083-9e51-bf3876c05e2e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f94e6b69-1e24-4cfc-bdd7-adaa426172f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d2193b-e612-4554-8770-6f828996f318",
        "cursor": {
          "ref": "4c48c95a-4d03-42e3-aac9-a1c790944e35",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b346692b-a63b-4abf-91ea-d588bda76e08"
        },
        "item": {
          "id": "45d2193b-e612-4554-8770-6f828996f318",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2c140f4f-79be-4298-9f64-2474a389bb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b0fa54-215f-4723-aeae-a8633c9793ea",
        "cursor": {
          "ref": "73128d1a-8db2-4a2c-b0b3-587e8af63481",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1b4bef00-d014-418f-8261-868625acbc5d"
        },
        "item": {
          "id": "f6b0fa54-215f-4723-aeae-a8633c9793ea",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "407c61bd-5c1c-4af6-8809-85be63c4ca94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fb8a50-c56e-4718-be55-d4d64b623009",
        "cursor": {
          "ref": "704fbb3e-bcc9-4bfc-bf14-fb573b828aea",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1c75acca-4ee4-4e34-8897-e6bdb29a1146"
        },
        "item": {
          "id": "47fb8a50-c56e-4718-be55-d4d64b623009",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2c908b22-ad7d-425d-bed4-159945469a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d42da7-3423-49a9-ae6a-5bc9f65fec29",
        "cursor": {
          "ref": "8eec1af7-30b1-403b-8630-165e2471b5ad",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9a25f20b-f7d2-48d4-aeed-2d8a8c13f896"
        },
        "item": {
          "id": "89d42da7-3423-49a9-ae6a-5bc9f65fec29",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "593b4bb8-1ae7-4c7c-8121-36766848aaa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a27de0-2f7c-4c2f-89e6-dd5a3df7e0cf",
        "cursor": {
          "ref": "9034af47-4db3-4d97-82f0-43cc50aa0fe0",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f1b2a514-89d4-4866-a3d5-22de7a73bbc0"
        },
        "item": {
          "id": "11a27de0-2f7c-4c2f-89e6-dd5a3df7e0cf",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2dec13ec-4381-400a-91de-123aec8c5963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4e1c32-77bb-4738-aada-b7cbf609748b",
        "cursor": {
          "ref": "12675edc-3fec-4bc2-970c-5f922411d911",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e30e41bc-4fdf-48c7-808e-cd9031bde26d"
        },
        "item": {
          "id": "7e4e1c32-77bb-4738-aada-b7cbf609748b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c65af2a6-d789-4bc3-931b-591c0b15b666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491f3474-506e-41ed-874c-aa9368ecf6d0",
        "cursor": {
          "ref": "2cea45bb-14b0-46b7-81d7-6b00ee4e14ef",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "21362a10-7c10-4c8b-a524-41e33d7ea5af"
        },
        "item": {
          "id": "491f3474-506e-41ed-874c-aa9368ecf6d0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1144f198-39c3-49ca-96ba-768aa1ad9380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6393fb3f-19bc-4d06-909d-3b9da6f46d67",
        "cursor": {
          "ref": "22664a6e-2aac-448f-b628-bbee819eaca0",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a753a7a0-86ec-46bb-8394-61180350eb02"
        },
        "item": {
          "id": "6393fb3f-19bc-4d06-909d-3b9da6f46d67",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "98a4903e-ac03-448e-a5e0-015d2e188f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0632e4d9-acde-4150-bbdd-4f451c7c466e",
        "cursor": {
          "ref": "283eafae-15d9-4089-829d-d35917076cd3",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c927808d-0391-4ec3-9d67-7720c6f89583"
        },
        "item": {
          "id": "0632e4d9-acde-4150-bbdd-4f451c7c466e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "55fa2c44-9493-4028-9817-fa2e02934694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a849e1cd-333e-4066-b046-fcbcd1516f37",
        "cursor": {
          "ref": "e03c578a-628a-46f1-822d-29c7e0a78b98",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2e666212-6194-4409-a8dd-69995a07eb65"
        },
        "item": {
          "id": "a849e1cd-333e-4066-b046-fcbcd1516f37",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "29a136f9-0af6-4477-a126-64a35a83caf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0d87f7-7373-4489-b47e-4de648b1d640",
        "cursor": {
          "ref": "ac576293-f866-4e3d-a8b0-109f1918bc9d",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "12a86c5d-4d38-4a0f-aa0f-f89c97abfb9a"
        },
        "item": {
          "id": "cd0d87f7-7373-4489-b47e-4de648b1d640",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9ebef8c0-5a82-48da-bec6-1fc55d969563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b197344c-4a77-474b-82ab-70345792fe06",
        "cursor": {
          "ref": "5ad93cce-ddf5-4854-a278-786922c58dc9",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5eb56da3-6a33-4c2f-a2cd-ac4c8a9d903a"
        },
        "item": {
          "id": "b197344c-4a77-474b-82ab-70345792fe06",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c182704f-0093-4ace-89e7-8856962d4593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c1e898-e925-4629-84d4-8d72d4dca5e7",
        "cursor": {
          "ref": "ad88a482-ad83-4e39-9a45-041032f762a3",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f876fbc4-2bac-41c9-b91d-3de4330c8cea"
        },
        "item": {
          "id": "14c1e898-e925-4629-84d4-8d72d4dca5e7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "60f23578-7a3f-4f28-9210-ea920b03d60f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196438d8-3573-42bf-881a-ad34841d29a2",
        "cursor": {
          "ref": "82aa019c-c690-4cf8-8645-e02d14a7fe4b",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "58903cc0-95ab-4108-8663-8e2d385911a1"
        },
        "item": {
          "id": "196438d8-3573-42bf-881a-ad34841d29a2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7d736968-0c36-46b8-b564-bd7257bc7a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40040a75-51fa-446e-af55-bdb71db2610b",
        "cursor": {
          "ref": "90055211-71d5-4d1e-964d-e33237927373",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "be5a45ce-b0ee-45b9-9f3e-5e03eef53b1b"
        },
        "item": {
          "id": "40040a75-51fa-446e-af55-bdb71db2610b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fa49c1d9-4a55-4ef4-8c71-7003ebccc5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295770f7-a5cc-4cea-9dbe-5a73ca4e241d",
        "cursor": {
          "ref": "80010268-1c29-4eaa-9f4c-b15e01906ce2",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3067d5b9-221e-4e78-ba5f-d356907acde4"
        },
        "item": {
          "id": "295770f7-a5cc-4cea-9dbe-5a73ca4e241d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c44f8a7f-6ebd-40f4-ad0b-6bb9a10a66be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70e51ea-d6a9-43e8-bb38-ff8dc67d6ea6",
        "cursor": {
          "ref": "e6e3f186-7aac-473a-bf38-7d84442a75dc",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "11a5d943-9b24-4058-b418-649a983f92e8"
        },
        "item": {
          "id": "b70e51ea-d6a9-43e8-bb38-ff8dc67d6ea6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5eeb866c-7d1b-41a1-b908-b8f683d5ce04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650db872-33ba-467e-82c9-2d8fc8ffbe87",
        "cursor": {
          "ref": "e62cb36d-cead-4b76-ae6b-c869cc535f48",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "aa5bc913-3971-4d20-adad-664a1f09159c"
        },
        "item": {
          "id": "650db872-33ba-467e-82c9-2d8fc8ffbe87",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "262802d3-9e37-4fbb-aef7-1dd222f0b65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9a4457-9fee-47b4-93a6-def1ddb3c4d7",
        "cursor": {
          "ref": "efacb8b5-4ce3-48a9-8f03-3d392387dfd1",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d131f4f7-925f-4150-afe8-da9e003e357d"
        },
        "item": {
          "id": "5d9a4457-9fee-47b4-93a6-def1ddb3c4d7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ff2ea817-38a7-469b-8609-446ef023c865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df94a98-6c93-4b62-9bba-af5577ba1742",
        "cursor": {
          "ref": "b44d8629-69c3-44ca-83f3-279d3d1c5693",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "871e1d00-d633-466d-9d36-94b1a5f1112e"
        },
        "item": {
          "id": "1df94a98-6c93-4b62-9bba-af5577ba1742",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2da2815b-cefc-4cf0-b82f-4fee35a8fa1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9eddfa-79f3-4d2f-a60f-c9c547bd4a78",
        "cursor": {
          "ref": "6a1971da-4743-4282-a2fd-0ff01a3248af",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "73935de1-168b-495b-8870-f822c41d7a30"
        },
        "item": {
          "id": "8e9eddfa-79f3-4d2f-a60f-c9c547bd4a78",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4a1c5b88-d7ea-4fad-9ea4-081eac7cf9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd6f2c4-4cdc-40c0-9223-921f39b4cc43",
        "cursor": {
          "ref": "6604d4cd-e6ea-411a-a93c-f01d7a4c936d",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "da059c19-3472-433d-b940-f0d6e85d7ec4"
        },
        "item": {
          "id": "efd6f2c4-4cdc-40c0-9223-921f39b4cc43",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "85ba08a2-521b-4bcc-b10e-c9f69ffa80fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0795692-1e2b-409e-ae32-5d7e95654f5f",
        "cursor": {
          "ref": "0510d45f-d6cd-4cfd-9034-793dc6b981df",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "07614f90-f93b-4095-9f60-96f0c3bb0652"
        },
        "item": {
          "id": "c0795692-1e2b-409e-ae32-5d7e95654f5f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6b29d5b5-6d61-42a9-bf1c-9eecb2d84523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d470fb77-40f7-48e7-9854-d24221251c1d",
        "cursor": {
          "ref": "6e40d073-97d6-4dbe-bbce-5a356386fa06",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a26a735a-cfda-46ed-b514-196e8788d413"
        },
        "item": {
          "id": "d470fb77-40f7-48e7-9854-d24221251c1d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5ab1b427-f910-48ae-83e6-bf960bd18bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e22ed8-6370-4c80-a0e2-d996802173bb",
        "cursor": {
          "ref": "6a1fadde-47fc-465f-91fb-88a0ffb772d5",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e1f990bb-8d50-474e-b3c2-6d96d23be505"
        },
        "item": {
          "id": "c0e22ed8-6370-4c80-a0e2-d996802173bb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7a120fbd-bd0a-4923-b0cd-a5706b5e8d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26cc7497-1a08-46f4-9896-05c90f04c1af",
        "cursor": {
          "ref": "86c34914-3b30-48f8-a437-a62b4946c45c",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "886d20c1-59d1-4d9c-bee7-98fc6b3c48fc"
        },
        "item": {
          "id": "26cc7497-1a08-46f4-9896-05c90f04c1af",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "02ee3355-2ab5-407b-a6a7-63523cf322ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d0c194-1d10-49fb-91ce-47e736593278",
        "cursor": {
          "ref": "577c7a3f-6162-4bdc-a989-c9266cc6ba13",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3a16117d-f830-4e80-a23d-34aaf4feef42"
        },
        "item": {
          "id": "e0d0c194-1d10-49fb-91ce-47e736593278",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e8e1bd87-1518-4c15-89c1-5b8f4d520c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ec1c67-670f-46bf-b432-bcf04845bc63",
        "cursor": {
          "ref": "23519997-4a78-43a3-946e-5ea0df11b59e",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c7f670ff-bdec-4795-8dbf-e86368210473"
        },
        "item": {
          "id": "57ec1c67-670f-46bf-b432-bcf04845bc63",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "10a6c816-e047-41f8-9b06-ac4c17937187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4730d719-67f9-4ec1-a517-5388ca33f6db",
        "cursor": {
          "ref": "5a2f7bdb-6e2e-47aa-b43c-5cfbf96c0f7c",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "51f8b41d-e527-401b-bfbe-12f1ff45293f"
        },
        "item": {
          "id": "4730d719-67f9-4ec1-a517-5388ca33f6db",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "924d6412-13c9-450f-9f69-3c1423309fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d7a4a6-c294-4107-a315-6168fcd48e2b",
        "cursor": {
          "ref": "c3a2a199-6a9c-4025-80e5-64dd0a4b1fd3",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "675e469b-342f-4d1a-ad44-c360fd799c4b"
        },
        "item": {
          "id": "43d7a4a6-c294-4107-a315-6168fcd48e2b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b77e02b7-2ab9-421b-a637-1166bb033e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b946ede-ac7c-4142-9287-b73afd0af28f",
        "cursor": {
          "ref": "90809670-4a71-4481-8087-f03000bd866a",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bc805ca7-8444-42b6-99b3-1b156803a7d9"
        },
        "item": {
          "id": "4b946ede-ac7c-4142-9287-b73afd0af28f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4fa37bc2-819c-44e7-8f4a-86a010632c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d854b0a3-3b29-4804-94c0-9ae5709d9c81",
        "cursor": {
          "ref": "5a191932-cecd-437c-9eeb-62e8204cceef",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a7482751-98ea-4170-86c0-d39f1a4d48ca"
        },
        "item": {
          "id": "d854b0a3-3b29-4804-94c0-9ae5709d9c81",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8323253b-c56a-4ac9-84ea-1e9513cefe67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358ff10b-f334-4630-a2d5-a07725ccf00f",
        "cursor": {
          "ref": "317183ce-492a-4b84-a001-9a049fd4480c",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "24b99efc-3172-44fa-bc4b-d92a78410ce5"
        },
        "item": {
          "id": "358ff10b-f334-4630-a2d5-a07725ccf00f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "78f0fbc4-0f71-492a-a6ac-38a6837ba201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f9576b-6455-4490-83f9-e777fa05583a",
        "cursor": {
          "ref": "2a6a1c0b-dc28-4ab1-bc6f-fa8e897cd431",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "12b935c8-9436-43b4-9c6c-5259a27b565b"
        },
        "item": {
          "id": "b3f9576b-6455-4490-83f9-e777fa05583a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "509b9ffe-28e8-45d8-8145-70729849059e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48a94a3-6203-40ff-8b71-7abf1f709941",
        "cursor": {
          "ref": "abb9a203-4387-4ad3-8ca2-ad81f6baed41",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9e0528b2-64f0-4cbe-9866-1906acab0806"
        },
        "item": {
          "id": "b48a94a3-6203-40ff-8b71-7abf1f709941",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "22f54ad1-0f17-4166-8e85-f80e235cb1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd080fc-0bdc-4675-a286-412cc26e98e7",
        "cursor": {
          "ref": "5a8f9305-00fa-4822-b095-9b5319666be6",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "df3ca496-7e2e-4af9-a3bb-df19064b0936"
        },
        "item": {
          "id": "ddd080fc-0bdc-4675-a286-412cc26e98e7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5c616669-b5ef-4653-87cb-51003560e2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b9c86e-7e41-4e3b-8a00-24c504912558",
        "cursor": {
          "ref": "2c4885fb-9d66-486a-8106-621417647dd9",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e7cb385a-bc94-4481-ba05-ec723490c26a"
        },
        "item": {
          "id": "33b9c86e-7e41-4e3b-8a00-24c504912558",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "109c14dc-2247-4f98-9f9a-f5b9e3dc372e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7504dd4-f370-4552-b46e-be35fa80d978",
        "cursor": {
          "ref": "c6ede307-7a41-45e9-891d-4736a3daeb56",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "18114aa9-4064-40e0-a646-1b0b2e53e2ef"
        },
        "item": {
          "id": "a7504dd4-f370-4552-b46e-be35fa80d978",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "88a1fd26-1c93-4ce6-84fe-64af37bf8784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c648403-b9e2-4008-b66d-cedf12983b91",
        "cursor": {
          "ref": "17ac99a8-7422-497e-948c-dcf60e0686a9",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "de9d0511-7536-4801-8b21-4eac1c012255"
        },
        "item": {
          "id": "5c648403-b9e2-4008-b66d-cedf12983b91",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "31078841-8886-4da5-a0e1-4d142db046a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0340e9d-64ee-4d8b-8af1-bcdde09dbda0",
        "cursor": {
          "ref": "1b2bacfc-7de9-4921-a948-26b937802ada",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ebfcca95-3db1-4462-94cd-bc6097531af9"
        },
        "item": {
          "id": "a0340e9d-64ee-4d8b-8af1-bcdde09dbda0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5e99c5f3-2a3a-46a3-b7b2-1b151c95262d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3c31b5-a173-4915-a0db-70fb100099bd",
        "cursor": {
          "ref": "a6fc31a6-3fc7-4585-8bb2-b5e302b3014f",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3e752f34-ad5e-4456-9e5d-886337a95037"
        },
        "item": {
          "id": "aa3c31b5-a173-4915-a0db-70fb100099bd",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7f2cf421-347b-4f9f-9648-0df823a55961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957ffc98-dc5e-46c1-8e7b-7bff29f1551d",
        "cursor": {
          "ref": "58f3f971-f787-4907-8e9b-80d1efae8623",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ea4bd359-dce5-45f8-a940-b0d912a23299"
        },
        "item": {
          "id": "957ffc98-dc5e-46c1-8e7b-7bff29f1551d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d1f60648-a914-43f6-82be-66d8a8f501bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079b315c-d588-4dc7-b53b-8b8f122765ae",
        "cursor": {
          "ref": "95df4de5-ed96-4a4f-9496-d4c478d8e05d",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2a118281-abf7-42e5-b9c2-8ec7a1caa110"
        },
        "item": {
          "id": "079b315c-d588-4dc7-b53b-8b8f122765ae",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "927c928f-450c-4368-b65a-28d7c0c32b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc45ca4f-139f-4892-a9db-94296361d7ef",
        "cursor": {
          "ref": "e140893d-0fd8-47cf-a819-0e4481dedc71",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7e9a2b81-db4e-4c84-8f25-feb85cd4cc48"
        },
        "item": {
          "id": "dc45ca4f-139f-4892-a9db-94296361d7ef",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "84fb57b9-1220-4410-a8db-91f66ea4dbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a72bea-4736-4cb9-b812-486b607a47af",
        "cursor": {
          "ref": "138c96ba-adc0-40aa-930d-640395e3e7db",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0fd9131f-93e1-4c79-a561-d3b282e756f5"
        },
        "item": {
          "id": "a8a72bea-4736-4cb9-b812-486b607a47af",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "76fc7f4b-d60e-4262-8878-c2d98208f67a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b06cdef-8d27-4900-a6e3-45f8be4620ac",
        "cursor": {
          "ref": "3e5d2747-2763-4e01-ac6a-3212d8cc21e3",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d9b6362d-2153-4683-bcb6-fa643987f5b9"
        },
        "item": {
          "id": "0b06cdef-8d27-4900-a6e3-45f8be4620ac",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e614a2c5-b5e8-4a05-aaca-9d65e4724ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af9fcec-3058-4191-829a-56e20f44ed41",
        "cursor": {
          "ref": "b7683283-f67c-4471-8225-95122d67bcfd",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1eb3ac1b-5e4d-492c-90a0-bc1acd79942f"
        },
        "item": {
          "id": "5af9fcec-3058-4191-829a-56e20f44ed41",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c1f610d9-c0df-4c6d-b87d-71bcb594ce14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76065acf-7c77-43aa-b04a-7cd8067a9e8e",
        "cursor": {
          "ref": "6bf86445-285d-412b-9ece-3583434ddb62",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "57254655-f5b8-4a08-8e80-a50234c5a6e0"
        },
        "item": {
          "id": "76065acf-7c77-43aa-b04a-7cd8067a9e8e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1ebaa808-fec3-4773-9d91-e57a9e2a079a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4338e8dc-d770-4637-b762-6f0e5aa1f71a",
        "cursor": {
          "ref": "4cf2c88c-08e8-450f-a018-6240ec78044f",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8f2981e8-aada-4746-a516-ad4e1ec8b6e1"
        },
        "item": {
          "id": "4338e8dc-d770-4637-b762-6f0e5aa1f71a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cbf7d875-a57b-40d9-a8b6-2286c0a59a48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4c0d25-62ff-4a1c-bd9d-2b159b60a67d",
        "cursor": {
          "ref": "7a61f8f1-9bbe-450d-b1ea-9db100813d60",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0d146dd5-bdea-41a6-9a08-404ba0daa5f7"
        },
        "item": {
          "id": "3d4c0d25-62ff-4a1c-bd9d-2b159b60a67d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b1bc0a59-938e-4dce-9189-e3deea849d20",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 78,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d74af9-dce1-46c1-9b57-2bd690bf0129",
        "cursor": {
          "ref": "62af01d9-6cba-4d74-9b74-7ee559ca010f",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b4fee973-c897-4a5a-afbe-5513fe9c0213"
        },
        "item": {
          "id": "e8d74af9-dce1-46c1-9b57-2bd690bf0129",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cbb77d3e-6a36-4448-9358-63917aa366c7",
          "status": "OK",
          "code": 200,
          "responseTime": 896,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359963b4-9e13-4743-af8c-6675c7268929",
        "cursor": {
          "ref": "7ab9a71e-0d7d-4adb-a440-53c643df026c",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8889e0f5-2623-4311-a99d-d396f40fc529"
        },
        "item": {
          "id": "359963b4-9e13-4743-af8c-6675c7268929",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "b5ace595-c769-4408-9d83-ca5af69faa94",
          "status": "OK",
          "code": 200,
          "responseTime": 371,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061dc980-f51d-4a52-a391-c243af4837ef",
        "cursor": {
          "ref": "93a1fd54-5763-4f2d-a54f-1d54aadaf62f",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "12d9072f-a406-4350-a90f-00726c82e3c4"
        },
        "item": {
          "id": "061dc980-f51d-4a52-a391-c243af4837ef",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6f2b00d3-6765-4dfd-bf9d-ad457eb6e0d1",
          "status": "OK",
          "code": 200,
          "responseTime": 458,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eedbc6ec-25c6-4162-ae4b-d2f2482ad29d",
        "cursor": {
          "ref": "79443791-7ec1-4064-97ed-23a064e8ccdf",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "89260fca-31cd-41a3-85d0-27a9dedf30a1"
        },
        "item": {
          "id": "eedbc6ec-25c6-4162-ae4b-d2f2482ad29d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3c2b8e1b-4487-479e-bc38-ba462be3c856",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eedbc6ec-25c6-4162-ae4b-d2f2482ad29d",
        "cursor": {
          "ref": "79443791-7ec1-4064-97ed-23a064e8ccdf",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "89260fca-31cd-41a3-85d0-27a9dedf30a1"
        },
        "item": {
          "id": "eedbc6ec-25c6-4162-ae4b-d2f2482ad29d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3c2b8e1b-4487-479e-bc38-ba462be3c856",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eedbc6ec-25c6-4162-ae4b-d2f2482ad29d",
        "cursor": {
          "ref": "79443791-7ec1-4064-97ed-23a064e8ccdf",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "89260fca-31cd-41a3-85d0-27a9dedf30a1"
        },
        "item": {
          "id": "eedbc6ec-25c6-4162-ae4b-d2f2482ad29d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3c2b8e1b-4487-479e-bc38-ba462be3c856",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ccbd08-91f5-4252-80a5-894e8585f2c5",
        "cursor": {
          "ref": "500fc4a8-3824-4915-b966-eb43df6041d0",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ba339e17-a8c7-4bae-ae86-fde85cd3e014"
        },
        "item": {
          "id": "f8ccbd08-91f5-4252-80a5-894e8585f2c5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e71cfb2e-474c-4f7a-87c2-e6f5f1c56988",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ce8143-dfa5-4527-a9d6-36e60a48b5b1",
        "cursor": {
          "ref": "e2774aa6-e2dd-4a5b-a331-e2f5e7f6d618",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e88e095d-40bd-4c19-827e-7ee8c1c4bb19"
        },
        "item": {
          "id": "f4ce8143-dfa5-4527-a9d6-36e60a48b5b1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9a3e4eff-c96e-4117-bf86-df2b77412333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f4ce8143-dfa5-4527-a9d6-36e60a48b5b1",
        "cursor": {
          "ref": "e2774aa6-e2dd-4a5b-a331-e2f5e7f6d618",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e88e095d-40bd-4c19-827e-7ee8c1c4bb19"
        },
        "item": {
          "id": "f4ce8143-dfa5-4527-a9d6-36e60a48b5b1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9a3e4eff-c96e-4117-bf86-df2b77412333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b4d99c0a-d1db-43c9-8326-9ca89c1fde94",
        "cursor": {
          "ref": "832c84cb-664f-4086-b51b-b009279112f6",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2d76bfb2-1e9b-4a30-9bde-49df3663562f"
        },
        "item": {
          "id": "b4d99c0a-d1db-43c9-8326-9ca89c1fde94",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "98e36815-9439-451f-ab12-48255156202c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a30054d3-e2df-4443-9e8c-d3173964a348",
        "cursor": {
          "ref": "23315d94-dfb7-4e1b-a4f7-b619fc8615ff",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "419e814f-38c4-4e58-9676-5b53e77bcc63"
        },
        "item": {
          "id": "a30054d3-e2df-4443-9e8c-d3173964a348",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "42c69136-cd4e-4df4-9459-6b99a613dec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a30054d3-e2df-4443-9e8c-d3173964a348",
        "cursor": {
          "ref": "23315d94-dfb7-4e1b-a4f7-b619fc8615ff",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "419e814f-38c4-4e58-9676-5b53e77bcc63"
        },
        "item": {
          "id": "a30054d3-e2df-4443-9e8c-d3173964a348",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "42c69136-cd4e-4df4-9459-6b99a613dec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c9b3170c-c47d-4277-98e6-89293896c04b",
        "cursor": {
          "ref": "046e2dc8-ecd0-41d3-8474-0ccb2cbd11c3",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1d3749ab-a8eb-4952-95a9-9ddac6cc2e2f"
        },
        "item": {
          "id": "c9b3170c-c47d-4277-98e6-89293896c04b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "56850ff7-8fd0-4c55-b1d6-6a3cef677059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}