{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2b287584-5b5d-4b48-a649-d15e4bc01803",
        "name": "Clear Cache",
        "item": [
          {
            "id": "837dfa5f-651a-452d-b2b2-d57dc28451f7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9af4c4bb-6c07-4d4a-b07a-8b70de5598e5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2d555b4d-f7be-4f78-8acc-44a3d1c5d986"
                }
              }
            ]
          },
          {
            "id": "81c40dc7-b6f0-480b-bc37-ecf4bf974274",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8ae7a005-89be-41e0-9324-f9e9c06649ad",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ec44b64c-f965-4257-9f2f-1cb3a700985d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b3cdf2b7-62e8-42fa-ab60-1e0ae627fbd9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d2d12385-4066-49e2-a5e3-952009e64f09",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1872f38-ee53-4fe0-8b01-6ee3b7982086",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c8db778-d3fc-4517-baf6-27f3f47ff5c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14d1849f-262f-4936-b62d-12d70861d84a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8eb270b-47c8-4744-a4d9-2967fd122735",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b63e1c65-54a2-4f02-857c-2ce4c655e80e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6388d472-cf8b-4bd3-8c1b-958072873e85",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "122068ff-46fa-46c7-bc32-18908372a4ed"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5578d0f6-6dff-4b4d-b60f-107acf524633",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5240f364-da35-4b72-b2cf-443d5bce41d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc00fa21-3bdc-438c-852f-28a90e93a98d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc48e483-9ab6-43da-881f-2f1ed00f734b"
            }
          }
        ]
      },
      {
        "id": "6a21083b-dad2-4a78-90db-825637ebddee",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "811fda9b-63b6-407c-abd7-7b9f8b00e79f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec4c081e-e230-4bcf-bd0e-b2f2945368d1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "01f406fa-845b-46f0-af42-c35a93159da9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11edc17b-d4f8-472f-af21-75eae97a2c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "169cd877-8de3-40f4-95e3-caa2d4c7e1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14ffcd4-256a-40c7-9a8b-6be99558d33a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf644e1c-fed2-40d7-9eb1-d22f0a91550e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e36ca9b2-f136-4151-ac7e-03bfb3b14c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522e39ee-85e5-4612-873c-d1ac880652d7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16aff86e-fa1f-4336-9cd5-7b75696718fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f50038d6-e57e-4fa5-b082-929a29e363bb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3728ea76-bb98-4828-b982-41851f657c5b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5e6865c-fccb-4822-9093-856495154674",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243b87ee-a042-48c6-bfbe-75f6ddb49d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "618b68b2-33d6-4883-979f-40173b3de81a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd7ccc0-2d19-494e-8d98-4371ef3b6d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5749e4f5-9913-4b30-adea-95032c000796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4309dc-99b2-42d7-9ce6-8f5392124a6a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9ad5a6-5ad0-466a-bace-c2432b3ddcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a042829e-f232-4b57-aa46-dfe7fdae2358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95516691-7125-44e5-9eb7-28edfbed4fd7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "23603046-beb4-43cc-90f8-4498208642de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "139ef1c3-bf05-487f-bd53-879e452a3ecc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fc4fc9ee-0220-4a74-98f5-e8a139b07a53",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5293b31a-a163-4de5-8acc-7bf172283689",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "23cdaad0-7fc1-40fe-89c4-1571e94dc46f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0692243-c051-48c8-b4d4-134991044793",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "198baf2e-6348-4b57-8ebd-3cc0e315d37e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "562ac4b1-77b2-4b9b-97c1-4fed41415c60",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7fed35f-047b-4d62-bc63-02bdad00abbb"
            }
          }
        ]
      },
      {
        "id": "48caec0f-5190-4db7-a0dc-34310d4246a6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4ab5a1a9-b6e3-4c0c-96a9-57f2a1112da8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "117fbcb6-9a4b-470a-803a-670f6b68c3da",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "13276311-cedd-4413-b700-23ebd005d482",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81ad934-7a29-4003-9178-c579db8cbe96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94693839-6cf8-4294-b4de-9ab4b1c0ea1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe2f78f-b4eb-4998-a08a-abc057c3a12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ce97b5a-c060-44e3-bd36-007747317263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea8ce20-d098-4bdb-abff-cd829349bed4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc49c6f-51cf-4b41-b5c1-ea7f8fc43d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb520155-6e3a-4bcb-a133-9397504ab060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f504783-1146-4568-868c-505144861499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52532db6-da62-48d7-b00b-417f58990651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ce4665-0015-4fdc-ab8e-4078dc27f121",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a883c9a1-7047-4f77-9c3c-c32d5cad93bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575a3a08-23b8-41d9-9b5b-42fc95ad1a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2067b018-fd0f-4723-bfab-af1d8db9befc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "302c8032-cb9c-4c2c-87a8-29c6bf5eb0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef55f1f-e895-4929-b0b7-a69a7631c8af",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c918de1f-e425-4a54-b413-c0110434436d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2555c8f7-5b5a-4e05-a422-1a674e9b70e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0713081-359a-4003-8f5e-f54e189a1719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95fa5612-3c92-4136-9b50-527fb0e9d8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00b76c6-744d-4d43-bf49-d5608fddb62c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d71d45d-9099-4d9d-9239-9f25ef0ac1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84bcfcc-d0bd-460f-99bf-9dd4828c30d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7cc9de-2b2f-496c-a48e-680630a26378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f200661-7afd-437c-a7f8-4eacedad2bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16589a12-0c6b-4e1d-a575-bc7e6dbc2242",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1945b6-f1c6-43c2-ae5a-0c39aa65a1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1489c8b-b7a1-4805-9fc7-d24f5577b8fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90dc67a-6b27-4b29-9223-7514e8d3ef65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96e46016-cffa-4cde-b46f-f6fdc54cdc1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544175fe-db76-472c-9249-9f60ce0d65b3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2893bc-dd42-46da-ba22-df754505fe79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6374362f-feaf-4719-b6a3-508573bec4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d514b870-0dbc-434c-855e-e295b8c43cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52094398-25f7-4a02-ad7c-b05d4534d19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6075b87e-eeb9-416b-9407-f0dab07b3c78",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959c23cc-8c00-4681-9e9d-e880ce2eb038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41d0eee-cf12-476f-89cd-ba75df231e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3445c84-a643-490f-b27e-e4f714d0dc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37928bd6-aa32-4cfc-a546-932c5982198c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd896d1-c152-4222-97ea-f52b24ad0e57",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cc9af0-ff26-4d0f-a03a-f12f3005ad7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26969f27-52fc-4fde-b479-78224ce6f898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd970b49-9d3a-4d49-b844-6a39d4a006d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2de05aa-17cd-44da-8a0a-61ceb2dd0df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1f98c7-fc4a-4b9a-8ce3-3caf4c963cfd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c613eea2-9449-44e8-973d-244127ef2491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36726df9-61f2-4043-b9ac-e5d510f1bc3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f507d19-7fa5-43d1-905b-84874eaf9d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "492c6d72-bf45-48c9-99f6-a13e01481713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f311177c-0a53-46c7-bd2a-b3a5cecac9d8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4547a2-9596-4f23-a686-448600f5d842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6112211-e7a9-4702-a36b-fefba6ff2bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5beba188-c843-4f53-b098-da1f4624631b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "400c1a3f-f71c-4520-9e3c-784bac8e2d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e287a44f-e4a6-4435-9411-679262d02902",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bada900d-91c7-4f02-8302-7da3f999fbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e900fcd9-83fc-4eea-bef8-d7d3ae950642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35669583-ec16-4cae-9a14-58cfb2e7a9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efeb6085-3ed9-4916-aca6-2c44fda43644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f397d123-096a-46a0-9ec7-dd58c3d244c0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daecb65c-7d6e-439a-a540-4f89b7624c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c8cd14-5329-4f1f-9d76-3623076cb215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f57b43-6473-433a-a6cd-5d30b947bd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d3c602a-e0a7-4f3b-a718-382242e84da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a00ae24-cf63-4285-90e3-6bf737bcea86",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da685ef3-1d2b-4946-a6c1-e755135f0453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749af6cd-14ee-4935-8ffb-b66209859a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b86abd-f6ad-495d-9230-f0a6aab4f2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5491f743-d6ae-4452-91ef-c9faa6d3e56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64018565-b3c7-40c8-a034-8cde10e817ee",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ae2c0b-1ba0-4374-9413-9bad30141472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35be1006-0e89-419a-83ed-6dfbb1df2eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d39b77-a1b5-4c18-bedc-ea19ec02214e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "898bf06d-f1c2-4975-81ff-081b077121c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c718403-4f6d-45df-904c-ad8f64beb30e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3908382f-d2bb-4f0a-b1f9-6e66a741946b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8ab4ce-2ed3-40af-918c-8028ac6c0470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f67e6f-d1b2-40a5-9302-f2a590151fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "720149cb-4046-442d-a885-7a7158de9608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0ac430-a09c-4458-ad14-dda8a624df2b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafacdb3-5373-4ed2-b9b5-c0959b8c4937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28dc8592-bd8c-4448-b97e-1ba502869b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20a6572-8dc9-4715-8933-5b9424c42dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "026b0cf8-e58f-4359-a901-7da6d389e3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701663cc-c277-46de-81ca-a9f64b2fe56d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9685148d-c764-483c-a8b4-0cc31b29c395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7976590f-6054-49ae-bbeb-1f1195301ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6163edc2-f984-4d7a-a65e-a316e3712e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "aee2af0c-2bed-4a6a-b8b6-77817615ee7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa2829d-af1b-4ea0-8865-ba67933e3c3d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab93b67c-09fa-4b34-b8b9-578f80400d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5702c7a-96db-4b4e-a222-6a9af8f3fe5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52cdb06-b6b2-4641-917d-a273af04e338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ccdfdc6-a44e-4e53-b79d-f4c8f9fe53d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a256b97-b92e-4246-baf7-7f9e33ea6e19",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6be04d0-2712-4bcf-ac53-2b489c05bbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23114b6-46a9-451a-8850-39b5370187a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e3f855-c599-44e7-b705-60d525b8146d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b761fb7-2e38-486a-9420-c95d1ba10118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739e4d91-ad07-4048-aa01-3afa63e304db",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e5450f-6a37-4a5b-b9a9-30f3960912af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e6a9564-0a1d-4b8b-83a3-cfeeee61e01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45a66f5-2797-47d5-be05-3677f4edb030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2126903-ff75-479f-bd0b-b8cab631255c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2196f8b4-5b8e-4ae6-9f19-06ae141ca7c3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2e244c-d850-463a-bae5-2196b44ef9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5bcf31b-e6f8-4aeb-9ab8-a3a3243025bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d4c34b-6332-4cff-b44e-96aef997cc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e34931c8-b8d2-4cc7-a17c-c3708bffeeed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e25a5cf-c4d5-4f18-9137-a27b6461c831",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925136fb-f1c9-4e44-99c8-0eea393bbadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19911013-4627-4a50-b271-56beaa1ffa62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1520d6-518b-4749-a182-dcab37dc28c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2452c2cc-cc73-4cd4-86c0-e44aae92a6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd632c2-25a3-41e8-a733-146c0c6a8a38",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2813b5cd-e383-475f-863b-a7cf5d427a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc847e61-e624-4d03-8770-0d5c92849556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ee7159-b987-4da7-9ea1-bc5928c7384d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "855084f5-fe4a-4313-b642-d874312020c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ac3272-fe1c-48ee-a251-ee719c342667",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad89f33-4c38-49f3-b835-af46e1bb9d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f06104-604b-4136-867a-07f37cf55e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e5f031-be8e-402d-b909-a183fb2b1ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00239850-f170-4d92-aa29-187a92ea6d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bf8fc4-f565-4b8e-a7c6-9480c8cbe3bc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5442eb14-69f4-45a8-8e87-be030d704326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe0e6c6-9543-4ab6-b221-d0e57422bdaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e69c53-7d57-4785-97a2-acca7b13aee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c14ffb8b-eedf-4d08-8e37-be04d3fdab2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077d05af-741f-4ad1-9634-27807f0552c3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80807bbd-2083-4672-bc05-528449df871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4620bd82-e350-4e3a-8f4c-ea326e9b03e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824e1f3f-f6c5-4fa4-9ad7-1617f2b04433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d7f62a3-1766-4209-9329-d24f680c29f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d605ebe-b6b1-464b-b7e2-e681ef4cc9ff",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc04f84-99ae-4d87-8f22-4a7929b3fdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8beec0-ad14-4dc3-9080-4fbd3ffc0015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28bb6fc-fb09-4d8e-a6f6-2b3710fef773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c8c62b-44a0-4fd0-b183-0ea6963b323b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6876c9d-c464-4ab3-bb4a-a42e135cf6fc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1fa124-82f5-4496-9fd1-a5c6da04cc08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc5a73d-f0e3-4884-ad95-92707830d94f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7cd683-261f-4d61-9254-94c909379e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7093bee-71e3-48b3-bf25-4318ab5d0570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2c377b-b72d-41a3-9679-e365c3cb2b89",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fab583b-5920-455d-b39c-fe332c167db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24a6844-cf34-4668-93b0-4da03358b4f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d45058d-2a54-47d6-a790-59f660986f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3aca05-ad5c-4b24-8e48-45a6fd8de139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cfc217-d0e4-4c2c-9127-1ac2b7188052",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8703d66d-1a1d-4d25-9e3d-7f5023501283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e48ed7e-363d-4e5c-9397-03cd10190a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8f6b93-8b26-4ffa-8281-0e49818cdc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aac70469-a419-4bbc-bdc2-1151e5658321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a82e0a-424b-4351-a4bd-087f4b05b9fb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e62c06-b5ca-4683-8c6e-5e917be6a28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace5d245-66dd-4d4e-9010-32d5153e322d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed014b3-6165-48e1-922e-7ee628c7139b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f67d0639-0bdb-4122-bd9e-963f261e681c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4906e001-4b22-406b-9a47-8b4a043346f7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81081c8f-509e-422a-8ec0-66b55aa1470a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7cac77-d112-40f4-81b8-95329d81e28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a3449a-8d56-4682-a935-b4597b87646d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba2bbd6-f2e3-4101-8046-1e23f1bf7fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc053a2a-ba15-4094-9016-54ad1e79526a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89bd285-7ccd-411a-bffc-a6b468c4a2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9612286-5e05-4b5a-a418-20f5478cce5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385a85fe-11e5-427b-ae4e-040640874b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "efc3c366-ee4b-453c-82d5-d0536518c7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73b1b72-7c42-41b4-aba1-c8cf965e078b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea6b437-4bcf-407f-9c52-c6ce32e2520e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f305e7-49e7-4490-895e-c1810b9ac9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f0a419-9b83-45f0-a6f5-3a5dfc9cb0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "85ae53db-4f43-41f5-aee4-70bed622a27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f95b75-2b83-48c3-94ec-03b72931dc0d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c00c34-1052-4dc9-9c68-fba4e9d99f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "829ec3e0-01f0-4490-a131-19667928bdb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2839e935-0e10-4ee5-886a-a8ace5a4b6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4918dcb3-65d1-4aa2-9bd4-55165fe7abca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c983f2ff-0044-47ae-8563-d69aec9b13f2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdd97fe-ee3c-469c-87e0-1154809441d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163e8b48-9454-4e67-bf93-c3a21fccb5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e34a8b-87b4-4d5a-a3b8-2e111b28b477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92d14d93-ea70-428b-9a2f-a54a256ef57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992c6e7e-0a22-424a-993b-6567c0983525",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3ce715-2130-4173-91f5-55123c7b0c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6add499c-1ed4-4300-8046-7d11417c3964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d2028a-5e1b-4427-9d5d-99d9884d5e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "18703bd3-8af5-47ae-b5f0-f0bfbc34a89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8b0d27-d63a-499e-8616-d2372715f195",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1312bea8-bf7f-4aa8-905d-7dcbeecbb24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b4f663-9a9a-41b4-88cc-67bdad3cd9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f54798-3240-4860-8190-c2de6c393609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb7fa08-5d8d-4591-af7c-2a1639bbf6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7231d3d-aab5-4d69-8f8c-ff4f365d1460",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db14fc4-d7aa-43f5-8e05-da89127dc3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e528cd15-c32b-4f75-aaca-17042fc596a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b864d8b1-483c-4503-b560-7cf7a1eb389a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6429614a-9c68-4b96-b3d9-33b21cf0be55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e41198-4572-4fd8-9c21-e6eb7ef67251",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a62b133-d4f0-4897-a233-e0066950ec77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0619ada6-a797-4905-8b30-a4ad16841c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5e15d9-f036-4628-ac9c-851f70ca93fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b554ec3c-0880-4191-9bf4-93dc00520cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ef4203-f07c-4db7-8dac-1c604b5a541d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cbc9b7-de58-4b5d-928c-15096c3fb762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fcf1cfa-7b1b-44ce-9483-cc493b399d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac5b914-66d6-4a93-a50b-851e6be7603f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "18e7089c-afc1-4d76-b6b2-0cc616deaf31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7abd912-77a9-4f18-845a-7e7538921a5e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeac0707-7301-479a-a2ac-b0064f6d37b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f0cc70-2ae5-4e76-8107-fd3d03f5b802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005cb471-ef37-44ec-80c3-d62e53dd5091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b74adda-ba5f-4ae0-a676-ebb466e0bb62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cd766c-1933-4eb4-9bf1-e65401b5ded6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b073a84c-e311-4ecb-bebe-fcfea05e1e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5313d53d-3696-469e-8178-4d243dbe4fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377d356e-518a-43ef-bff1-2fcd2e18f167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cab8e764-895c-4200-8d64-f717c1dd7695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e2b15f-5396-4046-8f54-255dde04b6c2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b9ef3b-6279-4748-8fbf-ee06189a3ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c4630e-f897-4244-9ccd-7189b4cc8d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db8d113-0dc5-40e7-8771-42dfd8f97c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4dade4e-6e0f-4082-95da-a6e670f5e3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df6404f-9895-4ea2-a58f-caa1b3213b8c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9e09c2-a722-40cb-8d87-5de5cf9fb804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caefea3a-300b-4cd9-991d-17d43a462da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6b2bf8-68e3-41fa-935a-56572e8599f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7aa80b-8f27-4c7b-baf4-fbe26b7d3e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fea061-b06f-4b5f-97c4-50ab1485acb0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598bc238-a6ee-4262-984b-ae7f7311825f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c2776f-900a-426f-a132-cfab4b326565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feff882b-39ac-4029-91ed-5ae9d50d9fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47a956f7-a3d0-467a-b47c-075befb51d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f104203b-3923-4638-aff2-0f0a96b050bc",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9ae22d-12aa-4111-abf3-1279ec352f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b70346-5a07-4879-a524-c88b147d2e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43ac790-ac8b-4dc0-9d10-991f80944609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20f8a89c-dd44-487f-8bdf-11222fa4e652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0c54f4-ab5a-4fb0-94d8-c73b3ab9b20c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a143f8b-afd3-4e00-8808-0518d875c7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a07fe82-9025-4756-8814-8cb37de2141e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b68c169-1351-40c3-92ef-cf1a4725fa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94efc481-4b22-4af1-9385-11f8c1d408e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc9f4f5-6d72-48f1-bdee-6eb9478ed41a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7d139f-8302-4b44-ab97-389d5f0ecbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c882643-672e-4e88-bd85-4e37fb54a93f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65754749-f9ae-496d-8748-cb09e5acfea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9966d69b-5831-43a6-96ff-3a971db937de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649e79c3-a2f8-4237-a670-202a269495f8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf58c38-4e61-4862-95cf-109eed70004d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "829708a1-6db0-4c5f-b934-7305dfbdd297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cb66f1-905e-4859-9ec3-a7edc5eb7c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "977ed4e0-d339-41f7-bbbd-fa8856deb00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0edd2ce-b0f7-4f67-948c-a7ec7c5de171",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664cf1e5-34c1-4cbf-8a07-0e809154f1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ffb310-8b72-4e41-b7c2-2b4b1a546220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da9b25c-f3fc-42d9-ab1e-486af32dfd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ade852-b00c-49e6-a8cb-9630283c534e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6059519-46a4-40e3-8f57-235fad6ec3b4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c08335b-4cc3-4fe3-a251-eb54c39cd60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516e55ab-ccff-4196-8b63-d39f2c62247d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f575506-6713-4702-bec4-358cd6c07177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee60e07f-7c61-4741-8f21-880cf5bf3cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c9d76c-6122-471b-a185-5fdda405fc0a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b0a308-84f9-4dd5-b296-b2eb4dddef73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8f36ac-c588-4e19-be33-ab9e20ee5a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1120a2-ef0e-429f-a73c-7c399190e2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34dfffbf-707b-41b6-afbe-307293dada37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b858189c-9dfe-44c9-9c3c-5ddd40a4f3c8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3296c3-1bad-42d9-af40-5aee57dc8c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44d79d4-e416-4a63-8738-467ff7430ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a49a8d-5948-48eb-9803-47febac7833c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23ec8877-d97c-4165-aacf-342657c70d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4100ec04-d1a5-4cc5-be6c-2f5dee9c5dc7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1351f711-944f-4615-a06f-48325261c9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62c1918-3ea9-4ff3-a179-016c27405c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f437d4b-739d-4611-8ec4-159038be6414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "59f0ea1a-383e-4c8f-aff1-88bc564296a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe08ab0-7685-4bbc-a3a2-11577c82c113",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17a98c5-3098-41a8-a6d1-5c4c55f8b221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e36a137b-00a6-4405-9daf-366cbf95f576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c555c19-2581-4630-8d98-de4a5a7249d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1cdcf02-d43b-4422-baf1-f15535dc6c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c595630a-5f40-44e7-a79e-cf201af2a532",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422423b3-37ee-48c6-be7c-bf1a798a4365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5ba15a-85e2-4e79-97e1-a069a8c57694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca95f51-fc15-489f-8b46-8c2353f08845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c90324a0-4097-467c-a956-d7efefdb6432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d40b0dd-4399-4556-b7fa-8cfcb95dd8d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9217dd-e69c-4575-b820-e4e896e1d9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8ba01c-0110-42f6-89e3-7b6f1125b361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26bfc26-fac7-4718-9a29-9ce06b9b4fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a478055-b7d3-494f-93d1-7325b0eae1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7e4390-3ab4-4fdd-9dc4-4cda65e128f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1236bb6d-89ff-4ec4-a2ad-b19c3c0e10a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f798f2ca-0203-4f90-979c-478a91ed14ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974e70b2-7b65-4dbb-83a9-0cb8bcdfe44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb388f2-7e51-47c7-b56e-f14be31d58eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0379b465-6bf5-40c2-8a8d-879b6667d926",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0776ae-e2d3-46fe-8229-c3ba292c0d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2de5d60-3f1b-45d2-8507-8d8306f4e9d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa32558-15b3-4dbf-81d3-91ebc503d77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1fd5f1-97c3-4c97-9f23-c634a2aa2289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b19cb23-c6b6-4a4a-99ca-75ab6f2f048e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a327f9-e83d-42c2-8c2d-a1f2a438a90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c20b38f-7c1c-4a0c-9f74-cc134e5938b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144da054-26b9-4ce5-8ab6-1d4a2e5e3e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d95ca7-31a3-4aa9-bccf-543225b2b76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db60e6a-a9ae-4baf-a086-69bf6dc24b4c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b81f07-45b2-467e-9dd9-cd7055c14de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "156a1c94-31ef-4d66-ab15-fdc14e8d300c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2871024-6872-45a7-9e5f-f4f5bd784a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "92905535-2250-470c-95c5-2a934977f0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7afd12b7-072e-424f-a930-a520537fad8d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771686d2-a178-44a1-8780-1f3886d18a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5d9c32-2321-4b29-a1aa-917d8e663189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66f758b-7025-4aad-b471-cb73c15fe046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5bcdb4-4d60-48f3-bd8b-d0aad7894022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cb465f-e907-4c7b-aad8-73c64a180424",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6067fb-80c0-4500-afe6-2a36c5c8a9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5085dee-72af-4af9-83eb-60aa82fcae53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9346623-4c66-4f33-bafe-3ced65fd1493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f632e0dc-2911-4ca6-9b1b-77f1527b8677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae8e89c-575c-490a-92dd-c632b3983c3b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85236136-6a8d-4dc5-af26-dfb39e62da42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e11d9c1-83e5-44df-84ef-5376e4f66bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564d9288-b104-4f05-aa0b-6c80b2525bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29431921-4acc-4691-8164-6bf976c2ff48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3689c457-7944-4d3f-b271-501159e643f5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfff882-6d4b-4002-ab4e-01df41875274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5dfe92-203e-404b-bba5-3964f528407a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352d02e7-6c4b-498c-9858-4227f46d5850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32748618-ba17-48a2-ba6c-11ee201ab63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6187ab54-8304-48b2-937d-4d3607b444c8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fd52d6-509d-4c03-ae3a-6c3a4f034e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fdbcdb5-e480-412a-9245-773ea9513739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b6c81e-a3a8-4aa6-bd5d-852c5ef54c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ad5500-1e0b-4b15-82f1-acad10b273ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edf2e3c-5170-46fb-bfb0-d9a0d1848b3a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00ebba4-fe2f-40b3-a035-a49311d82693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249bf1c6-9054-44a3-bfe7-e2311352638c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c6332a-214b-4018-a222-5aff6c391ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "02067636-5fd8-4265-bc3c-ffb217fbce65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f013b28-26a7-4176-8a06-1a630aeeea70",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33650f1-81bb-460d-b75b-378ba6b36303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b000f212-eaf5-4ca2-b872-393e3894c66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18efaea0-7f56-4666-ac2e-68550eab6c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7900e5eb-8892-4e12-8b50-7d3fce6d9d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1284d952-ee18-4015-be64-51ad8082ee54",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7cd381-71b2-4057-8871-88f5fd6e4b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ba2cb5-c15d-4cc2-b924-ed6b8911e696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59633c32-9eeb-4bcd-aa93-bf104184c7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5173cd19-8f55-479b-870f-ba9e078edc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c4cab0-f34b-496f-aa43-f441de6dfd01",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055c45f0-6339-439e-9460-2095e5c4ffd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6206cfe-cf06-4ffc-8a97-6b5200b15744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054c0424-bb41-4316-bbe2-210be78e9422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da75c29e-5d23-4018-984e-ada947a0c130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24871311-e6ec-461a-8327-3465909eb71c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0342d123-eaf7-45e5-b068-20502e593e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212b52f8-7018-4fde-9b29-4790922c2808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6f2ddf-adf1-4e0e-b10c-ae6ff9f6bca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "373feb55-90b3-41b2-a7f9-d0bb47095279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499a6d9d-89ca-4dc2-a65e-bf073ca8279b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea6c1e5-09e7-41db-a2b2-30304377ca47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533d1fad-5921-454a-bfa8-dd15638a9520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb7f732-d539-48c6-87c8-b07715b491e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "376f073d-43e6-4c06-b236-db53f4e5f59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308e15ec-36fb-4ca9-83aa-356902855a8c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671c54a8-c99a-46e9-b609-4d3d46690b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04dd06b-819f-4264-88d5-aec4a33c9906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2736b1-4421-4855-adf6-d3d40ed35535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eca33cd1-5b28-4c4a-9103-254407c9c10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb08c211-dc95-4061-8072-188fe7d9a5ef",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1674f505-970a-4035-b93e-3a84025f12c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56f8e94-3073-4632-87a7-5735c8945de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041448fb-c15a-468e-b22f-fb8b47af8e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "038f1f75-0391-4328-b7f7-4931996fb23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268acdc0-a903-4f90-bb8b-5268d3bc7d3c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d259f37-574d-4cb2-80c1-baebb7f25cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94df82f5-5e9a-4ed3-a063-d2f361360b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c7d9d7-40ce-43d2-bb64-fe30b40fa00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e016a2-eacb-40e1-bb03-494bb7dcf318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80206f72-9950-4d56-9bbf-372e4e87a4e9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f28aed-312b-4590-9d53-e931b1c74df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a04a5e-3d35-451c-8b10-15c0b5f64001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5091780c-1d2f-45c5-adce-ccf64f1ea437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80d32e39-6cb7-4327-b6ed-33beba02d241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140f2af2-182f-468b-9022-c78cecd085f8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed9b810-7f7c-4533-97cf-63d3f8a8fd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5319cbff-6b83-47ba-b91d-5a993ba0a6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab2dfec-7412-4146-ab6d-71adc0739c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ac5584-e77f-45e4-929c-92c3a3b46a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d960e0a-b5ad-44d2-b430-9f0e88ce5c90",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135c12a1-dd8c-475a-9de9-5e8f14870023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041b5a10-6743-4959-a51f-cde809c3ab15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf74a079-50d7-48c0-98ee-a530fb14b7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e40dabd-f385-4c34-a3e6-56f6afbf3ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5d2e64-5455-4a7b-90dc-27aa7ddc1216",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ede0cc-f0e6-4df7-97a8-4c434514ab7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efaffffc-34e2-4f49-8d75-d4d587bbe43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4226a9-56e5-481b-ab29-97f8b93650a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2d0f67-84a2-4441-8fef-332f957db226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78745ed-f6f9-4265-9460-2c2f2460633b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ade305-8318-455e-bacd-cdc1d54932af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b4451d-c988-48ea-8bda-630a61872e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87b2bcd-c7f0-407e-a32b-3a49c6c8e51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64958fa8-867d-430b-b6f5-54218788db20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777d062a-414d-42dd-865e-4f1cdb2026d9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae993a1-1702-45b2-9227-7704d54471c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33089c1-43ae-4285-a1c1-026b3df5d846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09638bf-7938-4ad6-b880-e692b790423e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ed9ff5-c7a5-44f8-b453-273687d12154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec826a4-d1b9-4cc7-b487-09b53e6ec637",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599cf079-cad8-4607-9f09-1d87e08c0a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79d147d-d8aa-4721-a1a7-3a3e5f773fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74207317-3010-4df4-b042-194794f064a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "afa57017-b210-433c-8b31-5986514979c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c125ccff-fa42-4d4f-81e6-c3e449918907",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19152301-6f6d-43d7-a642-326baa44b1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1361a934-aefa-49dc-bd8c-f1806095c2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0c3bc3-04df-4b21-acb2-e5d907f24240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c29e9ef7-d304-42b6-bffd-bfb1db106802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4b01c6-070c-48fc-b079-fb37a669b8d8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a147178-649b-4654-b761-0ab38880a4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ab2b3e-aaa8-4548-a88c-29aef41a3738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4033642-b43f-491f-9719-8541ec1fe4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71ba7bba-6f67-42f0-bbe9-d3af757b432c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3636e7f1-6fd4-4a48-b90c-4c49ca4f73a0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5851c92-11af-4247-8b85-0e8ca33743c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb7ddea-ec49-46d8-91c5-f4b069a87a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f25a2a-5d81-4aca-be87-e5ca905229ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "012e160e-a60f-4a0d-ad6d-7fc7b12f2763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5b74d4-b6d7-4286-9763-71141d9dea8e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa9c167-6c93-41c5-84ed-84dfe03bff01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ae69b4-9df5-4e78-b11d-6fda50117ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893390d1-c498-41c3-b775-87d83cb10173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "57a872e4-f904-4c72-8506-675f4d89e4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959c806e-c4bd-4595-8f84-5c9d29e034d4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afa4086-01db-4272-b98b-105a3cdb3424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb293b36-bdaa-4c35-a935-d39d2f1ae535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa76ed12-c991-49a9-9b02-85a41e565e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9540c07f-daa8-4f96-8e14-2ead7f1e0d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85477f4b-1c80-4887-b463-c00ac075def4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ec9d4c-6b70-4d18-a08b-30b307dd4cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b590ac51-4bbe-47c5-b7a9-5bd4811e683c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507588bb-73ea-4c63-8b65-f82fcf544321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fce317b3-d64a-4f54-b6b6-32ce5911bda5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c04c4e-c5e1-421b-8a91-810b614a1e48",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67a5734-29d3-4cf1-8a87-1d99407f7af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5310f415-1ce8-4960-a00e-d08ac8314a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31db8428-9e31-424b-8a1d-bad015db05cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "693b25a2-99af-42a3-b577-a74e648e6bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f56fd0-281e-42af-971f-ea2ec6a41caf",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da135df5-e2eb-4067-8172-c10ae889383d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "514c8836-483a-43ec-8cd1-58640df0b4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584177fd-9793-4baa-8438-6ee5f9df4771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7116fd2-09be-410c-9bde-428c148c6946"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e636b3db-9ae8-4aed-957e-c3f18d0f2ec7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0bab5c02-fc36-4c8c-b8f2-298e5dc12fcb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f7910c-d287-4c35-9910-39d9b2c73c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "328a8874-3f1b-483f-8d25-7af1bd4e6aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac42a155-8c6c-4955-bfe6-add09873ddd3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3b36885f-d940-4ce4-858f-1be4622b6758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2471b75c-afca-4749-8819-9a65490e9abb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea04f608-2a6d-434c-970c-292675cc6ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7989bc43-c86b-4033-b107-27cb77471221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aff6c4c-9b76-4951-b754-34671a649236",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c452172f-1a33-4322-b1ef-9ec125efe4dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb60e1b0-8434-4f20-93d0-82098e03d9f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4627bd9a-53e7-4a12-b168-ce53ebdbf057"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0601d23-d613-4edf-9f43-8ca92f5b0ea7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6d2f469-6122-47a2-9b9b-5b00d9cf655a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "899fbade-d26e-4203-bbee-fe986ee18094",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "279d6b19-d24f-49f9-9673-8fee7e0f285e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f92efc7c-7662-4abf-b10a-a9ad7fa19813",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9389ab92-f110-43cb-a5d9-b905f6c87078"
                }
              }
            ]
          },
          {
            "id": "7ee6a10c-180b-4989-956a-0ced4e1fc643",
            "name": "Positive Testing",
            "item": [
              {
                "id": "73c81f67-dd2b-4e59-bd48-93372c3f0545",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cad4f6e-8cc0-4070-a619-fc0214313d5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb3ff89e-1d19-4d38-9738-e7cdaeeea1d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1261319-19fd-41e8-8fbd-9ef3f4945ac1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e13b765-a607-4402-a826-1ac07b0949d2"
                    }
                  }
                ]
              },
              {
                "id": "84b0193f-a78e-4b9b-a6d8-078424435c67",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1136b01e-d895-493f-bb25-75aac5159d55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4efb327-9a18-4897-857b-58e38f22f558"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87929e13-16e8-4adf-bb42-cca4fca2b6b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "672f3403-8fc6-4598-89a9-6a078b98591f"
                    }
                  }
                ]
              },
              {
                "id": "0e7125d6-3b3e-46d6-ba4e-914fee2b588c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1e9abf1-1e9a-4a56-979e-ac901e671ab9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24121435-5fe0-4a20-9348-061c93599066"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32240f6a-24c4-40e1-ab80-661c456037df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "46617789-e19b-4541-918f-440370947f17"
                    }
                  }
                ]
              },
              {
                "id": "17944a47-389e-43ea-946d-9936cde4eeeb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46e521db-800f-41f8-a78b-e5c46df7b2c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4ccde79-d775-49b0-8dd3-80cb25cce035"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "003b131a-898d-433f-9ecc-e8a7db34dfdf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ce4425eb-55ed-44f6-b83d-9919010189ea"
                    }
                  }
                ]
              },
              {
                "id": "bb2af043-0c52-4b08-9fe8-ac2c6935182a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24b0713b-a15c-4f18-9048-129b102364bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b43b3443-f5d6-416e-a5c2-7d3f840b8009"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25230918-48f5-4a60-8cc8-69a4ee333733",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "07752b6d-10e2-457a-a35e-c97f0741730d"
                    }
                  }
                ]
              },
              {
                "id": "a3179d7b-57de-480b-bb45-4bed246aa354",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b959400-f6ae-483b-a5c0-5a041398d762",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94e7891d-9a4c-40c7-9ddd-6e243eb51fb7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5e2c852-6be0-4161-b8c7-11ceb414826b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ae9a5ba-41ad-49aa-ae56-12ee7a8ee745"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ad270ab9-1e9a-4e39-8e45-f4fa5896f800",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "38bb84b1-6e81-47dc-be91-0c25a8f4eff6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "82f7c1fa-37c5-4906-9667-7e6c81678aae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7f2eced-3ced-4f74-a7b2-f5a17f102ce8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e52fedfb-def3-4d64-8dae-57f68c897702",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9aab20ae-7f35-4bd7-a47d-4bea812f17b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96f3b4b8-0420-465a-8fc2-7a824e73e002",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff93fca5-2552-4679-82cc-584f8610a4cd"
            }
          }
        ]
      },
      {
        "id": "17018d47-ec49-4e8e-abc2-4e525266fc54",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "44181baa-f398-4c47-9c44-7b508e7e27f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bfbe5234-fa45-4918-9c1f-b92ff073d46d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "42a40fe7-b109-45a1-8ccd-41653bce2e24",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21e83d4-7cbf-4d9d-b056-3d65fea581cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50d05e1-fbb5-4c7e-88ad-2437dc080878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81877025-c67d-4556-acec-d47ce7151b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "51d40a5a-1117-45ce-9505-496bd861e5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e76b163-78b6-4835-8390-f712a01bfbf9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1747725b-8e22-484f-ab72-c4de95176b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa82a57-ec61-4d82-8a68-5e29c37f8b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a94229-96bf-458b-a338-93109214128c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "774b310b-6de1-43f2-b463-4a13ad197058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e933e0-d5fb-40f9-89cc-ce7d15983deb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183eb16a-a223-471a-91a3-9797b28f0f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5309e28-0303-453e-869f-85c3556c7094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1940a875-b3bd-46c2-9796-45d8b700b17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0375fe70-7ceb-40ff-9408-a98d134ac377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e157ac72-b38e-479e-99e5-cfca8c38a922",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f08a48c-1854-4633-b005-4e00420449de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e6b59a-054b-4f81-a822-776de922285f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497fd380-c889-4535-852f-f5fc090f1188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cda866b-9739-4fae-8d34-73c82d7ed771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb30553-deb3-4178-a1fc-85d2712d68fb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ea95a1-d90f-4261-a42d-27953301ee1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23b23ed-25a1-41dd-a0ce-d8bd6f6c6a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265e8bfd-a8ea-4515-a9b3-6a82cf01605e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "803ffdb5-7e17-4a9d-a112-f26c09cadcd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd92c838-95c3-4cc0-8e57-0a3c967f633e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d97b503-f29c-4ec5-a41f-8f813eee6fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a57e64-c77f-4773-b2dc-2cb42f8187da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcae1e4a-5f14-49f9-ac9e-d512e863df0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "139dd96a-f0ad-48a9-8a09-4a165522b570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6880c6a9-3c87-4b07-b8f7-6cc10a7fcd5c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9846c7-f1da-44f5-b632-2ffb7579c44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57c0b28-f7e1-472f-9fab-6041db5e8b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a84c70-44da-441d-a169-eb806c83c284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a8b996-97ee-4343-be73-b4e50449db77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febcee8e-8a77-44df-9716-9ae34bae4248",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc8d4a3-3c64-4d99-9fda-597921e1c310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bcfa3b5-b524-4bba-a99b-f6e28f236036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283f8262-b961-4799-ab95-e88ca22a1b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fab7dfc-b406-43b8-b902-45356bb14fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34581484-21e3-4d0b-9eb1-6c9f774e9f9b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a896a33b-c185-4165-a162-8d466aacc852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d8d52e-b9ee-465e-a3ad-d692f0eaea0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e455e6-b275-4d21-9ae0-71d525810fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec144ffd-1335-4f5f-9297-91ac45fc9e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3bef2f6-d8a9-445d-873b-f82fd4f17b08",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79135130-3654-4a35-81ef-9aacdf6e9d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6626836d-796d-4b89-b16b-7b395e35bb05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c1cc30-84ba-4163-9595-6603598ec00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa6972d3-4d12-436b-936a-192075b186a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f685372-4adc-4702-a50b-e6b5801f3b4a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f85121-5e10-4fe5-912c-9713ea32c255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeaf6748-f4d9-44f2-ac3c-f0491d32122c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901b0983-d396-43e0-ae3e-4bd6b83aa005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "57b30db9-ff2c-48d8-bf48-640bf3416c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ccc8ff-1702-419b-913a-267f814b9b0e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9721e55b-79c1-4077-8af8-47f5c692a5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077ba1c4-abc6-411c-9a7f-45dcaec14153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7435da7-511a-470e-8d29-f18f29a06ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "863f2396-0652-4b22-abf6-9423e5e0e4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b53904-2e91-4cda-b8ea-95cdba0304c9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bffd2b-4af5-4298-a772-1f5cc2e0f827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abb4851-042b-443c-8682-7e66077744f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9578c933-cf15-4383-900f-bd8525ca7ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec05ca99-d2bc-4ea0-872b-e7095b8c0384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f924104-2d4c-4974-9fdf-b44106f9be15",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98002088-e905-49e9-87ce-5c9aa7016634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b93e6f5-6d74-483d-9572-be54d991c969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917d9e8e-0990-41af-834e-df2d4524cf1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "62b6826f-1d74-46d1-9768-6fc74d3403d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360e76f4-7e9e-4b4d-a3a0-0ab6c0232f3c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37171f0-2159-4986-a786-bc8e8b20d9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0cfc08-e731-418b-b03d-1a58e96e0f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba2d057-00bc-4301-b2b0-5a9adccf9ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fab8ccd7-ccc0-4e45-bfa6-5850396ad50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765351ae-d93a-411d-ad43-88b6cbbccdf4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5a19ff-cc44-4f7c-942b-1ae92e8c8169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084d66e7-1780-44f6-8135-d8ea6bdd7eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa11a857-7742-4519-85ed-9dea6e9c49fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba3414ed-30d9-4d32-a59e-cd209ca83d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377f6e1c-abc6-46a0-a130-a51ca9577762",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58174988-4978-4214-b9fb-03eb69105287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006ad790-7c08-41e9-bcc4-0fa02341830a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aeea190-4bda-4de0-b5e0-851ab618433f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd349aa1-d011-48a8-a1a7-5f61e5064af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c31464-c719-4513-bbc5-3dc9e4f4c70b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca60efe0-62b0-4e5e-9234-662057f748a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eea3d5c-62dc-4778-ad81-c1901ad3800b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836657b8-dc23-4de4-a98d-af19543ac148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "434ea6e8-2168-4413-961f-beb68083ffc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb7c75f-9d11-4224-a511-b709fa101081",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae58b8af-c2e4-4a6b-b681-4ae13c3f0b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaabe52f-c319-496b-9a85-8b4483a5f90a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27964502-ed2d-4de6-990e-608c5c7fd69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2613ece5-0280-450c-b629-ba1b9672a7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b480f52-ebed-4575-859a-2d2cdd777672",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb631782-fcf2-446e-adf6-20122e6b92ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bb9a01-317d-4258-a843-3963cb926182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d78cab6-aa31-41b9-8f55-9f8cadac5dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb602bb-f1fa-4495-96ec-75e76effa10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be257f84-a36f-4538-98d7-b9ad074a3cab",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d747288-0259-405a-8691-3aba2f9012cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7730a0c-45a2-4335-93ff-6ecfdaf92c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0a76df-09ff-4218-a5fa-5c73c7d4d27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d34db519-aa26-45d8-9a65-2376fdbbdfb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db25742-d353-47bc-b65b-f90ce26e8e8d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7277f7b6-57ee-4cd0-a1ed-402928ea1a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f4366e-02e3-41e5-8565-8f5ab7fe6d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cbc86e-4461-4a88-8e54-4dd7d41b8741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34477872-3996-4a2c-908a-0eb7ff33cc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4780bf47-1520-48d3-a271-2bbf7e0be6aa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e05e27-f940-4fac-9994-10d6789f54fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711b4162-29b6-48f2-b824-79f21b781f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d53f06a-308c-436c-b03a-9196cd4d6a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "592b9340-214b-4b6e-a29e-42ad6c09323d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde0cbca-88cd-4170-9ee9-6d7cfe08a084",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbea7dae-582d-4381-8305-16e69803cb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb54c07d-82e6-4b3d-895f-2a608253c4f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a99c502-54b9-47e6-a47c-6468237e9a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d11680e-2c33-41c1-b240-122acbdfea25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1fe4c1-ed85-4ac4-8888-fb4654d56827",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5969542b-b36d-4c4d-a8c4-e210f0f673a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819a8b77-317a-4133-9fa0-50c645d3b65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efea0ddc-71d8-42c4-85e7-c398b8444ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0993f7f9-d8d6-4db2-8139-5e68f3cdcdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32b1742-398c-4d0b-9f18-c2f28346c3bc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0930f434-ed03-46ee-b1b5-985d9cb13516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf7a603-7eee-4f51-a1b4-e2c3c0107fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd776cb2-2ca4-40ca-a962-397710408f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8743204c-ebc9-4b21-a56c-7fb05d037d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586c53e0-b6e9-483b-9ca7-c28e1622de28",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd22809b-d89f-4f22-9ab6-71f8380bdc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767fed6a-c8d0-4ae2-9078-9551fe34d6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3b1c7a-3528-4c06-b9a8-3a0936616f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea49dca3-89ef-4d85-ae32-5c6757feb0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb10e7d-1ef7-4f54-8db8-625c8aa532ab",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a350cab2-9c78-4c25-8c67-3e27e925f7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ef6417-b2a0-4ac1-ba9e-c92f09a1ed7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bc6018-7acf-4866-bf18-7139b16bff6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe615fd-f728-45c2-b2ff-8161a635ca06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bc1a13-88e3-4326-92bc-35201aa4b115",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ec925d-d632-4e72-91c9-3337ed329219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1034cb-724a-4d7b-8f24-64e7bd39a78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85775244-0296-4960-9a60-997ada153b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a020ad75-0837-42e2-b068-9676a277af96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3964fc73-a49e-48ec-9b48-62bfee284ff8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e741ca-62a8-4160-96f3-c64ea58f1df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e889922b-99f0-463d-ba84-68c693cce05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8876516d-e25e-43a6-902d-588b948cdc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "721953e5-9283-4a50-959a-05eaa25bbac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594f8dbe-6099-4c5a-ac29-d07eb63481ea",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2195d028-659f-4db0-a11e-2bc08368ff34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4cb985f-98a5-4368-8cde-8b266ae64a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde1f70c-c422-480d-a796-aef7fea22270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e87d9234-f41d-4645-b20c-171e8525b1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99079870-afb4-4b36-a6e8-3907338d08e7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e92433e-2225-454f-b68e-bb96d462b59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78c384f-685c-42ec-aa45-c82eb636a498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8846dedd-76d1-4327-9eef-73421168e8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a22c9fd4-54e8-4906-8010-9de56f4fd91d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "266a1bdd-5ac2-4c8f-8da2-23a915daba7e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0774724f-a91d-4b92-b548-c9022fcc5c61",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629c17e7-77be-4f3a-af44-6c85c2ff5247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a13503-0e54-4ff7-b8b2-1ae5aa332675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9de0445-1549-43ba-92ed-a7e89e0327ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "048f0e18-fbd4-4adf-9f20-e15b1c037d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f01a91-0a82-4bbf-8f66-fcdf514608ca",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184ace1d-0c28-4cac-922c-5a7f5eb1f03c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "bbe4c302-0f59-4d75-8316-607058e4eb04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b596040d-a7c1-490c-b4a1-2054f2081002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1675d235-0611-4e43-adf1-f0141bc9a9b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b537da6f-1eb8-4955-91b5-145d58c6493d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3beb982-b1b1-473e-a8e3-1a4bdaed0df2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83bd129f-144f-434b-b732-2f1a30006e90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2786f93-5887-40d2-bfe6-a83d3b3dd163"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6a4c2c8-b157-47b3-aaeb-a280139f3cb9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "15cfd677-e594-4945-83da-3c1350eb976d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf8499fe-b92f-4779-becf-612e2cce47e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d138350-3f6d-49ad-a50e-dfb863a46286"
            }
          }
        ]
      },
      {
        "id": "b0676c1d-cd5c-43c0-955c-b655c1b415b7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ff93b8d2-0970-41ba-8d07-2bc96b7717b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8b4312c7-55a1-4cff-8932-f687af3fa2c1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "69bbd10b-6de1-4ca4-88f4-7d14553f9917",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63478be2-9759-409d-9706-c5e57bce1274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c939652-fb31-4f79-beca-fc9dc67a8e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34873eac-7f09-4414-bd8e-72f6966dd2e3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588aab2f-cf17-4524-83aa-daa02721c749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3209e7a-85ff-4567-9a0f-a00d51407530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799f1158-58dc-4cef-ab3f-3aa6dfc17639",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7496f4-cec7-4583-9eb2-d7cace85e898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b45461-a744-42e9-80af-ae21c3a03339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11cf80da-679c-4e71-ba1d-ee231b607120",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f02184f-5f56-4e17-9732-dc1a9269ae1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed429563-ce3d-4462-9d3c-0d970ce21653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb5834c-a743-49e1-9ed4-32839bb06e3d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730837bc-9363-4dc3-9ff1-4694284b1e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd314a4-70c7-421b-8ccd-7c5569d8bc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b94ef5-bde0-42b8-9aaa-40c6c7b21b0e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe662bc-7fec-412c-98d3-e452ac3f2de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf503b9-a4f6-4ebe-8995-a78f55df6fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf4a15c-542c-4356-b809-ce53e1071982",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bc558d-f1d0-4366-a062-cc34ca2de615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3185ca24-4bce-4e57-a4ea-cdbcf0f93099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8804360-c766-4b04-bb7f-0b8120b700c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c449c196-8558-4076-b6a0-9f79d46a2c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a83442a-8413-4466-9b95-56ae73e4cb14",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24440298-35e4-4bbc-825e-3604170bc344",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7868922d-2ed0-4338-921b-5df61e5e14f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d815ef-4243-4351-9bd7-60effa377d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ae4681-351c-490d-b8e6-5ef8a074c05f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2896c848-b7f6-4061-93ed-4b3eaede47fb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6faa91ce-ed83-4710-b616-a67801c6c8d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de151bd0-446b-404a-8f7b-5c5611ed8754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f658baae-2a2a-4b36-9504-40f9bfbe76d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a16071-a58e-4bc5-aa47-6deb339e3411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4095ba87-21b1-4b69-aaf1-efd4c9ed897f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9f9528-b350-42af-b596-d6b0c34cea06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec3fdf60-e844-4084-9f52-e17af78a7a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f625765-2af4-4dcf-8b3e-9d1ed652cbc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b443f4-9737-422d-bbe9-6cc4c175c164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343a13da-3147-4ac4-b35e-6411e94a3d97",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a755e804-a0bc-4452-9df7-fff2481f79eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2427e0-d3be-4e67-a132-f9aca45e267d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e54846-6278-4c69-b8c4-a6168fb31ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79cafac4-f4c2-463f-82fe-d74cb783b946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ba0936-05ec-4406-a4cd-65771a997cfe",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070bbb6a-7d2b-4677-8d12-771023bea887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501d70e4-7759-4636-951e-b709b45e6e7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ad60ea-2a76-406d-81c6-205d66032ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d816ff1e-c434-4d8e-b2cf-0618b5d8bda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a286526-aa0b-4b64-babd-78ef91be91ad",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0be5f2-c42b-4660-9233-c5571b8aa9cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80a26d8f-d9a0-44c0-9f32-930a4202bcff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "126e976f-2bec-4f7a-9193-312f2cf371bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740022a6-e7ed-419e-952d-9a9cb1a6e66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d08ec6-26cb-4673-9eb5-d66ad3ff100c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e25de4-45f6-41e9-bbca-3df10943ad69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a23b1966-e57f-4efe-89c2-538b7ad421c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b7dc83-c083-4845-8458-9913cac28c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a8297b-a441-48d5-9428-a9c7df4bc0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af212e6-4536-4ac1-a2a7-6d77735e5b6d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9b86fe-b101-4473-bce0-e7fa7aa1c6fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd125a31-1a34-418e-8015-dffbc68386b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95480061-8162-4b61-9910-98a29bf333e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a495695-740a-4e02-b765-a37880defc6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191f8e62-f687-471d-acf1-7df2135396e1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211c6090-7ef8-4c0b-b6a5-3bfc89709b14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0e5e96e-cfbb-41cd-b697-b3a83dc3f952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23d675e-ae0f-4094-82c5-555980fc7c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397458c5-6744-435f-98f7-069d5f29f291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c40361-c7eb-4097-854b-03b5ca0fe256",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed859dab-96ce-40f1-a341-46082bb40c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65616b99-e188-4b03-86f1-aece4094b32c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbd8a72-f2ee-4484-9691-0623e6b0d21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c15f3cc-f818-4adb-b1fa-f185d31d4e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64bfcc1-6a1f-4db0-b3bb-dd6a41d39cc1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170d3906-d220-46e9-8247-500b66d70fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9a7c51-7e5c-4650-977e-5658bb1c6294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb244dd7-1b78-4ade-ab4b-589aeae7be24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ddd2e7-5e02-47a5-9c5a-b040fc1a8900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70dfe389-5f67-4af7-9f86-1bb888c9360f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e836f08c-5145-45e8-8dc0-1c35ce25d359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0902f501-3e78-47cf-88a7-536a4e582375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9e7eee-77d9-422d-8677-913d87e6fe25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dec2fdf-6e6e-4f20-be8f-1cdbf14ed950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa2fd4b-d376-4e18-85bc-a8a2837507fc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecf2880-4628-45a4-9102-993e936c0d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321b7447-ea26-4c59-8b6a-d21488dc18d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "133a3d30-a8c1-4028-a674-10b6dc220653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "910e73b8-6e2c-465d-800c-64624d7a3ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225294b1-82a8-4bc6-9ced-fb7827a336c5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7b6465-cc3a-438b-aa9b-b7c8d3cdc257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb9165d-6b0b-4fc2-b741-c918094b1e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8447777e-5693-4ee5-9511-5800c463aaaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f80ad67-a47a-4643-81ef-d3aab7c43dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d699aa-3b71-4d9e-9457-2f6b0eda26c3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3652e03c-b9a4-427a-af7e-66d6c8264912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16787492-bc91-42ea-914a-d3ca1f0a81b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ca5803-57c2-4759-87ff-8933b1d13ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d47ee13-9742-4a18-95ce-3fb6010276ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cb82d1-5ff2-4e29-86b4-1dcda6a9296e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de046239-f279-4621-ad9e-35c687c33b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5abfe3ce-044f-4b71-8d21-ec7b2cda252c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afc0a81-f3e5-41b1-8f2c-fe8925fbee94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bedee57-31cf-4502-bf68-9160864721dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d1aff4-59e6-4d2c-9f58-6768e8ec9c62",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad15b10-a357-46e0-93df-caac46990718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0428666d-8f61-4969-8458-02bbe7e87ca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc54c75d-bc9f-4365-96b3-04c1c1ccac3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b83fe29-509f-4b30-a76c-443af5d5facc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fd2246-011a-4655-8d05-d3b629b5382d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df38ba0-75bc-460d-a18f-74503d0b6990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48e50548-fe75-446b-812f-8afe25feaa99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dafa6d-ebde-4d1e-b0c6-76a8c63cd279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db515c2-c27e-4d0a-82d0-46def220bb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3600f155-37f0-4168-b43b-0388c9d6d002",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af1c0d4-8071-4ed2-97f4-1120cb30daa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1566677-3348-4ea8-ae30-044728f60747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3e6b85-cc7e-4fcc-8371-62d056d59b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60f15b6-4be7-4375-a371-dbf7e4fc9879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a42667-2e6e-4f55-adde-8642ff61f054",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9771451b-8ce1-4552-8405-ba115a5d4384",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17af9a0d-aca3-4fe1-b19f-2ebc26af1848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e175019c-2050-497c-bfa3-2a0f0fb4d122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "581fef7d-ca66-4757-8ce3-56936dd4dd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9344fa8-6780-40d1-814b-e2ac4c2f2887",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131d2962-8dc3-4d77-bab5-bf7680786eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b083b63-2642-46b4-a9cd-be8c5180550b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ab841f-b8d6-45a5-bdc3-c250b93c3f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af126e57-5fa4-48ba-ad5a-dba25e33e1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b723e5d1-2747-4e00-bb08-0d9b24a8dc25",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33af56a9-6129-4b46-ba80-a8eaa01b5ebc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be68d1df-d91a-484b-8acb-664298900090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20bd49a-370d-4b26-808b-01174a01be21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e6efbe-84f4-4246-9e6c-6b32d11e56e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd352db-a704-4bbb-8d77-077e3c021bba",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c60d24d-9861-471b-8b97-0a64fb60f5ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85c41885-a525-4dd9-8a8b-19bf368d5b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68ae5a8-84ad-4b83-9419-580f0b224d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9d1acb-11ee-4e0d-bb97-288542a0cd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e8ef85-e5c3-4efe-8aa4-709c3c4305e0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06636eda-ee05-4058-8275-8ecb62f7c12a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f54225ae-c067-4244-81f1-8d794ee3cd19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82e03ac-ba50-4d86-8887-e8ba5c21bdb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62cd398c-734c-43b7-88cd-dc6a2b95e3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bc3bbd-3261-4d3d-a062-695a2b60bd7e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdc15a8-7254-421a-b34f-02eb6cf94a3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d1325e9-3966-4960-adfa-e3fdc4e42819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b969f61f-1c24-4d67-af5c-bdcb1e5dc99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b34b08-5975-4411-9c21-ef52942b53bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf4869c-ed40-44f8-a839-1c09fd32de09",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7db972-7085-4a01-9127-05f312b179c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40fc6638-1d52-4009-b4a3-1fc0f5b91c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "062b232a-f08c-467d-8eb6-60712d6513e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de2773c7-4875-47d3-aeab-513d656b9bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74b6d0e-1bbc-44c8-9ced-20da27f6f8cc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4682f3-0464-4e7e-854c-b2fca54902d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "571d3910-7a9f-4385-a0cd-daefa2910b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5031c2a5-cbc7-4ae0-b8a2-b93775071480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785a1c14-8929-476f-8f31-c8c0a4a7de1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1d3a2a-4901-42aa-9ff4-bfc173c96054",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd41a931-a847-473c-9221-1b723013eb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94835e2-b868-451f-9d71-52d251720ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90010071-da77-41e3-8b68-595777b0ea29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6042f842-c562-4dc8-86d6-e2778e68491e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7b69c9-277d-4d2d-b1a4-a89041c124fe",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac81f16-9f36-44c3-8227-270518d1934b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eba9922-5678-4b20-96d5-bbea9e75eb8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72cc6c6b-42dd-41f1-a05e-69d6c78db138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461a647b-8b60-417e-ae9a-4d13bdda1db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ce16f7-1762-481f-86e8-3a2fd4e283b8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd18973f-ffae-4fc3-a56e-f856197c5a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fecd6d5-4ba2-4adc-a69f-3533e9ea4830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec44c6ca-a914-4027-83ce-bfdf113a23ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76b5a4f-a8cb-47a6-9784-3918e5b00c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79598b7-0249-4ef7-8bb3-259875e5228f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ea988b-57d2-43e1-8fa8-9d7bd6047d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59226ade-2b64-418e-afbc-eb4e95fc2d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2ae4bf-2731-4c6a-8f0f-b828b68c24f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97406e5-e783-4fbf-b0d7-00a5e23b357d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef626fc-6323-47eb-9c6e-c19d4ca6d7fb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2ff80a-a66d-462a-919b-fde576e08275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b18b3bc-1d63-47d4-a3a7-26dfaec8b337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82371099-bfc5-425a-8204-80b4c8c58d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf4a2de3-e698-4a7f-b28c-bc33ce7c2ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd852881-5658-4d0d-96c7-363c34869dca",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4367836f-2549-4cbb-b223-c63d6ac8d9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae04760f-2c7d-4d99-89ef-737f38905576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5173b7-1b6c-4f11-85e2-a3b4edf742de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07ab87e-9115-4cb1-a1cf-7e8b8478ccda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ae2818-aa8a-4d12-8eff-a0c6d90dba7c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a391faee-88a0-4fb7-9080-c77f25e1b13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2aec03f-ce5e-4ab9-80da-85e0e08dbad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f0a862-f2a1-456a-9ba0-0464da23e6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b212e1fa-9091-43f6-b7dc-9e3a052d2c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb3d929-cda6-415b-a128-59603c64c7ec",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98566027-abc9-4d3e-ac8c-85be521b4f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445011fa-ad0e-45f3-8c8b-3d1d161f8011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafbb338-0759-4379-a748-cf9dd93eccaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d421fdb4-b7f3-465b-acf9-3643739dbc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4d7bce-e3a2-483b-95d8-d8e85641b66b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253569da-36b9-436d-af0c-e23839784404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0fe63a-4254-4a85-840a-5024294062a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebcc377-7e99-43c3-afa1-f299b3948f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51e15cd8-e99f-454d-abfc-a31f012e5ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae2c4f0-f488-4e96-a160-6d7d80606fb8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9e9abc-086e-4ca7-8054-e8e260128c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec104a2-3ae2-45cf-9787-41905d4e220b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87273b73-13cf-4685-ab24-e324b276ca24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47930ba6-eeb5-4ab6-bbfc-a7eba7ec08e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80c3a73-ff1f-42d7-80a1-651f6ff16fbc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82dd87d1-cb6a-40f8-9bdb-ecfe212db9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc379354-24b9-41b1-a2ed-ec6a15ce8702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cea6706-301a-41bb-bb62-78119fd0c43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a0b7e3-754f-441e-9d96-2d33c0eb12ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e069802-b277-4cef-9807-f4877105a299",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdca151-65cb-434e-9879-b2428112ff7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbc42ca-af4a-442b-9542-9784e9268f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42d6edd-0b48-4776-9734-9bdb88d76740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1eb652-d112-4ed9-9843-a4af9043c33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3173ccd-0c62-4198-ace1-b5ef5c5f9b5d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc44d3d-e725-497f-a147-b60393b02355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86bc1e15-8283-4851-91d9-08c13304ae8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc2397f-8329-4db5-8db4-259bda674ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68b87a7-9857-4b5c-83df-7247f380b00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42baf345-395b-4b93-92ad-84daa525b5b3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154e4928-7160-4026-923b-24b8f22bb02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9edf5287-7846-479c-a3d3-e63254f6f4d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b366b2-dac9-41e6-84dd-4707ae1e69be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b40c4e8-45fa-445b-81b9-6b2cc695b11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "addc6706-5bb5-4ad6-b66b-d6bb46ba6d15",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e6c6b8-0c0e-4fd8-990e-248323cd661a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f003e7c6-4da0-4aa8-9ba1-e9231271ae26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ece6e2-1461-4db0-aa20-3acb4dce2c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74368d6a-b237-4da6-8a69-7d934bfe4814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a04bfe-037b-49ca-b55f-79bc213886a9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf028b6-7bc8-45fa-a2ff-87ca6c715099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c198bb7-5a64-4f33-a8af-16336f1bbbed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db61a8f0-3de6-417e-91aa-50b782989592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195180c1-63ce-4059-a323-29a875e2ac3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82379923-92c0-43c7-b7e0-77c6370e665d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6226d68-8eec-4d81-8171-74da7da50f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2d94a3-0fbc-4b79-9eec-c18f44df70cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a136ef44-99a4-43ca-ae57-120bdb1ccef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ece463-52f8-4654-8d97-ea18adf57bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb432df1-a868-456e-8a51-210d97e1f92a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cec4440-d96b-4d5a-98a1-046606627671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c702ddf0-fc0b-48c0-a761-739a403101ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "619bbc35-0d4d-4f04-b855-929124dbfcad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3557f02e-3b05-40c8-824a-32af1c972cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bb38f7-41a5-41ee-93b0-21cbd044e6cf",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03da9a2e-fb36-483d-b86f-6220e1e5aabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70be0e34-10cb-47f5-a49c-8e269bd90a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "864d8bd7-f880-4e68-b24a-127c6254eba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59863bbf-743b-4800-8e43-806920cec93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f92fac-cf0a-4a1f-890c-7d881700c0ee",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253a7bf6-6f22-4138-b989-d91e2dc194a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b20f701-cb16-46ea-91af-73ed29f9ae61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf648ef-0ac8-40f5-983d-93e2311e481b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a066e8-add8-47c3-b885-37ecdf7db60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985ae842-30a8-4648-ab03-8f757226e18b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568d4543-5dbd-4273-b058-51343de3c8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715a6814-218a-49c7-a611-3568b4d4252a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7841c3c-abfe-4470-92be-cf1da8387ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7706038-6bf7-427d-8de2-356ea3ae2a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a719edf7-c224-498c-bbbc-791c8b90466a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca41f86-99cd-43fc-9ce1-dd77ab0f756e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfbb0b07-ce7e-42ce-9e35-93607c28198c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b24e4d-d34e-4fa4-a68e-c63aec8d9f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8710ee-0ae9-4444-a566-f1bbcba6f71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9cb0ef-0705-4304-ac08-e0b88bca1113",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63155be2-947a-4f3d-9247-1fed0f8d582b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30d2ae3-b2ae-43de-b754-8ab78ee37c41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6a29c0-9a60-4266-9218-d726851989ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec1be87-e5a3-4fd7-9b25-5c9a628e9e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b373a48-b354-44dc-b582-ce35f30adfc9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfaafe2-ab1b-4fea-b190-b55e1f93f043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca31ab82-193b-4fde-9b26-9f93101123bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8b9e01-6ec1-4fe3-adcd-2e3c438a2441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1453815-72b6-4e77-a456-320f6ad239fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4101439f-8f0f-4180-9e3d-be765ea6abb7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2d9f89-8570-4dde-a102-3adedb44402d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f307e9-9326-4b1e-92a3-41fe275828e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4df723-f8c7-4c2b-ae24-efebce90f694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89cfa61d-7d02-4c0a-84d7-bb305f518b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3729f9ae-a7d4-413c-81c1-988b24a8f3d0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e7d6f3-3225-420f-b766-68fb07eb68bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f86ce08-c0cc-4f18-b56c-ece095885839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "327dad07-757b-4d9c-81a4-970fa3fc89ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e66f3f0e-6047-4ddb-86e7-102475447b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb596be-3ffa-48b4-aa3f-0492792fd6eb",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310b7587-9f20-436a-9e04-b683346c26b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "009e7f5e-cf39-472c-a8ef-47e499783f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fab1bd-818d-42d1-ab85-560e0424da57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c12cc18-0f9b-4f8b-8f3a-065ed9947606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cb6d1d-6a90-41ed-88e2-c12f85af9201",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27ef9f9-de09-4b04-bfe5-71d89e7b12c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ed0d9b-e586-48cb-bc9c-b05d8e95d8cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbfed97-b693-4f1f-9844-f86016509b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e3a799-628e-43a5-9219-400699abea6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08832dbb-05f4-40e3-9875-956a4500c43a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ae17f7-6547-4811-9003-3c901217dbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5608999-5685-4310-9c22-c9a7b3ec49e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046feea6-e216-446c-9423-14da63cfbc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bf6d28-fb0b-4208-822a-3afa6a9e87d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c1ca03-4327-496c-9c35-61d0c65e28de",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704e94ee-831e-44dc-9ef8-b97edb6fada7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "140d84dc-e33e-4191-bd07-0035f4f33af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad9fa00-0c8c-4640-8773-a74f9918bce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6b94a9-144b-4aa0-bb87-66a9cd4a71d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d65adc0-8ff8-4417-9272-045535585d3c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d804e84-6351-45f1-8752-8ce9da1b5c68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a57e1298-f118-46a7-8537-4ba5876e3e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "147680d6-0f44-419e-b9af-54f4aa480f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41add7cf-d786-4d72-bd18-48280bb3cf30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005f0981-343d-4a3a-9993-faae813dcba0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5375275-d68f-4c73-914a-bd4236cc7e75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfbd7954-c170-4532-bd89-b885c21cab3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40df0d8b-8566-41bb-8813-035cde3757fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9276a79a-2008-4a37-939f-782e559f6128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314ba899-f433-4779-b2c3-4bdb1588a1a4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec8c969-da7b-4d50-9463-a18ceddaf67c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b35065c1-16a0-4f42-9cb8-9e9fb55458ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d764c9d-0e64-48f8-9d62-b4434db71f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b50cf7-89a1-4c07-87d3-6cce64550409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8d6c73-39de-4b27-8ecc-f03e646ce9e3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb909c4-0d9c-4877-b121-626288db7e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "691365c6-0d5d-4302-a11b-205e9f5a1256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08a1f12-e82d-411d-9634-b196992885ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a10dff0-b8c0-4ac0-aefb-5094ea1340d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3904df-c57d-466f-b07f-9be068f854ce",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e23f387-2b96-43cf-a106-0a2f3a602bf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e4d3a19-ecc4-4b38-bb3d-68cd643e1327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c339b0-4717-49f5-9125-99960bae4dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1578d8f1-885b-4802-a02b-028b88fe7e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ab8b76-57c1-4d60-870b-6e3e2e25d213",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b156f09-172a-4f0e-b047-88d40768133f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b565b9be-22f3-46e7-9523-1fa2dfc7a4ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e06b91d-3f47-4b9f-8a2b-0242f119b771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9846c9f9-ab7b-4773-9d22-d7370dd726de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68c5eea-636c-4b90-8469-3d057031c986",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f364620-1092-4295-a16b-c9ac2a1a0a43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0a11cad-6731-436c-a110-4ba7ae77d0f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fab6d34-c8d2-4c97-b975-2c372c02a911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21955eea-ac53-42d5-adeb-1420d33a2731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c497ab-e3de-4cfa-81bd-c39137f1d686",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0811ad79-d843-40a7-b836-57b6356024a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdb3b9f1-fd85-4fcc-a644-cd688a744856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "971608c8-0904-4d6a-99b6-ecce08740fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b305c5-e7e9-451d-b032-2ba5cbda6608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2013d8cb-ad49-4e2d-8b2b-2ad1be387bfb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48d6151-93d3-49ce-a0fa-55e13535c13b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2e655f7-b16c-4660-8d54-e1521c9a7fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bf4460-e97e-4415-b417-c4fe0965da80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3547227e-b478-4d71-9da3-cd55be255095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1c3212-47e8-49c8-b861-d744720c5b49",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36b9d9e-e98f-49d5-8b81-6bcf114c8a48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5990e2f2-870e-41bf-8787-7e2c5c1d2334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66a767b-af5c-402c-bc2c-2dcf182af513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae95195-b051-4cda-a058-9262d84083d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9a1ebc-02c7-4f59-8f6c-47baf41ef590",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dc3922-ebd6-4de3-a801-c05a68182b6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6def4aef-3d6b-4466-b28a-fdb45cd4351e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3a398e-231d-4657-9073-a5c0fcd215e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2443ace-6595-4741-b625-9bb4da71de05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2eda0fe-11d7-4328-a824-a6abacaeb364",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6da6b8a-c849-4bd6-83f4-324b9aa92505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e30bc8-1d26-4d16-bed3-8e8ad75cfa9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96050361-f5ff-430f-b9e7-f49ec3fa132c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d6ef57-9734-414d-82ad-cedcb09028a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76176f3e-145b-43ba-acbc-95dd8c454cbd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74570b9-642b-441c-8bf9-60acdd479e0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9f20428-b412-4346-a371-785bbc102817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f07a44-c768-4dd8-ad83-887af54a3977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9bcb89-e69a-42a6-9c79-2f20f08b118d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbccd88a-7471-4e03-bb79-4b39614c45a9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac722cad-575d-444d-aa8e-668086a36213",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f40f3989-0aff-4422-9793-a653b3ef8d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c713df-55a4-425e-b2ff-fb7a22540932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "599d5d98-058b-4977-a74d-4b39b5db1900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a91cda2-08e7-498c-bb73-50901984de9b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7394c4-f8c4-4eb0-90e7-4d6d949c9a9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d13dc99e-2496-4207-933c-928e13324970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e67549-5ef4-44b0-b1bc-7e67293d8ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba0022e-6cdb-4214-895f-e2bcf12659d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17613e2-6c4a-4925-8dc1-16074e198955",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a376f159-6728-4741-b66f-bb0a13d6c5ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a2dd1dc-6b22-491d-9e5b-da2d65d8aa25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cad7bf9-3638-46ba-95bf-aca8ff11263b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faac481b-190d-4839-b5d7-b3975117d666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd4a923-b4a5-4799-993d-0f5b5b1207fe",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9076c02b-0af1-4533-825f-3afcd4c1e6f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39e4f397-422e-4300-9cc9-f97e10a819ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaac72dd-2716-493d-aa39-5bbc7573eac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6475cc77-e408-44c7-8e55-b7c1a4de5c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492356b8-8323-473e-a3c2-c9c09ec8361d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642371f0-4e19-4592-b3fd-9d401a283c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07ca164c-efa8-4171-a1be-0648b56c89fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3094ee5-40e0-442e-aa71-b93381b4ca8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd5fe22-b943-4386-8c93-1332e88c44fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c892f20-01d0-45f3-9051-9de74dad077e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce842b63-3f98-462b-b7ba-376f06744640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b5a847c-938c-4a41-af9b-9310d2325811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be1fd3f-ba7f-409c-955c-2d3d4da29090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9496d242-50ff-4cb6-9416-cfd472bdb1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b512a630-3053-4dac-aa8d-026d092269b2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b5298b-3bc4-400f-9071-112af7a3d54c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8deea92-8764-4361-badb-f767819233ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c51189-e85f-4c01-9d18-fc317052aeae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d518dd7-4897-498a-b68d-0442643c3ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81038206-b43b-46d5-b3f6-9b6384054390",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d0e4cb-74d4-42a4-a48c-2afbb99d70d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec759aeb-8caf-4045-9053-4d0d5e30e94e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12797271-08c5-4857-a312-3a73e8200acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff621efa-2c87-4fd1-87b3-f2de3b1f0260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffc3108-9282-4f14-8d27-f2f3c8cbf62a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfba36f-c99f-4cdb-9981-6b135eaa52fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "850f432b-285d-4c51-ba20-4e72473e9ae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0aeefb-c950-4db3-8394-37b4b5ebf601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37dc41a2-7453-425b-ab54-a232378d89b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c05790-9190-4601-956a-03b78fbcfaef",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0098b21f-cdd1-4965-868c-2549275d3548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc6f6dbd-c8ce-4e6c-b572-1f7760c43047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5a99db-ef2f-4bd6-addb-ca34a51e3a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ea5976-73d0-4bf6-b700-26ba8ea00345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e99d5f9-b1dd-407e-8097-6518d4bbbf41",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8090af3-d3a8-4582-9926-82eeedaf541d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14db8afd-0041-44c6-9f4b-726cb9ac6ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f05586-701b-4fe7-96ad-823d9d4ac414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d41f8c1b-686c-453b-bb9b-c4cf2d5d3745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22b1ce3-d17f-4961-8f3a-30d136b958a7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636c674f-b7b0-4b3c-afc7-7c13c6eb4a0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e5a0dda-57f7-41fb-a337-b7b16c9bb94a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf553d7-d08e-4712-bf3c-65427289a8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceb4bdba-f887-406c-a2a6-40945009228c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f0002c-193a-40aa-8551-bc55a68cb637",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14fc176-3c7f-43d3-af12-72baab71aab9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80ff4323-7b7e-47fa-80b1-f674b1c3fbf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce909efc-e6fd-400c-9a68-1390a229037d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "367d1632-68b1-4531-9da7-68df1e0fa0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf96e4ac-6813-49fc-999b-a0a48f08f013",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2493706d-9abc-49cf-8bd8-ec2ca09c05aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a86ce64-c4a3-48e3-a859-82e866f55e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8461486c-b058-450a-9ebf-5e849230c374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868557c6-bbb8-45bd-808d-c160ebeae7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf19df6-722c-4308-90c0-c7b65b815f1a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8b0f78-6ad3-4c3f-9c64-fa606c8a02fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d8e55f0-6c43-4a72-a6af-56d37742e842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2810d5f5-3668-49dd-8d74-6c5b7b3f4778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57d3f40-4659-44ea-8a90-d3eb9158aac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e534cdc3-a413-461c-b8b4-177b0558558f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f74de6-28c9-4117-bed7-3aabceb51014",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a3d9cb9-caaa-447f-85cc-600f5d13e04d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0709196-eca2-4ff6-b39b-b4035ae4033b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1485a620-c11d-41eb-aac7-029750edc228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74806ee-d075-42c4-ae57-dfaa6abdbc68",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4180c4-cd95-4b23-9ace-795f4c50bac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c9fc64a-14d7-4ea9-9d9f-25aac8457ebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e62a08-48e4-4b51-b77a-ef5a1da8854e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3aca48-7a40-4b00-ba40-177b78c59443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1ea865-61df-4438-8cb3-8fb162e20cde",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2911e4bc-6079-44ac-a076-880465bb4730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e3d4f5a-abcd-4133-bfec-31b91dddf91d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24fdf8c-ff30-4f05-8881-3acb36a5bdcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef345602-7512-4354-93d8-042d3a9e4213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520e642b-f46f-47b2-9a38-72a340588bab",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65137a8-9b3b-420b-8168-ebcc58d419a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e91c552-a097-43a3-845a-95c132492245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ebfffa-3ae3-43bb-a432-cab8b05f0f54",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529f457e-e561-4a64-b430-a39e366abd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71388ae4-51d6-487b-9326-8ec5c89d4b90",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807a4d60-e19a-403d-994a-228a95af304c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a7fb8e8-76fb-46d1-9077-cf88208e653b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8de1eb6-9d21-4749-934c-642eceedc2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a93df1-e81c-4a9a-8d8d-aee63e8246d0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b78f82dc-2d29-40aa-96fa-b8e5c952b07b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c103412e-a452-4025-b52d-2e58c83ec609"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e4c16e0-4a40-4285-bba8-1e587d041f3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b9dac68d-cc19-4344-b9d0-9c1677b58bde"
                    }
                  }
                ]
              },
              {
                "id": "06012c86-edea-40ed-9598-ce6d5adbc987",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43fdb2e1-d467-433f-8eff-e28651b64d50",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30759566-520f-4bfb-95e7-eb7530f83d01",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b882b4f1-07bd-45ff-bf7e-a32201f57895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f111eb-fda7-4149-ba24-55cd278fdb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27ebd1e5-bb61-41d4-8227-f53ce076c935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c236f0-5719-4f38-b352-fecd2ba8af3f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb41392c-d362-4486-9bbb-584a6891c166",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8b42df71-db94-4966-9a3b-22b3c44a5561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fdcb8a-8a63-459d-b820-b8079ed86a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6c1a1f0-d4a4-4102-b09a-67c74db10347"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6dcee1cf-74d4-44b8-8aab-2594dafc492b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be55828d-2310-4dd5-8bc8-5e9401b11ffd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c16bfd3e-b2f3-4685-affb-c23358cc76f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c86a77e-9cbd-4702-b864-bf9ae2f3f906"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "3f181fb6-1e8e-4e9c-a098-77b5ae280257",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cd16444d-2f68-4557-bd8e-24acdd8a28cd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d56e3d4-8509-49ce-a87e-5f1eaa49a5fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d680d70c-f6cb-4a44-9d2f-89e8cc82886e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f800d36-a40c-4fa8-9572-fe9f98691e48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd2cf7e4-c861-4249-bc9e-86048b9acf20"
                    }
                  }
                ]
              },
              {
                "id": "42bc0d56-4ca4-4bfe-8594-a373da16f094",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0901e15-d162-4f91-8054-b4f2cc437b81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6823c112-d451-4589-8772-f23ef8c06379"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73ae85e5-be72-4a92-94b8-f3d18e0fe6f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49d689c9-7818-4ad9-9e79-fdee9cacbe34"
                    }
                  }
                ]
              },
              {
                "id": "deb18671-146d-4430-ba38-9cb9a517d0e3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ded329ca-20a5-45fc-820a-e78b411f8545",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fedc390-fe0f-494f-aaa3-73d6b8e01c40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffbfb618-cc74-429f-9944-f0e45fe0ce24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32fb1755-a903-4812-ad2c-a8855eea9b96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8632b2d-4986-417e-afbc-9475e8abb482",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "292eab3e-f4d8-4da0-89f9-36b74d938b3c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24e1106c-7cfa-4e2f-9d66-e0583438bd90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da9a29a5-b5e6-4c1d-ac7c-26ceac9fd935"
            }
          }
        ]
      },
      {
        "id": "8c9ee3c8-3ba9-4a5f-88a5-c44d15c6c0d3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "df0ee88d-ad45-481b-bfdc-f3a776497765",
            "name": "Negative Testing",
            "item": [
              {
                "id": "209a4faf-c027-4fb0-9ca2-11dae3dec210",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "092ea19a-b330-4e4c-9647-b4cbf2d3a9aa",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c48049-12a2-4cdc-bb82-1b1b3702004b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "37a3d669-f01c-4bdc-9bbb-516121c2f6ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9119fa75-8c0a-4efe-9a97-6e7be40fb70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c4bbb9c-18ec-4112-b7a2-17dce95c2ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e463546-7152-4638-823e-f5d65ebef7e2",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a95aa6b-a238-411e-b210-8ef726d3b2a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b9c9c53d-d422-4d52-9eaa-994b6597b9fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5053313a-b665-414a-8512-7e8bc11ff090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fe142a1-f72f-4067-9ac9-3a31578500d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73069456-5e4f-4e6f-9a01-f21ffaef67a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f35d06a-6b17-4b8e-a982-978c98c04b21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f15c4ab7-fd68-425b-aade-a980cdffc8d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3dc04668-7708-48fc-9a8b-8798b9e8a612"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6b3750c-a404-4617-9cb6-bc127a6db51c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "483d514d-640d-480d-9227-b3bfe029b179"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9ca774f-8123-4ede-892f-f96302757d6e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8cac62a-24e1-44cf-800f-1c9c5ca1ab40"
            }
          }
        ]
      },
      {
        "id": "4a2699c1-c324-496d-8924-9d8deb2ce8b2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7dba1087-930d-47c5-bc8a-e447418c132e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0432a03-18fa-49af-a5ad-efbe368b65dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53f7f954-e74d-4f7c-921e-5c160c358b3e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39045a5-780b-42eb-8a99-41f18a394263",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c5e0aa7b-d7d6-46e4-82bc-d76d78254d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c92eafa-84d6-4a69-9c47-9dd20717c112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e60fe6d-9a14-475f-8830-4127e5b0c6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464b7315-8d9f-4448-9173-9c7a7f706f9a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8a61d6-6b4d-43da-b06e-4a35d9a48e30",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "97563ac0-6215-464b-a531-06eb4cfd64cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc335d91-68d8-4a52-ac27-f27774afab30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d35bb56-8878-4f0f-8410-4ee4c27e7066"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be29c26c-6746-436e-9fe1-b62bd49e7513",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa9bf7ed-58ae-490c-8576-0c48c8bb6043"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bfc7d05-cf80-434f-9fe2-bbd3527a7218",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7383b4ea-27a3-4737-9462-88d67c264531"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ced5f6de-dd45-462a-8c24-6a370b486734",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f928dd43-0987-420c-962b-e9f84bdda116"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "669d330f-01e0-44a7-9ee1-2211fcfbda4c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99d7021e-d5c4-4ff4-8808-5ef734ae8b3b"
            }
          }
        ]
      },
      {
        "id": "f929a7a3-e817-4345-a40b-2894feb68030",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3a0828a7-c65c-4e8b-b55d-597d87fddc15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "956528ca-9a26-443d-81db-320919a80b27",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d4f0ffe-10ba-4cf3-994c-07aaec08ae12",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349ab2e9-3e44-4cfc-90cf-5df2bbc5182d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "78b6d1ea-88de-409b-817b-b31c8c5348db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb28c242-0302-4fd5-87cb-2d3cd11e7111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "499fb6ea-538c-49bd-a98e-5a18bb3bf9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7634241-513f-4836-b13d-523516ae7099",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c86cbb0-506d-46e4-863f-fbeba616a8b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c1b95ccd-f8ef-40fb-8461-8e6a5b29a55e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5eb87b9-93a2-4206-a6ac-89ac34e02d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7710006-df1c-435f-b0ec-f006bec1eded"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76c03987-1993-489b-9f8a-b6eb1b272b1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbce5a6a-4574-4578-a7df-28cb6b359b0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "724bca5c-42ed-4680-b8a2-40072044fefd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a382506-3231-4ef4-898e-0e88f526ed77"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9a5ebec-84eb-4efa-afe2-e05c3172a7d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4a5f2a94-b6b6-49e9-84ca-b9a12ed219bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71f63fef-8d2b-4bb9-9a5b-794b5f53a981",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4da82017-a4e7-42e0-a6eb-c5a74ff9cc29"
            }
          }
        ]
      },
      {
        "id": "b772deb3-11f6-49ad-97f0-d5857de1ca66",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43f3d1f8-203d-4e29-bbea-6a29fe72fb06",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9bcc77e-88ea-4121-b108-01d935c92831",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "88fcbe91-b88e-4c4d-ad39-3a5839c5b398",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "468d76f5-295b-4a10-bed8-bb4d36a1637e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "efcff1b1-616a-4c82-ae85-76aef1e103f7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 90
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 100.65000000000003,
      "responseMin": 15,
      "responseMax": 880,
      "responseSd": 131.2165144097578,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667523086701,
      "completed": 1667523124301
    },
    "executions": [
      {
        "id": "837dfa5f-651a-452d-b2b2-d57dc28451f7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b57add09-566c-41f7-ac45-5c8e036ef1b7",
          "httpRequestId": "3e2ac41c-3d6f-44e7-947f-320e0ae02da3"
        },
        "item": {
          "id": "837dfa5f-651a-452d-b2b2-d57dc28451f7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f1a36d26-f8bc-4cbe-9d50-ed1bb207dace",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 0
        }
      },
      {
        "id": "81c40dc7-b6f0-480b-bc37-ecf4bf974274",
        "cursor": {
          "ref": "65e9df84-84a6-4406-84b7-270155c13893",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7f296aef-2a42-4cbb-a6c9-d9cfb6a438c1"
        },
        "item": {
          "id": "81c40dc7-b6f0-480b-bc37-ecf4bf974274",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "da511330-57ca-4a6e-83f3-3c7607dd87b9",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "b1872f38-ee53-4fe0-8b01-6ee3b7982086",
        "cursor": {
          "ref": "d7d87d82-34de-4938-8d2f-08888e6e6f8f",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "de5abbca-1b86-4015-a864-ead9fe72245a"
        },
        "item": {
          "id": "b1872f38-ee53-4fe0-8b01-6ee3b7982086",
          "name": "did_json"
        },
        "response": {
          "id": "d06b1562-a6f7-4e33-96d7-76ba25f484c0",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f406fa-845b-46f0-af42-c35a93159da9",
        "cursor": {
          "ref": "4ea5d9c9-1cde-473c-949b-e190d53ba7b4",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "45d1a8a1-ed25-4a7f-97f2-03e8ee5a6734"
        },
        "item": {
          "id": "01f406fa-845b-46f0-af42-c35a93159da9",
          "name": "did:invalid"
        },
        "response": {
          "id": "4ed79661-0df5-422a-b09f-70ef5107ce17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f406fa-845b-46f0-af42-c35a93159da9",
        "cursor": {
          "ref": "4ea5d9c9-1cde-473c-949b-e190d53ba7b4",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "45d1a8a1-ed25-4a7f-97f2-03e8ee5a6734"
        },
        "item": {
          "id": "01f406fa-845b-46f0-af42-c35a93159da9",
          "name": "did:invalid"
        },
        "response": {
          "id": "4ed79661-0df5-422a-b09f-70ef5107ce17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14ffcd4-256a-40c7-9a8b-6be99558d33a",
        "cursor": {
          "ref": "f313bc87-8b4d-4a13-809b-57b534d8e43b",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e0a72ece-67d9-4b7c-a74b-ad9a8af0719b"
        },
        "item": {
          "id": "f14ffcd4-256a-40c7-9a8b-6be99558d33a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5734d260-fbb5-4bcd-ba9b-c778f40d974b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 153,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522e39ee-85e5-4612-873c-d1ac880652d7",
        "cursor": {
          "ref": "6b8cddca-8c8e-4c9c-87a1-2b8ba3ad4d41",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "105329d7-d716-4827-a0f2-0a18241352e4"
        },
        "item": {
          "id": "522e39ee-85e5-4612-873c-d1ac880652d7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "aabe673e-bf70-4a61-8819-459f548778b0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e6865c-fccb-4822-9093-856495154674",
        "cursor": {
          "ref": "2b342534-fef5-4443-be78-887816607099",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "04bc86a2-b302-453f-91ca-ad459eb6286e"
        },
        "item": {
          "id": "c5e6865c-fccb-4822-9093-856495154674",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "158c9843-5215-4062-835a-7b4709a91c3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4309dc-99b2-42d7-9ce6-8f5392124a6a",
        "cursor": {
          "ref": "54466f79-aeb9-4f5c-8d5b-3c8ee98e89f6",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f6024cb0-cb91-4512-9749-5a59167238e0"
        },
        "item": {
          "id": "0d4309dc-99b2-42d7-9ce6-8f5392124a6a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b21e805b-5e71-4af4-ba9c-554758d60112",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4309dc-99b2-42d7-9ce6-8f5392124a6a",
        "cursor": {
          "ref": "54466f79-aeb9-4f5c-8d5b-3c8ee98e89f6",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f6024cb0-cb91-4512-9749-5a59167238e0"
        },
        "item": {
          "id": "0d4309dc-99b2-42d7-9ce6-8f5392124a6a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b21e805b-5e71-4af4-ba9c-554758d60112",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4fc9ee-0220-4a74-98f5-e8a139b07a53",
        "cursor": {
          "ref": "58d4fb8e-9ff8-40e1-978c-26c02fbf550d",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "574c1fc3-ef40-467f-bcdf-254bdf912cd5"
        },
        "item": {
          "id": "fc4fc9ee-0220-4a74-98f5-e8a139b07a53",
          "name": "identifiers"
        },
        "response": {
          "id": "b5faf303-bd0f-4348-8814-7c48af45bb1b",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13276311-cedd-4413-b700-23ebd005d482",
        "cursor": {
          "ref": "b93ef597-3fc4-4c6f-ba81-197ca6a86be2",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "de0efa20-35f7-4954-8dc4-f22ca018c5d0"
        },
        "item": {
          "id": "13276311-cedd-4413-b700-23ebd005d482",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1720a307-99fd-477e-9389-758c9020bc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13276311-cedd-4413-b700-23ebd005d482",
        "cursor": {
          "ref": "b93ef597-3fc4-4c6f-ba81-197ca6a86be2",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "de0efa20-35f7-4954-8dc4-f22ca018c5d0"
        },
        "item": {
          "id": "13276311-cedd-4413-b700-23ebd005d482",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1720a307-99fd-477e-9389-758c9020bc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea8ce20-d098-4bdb-abff-cd829349bed4",
        "cursor": {
          "ref": "46d12373-94be-4d68-b6d3-53b5796ef6f1",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e764d7e2-b506-4f34-b332-3f4e0a45badd"
        },
        "item": {
          "id": "fea8ce20-d098-4bdb-abff-cd829349bed4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "342d7864-5a5f-4e17-8fdd-3e779aac8a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ce4665-0015-4fdc-ab8e-4078dc27f121",
        "cursor": {
          "ref": "6f5fa4a0-3037-42a6-af72-9f180e402d62",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d705af99-7dd6-49cd-a699-ecad597a9417"
        },
        "item": {
          "id": "23ce4665-0015-4fdc-ab8e-4078dc27f121",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "836d2b5d-1138-47f9-96de-ee37ea849021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef55f1f-e895-4929-b0b7-a69a7631c8af",
        "cursor": {
          "ref": "2e135b17-647f-4b26-a7ac-b53fb8801b0b",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e292e5f3-1325-4388-a88b-38d850d61ae7"
        },
        "item": {
          "id": "3ef55f1f-e895-4929-b0b7-a69a7631c8af",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b14ae6a9-10b0-48a9-b90c-fb0c5ef773fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00b76c6-744d-4d43-bf49-d5608fddb62c",
        "cursor": {
          "ref": "434b3538-faa8-4976-a85c-027f640d959e",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9ccf4f1c-86af-4fa0-b7a7-5918c9110f24"
        },
        "item": {
          "id": "e00b76c6-744d-4d43-bf49-d5608fddb62c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3df6f953-70d1-4bcb-b97c-48d702bdfeff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16589a12-0c6b-4e1d-a575-bc7e6dbc2242",
        "cursor": {
          "ref": "02ec007f-b24f-40c5-ac8d-9b3b6bd4d8b9",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "989243e8-8cdc-4fcc-b0fc-f000008fc294"
        },
        "item": {
          "id": "16589a12-0c6b-4e1d-a575-bc7e6dbc2242",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9007cce8-2079-43a2-8b10-dba965920fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544175fe-db76-472c-9249-9f60ce0d65b3",
        "cursor": {
          "ref": "a7d9e874-f173-4eb1-8a72-5b1197bd2c2a",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8b637af0-f055-43e3-bd95-f9285a4c8e7e"
        },
        "item": {
          "id": "544175fe-db76-472c-9249-9f60ce0d65b3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9b3d632a-f425-4ad7-8eaa-57edf138ea26",
          "status": "Created",
          "code": 201,
          "responseTime": 643,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "6075b87e-eeb9-416b-9407-f0dab07b3c78",
        "cursor": {
          "ref": "c570da12-71ab-4988-88dc-fc62c32aad69",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a87b5ef3-a5ae-4fe3-942f-5c24c473048d"
        },
        "item": {
          "id": "6075b87e-eeb9-416b-9407-f0dab07b3c78",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c4b4bc72-cd46-48e2-a9aa-5456ab0c5642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd896d1-c152-4222-97ea-f52b24ad0e57",
        "cursor": {
          "ref": "7506bfd1-7ce8-4f6d-b85e-014408483f72",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8963cc50-76ef-41a9-8919-c863b5523924"
        },
        "item": {
          "id": "4dd896d1-c152-4222-97ea-f52b24ad0e57",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "011fb2ad-8507-4378-bc76-74197ed47719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1f98c7-fc4a-4b9a-8ce3-3caf4c963cfd",
        "cursor": {
          "ref": "18763d07-6d82-4f24-b5c4-e34875e4e1f2",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fc3e7e05-3557-4a67-8a0c-5a589bf23705"
        },
        "item": {
          "id": "7a1f98c7-fc4a-4b9a-8ce3-3caf4c963cfd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cc4b5a87-0613-4170-bca9-2120a64734fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f311177c-0a53-46c7-bd2a-b3a5cecac9d8",
        "cursor": {
          "ref": "c3e7bd31-0612-4568-8956-7f8f0b48b45d",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "05314b68-10fa-47ad-9cd8-b0ee54d2c4b1"
        },
        "item": {
          "id": "f311177c-0a53-46c7-bd2a-b3a5cecac9d8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "45e11418-e11b-4015-8511-79d920fa3e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e287a44f-e4a6-4435-9411-679262d02902",
        "cursor": {
          "ref": "295a02cc-da70-4897-8e56-d30479c46d08",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7ed1f90c-9f18-44ac-abf5-572b0205a406"
        },
        "item": {
          "id": "e287a44f-e4a6-4435-9411-679262d02902",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d4ed6857-6d35-4c2b-ade6-d6982fd17cac",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f397d123-096a-46a0-9ec7-dd58c3d244c0",
        "cursor": {
          "ref": "07dc40d5-8eb8-4e46-a156-cccdfdd76ace",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f035b5a9-57cb-49d6-8129-8058f5787a13"
        },
        "item": {
          "id": "f397d123-096a-46a0-9ec7-dd58c3d244c0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4fd9a52d-ada0-4c22-9a22-5cb9e08bf18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a00ae24-cf63-4285-90e3-6bf737bcea86",
        "cursor": {
          "ref": "51b4d5b9-5d58-49aa-9830-0abb21ffe631",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e72f012e-a01e-43e9-86df-936bf5fdbfa6"
        },
        "item": {
          "id": "5a00ae24-cf63-4285-90e3-6bf737bcea86",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9cfaa8b3-e134-43eb-b2d9-d84e6eee1bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64018565-b3c7-40c8-a034-8cde10e817ee",
        "cursor": {
          "ref": "4a305ebf-8921-4d4d-8885-855c3511e8d8",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "80470798-9fcd-4bc4-a4ba-8561f57dc8df"
        },
        "item": {
          "id": "64018565-b3c7-40c8-a034-8cde10e817ee",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d0e31767-e3b9-4c68-a946-22ba76ec2d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c718403-4f6d-45df-904c-ad8f64beb30e",
        "cursor": {
          "ref": "89dedf90-1a88-4fbd-aa89-3a667820bbe3",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "70702639-0e04-493d-8b9a-e6a1599b6fd9"
        },
        "item": {
          "id": "7c718403-4f6d-45df-904c-ad8f64beb30e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b0c2c32a-f054-4336-b7bc-4f96651ee84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0ac430-a09c-4458-ad14-dda8a624df2b",
        "cursor": {
          "ref": "909d4b8c-2ac7-4fbe-88a0-5a9fa0754c63",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ac107d94-0ce7-44af-a2aa-0820771b8a41"
        },
        "item": {
          "id": "1b0ac430-a09c-4458-ad14-dda8a624df2b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "697eebe0-629f-4b23-ba1d-47dce130aa42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701663cc-c277-46de-81ca-a9f64b2fe56d",
        "cursor": {
          "ref": "32358bca-0751-4f74-a6c7-467cf55c8419",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9ee77c88-8ffe-46d7-9b7e-80527d2c47fe"
        },
        "item": {
          "id": "701663cc-c277-46de-81ca-a9f64b2fe56d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e46e16b4-ff8d-4dbe-bf70-1ab0b9c4dfe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa2829d-af1b-4ea0-8865-ba67933e3c3d",
        "cursor": {
          "ref": "5cf497a5-4c2f-4d6b-90e0-464fc7130bb2",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d66ec451-3c7e-42b5-8b8f-967f6a49a6f5"
        },
        "item": {
          "id": "3fa2829d-af1b-4ea0-8865-ba67933e3c3d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f2adde1e-47aa-4000-bb4a-0fc070952f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a256b97-b92e-4246-baf7-7f9e33ea6e19",
        "cursor": {
          "ref": "dc339eec-bae0-4bca-9362-26b93a7d0b1b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6c8d23e4-b338-4fff-a334-031ccab35ef7"
        },
        "item": {
          "id": "2a256b97-b92e-4246-baf7-7f9e33ea6e19",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "46f7ac27-42de-40ad-87d4-c7458fe447a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739e4d91-ad07-4048-aa01-3afa63e304db",
        "cursor": {
          "ref": "3ded691d-ecf4-47de-8aea-fb3ac0f03883",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c5fb55de-5a9b-4919-92be-da07547860de"
        },
        "item": {
          "id": "739e4d91-ad07-4048-aa01-3afa63e304db",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6d5368e6-fc09-4045-a546-9ae9bb9e0459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2196f8b4-5b8e-4ae6-9f19-06ae141ca7c3",
        "cursor": {
          "ref": "e35e9c28-4246-49e4-82d9-ba79fb975977",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "59672c2d-8f79-4378-b508-24a00c123b86"
        },
        "item": {
          "id": "2196f8b4-5b8e-4ae6-9f19-06ae141ca7c3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "889e49e1-eb9c-4494-8b7b-cbd56e6ad6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e25a5cf-c4d5-4f18-9137-a27b6461c831",
        "cursor": {
          "ref": "36aabe7a-55d3-4433-82fd-18b70eaf0174",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5ae784a2-38b3-4d80-85a6-ef9b19739ae0"
        },
        "item": {
          "id": "0e25a5cf-c4d5-4f18-9137-a27b6461c831",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2a510b1c-3442-4e41-8969-0a2e8cf17b43",
          "status": "Created",
          "code": 201,
          "responseTime": 438,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8dd632c2-25a3-41e8-a733-146c0c6a8a38",
        "cursor": {
          "ref": "d4c959cd-318f-45c8-88c7-c3d39d347595",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "41041f6c-db7a-465d-b99c-a51f9b8e9447"
        },
        "item": {
          "id": "8dd632c2-25a3-41e8-a733-146c0c6a8a38",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9c09c717-ba2f-41b8-8498-817ab540f1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ac3272-fe1c-48ee-a251-ee719c342667",
        "cursor": {
          "ref": "c466596b-e251-4582-bc62-5f563a3b09ce",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ab1b8f4c-529b-4784-8a48-9e8e3388c3cd"
        },
        "item": {
          "id": "f0ac3272-fe1c-48ee-a251-ee719c342667",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "91dee56d-53ef-41de-ae76-2cf601f02b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bf8fc4-f565-4b8e-a7c6-9480c8cbe3bc",
        "cursor": {
          "ref": "511e7125-f428-4958-a5f8-7870741f0e4f",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d78e31da-4da9-45ee-a7df-1a80b400a717"
        },
        "item": {
          "id": "94bf8fc4-f565-4b8e-a7c6-9480c8cbe3bc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "24c35925-4cc2-4be6-8348-5b3d1f93c354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077d05af-741f-4ad1-9634-27807f0552c3",
        "cursor": {
          "ref": "f4573e75-2cc7-4907-856b-af26f2c9b2a8",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "40b0b358-7c6a-4359-8d9b-f23b849d74ac"
        },
        "item": {
          "id": "077d05af-741f-4ad1-9634-27807f0552c3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a879c34d-7a3d-4bfc-9c6d-e1e9a80c6531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d605ebe-b6b1-464b-b7e2-e681ef4cc9ff",
        "cursor": {
          "ref": "90866e23-9980-49b0-aa43-5c2e07c302a6",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5a32f7e0-6745-46e5-92af-528566a14ae1"
        },
        "item": {
          "id": "7d605ebe-b6b1-464b-b7e2-e681ef4cc9ff",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5558d542-49fd-4927-879e-564b4505d202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6876c9d-c464-4ab3-bb4a-a42e135cf6fc",
        "cursor": {
          "ref": "34fcc97d-4a0f-4de0-b508-535a0fcfc74d",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7b2ff2ff-6a8a-4b28-ad4f-3ad731a43781"
        },
        "item": {
          "id": "a6876c9d-c464-4ab3-bb4a-a42e135cf6fc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9f0ceb54-85a8-4d2a-a92a-9f18956a492d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2c377b-b72d-41a3-9679-e365c3cb2b89",
        "cursor": {
          "ref": "183b8dbd-fb90-41f1-a878-ff6826619304",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1e2e7635-efab-42e3-849d-b871f4827842"
        },
        "item": {
          "id": "9e2c377b-b72d-41a3-9679-e365c3cb2b89",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "45c048db-90bd-43ac-972a-8b2819f19e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cfc217-d0e4-4c2c-9127-1ac2b7188052",
        "cursor": {
          "ref": "d194e25f-0af4-4136-9090-40fdb6299872",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "469a13f3-da77-4e73-b709-c4770df66c42"
        },
        "item": {
          "id": "c0cfc217-d0e4-4c2c-9127-1ac2b7188052",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9969365e-b8f9-4b69-907c-a58ad9d16544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a82e0a-424b-4351-a4bd-087f4b05b9fb",
        "cursor": {
          "ref": "9cf2ee78-a60e-465c-9013-4e539584b35a",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d269bd98-d6c5-4153-84f1-f6af59dfc8a3"
        },
        "item": {
          "id": "41a82e0a-424b-4351-a4bd-087f4b05b9fb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3e09f4d7-c799-4a55-94c3-e08698894bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4906e001-4b22-406b-9a47-8b4a043346f7",
        "cursor": {
          "ref": "5f2d22b8-9f67-45c8-924f-e8e2e4ea3b25",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4779498e-81fb-4f45-9007-6e295f43406c"
        },
        "item": {
          "id": "4906e001-4b22-406b-9a47-8b4a043346f7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "81c2619f-a379-4a7f-8eff-3da60361ff50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc053a2a-ba15-4094-9016-54ad1e79526a",
        "cursor": {
          "ref": "ca32a84b-09ce-4ad3-9e7a-6f11b77ae0b8",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ed3dacfe-07fd-4e36-9795-e0ef4d414f65"
        },
        "item": {
          "id": "bc053a2a-ba15-4094-9016-54ad1e79526a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b50882aa-fb80-49ea-84eb-639c820f57fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73b1b72-7c42-41b4-aba1-c8cf965e078b",
        "cursor": {
          "ref": "13ca6e29-fbe5-41af-889b-dfb480d5222f",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "69f54add-be93-46ff-984a-4d7fb5cc3e69"
        },
        "item": {
          "id": "a73b1b72-7c42-41b4-aba1-c8cf965e078b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3876cb47-8325-41b2-9816-e11413e85bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f95b75-2b83-48c3-94ec-03b72931dc0d",
        "cursor": {
          "ref": "9ebb5cc1-ee58-48cd-9a7a-fc71dbdb546d",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "022c222c-59dd-4ae2-b47a-ff93c4fcdffe"
        },
        "item": {
          "id": "a3f95b75-2b83-48c3-94ec-03b72931dc0d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f0e82c99-bee1-4772-ab55-ef0d47553c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 722,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c983f2ff-0044-47ae-8563-d69aec9b13f2",
        "cursor": {
          "ref": "642104dd-04bc-48f4-96d9-af216e32e617",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "89cbf991-021e-4312-b064-b9f543dd903d"
        },
        "item": {
          "id": "c983f2ff-0044-47ae-8563-d69aec9b13f2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "670b776f-473c-488e-9a72-85e9a9d99dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992c6e7e-0a22-424a-993b-6567c0983525",
        "cursor": {
          "ref": "bbcd002d-6056-4a09-86c6-b116fcb92940",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4c385a5c-ec6c-4e4d-9963-9abb31ae6629"
        },
        "item": {
          "id": "992c6e7e-0a22-424a-993b-6567c0983525",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "98f1adfb-a17c-4765-9079-1ea6ba64f70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8b0d27-d63a-499e-8616-d2372715f195",
        "cursor": {
          "ref": "2d61743a-c030-4a75-a9bc-eb90816cb517",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "969a5133-a2f9-47a7-b7bc-78c78da91c3a"
        },
        "item": {
          "id": "1d8b0d27-d63a-499e-8616-d2372715f195",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4246299b-05fd-4c02-899f-aa4cbcdfecb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7231d3d-aab5-4d69-8f8c-ff4f365d1460",
        "cursor": {
          "ref": "9cc40fa1-46ea-4525-9acc-28a3b558d44a",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9e98510b-2cf7-4de5-99df-0899c007efd7"
        },
        "item": {
          "id": "b7231d3d-aab5-4d69-8f8c-ff4f365d1460",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6999bad9-d7f2-4304-8fac-72407ee6bb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e41198-4572-4fd8-9c21-e6eb7ef67251",
        "cursor": {
          "ref": "14525bf7-b4a5-40e5-8c5d-cdc0919ff529",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "674ca389-d94c-4f36-8c51-29e01bee5c36"
        },
        "item": {
          "id": "89e41198-4572-4fd8-9c21-e6eb7ef67251",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "830d8071-29e6-4417-9c8a-a6d3260ccbf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ef4203-f07c-4db7-8dac-1c604b5a541d",
        "cursor": {
          "ref": "81ec96f8-6f9b-46e3-8724-5581d2dffbdd",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9a420d59-6967-491d-9d13-812e0ba2f62a"
        },
        "item": {
          "id": "c6ef4203-f07c-4db7-8dac-1c604b5a541d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6e2ed86b-d9fa-42b8-84c3-c90c103ca085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7abd912-77a9-4f18-845a-7e7538921a5e",
        "cursor": {
          "ref": "ab81a404-3bc3-41b0-9aae-8fb3921293d4",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0eb113fe-f6d8-422f-aa40-9d0d8121ee95"
        },
        "item": {
          "id": "d7abd912-77a9-4f18-845a-7e7538921a5e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d7ba3063-8eed-4f91-ad8c-8f7545dff255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c6cd766c-1933-4eb4-9bf1-e65401b5ded6",
        "cursor": {
          "ref": "11b84565-fcf4-42d1-827b-050dc68cc70a",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "921690ab-ea1a-4de1-80a4-07d9bc5b37f0"
        },
        "item": {
          "id": "c6cd766c-1933-4eb4-9bf1-e65401b5ded6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f7321063-af49-4cd6-8b49-63baaa39cc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e2b15f-5396-4046-8f54-255dde04b6c2",
        "cursor": {
          "ref": "1e376136-863d-41d8-83d1-729df7dcabe1",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "af9507cb-e635-4a36-bebe-05a26ca9153c"
        },
        "item": {
          "id": "82e2b15f-5396-4046-8f54-255dde04b6c2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d32aaef3-080a-4456-bcc4-5b964abd1c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df6404f-9895-4ea2-a58f-caa1b3213b8c",
        "cursor": {
          "ref": "e8fbe735-f073-4c0e-bcd1-3336476953cf",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "43c8f749-9f1a-4742-8920-481ee9392d4a"
        },
        "item": {
          "id": "7df6404f-9895-4ea2-a58f-caa1b3213b8c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "12fbbe53-4a19-4435-95b3-0548ffdde13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fea061-b06f-4b5f-97c4-50ab1485acb0",
        "cursor": {
          "ref": "4fa9b30b-8098-4d1c-add6-3b9bdd4c63f6",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "079a94b3-6d1e-4df1-b992-409bbfafb420"
        },
        "item": {
          "id": "30fea061-b06f-4b5f-97c4-50ab1485acb0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5e3b6653-cee8-4307-8c4c-6731aa12db02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f104203b-3923-4638-aff2-0f0a96b050bc",
        "cursor": {
          "ref": "79cf7e4e-7c59-42de-a6bd-c155340e4d57",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9a7a97fc-5336-4e0f-be73-bcbafc2b52a4"
        },
        "item": {
          "id": "f104203b-3923-4638-aff2-0f0a96b050bc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "fddd78bd-85e6-4c2d-a29a-3606d97d697b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0c54f4-ab5a-4fb0-94d8-c73b3ab9b20c",
        "cursor": {
          "ref": "0cfbc28d-a0e9-4a9f-b1a4-e9fc8ab674be",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a72a429c-9229-43b4-8a81-312b2d19952a"
        },
        "item": {
          "id": "2a0c54f4-ab5a-4fb0-94d8-c73b3ab9b20c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "56bba37c-ed11-4b9b-9386-44108afb74f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc9f4f5-6d72-48f1-bdee-6eb9478ed41a",
        "cursor": {
          "ref": "6d7bf8a3-d91b-439b-a2a3-3c331594b620",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cc41d0d9-771b-4f59-824f-e599f89d33bd"
        },
        "item": {
          "id": "8bc9f4f5-6d72-48f1-bdee-6eb9478ed41a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b6823bef-9e01-490c-9171-c41e92c89cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649e79c3-a2f8-4237-a670-202a269495f8",
        "cursor": {
          "ref": "bd2919f7-82f1-4c74-aa15-0b46b9439dd1",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5923d67e-4599-44f9-96de-384da867b80c"
        },
        "item": {
          "id": "649e79c3-a2f8-4237-a670-202a269495f8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2bc2aad6-04ae-41c9-a971-b3161a8393c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0edd2ce-b0f7-4f67-948c-a7ec7c5de171",
        "cursor": {
          "ref": "6f216802-8186-474c-99b2-927402de8b13",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c0163b5c-a8d9-4fd8-b54d-5cfdb1e6400e"
        },
        "item": {
          "id": "a0edd2ce-b0f7-4f67-948c-a7ec7c5de171",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e9109409-e20e-4fd7-bba8-0324ace1c7bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6059519-46a4-40e3-8f57-235fad6ec3b4",
        "cursor": {
          "ref": "dd61f76b-f998-40e4-a199-a1a6673b9d15",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f09339a8-5411-486e-ada9-8f244344afe8"
        },
        "item": {
          "id": "b6059519-46a4-40e3-8f57-235fad6ec3b4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4f8d86bc-fd9c-435c-9ca4-8f912a3abe56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c9d76c-6122-471b-a185-5fdda405fc0a",
        "cursor": {
          "ref": "f1f21a8c-387e-4dcb-8f6a-497538544a2e",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a5962ad8-1b87-4fc8-a8c1-27cee0fe81cb"
        },
        "item": {
          "id": "f8c9d76c-6122-471b-a185-5fdda405fc0a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ef599514-729d-49a4-b72e-0a268b4028a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b858189c-9dfe-44c9-9c3c-5ddd40a4f3c8",
        "cursor": {
          "ref": "7516da9d-b5a7-4630-9fb6-7a2a1e31e64e",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "00722cdf-5229-4fd3-8495-6d3fc86db17f"
        },
        "item": {
          "id": "b858189c-9dfe-44c9-9c3c-5ddd40a4f3c8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "26654fd4-e39c-48d1-8cdd-7238dd2610f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4100ec04-d1a5-4cc5-be6c-2f5dee9c5dc7",
        "cursor": {
          "ref": "c42c0127-0ad0-446a-82a3-ded9c7ae3220",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d4e36564-bc9f-4086-8e7d-8a1de724a369"
        },
        "item": {
          "id": "4100ec04-d1a5-4cc5-be6c-2f5dee9c5dc7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "de545b5e-0c53-4914-b7e2-0bcb422a5a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe08ab0-7685-4bbc-a3a2-11577c82c113",
        "cursor": {
          "ref": "e40b84fa-479a-4b41-a78c-f662b9857bb7",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d35c7ba3-4ce3-48f0-a8b3-e175465b6b37"
        },
        "item": {
          "id": "0fe08ab0-7685-4bbc-a3a2-11577c82c113",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "eebc854d-a7ee-456a-ada3-e93739f804c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c595630a-5f40-44e7-a79e-cf201af2a532",
        "cursor": {
          "ref": "a585d86a-4d9c-4b5d-a4e8-0c6913f14484",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "561097b2-da2a-4a49-9f19-d599dd37a71a"
        },
        "item": {
          "id": "c595630a-5f40-44e7-a79e-cf201af2a532",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cf72ded7-2f10-44de-a4db-12150851218d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d40b0dd-4399-4556-b7fa-8cfcb95dd8d2",
        "cursor": {
          "ref": "e26be4d6-0de8-4603-bae7-57c476df64e4",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "93b7ab71-7fcf-4114-904a-6581903e28d5"
        },
        "item": {
          "id": "6d40b0dd-4399-4556-b7fa-8cfcb95dd8d2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fe6cbead-af4c-41b5-9ac8-0530f85a1475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7e4390-3ab4-4fdd-9dc4-4cda65e128f2",
        "cursor": {
          "ref": "d8d51270-99b4-4d9e-9f78-2b2cbf2bb58b",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2a63a43c-7de6-428d-8413-a8bffe5b7647"
        },
        "item": {
          "id": "5a7e4390-3ab4-4fdd-9dc4-4cda65e128f2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d1d0905d-079c-42da-874e-1609a1600485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0379b465-6bf5-40c2-8a8d-879b6667d926",
        "cursor": {
          "ref": "ab515f60-5b3b-468a-9f30-fa287904559c",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "75428a0a-f8e0-42f8-8f14-8bc60ff8058f"
        },
        "item": {
          "id": "0379b465-6bf5-40c2-8a8d-879b6667d926",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f03db836-3030-49fe-ba35-922118a0a379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b19cb23-c6b6-4a4a-99ca-75ab6f2f048e",
        "cursor": {
          "ref": "5e1b15c3-5689-481f-9d8a-1aaaeec34aec",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "46a43f74-dd3a-422b-9880-c794e55163d9"
        },
        "item": {
          "id": "4b19cb23-c6b6-4a4a-99ca-75ab6f2f048e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3241589f-e724-480c-8b6f-8e744eef155c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db60e6a-a9ae-4baf-a086-69bf6dc24b4c",
        "cursor": {
          "ref": "502dd390-9ce7-4ed5-857f-d4f0d469ab0a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e7338278-9882-439c-8c8e-563a2b8eec18"
        },
        "item": {
          "id": "2db60e6a-a9ae-4baf-a086-69bf6dc24b4c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5d101ef4-7dd6-4fb9-bb4b-a1e77f16007d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7afd12b7-072e-424f-a930-a520537fad8d",
        "cursor": {
          "ref": "941a22e0-17a1-4598-af53-a8a305596b76",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "341599cd-841d-4422-afd4-38af2b6985f7"
        },
        "item": {
          "id": "7afd12b7-072e-424f-a930-a520537fad8d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cff2b248-1d3a-4769-a09d-ba45fdc0b876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cb465f-e907-4c7b-aad8-73c64a180424",
        "cursor": {
          "ref": "d2085127-de38-477d-bfeb-b8395a540d6a",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "78efa81c-abe3-4a82-9448-b7723923f979"
        },
        "item": {
          "id": "64cb465f-e907-4c7b-aad8-73c64a180424",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4827219c-15cb-49db-a476-425255ac2873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae8e89c-575c-490a-92dd-c632b3983c3b",
        "cursor": {
          "ref": "bae9d9fd-c298-4393-9e92-c4c6152ec427",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fe639fe4-de74-4b4b-9085-9f397c0dbd4c"
        },
        "item": {
          "id": "cae8e89c-575c-490a-92dd-c632b3983c3b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "35ae16e2-6296-4c4b-acf5-53c9b0b9d316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3689c457-7944-4d3f-b271-501159e643f5",
        "cursor": {
          "ref": "f4e5bb94-eca6-48dc-a7a1-ffc98a9e8d51",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "82375858-ae62-41c5-91d7-330698d05d27"
        },
        "item": {
          "id": "3689c457-7944-4d3f-b271-501159e643f5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c3d9b9ff-37aa-4fbf-ac49-c329c8d35313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6187ab54-8304-48b2-937d-4d3607b444c8",
        "cursor": {
          "ref": "c16bd5c5-31cb-4276-8755-f4d9cb2432c1",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "11bef883-e039-4174-93a9-b488b650b6be"
        },
        "item": {
          "id": "6187ab54-8304-48b2-937d-4d3607b444c8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "09f906f9-1ead-4974-8f78-c2a0196ad835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edf2e3c-5170-46fb-bfb0-d9a0d1848b3a",
        "cursor": {
          "ref": "e12ef2f4-5590-4f9a-90ad-4e71b74577dc",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f70ffab3-46e0-4fcc-b0f3-3376f828ecb9"
        },
        "item": {
          "id": "5edf2e3c-5170-46fb-bfb0-d9a0d1848b3a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "96a75790-1130-46a4-bb96-5fdb91477881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f013b28-26a7-4176-8a06-1a630aeeea70",
        "cursor": {
          "ref": "138de355-682b-4b51-9765-ab1bcee3cab1",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "767fe8c9-4b9c-4f4a-af6c-45379891ef53"
        },
        "item": {
          "id": "4f013b28-26a7-4176-8a06-1a630aeeea70",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8422b449-354a-4d15-9917-737c997ea997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1284d952-ee18-4015-be64-51ad8082ee54",
        "cursor": {
          "ref": "092df75c-5830-41dd-9fe7-2e179687eb8a",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "87004358-cf03-4f9e-94d9-b74dd4887c38"
        },
        "item": {
          "id": "1284d952-ee18-4015-be64-51ad8082ee54",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "49aad60f-ae73-43dd-8c93-170eec9628b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c4cab0-f34b-496f-aa43-f441de6dfd01",
        "cursor": {
          "ref": "15bec899-5860-425b-85c2-ce0403566d25",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "27cff0d6-60bb-4838-8d8e-b6b4fb75ef3b"
        },
        "item": {
          "id": "f7c4cab0-f34b-496f-aa43-f441de6dfd01",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b09e16fe-9961-4a4f-851c-23548ed47d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24871311-e6ec-461a-8327-3465909eb71c",
        "cursor": {
          "ref": "4370b391-6d88-4b40-aae8-f4398f98f07f",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "49ca30fc-7389-4d7f-90e3-c1bbe97d6ecc"
        },
        "item": {
          "id": "24871311-e6ec-461a-8327-3465909eb71c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "01ffbba1-e562-452a-9875-897048c1b688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499a6d9d-89ca-4dc2-a65e-bf073ca8279b",
        "cursor": {
          "ref": "c6e3a942-db41-4f71-bd6b-e6f3743ac862",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "675b9e99-a46d-40f0-aec3-293a407afa5f"
        },
        "item": {
          "id": "499a6d9d-89ca-4dc2-a65e-bf073ca8279b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "65ebb2d3-f8d0-4874-9a12-dccda6d26cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308e15ec-36fb-4ca9-83aa-356902855a8c",
        "cursor": {
          "ref": "5c4b25fb-8248-441c-b4cb-b1eb4d786e86",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6d9ffd78-6d25-4508-8a6a-e24386e144f4"
        },
        "item": {
          "id": "308e15ec-36fb-4ca9-83aa-356902855a8c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b4a95e0e-bf1c-4126-a221-7b3417c6b0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb08c211-dc95-4061-8072-188fe7d9a5ef",
        "cursor": {
          "ref": "c1aa63b0-4768-4b20-8d67-29cc23a21ac1",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ea660eca-4c81-4e6c-9d74-427976d10442"
        },
        "item": {
          "id": "cb08c211-dc95-4061-8072-188fe7d9a5ef",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "12720529-9a99-41a6-b445-90ff8236d62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268acdc0-a903-4f90-bb8b-5268d3bc7d3c",
        "cursor": {
          "ref": "fc49cfb9-9223-454f-8902-aa4aae78d117",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d212608f-6d2a-4160-b650-f0ff26d9ea6f"
        },
        "item": {
          "id": "268acdc0-a903-4f90-bb8b-5268d3bc7d3c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9aedac09-f85a-4ef0-a2ca-af1cbd10af18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80206f72-9950-4d56-9bbf-372e4e87a4e9",
        "cursor": {
          "ref": "614f536b-69f8-4b2f-8005-9123fadc35db",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a2bbad57-41c3-4e96-8749-58004749a8f8"
        },
        "item": {
          "id": "80206f72-9950-4d56-9bbf-372e4e87a4e9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "23bf46bd-42c8-4b56-a554-75b04311791e",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "140f2af2-182f-468b-9022-c78cecd085f8",
        "cursor": {
          "ref": "36e1fb15-0e1f-4387-816f-daa3a82efe0a",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "327692e7-045e-4496-9b7d-d5082b844ddf"
        },
        "item": {
          "id": "140f2af2-182f-468b-9022-c78cecd085f8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c541cdf6-e288-49aa-a5d1-73be2a50fadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d960e0a-b5ad-44d2-b430-9f0e88ce5c90",
        "cursor": {
          "ref": "ad2645ec-0b4e-47a6-9c2e-ef32017e0163",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a5887ec2-ddfa-4a42-bc97-26f419de3802"
        },
        "item": {
          "id": "5d960e0a-b5ad-44d2-b430-9f0e88ce5c90",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a025eabb-96c3-43e8-841c-6f5bcffcb781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d5d2e64-5455-4a7b-90dc-27aa7ddc1216",
        "cursor": {
          "ref": "2d2a50f4-547d-4f08-b1fd-d09e51155d02",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5f5d1dd1-ca98-4029-bd19-3f47e0be74f5"
        },
        "item": {
          "id": "2d5d2e64-5455-4a7b-90dc-27aa7ddc1216",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6fa5385e-d65f-4701-9ece-1490943c5c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78745ed-f6f9-4265-9460-2c2f2460633b",
        "cursor": {
          "ref": "660b5e67-0dfe-447a-8e0c-6d4f35654d13",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f5909177-ee9a-43b1-b008-fca6378c5a11"
        },
        "item": {
          "id": "a78745ed-f6f9-4265-9460-2c2f2460633b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5c74cae2-0961-4ad4-89c9-a68a6dc65bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777d062a-414d-42dd-865e-4f1cdb2026d9",
        "cursor": {
          "ref": "0c4da076-9e87-4fb0-bf5b-df9d89ae47da",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6b3fa987-362f-41df-b4d8-27548c5f27f2"
        },
        "item": {
          "id": "777d062a-414d-42dd-865e-4f1cdb2026d9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "74b13da2-5800-46a7-a130-9e9da0988fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec826a4-d1b9-4cc7-b487-09b53e6ec637",
        "cursor": {
          "ref": "72c21ea9-b593-4506-be6f-9583ee7ab038",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ed0471e7-e8ab-4398-b0b9-bd911c644b14"
        },
        "item": {
          "id": "9ec826a4-d1b9-4cc7-b487-09b53e6ec637",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e1a3ea7d-26cf-44af-bf4e-3a23024495a9",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "c125ccff-fa42-4d4f-81e6-c3e449918907",
        "cursor": {
          "ref": "444d2099-1356-4994-8e89-b28a932ca17f",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2c6b0a97-7238-4ecc-9a6e-c926fba76a88"
        },
        "item": {
          "id": "c125ccff-fa42-4d4f-81e6-c3e449918907",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "62bb3536-e839-4d21-92db-594c085bbc98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4b01c6-070c-48fc-b079-fb37a669b8d8",
        "cursor": {
          "ref": "2e8f4f5f-6081-4d43-a705-c3a32064211a",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "efac8525-1e61-4448-876e-4ac52026e6cf"
        },
        "item": {
          "id": "9a4b01c6-070c-48fc-b079-fb37a669b8d8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "00741cd0-4b0a-457f-a9e7-42e5eadd0cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3636e7f1-6fd4-4a48-b90c-4c49ca4f73a0",
        "cursor": {
          "ref": "4b71c6df-07ff-4550-80ff-3dd6fdae8dd8",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "38ce0564-ced9-4c6e-aa3e-61e01798ef99"
        },
        "item": {
          "id": "3636e7f1-6fd4-4a48-b90c-4c49ca4f73a0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6a975f28-79c2-4ede-9a49-eaa959889dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5b74d4-b6d7-4286-9763-71141d9dea8e",
        "cursor": {
          "ref": "95493bd6-210c-46e1-9eea-ec56c74c64df",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0067e2fc-6b98-46f5-9edc-9f1b1f135d7b"
        },
        "item": {
          "id": "1d5b74d4-b6d7-4286-9763-71141d9dea8e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ca9624b6-d763-44bb-adcd-a1a5df7cf57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959c806e-c4bd-4595-8f84-5c9d29e034d4",
        "cursor": {
          "ref": "0ea372ce-9bce-4230-a5e7-fecfd8e75ff9",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3844e54e-80b7-4971-9fb7-ddfdaacec834"
        },
        "item": {
          "id": "959c806e-c4bd-4595-8f84-5c9d29e034d4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b4c1a2d9-6a78-40a1-89cf-5cef3f5b4846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85477f4b-1c80-4887-b463-c00ac075def4",
        "cursor": {
          "ref": "93a40260-d73c-494e-b91c-515682122403",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4e13f391-3c8a-4b43-8a5a-0e50dd7fc599"
        },
        "item": {
          "id": "85477f4b-1c80-4887-b463-c00ac075def4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7859b78c-abfc-4b02-a4f5-afa6f6dc6286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c04c4e-c5e1-421b-8a91-810b614a1e48",
        "cursor": {
          "ref": "e151eaa2-2870-4f81-8114-994a55fe2eb8",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9baa336d-bc2d-4f24-a179-9d6fa50796f4"
        },
        "item": {
          "id": "f4c04c4e-c5e1-421b-8a91-810b614a1e48",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3546e8b7-a225-488e-8ec0-2e1734e8722c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f56fd0-281e-42af-971f-ea2ec6a41caf",
        "cursor": {
          "ref": "f88fe1e3-6e34-4f29-9ef9-a0a530e125c9",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bdbf2424-ac25-4230-9159-fd6130e647af"
        },
        "item": {
          "id": "30f56fd0-281e-42af-971f-ea2ec6a41caf",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "12f9ccc8-d8bf-4ac8-a641-294398cc3b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bab5c02-fc36-4c8c-b8f2-298e5dc12fcb",
        "cursor": {
          "ref": "db4f58b4-b84b-4a47-920a-e5f1b955b2c4",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b93b4fea-3cc7-4f33-8ae1-133703e5f238"
        },
        "item": {
          "id": "0bab5c02-fc36-4c8c-b8f2-298e5dc12fcb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7efd4895-54c0-4ac3-b48d-7d2f21b43af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "2471b75c-afca-4749-8819-9a65490e9abb",
        "cursor": {
          "ref": "780df4e0-9680-48a8-935e-1484083d9ee8",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4dafe2f9-824a-48f0-8577-2eef633ed964"
        },
        "item": {
          "id": "2471b75c-afca-4749-8819-9a65490e9abb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a3265b67-ecbf-4105-9155-a38be5187a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 367,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "73c81f67-dd2b-4e59-bd48-93372c3f0545",
        "cursor": {
          "ref": "cf380a2c-879a-42ad-bdfb-fa3afdb11aea",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f17e2988-4ce0-480e-acea-d18c51b074a8"
        },
        "item": {
          "id": "73c81f67-dd2b-4e59-bd48-93372c3f0545",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0149c98f-7b04-4dbf-b6ad-9da7922ce54f",
          "status": "Created",
          "code": 201,
          "responseTime": 554,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b0193f-a78e-4b9b-a6d8-078424435c67",
        "cursor": {
          "ref": "d5b73d6b-1101-4f99-b063-1bd9751d3564",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "59d4c0ce-b0e0-470b-83c4-292e1ab774d7"
        },
        "item": {
          "id": "84b0193f-a78e-4b9b-a6d8-078424435c67",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "973287c0-fffd-4e91-abad-b0afc74235f2",
          "status": "Created",
          "code": 201,
          "responseTime": 408,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7125d6-3b3e-46d6-ba4e-914fee2b588c",
        "cursor": {
          "ref": "f2ab3ecf-1d42-4ceb-94f8-f7711f0bcda8",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "99d490a8-5b4b-406b-8ac0-35ec3a52fbb8"
        },
        "item": {
          "id": "0e7125d6-3b3e-46d6-ba4e-914fee2b588c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9991d521-fd49-431d-b10e-c638926cc224",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "17944a47-389e-43ea-946d-9936cde4eeeb",
        "cursor": {
          "ref": "3a8e48fa-f4ca-483a-8ad5-96a484823c64",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cecf48f4-5dd2-41e6-a82f-51c95c916a71"
        },
        "item": {
          "id": "17944a47-389e-43ea-946d-9936cde4eeeb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d46c9b8f-5346-4afc-aa26-a50fd449fbab",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2af043-0c52-4b08-9fe8-ac2c6935182a",
        "cursor": {
          "ref": "71b7d755-ee7a-49c4-8d27-9349740e2f0a",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8f44e815-0842-4b78-8d86-ef31a7e31d74"
        },
        "item": {
          "id": "bb2af043-0c52-4b08-9fe8-ac2c6935182a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "81bb60fa-89ff-4fb5-bb84-5db5c72496ef",
          "status": "Created",
          "code": 201,
          "responseTime": 451,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3179d7b-57de-480b-bb45-4bed246aa354",
        "cursor": {
          "ref": "f3bcdb93-338b-4c6c-a4e6-65a214af7ee5",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6fded72a-a1f0-410b-a548-f9dccbf582d9"
        },
        "item": {
          "id": "a3179d7b-57de-480b-bb45-4bed246aa354",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "384cca59-f533-4dd6-9ed1-827426bf002a",
          "status": "Created",
          "code": 201,
          "responseTime": 392,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a40fe7-b109-45a1-8ccd-41653bce2e24",
        "cursor": {
          "ref": "363339b7-3550-4bef-a80f-7169254c763c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c83ae83a-e47f-46a9-90ba-ddd885aae09f"
        },
        "item": {
          "id": "42a40fe7-b109-45a1-8ccd-41653bce2e24",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3067ca39-db8a-4f1e-b002-4cb053e84d25",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "42a40fe7-b109-45a1-8ccd-41653bce2e24",
        "cursor": {
          "ref": "363339b7-3550-4bef-a80f-7169254c763c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c83ae83a-e47f-46a9-90ba-ddd885aae09f"
        },
        "item": {
          "id": "42a40fe7-b109-45a1-8ccd-41653bce2e24",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3067ca39-db8a-4f1e-b002-4cb053e84d25",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "8e76b163-78b6-4835-8390-f712a01bfbf9",
        "cursor": {
          "ref": "be5873dd-bcab-4e8e-bb2a-ccea197eddf8",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "16db399a-6d79-44f0-902a-1a1d0fcee891"
        },
        "item": {
          "id": "8e76b163-78b6-4835-8390-f712a01bfbf9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7b7ec28a-5bed-4001-8b20-251f051df82e",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f6e933e0-d5fb-40f9-89cc-ce7d15983deb",
        "cursor": {
          "ref": "ecb149f0-59aa-485b-ba45-2284554971d1",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6d881fd6-c267-462b-b1cd-76683885ad58"
        },
        "item": {
          "id": "f6e933e0-d5fb-40f9-89cc-ce7d15983deb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8f0f1953-78fe-4e91-9316-70aa175faf67",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e157ac72-b38e-479e-99e5-cfca8c38a922",
        "cursor": {
          "ref": "00fd4819-6395-4bec-ac2e-2014915c32d5",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c491e092-1427-4be0-85bd-56d81b333eb4"
        },
        "item": {
          "id": "e157ac72-b38e-479e-99e5-cfca8c38a922",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1741b838-4a6f-4fc4-9e17-50d1504ece3f",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ddb30553-deb3-4178-a1fc-85d2712d68fb",
        "cursor": {
          "ref": "7a0cd2cf-0f96-4fa7-b4ab-fa6ea3d1c109",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "067fce18-ba15-4f62-a4dd-a462222182fa"
        },
        "item": {
          "id": "ddb30553-deb3-4178-a1fc-85d2712d68fb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e5b60fb0-5c47-44c8-827c-72b5a0e6696d",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "bd92c838-95c3-4cc0-8e57-0a3c967f633e",
        "cursor": {
          "ref": "50959873-6396-4125-bac7-5eefe9db2eb0",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5f6169c8-6c92-45e3-b581-db8bab9ba47d"
        },
        "item": {
          "id": "bd92c838-95c3-4cc0-8e57-0a3c967f633e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "61104579-7469-43b2-9e3f-8a9bf773699b",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "6880c6a9-3c87-4b07-b8f7-6cc10a7fcd5c",
        "cursor": {
          "ref": "cdf04d56-8039-43c7-ae06-553582a864d4",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bad67cf3-bd08-4421-814c-1341ea8ae8a7"
        },
        "item": {
          "id": "6880c6a9-3c87-4b07-b8f7-6cc10a7fcd5c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fb4645a7-fd9a-4436-aecf-6e6f6b88b314",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "febcee8e-8a77-44df-9716-9ae34bae4248",
        "cursor": {
          "ref": "068f8274-c220-4fde-9fba-42a90cd559bd",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d7908e22-29d7-46d7-89d1-7b7be33835fb"
        },
        "item": {
          "id": "febcee8e-8a77-44df-9716-9ae34bae4248",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cc675d37-98d7-46b6-bbfb-edd331e9892b",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "34581484-21e3-4d0b-9eb1-6c9f774e9f9b",
        "cursor": {
          "ref": "201c7705-ec01-4a44-bf84-89ed9d1f7d09",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ebcccbdd-6337-4b2d-a1c2-fbbffa13ea59"
        },
        "item": {
          "id": "34581484-21e3-4d0b-9eb1-6c9f774e9f9b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0c66369f-a95e-4fe2-900c-3ec4c286c049",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "e3bef2f6-d8a9-445d-873b-f82fd4f17b08",
        "cursor": {
          "ref": "c8ba4a1e-e133-40c6-852d-0aea6e8ac468",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "764f4707-27f5-4df5-8910-b29bf565a3e8"
        },
        "item": {
          "id": "e3bef2f6-d8a9-445d-873b-f82fd4f17b08",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "31df818f-8806-4315-91dc-4099179c9dd3",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "6f685372-4adc-4702-a50b-e6b5801f3b4a",
        "cursor": {
          "ref": "15b871a2-a123-4d30-a9df-551d583db9d6",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bd8da027-047e-4808-887d-c6459b27a0d7"
        },
        "item": {
          "id": "6f685372-4adc-4702-a50b-e6b5801f3b4a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a17c91d8-20df-44c8-9567-d2285408a94a",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "62ccc8ff-1702-419b-913a-267f814b9b0e",
        "cursor": {
          "ref": "a9e1b042-fa6b-4634-bb15-baf9cb56cb08",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ec316bed-9304-4096-bae4-866110895c9f"
        },
        "item": {
          "id": "62ccc8ff-1702-419b-913a-267f814b9b0e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a661fe0a-7025-47e9-95fd-9dbdb02b8578",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "02b53904-2e91-4cda-b8ea-95cdba0304c9",
        "cursor": {
          "ref": "d6890032-1fb8-4c1b-8e2f-70c206036642",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "25ff508f-f6c5-4283-8e4e-5576419f8727"
        },
        "item": {
          "id": "02b53904-2e91-4cda-b8ea-95cdba0304c9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5207186e-6a7f-4231-87d1-993095c25d3b",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7f924104-2d4c-4974-9fdf-b44106f9be15",
        "cursor": {
          "ref": "a003717c-c00d-4ac3-a526-25cfaa6b7a21",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "db89abbf-cb55-411d-8711-00c4995f07b3"
        },
        "item": {
          "id": "7f924104-2d4c-4974-9fdf-b44106f9be15",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c55e225a-c5d9-4c6f-a4c2-29bb29ee80ab",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "360e76f4-7e9e-4b4d-a3a0-0ab6c0232f3c",
        "cursor": {
          "ref": "1124f903-2709-4aa7-a5e8-b206408d8302",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fa1be18c-ae22-4cf8-8bc8-56bf48dc5e96"
        },
        "item": {
          "id": "360e76f4-7e9e-4b4d-a3a0-0ab6c0232f3c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "52d6e16a-afed-4904-9484-c0fdfb76cbe0",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "765351ae-d93a-411d-ad43-88b6cbbccdf4",
        "cursor": {
          "ref": "04b6f921-c585-4a4e-b8b4-8321fd254fc0",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "74479aea-bb16-4f63-9485-d326d4003776"
        },
        "item": {
          "id": "765351ae-d93a-411d-ad43-88b6cbbccdf4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "96b7119d-8653-4de3-81e8-4f1223512d7c",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "377f6e1c-abc6-46a0-a130-a51ca9577762",
        "cursor": {
          "ref": "26bdd8ad-8147-4d14-a7d8-498145043f0c",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "53b95c3a-beb7-4c3c-be9c-63c7e0596015"
        },
        "item": {
          "id": "377f6e1c-abc6-46a0-a130-a51ca9577762",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "461e6861-2e21-4d98-b398-7812e6721df6",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "11c31464-c719-4513-bbc5-3dc9e4f4c70b",
        "cursor": {
          "ref": "58f8ff66-7825-431e-bced-5bd07dcc2680",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "93076847-2272-4af2-9d15-3726b032804d"
        },
        "item": {
          "id": "11c31464-c719-4513-bbc5-3dc9e4f4c70b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "43a863fa-2519-4298-83e3-d25910cca461",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5eb7c75f-9d11-4224-a511-b709fa101081",
        "cursor": {
          "ref": "030ab516-0ff6-4462-94fb-1fe6b66b7c2a",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d15db734-bfab-45ee-b33f-ed423bfcbaaf"
        },
        "item": {
          "id": "5eb7c75f-9d11-4224-a511-b709fa101081",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f81aa50e-c3eb-4ef2-b035-9e2836a7e4a6",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "6b480f52-ebed-4575-859a-2d2cdd777672",
        "cursor": {
          "ref": "ec730c51-8b59-4fe5-a8cd-f4557b4b8fba",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c13b4362-9da6-4682-b098-f22821803bb4"
        },
        "item": {
          "id": "6b480f52-ebed-4575-859a-2d2cdd777672",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ba6e7a79-7523-41b9-af4e-cb731a9c3829",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "be257f84-a36f-4538-98d7-b9ad074a3cab",
        "cursor": {
          "ref": "1a5af913-fd1e-47c9-b98e-5a4e4f98f50a",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4c4437aa-2ffc-479a-a0c8-3e5fe65cc0c5"
        },
        "item": {
          "id": "be257f84-a36f-4538-98d7-b9ad074a3cab",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ea2d605b-280e-4d2e-b0fd-7f79120365e4",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "4db25742-d353-47bc-b65b-f90ce26e8e8d",
        "cursor": {
          "ref": "5442c4e7-5127-4a45-bb59-c348b6704e33",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1377ff9d-7dde-47e9-84b3-935f4134deca"
        },
        "item": {
          "id": "4db25742-d353-47bc-b65b-f90ce26e8e8d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2bad1d22-9686-4aec-aa4e-f50b2eddbb44",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "4780bf47-1520-48d3-a271-2bbf7e0be6aa",
        "cursor": {
          "ref": "0742aa0e-b691-4ca6-b840-9e0622d6bfdf",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d6e3d143-e42c-49d9-b781-97590601d6c9"
        },
        "item": {
          "id": "4780bf47-1520-48d3-a271-2bbf7e0be6aa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a1872bd9-1cc8-48f9-84d8-e166c141cd01",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "cde0cbca-88cd-4170-9ee9-6d7cfe08a084",
        "cursor": {
          "ref": "606ff016-08dc-4e64-b2c2-22153a44d047",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c49f9427-4607-4956-8eaf-59e8c3a90fb0"
        },
        "item": {
          "id": "cde0cbca-88cd-4170-9ee9-6d7cfe08a084",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7190dc4c-9b96-4fba-9474-5505f95098ca",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "3b1fe4c1-ed85-4ac4-8888-fb4654d56827",
        "cursor": {
          "ref": "3e46c109-92a9-4190-9585-0e092df3c422",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "132210c1-6a94-4ff8-ae10-b54bdd39ca21"
        },
        "item": {
          "id": "3b1fe4c1-ed85-4ac4-8888-fb4654d56827",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "aa80d305-065a-4d4c-a005-26c2775f83f8",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c32b1742-398c-4d0b-9f18-c2f28346c3bc",
        "cursor": {
          "ref": "794e0321-df89-46c7-a47a-8026acac8c9f",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "833b69ca-02d4-4b89-89a9-300d45b2018f"
        },
        "item": {
          "id": "c32b1742-398c-4d0b-9f18-c2f28346c3bc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "378d5fbb-2dba-4fff-8bda-e36f3449d935",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "586c53e0-b6e9-483b-9ca7-c28e1622de28",
        "cursor": {
          "ref": "a12e24fe-d468-433a-b8a5-631f921f3b5a",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "305c56ca-c7f0-40f9-8205-3e0bc1837503"
        },
        "item": {
          "id": "586c53e0-b6e9-483b-9ca7-c28e1622de28",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1da0d607-a903-489d-b277-ec85ccc4e8a5",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "beb10e7d-1ef7-4f54-8db8-625c8aa532ab",
        "cursor": {
          "ref": "63e97274-629a-49ff-ae17-bd4cf09f7317",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6704c1e1-e032-4039-b67a-10dbc2cfe2b4"
        },
        "item": {
          "id": "beb10e7d-1ef7-4f54-8db8-625c8aa532ab",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1a64dc21-a8d5-4210-b013-859921849fc5",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "63bc1a13-88e3-4326-92bc-35201aa4b115",
        "cursor": {
          "ref": "19627c0c-8eac-4585-91a8-f7f65b1419c0",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9faabb6b-67db-49a4-85d9-1d1b91a7791b"
        },
        "item": {
          "id": "63bc1a13-88e3-4326-92bc-35201aa4b115",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "97d6ad6e-a5ff-4a66-b5e0-7413732ed420",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "3964fc73-a49e-48ec-9b48-62bfee284ff8",
        "cursor": {
          "ref": "39144260-e1c1-49cc-ab90-4405a7c14bb5",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f8c7e84b-03b6-436f-a373-7468d766fe64"
        },
        "item": {
          "id": "3964fc73-a49e-48ec-9b48-62bfee284ff8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1c60ec92-f2d6-41df-ac84-b23192f52058",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "594f8dbe-6099-4c5a-ac29-d07eb63481ea",
        "cursor": {
          "ref": "dafb8898-4351-4d3a-977b-9e3e162775ac",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "84827d9f-8baf-4cfa-aa8e-aa643f132118"
        },
        "item": {
          "id": "594f8dbe-6099-4c5a-ac29-d07eb63481ea",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8fa05fd5-88a2-4fda-9696-73024accba2b",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "99079870-afb4-4b36-a6e8-3907338d08e7",
        "cursor": {
          "ref": "2aceb263-9b1d-4ad6-a030-c9c1b2480a12",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e8eb04fb-773b-403b-bfe7-597a8b46fba1"
        },
        "item": {
          "id": "99079870-afb4-4b36-a6e8-3907338d08e7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "57317375-ca64-4acc-829e-7896c2154965",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "0774724f-a91d-4b92-b548-c9022fcc5c61",
        "cursor": {
          "ref": "8c49d6fb-7255-49a7-b24f-3ab643932b17",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f5889528-2ccf-43ae-aeb8-fa8bae5de178"
        },
        "item": {
          "id": "0774724f-a91d-4b92-b548-c9022fcc5c61",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "493e2e71-fe1e-4c7a-af72-6ca182850fd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f01a91-0a82-4bbf-8f66-fcdf514608ca",
        "cursor": {
          "ref": "bd6838b1-8c7d-4280-8529-aa2aa15a319d",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6ab8acbf-b79e-4b16-be0a-d014a2824e09"
        },
        "item": {
          "id": "80f01a91-0a82-4bbf-8f66-fcdf514608ca",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4daf51b5-9799-4410-8679-a97c8cb9cd5e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69bbd10b-6de1-4ca4-88f4-7d14553f9917",
        "cursor": {
          "ref": "c594ed69-fe93-475a-b3b5-c7557af6c32a",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9b5a1fe1-a93b-460f-bb17-fe415a3f0dd5"
        },
        "item": {
          "id": "69bbd10b-6de1-4ca4-88f4-7d14553f9917",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bfbd348d-cfde-4cd6-aeaa-af758e9306f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69bbd10b-6de1-4ca4-88f4-7d14553f9917",
        "cursor": {
          "ref": "c594ed69-fe93-475a-b3b5-c7557af6c32a",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9b5a1fe1-a93b-460f-bb17-fe415a3f0dd5"
        },
        "item": {
          "id": "69bbd10b-6de1-4ca4-88f4-7d14553f9917",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bfbd348d-cfde-4cd6-aeaa-af758e9306f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34873eac-7f09-4414-bd8e-72f6966dd2e3",
        "cursor": {
          "ref": "abc8d42a-01cf-421d-8c4b-2b11691fce0f",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "51f5fba7-88e0-4434-9fbd-4198e1e60873"
        },
        "item": {
          "id": "34873eac-7f09-4414-bd8e-72f6966dd2e3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bc780595-a246-4070-898b-13cc5d29dc54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799f1158-58dc-4cef-ab3f-3aa6dfc17639",
        "cursor": {
          "ref": "73df09f0-c628-4e63-848a-7a26aad555d5",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2be8eb94-c04c-4228-a6a5-bc2b86c7ac26"
        },
        "item": {
          "id": "799f1158-58dc-4cef-ab3f-3aa6dfc17639",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ebc91a12-4ff5-4683-8ea2-5bf58384438f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11cf80da-679c-4e71-ba1d-ee231b607120",
        "cursor": {
          "ref": "4acc6bf1-876b-4876-ad77-74cf9d8e9059",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "23a0f093-e248-4175-a320-9116b6ecc4f2"
        },
        "item": {
          "id": "11cf80da-679c-4e71-ba1d-ee231b607120",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4ca076ab-efea-4eb7-be27-b9d1a90d3e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb5834c-a743-49e1-9ed4-32839bb06e3d",
        "cursor": {
          "ref": "beae5717-0002-492d-aa87-443753813864",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "afa919fb-1a06-446a-b81e-36cde7bfe4c2"
        },
        "item": {
          "id": "1fb5834c-a743-49e1-9ed4-32839bb06e3d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f0ebee88-3c9e-45e7-8590-d61260aef072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b94ef5-bde0-42b8-9aaa-40c6c7b21b0e",
        "cursor": {
          "ref": "6aa5fdbd-054f-4adf-b631-0b9b5f06df6c",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c0b38468-bb95-4912-8edc-da2560a7cac4"
        },
        "item": {
          "id": "65b94ef5-bde0-42b8-9aaa-40c6c7b21b0e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "869208b6-5cf7-4399-99d7-9d51bf6b815d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf4a15c-542c-4356-b809-ce53e1071982",
        "cursor": {
          "ref": "04f1be0e-84c0-4255-8c0d-28efdb17e750",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dc708f7a-4a83-491d-96d1-413ba83328c1"
        },
        "item": {
          "id": "3bf4a15c-542c-4356-b809-ce53e1071982",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1d7ed19e-7df7-4769-a7b9-2b64fb9156a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 629,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a83442a-8413-4466-9b95-56ae73e4cb14",
        "cursor": {
          "ref": "8b099480-5c81-469a-871d-3573d761c860",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "047ce375-875c-48f4-a5b5-ee9cdf874137"
        },
        "item": {
          "id": "0a83442a-8413-4466-9b95-56ae73e4cb14",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "00142a55-3ddd-43ca-87db-ec49b4fe9b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2896c848-b7f6-4061-93ed-4b3eaede47fb",
        "cursor": {
          "ref": "3a1e57b6-61af-4782-a43e-c96659277f29",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1982076e-8428-4fef-95fd-ae44a200b1ba"
        },
        "item": {
          "id": "2896c848-b7f6-4061-93ed-4b3eaede47fb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9909f834-33c5-454f-a540-dcef84dd45d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4095ba87-21b1-4b69-aaf1-efd4c9ed897f",
        "cursor": {
          "ref": "efcdee96-dfcf-4331-b6fd-a49f3690e848",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f376844b-0723-4537-b384-b5c051cba527"
        },
        "item": {
          "id": "4095ba87-21b1-4b69-aaf1-efd4c9ed897f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a04310d8-9223-49d3-aa25-65315eb93c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343a13da-3147-4ac4-b35e-6411e94a3d97",
        "cursor": {
          "ref": "b69cdcaa-3c44-41e4-99f3-c1dde3c3a02e",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "04ed827f-ae70-4a80-82d9-71ba5bd3d222"
        },
        "item": {
          "id": "343a13da-3147-4ac4-b35e-6411e94a3d97",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2fe09a49-af3d-4968-a609-15dcd3451071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ba0936-05ec-4406-a4cd-65771a997cfe",
        "cursor": {
          "ref": "26778e96-a751-4bc4-aefc-888ad2436656",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "edb46a4d-0648-42df-bc40-095ad12a0719"
        },
        "item": {
          "id": "66ba0936-05ec-4406-a4cd-65771a997cfe",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "de834917-78de-4ee9-8776-c24859d04d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a286526-aa0b-4b64-babd-78ef91be91ad",
        "cursor": {
          "ref": "6f6d2340-fc8f-468e-8571-49a6bd9fb3fe",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3a27e074-79cb-4b30-a156-ef8e125508ae"
        },
        "item": {
          "id": "5a286526-aa0b-4b64-babd-78ef91be91ad",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ea8a4462-30e3-4de1-9e22-06c7fd052464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d08ec6-26cb-4673-9eb5-d66ad3ff100c",
        "cursor": {
          "ref": "e24aaeaa-a7eb-4e37-8d82-9e3262e5797b",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "107b28d4-5335-43e3-99b0-071581557c0a"
        },
        "item": {
          "id": "73d08ec6-26cb-4673-9eb5-d66ad3ff100c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "98f5efce-b850-43a7-ac73-884c7a06d00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af212e6-4536-4ac1-a2a7-6d77735e5b6d",
        "cursor": {
          "ref": "d57e0c5f-0d0f-4262-bc57-7af7bfb4b77f",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b2bf5483-ed2b-4709-96a8-7c9f05210cbd"
        },
        "item": {
          "id": "3af212e6-4536-4ac1-a2a7-6d77735e5b6d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "bf22665e-c021-4139-a2b7-1eca3dfcc31a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191f8e62-f687-471d-acf1-7df2135396e1",
        "cursor": {
          "ref": "e6097aa1-e676-4516-8ddd-67c32be16108",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "593c2152-e17e-412f-b57f-f1e23884d7ad"
        },
        "item": {
          "id": "191f8e62-f687-471d-acf1-7df2135396e1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e1c3d3f4-7d5b-472c-862c-7bda4a315c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c40361-c7eb-4097-854b-03b5ca0fe256",
        "cursor": {
          "ref": "f97ceea6-aca8-459f-836e-91381b85be91",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "755688f6-3be8-4bb6-84d3-bf9e66b4d3de"
        },
        "item": {
          "id": "41c40361-c7eb-4097-854b-03b5ca0fe256",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "58a5dafa-6416-4f64-9c08-a65b658a770b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64bfcc1-6a1f-4db0-b3bb-dd6a41d39cc1",
        "cursor": {
          "ref": "0dc83cc1-28e9-4f2a-ba01-e7db18af995e",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "113d7c84-8c79-4811-81bd-7e2e2c0801bc"
        },
        "item": {
          "id": "a64bfcc1-6a1f-4db0-b3bb-dd6a41d39cc1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0cd4e3c0-03e3-48dd-b860-1ad025a8971a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 335,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70dfe389-5f67-4af7-9f86-1bb888c9360f",
        "cursor": {
          "ref": "2b7c23c7-556a-46f3-baa8-b82678f621c9",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "189c6114-c690-447d-b22a-7364eef5d980"
        },
        "item": {
          "id": "70dfe389-5f67-4af7-9f86-1bb888c9360f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "72aabf7b-4893-409e-a2ca-0738dc97318d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa2fd4b-d376-4e18-85bc-a8a2837507fc",
        "cursor": {
          "ref": "559029e7-3808-43a6-ac3e-34adc3a41e0e",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "330c93cc-24c1-47bc-83a3-98c44b008ab6"
        },
        "item": {
          "id": "baa2fd4b-d376-4e18-85bc-a8a2837507fc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "262adde0-f6d7-401a-98fe-eabafac39e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225294b1-82a8-4bc6-9ced-fb7827a336c5",
        "cursor": {
          "ref": "cb4bbd5a-8d35-48cf-a49c-a372ed7afb44",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "44050e8f-856a-48e8-8ddd-cdb8e8b6b641"
        },
        "item": {
          "id": "225294b1-82a8-4bc6-9ced-fb7827a336c5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fe7f791f-fd1e-4064-85e8-0cc271996382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d699aa-3b71-4d9e-9457-2f6b0eda26c3",
        "cursor": {
          "ref": "696f3ba0-a381-403b-9bd7-39131d8493ee",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "169489ba-edd7-49e9-ac23-b9f109698be6"
        },
        "item": {
          "id": "76d699aa-3b71-4d9e-9457-2f6b0eda26c3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "34fa4e46-9985-419a-9099-31ee38402d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cb82d1-5ff2-4e29-86b4-1dcda6a9296e",
        "cursor": {
          "ref": "a7d2ceb6-4d47-4928-940c-2946481a558a",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "92e5c510-9b26-49d0-8853-77c25ba2e2d6"
        },
        "item": {
          "id": "65cb82d1-5ff2-4e29-86b4-1dcda6a9296e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "07bb8766-c053-4b75-91e5-b3da4d58ce9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d1aff4-59e6-4d2c-9f58-6768e8ec9c62",
        "cursor": {
          "ref": "86bb3434-dd46-4da6-b973-3330cfbbe958",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "713989e3-2f43-4fe0-a7e2-fc68b0a525f3"
        },
        "item": {
          "id": "17d1aff4-59e6-4d2c-9f58-6768e8ec9c62",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "41f64bd5-76b8-4dbc-b79f-da6d4edc87f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82fd2246-011a-4655-8d05-d3b629b5382d",
        "cursor": {
          "ref": "8b89e676-08a3-478b-b9f1-b265c2a12697",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a9711298-9d9b-4a62-8bee-cd0987f5ed20"
        },
        "item": {
          "id": "82fd2246-011a-4655-8d05-d3b629b5382d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dbc118dc-ad36-4078-8c30-12c40de8631f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3600f155-37f0-4168-b43b-0388c9d6d002",
        "cursor": {
          "ref": "e089cd2d-925d-4c16-8224-ef6317aa2d6d",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "876f3ca8-971b-418d-99bf-fdf6724a405b"
        },
        "item": {
          "id": "3600f155-37f0-4168-b43b-0388c9d6d002",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "23a047d6-8923-4c9a-91ec-15dd5085936e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a42667-2e6e-4f55-adde-8642ff61f054",
        "cursor": {
          "ref": "38ccd45e-e562-4dc8-9179-acc36655224a",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d13d3cb2-7983-495b-8358-39bcb491daa1"
        },
        "item": {
          "id": "28a42667-2e6e-4f55-adde-8642ff61f054",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "30e12a5b-29d7-47f5-9aca-0ba99321abd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9344fa8-6780-40d1-814b-e2ac4c2f2887",
        "cursor": {
          "ref": "96051637-b739-4ffc-b814-a297ff818d8d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "340b9a53-ea21-473e-a5b2-d957ac309e52"
        },
        "item": {
          "id": "c9344fa8-6780-40d1-814b-e2ac4c2f2887",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6af99a77-36bd-4fa8-95c5-ea8b6584e3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b723e5d1-2747-4e00-bb08-0d9b24a8dc25",
        "cursor": {
          "ref": "a2f9a88b-1474-460b-a070-4fc2020aa963",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c8a12d16-e968-49ea-a3a9-3c26c6570985"
        },
        "item": {
          "id": "b723e5d1-2747-4e00-bb08-0d9b24a8dc25",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fd966c17-a5f2-4934-aa87-c44ec19c388d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd352db-a704-4bbb-8d77-077e3c021bba",
        "cursor": {
          "ref": "920398ce-5d7a-40b1-b905-1d338758c0e2",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f746e648-fa09-4a84-871e-2b1bdbaa43d1"
        },
        "item": {
          "id": "fcd352db-a704-4bbb-8d77-077e3c021bba",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "35b1f70e-f2c1-40b5-97e8-3a1bd657afe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e8ef85-e5c3-4efe-8aa4-709c3c4305e0",
        "cursor": {
          "ref": "46c5cb30-3851-446a-8b69-c564e8b31b1c",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a4f6bdfc-2c7f-44aa-a5ab-c49db0e82457"
        },
        "item": {
          "id": "c1e8ef85-e5c3-4efe-8aa4-709c3c4305e0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b740f87e-7b03-4f12-b3de-11fcc17585be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bc3bbd-3261-4d3d-a062-695a2b60bd7e",
        "cursor": {
          "ref": "253ba600-2a07-4f50-ba0f-17048175856e",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6cf53804-1f38-4dfc-8f78-191710255c22"
        },
        "item": {
          "id": "25bc3bbd-3261-4d3d-a062-695a2b60bd7e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7eeeaf3b-2dbc-45a8-9b99-1f2b0388e488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf4869c-ed40-44f8-a839-1c09fd32de09",
        "cursor": {
          "ref": "fb0956be-fde1-4c33-ac6f-25792ae6defb",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "be4c6d0e-aeb6-4836-8892-649a0aaadc51"
        },
        "item": {
          "id": "7bf4869c-ed40-44f8-a839-1c09fd32de09",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "aad4798e-00a6-461b-bb42-47757eb77580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74b6d0e-1bbc-44c8-9ced-20da27f6f8cc",
        "cursor": {
          "ref": "028007ca-9de8-4fa6-af41-6ab71c4631b2",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7ace6e63-9f6d-4d70-a996-95af5e57aeb5"
        },
        "item": {
          "id": "a74b6d0e-1bbc-44c8-9ced-20da27f6f8cc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6942f7cc-5005-44a0-ba28-d8be7e24a268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1d3a2a-4901-42aa-9ff4-bfc173c96054",
        "cursor": {
          "ref": "3e4069d8-a634-431d-9a67-87140904754c",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "821c6848-0daf-4189-801a-b7d27f927103"
        },
        "item": {
          "id": "ad1d3a2a-4901-42aa-9ff4-bfc173c96054",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "99730dad-80ff-44b4-97b9-7963405c2aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7b69c9-277d-4d2d-b1a4-a89041c124fe",
        "cursor": {
          "ref": "a94a2bb1-bd36-4883-a343-65c8834deb96",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "80894690-5928-49f2-b324-f3eec278fa2c"
        },
        "item": {
          "id": "9b7b69c9-277d-4d2d-b1a4-a89041c124fe",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b05098dd-df69-4fd1-9eaa-f1ba52c96eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ce16f7-1762-481f-86e8-3a2fd4e283b8",
        "cursor": {
          "ref": "8380ff39-d262-4e40-b062-e0a785f49c18",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "53d9d5d8-80a1-4dd1-b19d-15caaa34bf80"
        },
        "item": {
          "id": "27ce16f7-1762-481f-86e8-3a2fd4e283b8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f64f9fa0-a92f-44bc-a207-fefd581e1493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79598b7-0249-4ef7-8bb3-259875e5228f",
        "cursor": {
          "ref": "60465436-88ff-42a8-9edf-42583e2ce660",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f0f6a1c8-cf5a-4bdb-bad8-a20001a76734"
        },
        "item": {
          "id": "b79598b7-0249-4ef7-8bb3-259875e5228f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "099b307d-1679-4f55-ba43-246297e7b5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef626fc-6323-47eb-9c6e-c19d4ca6d7fb",
        "cursor": {
          "ref": "bed4e59c-dea1-4e7f-bdf8-5964d2205604",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b97dfc2a-24e0-421d-91ff-74dc40658b54"
        },
        "item": {
          "id": "aef626fc-6323-47eb-9c6e-c19d4ca6d7fb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f6937f4f-dec4-4a93-b293-0be64623ba42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd852881-5658-4d0d-96c7-363c34869dca",
        "cursor": {
          "ref": "0c166143-6ddd-449c-860c-9bd3d3693680",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c6477c53-6940-4c31-914c-158a1e166eb5"
        },
        "item": {
          "id": "fd852881-5658-4d0d-96c7-363c34869dca",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0499391b-2032-403a-a6ee-9927a8505d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ae2818-aa8a-4d12-8eff-a0c6d90dba7c",
        "cursor": {
          "ref": "1ae0fe3a-c3a7-418a-8005-fafa15e0e48d",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8b3ad66d-e141-4a5b-967f-e0c3389cfa96"
        },
        "item": {
          "id": "62ae2818-aa8a-4d12-8eff-a0c6d90dba7c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7747ebbb-3de2-4168-b375-37e8fc8e60ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb3d929-cda6-415b-a128-59603c64c7ec",
        "cursor": {
          "ref": "8a2a5f19-a536-4ab7-96d5-7db4bcd7e67a",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a86b9f1a-a3c7-42ef-b695-cd764525838d"
        },
        "item": {
          "id": "8fb3d929-cda6-415b-a128-59603c64c7ec",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "92cb551d-7202-4b0f-aee1-d9ea9382f17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4d7bce-e3a2-483b-95d8-d8e85641b66b",
        "cursor": {
          "ref": "444168ba-bcf3-4660-8707-e5474532ffe9",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "af6c959f-001d-4ea6-981f-6a34bf21d2fb"
        },
        "item": {
          "id": "ba4d7bce-e3a2-483b-95d8-d8e85641b66b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "93818fe6-f409-4a80-9375-5b8303ce0d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae2c4f0-f488-4e96-a160-6d7d80606fb8",
        "cursor": {
          "ref": "45cdbc89-126c-4ffc-a78c-246f06b12387",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7ebaabe9-68fa-4489-b024-ef7431ec70c5"
        },
        "item": {
          "id": "bae2c4f0-f488-4e96-a160-6d7d80606fb8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7fd79446-9e39-4f2b-b2aa-bceeb79387dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80c3a73-ff1f-42d7-80a1-651f6ff16fbc",
        "cursor": {
          "ref": "343a5287-47a0-40be-a36f-e9ec7b9e9bdd",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "26eb5f80-2ec1-472a-9c45-c9c668811915"
        },
        "item": {
          "id": "a80c3a73-ff1f-42d7-80a1-651f6ff16fbc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d11f68c5-46af-4ab2-bf52-a821519bdb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e069802-b277-4cef-9807-f4877105a299",
        "cursor": {
          "ref": "47d96cb0-bdac-4522-b7ee-2bd7261434b8",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e155b22f-66c8-4b2c-9670-dec14299f8bc"
        },
        "item": {
          "id": "3e069802-b277-4cef-9807-f4877105a299",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f91c0cf8-308c-4b59-a03e-ad553346a2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3173ccd-0c62-4198-ace1-b5ef5c5f9b5d",
        "cursor": {
          "ref": "eb8dda78-7bf9-4641-8db5-d5ad1c62cf42",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c8797d58-6871-4533-82db-98aa2db790d6"
        },
        "item": {
          "id": "b3173ccd-0c62-4198-ace1-b5ef5c5f9b5d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "839dc67a-b866-4944-8b13-3884c5f6aa9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42baf345-395b-4b93-92ad-84daa525b5b3",
        "cursor": {
          "ref": "d27264ce-f031-46a5-a767-671aeb17321b",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f71b690b-7b10-44c3-8fe8-8a5a407cbfac"
        },
        "item": {
          "id": "42baf345-395b-4b93-92ad-84daa525b5b3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "38ae8a6a-af32-4a49-a32f-667dd8a1a564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "addc6706-5bb5-4ad6-b66b-d6bb46ba6d15",
        "cursor": {
          "ref": "ea39585e-de43-4e26-8d6b-dd29503d1656",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cb2e1f4c-4793-4455-b334-b299c9300162"
        },
        "item": {
          "id": "addc6706-5bb5-4ad6-b66b-d6bb46ba6d15",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3c9321ec-ca1e-40b7-80a5-2ffb1b623c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a04bfe-037b-49ca-b55f-79bc213886a9",
        "cursor": {
          "ref": "19f15cb6-89e2-4585-af3e-5f1fc65f42aa",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a52c4eb5-e70d-48c0-968b-03eb22c1f2d1"
        },
        "item": {
          "id": "49a04bfe-037b-49ca-b55f-79bc213886a9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0b66fdcc-af68-4e59-bea7-b0d303658f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82379923-92c0-43c7-b7e0-77c6370e665d",
        "cursor": {
          "ref": "00a2f1a6-9dfb-4606-b0bb-b2d20cb16290",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "adc312d4-1b8b-412f-883e-f7ec6cbdb115"
        },
        "item": {
          "id": "82379923-92c0-43c7-b7e0-77c6370e665d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "16e1af9a-cd41-4945-9655-9f8ec5b01988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb432df1-a868-456e-8a51-210d97e1f92a",
        "cursor": {
          "ref": "d0d84716-43b4-4334-a4d6-438e532d6753",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9b684a56-f821-4e8b-9cfb-d82f95f3915b"
        },
        "item": {
          "id": "fb432df1-a868-456e-8a51-210d97e1f92a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "080892e8-1d0a-46e0-ae0e-a15b6667e9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12bb38f7-41a5-41ee-93b0-21cbd044e6cf",
        "cursor": {
          "ref": "ca4107ed-fbcb-456c-8093-db798cd2fbf8",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9f4878ba-25b8-4558-827f-85a952373f23"
        },
        "item": {
          "id": "12bb38f7-41a5-41ee-93b0-21cbd044e6cf",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8c029b12-3bfc-44a9-8418-00bc68d8adce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f92fac-cf0a-4a1f-890c-7d881700c0ee",
        "cursor": {
          "ref": "9948d3e9-70f1-41bc-bab4-026b29740368",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "54883a9f-b28a-4450-a207-2abe8ad33441"
        },
        "item": {
          "id": "30f92fac-cf0a-4a1f-890c-7d881700c0ee",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "915e3a15-cb19-48d7-af1b-22e8c31e8675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985ae842-30a8-4648-ab03-8f757226e18b",
        "cursor": {
          "ref": "df7f31cd-7c30-427f-bd91-152be86af2f1",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "588bbe25-9e91-44c9-89a3-eaa47dc50a27"
        },
        "item": {
          "id": "985ae842-30a8-4648-ab03-8f757226e18b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "651d9b17-b438-466e-882b-e5a866f4035c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a719edf7-c224-498c-bbbc-791c8b90466a",
        "cursor": {
          "ref": "c311e25f-79de-41d7-986a-82b4747db9db",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a6b7d478-a4ed-4e26-99cf-3aeefec8e94f"
        },
        "item": {
          "id": "a719edf7-c224-498c-bbbc-791c8b90466a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "61428a8c-321a-44ab-8366-5c0eb9ee7edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9cb0ef-0705-4304-ac08-e0b88bca1113",
        "cursor": {
          "ref": "94f56719-c7da-40ab-93d1-f16d42aeb9ce",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5c0bf4a5-7469-4d3f-8d50-e470bd62be3b"
        },
        "item": {
          "id": "1d9cb0ef-0705-4304-ac08-e0b88bca1113",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "15935057-9f3a-451e-8cee-b6114ab303f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b373a48-b354-44dc-b582-ce35f30adfc9",
        "cursor": {
          "ref": "42c960e9-368e-4d0f-8553-2a2c8ac0c793",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b7cc5923-e641-43e6-bd3f-e102013aa06f"
        },
        "item": {
          "id": "4b373a48-b354-44dc-b582-ce35f30adfc9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "566d8e48-c7a2-4733-8209-788f210ea3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4101439f-8f0f-4180-9e3d-be765ea6abb7",
        "cursor": {
          "ref": "42c5d85f-5e32-47ff-b24e-9246dbc5b25f",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "70c38480-a818-47f8-8b20-812490dfb708"
        },
        "item": {
          "id": "4101439f-8f0f-4180-9e3d-be765ea6abb7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4a0c572d-f758-4eb7-93ba-98fb7e66d4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3729f9ae-a7d4-413c-81c1-988b24a8f3d0",
        "cursor": {
          "ref": "d554ced3-467f-49e3-b61c-95ffa0ba4524",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "28ddd5bf-84c6-4f2d-b13d-9e3bc0170cd7"
        },
        "item": {
          "id": "3729f9ae-a7d4-413c-81c1-988b24a8f3d0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7b0d6e48-f499-41cd-b454-2784b6a05397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb596be-3ffa-48b4-aa3f-0492792fd6eb",
        "cursor": {
          "ref": "89d545dc-b025-4fa1-a2f4-39b3a042592c",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fe3fd35d-496e-4e8d-bd6e-3c8129975209"
        },
        "item": {
          "id": "aeb596be-3ffa-48b4-aa3f-0492792fd6eb",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0622c032-d8be-4c64-a424-b34992e79cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cb6d1d-6a90-41ed-88e2-c12f85af9201",
        "cursor": {
          "ref": "f85529c5-2da3-4230-b3a2-367c926cf66a",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8ab64af2-4f33-42f5-9fd0-10f68cafa031"
        },
        "item": {
          "id": "c0cb6d1d-6a90-41ed-88e2-c12f85af9201",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6b4960e7-79de-41c6-903a-ebfc9c588b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08832dbb-05f4-40e3-9875-956a4500c43a",
        "cursor": {
          "ref": "14a57326-a2f3-40a4-90f5-c1344ee17133",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1ba82407-bd57-41d7-923e-4e83aa74bcd2"
        },
        "item": {
          "id": "08832dbb-05f4-40e3-9875-956a4500c43a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "cfa4ccc1-4289-4861-8c53-ebcc3b99e1aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c1ca03-4327-496c-9c35-61d0c65e28de",
        "cursor": {
          "ref": "8aaa6780-201c-46c3-9bc1-46296f9c759d",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3b5eb380-ef84-4c8d-a347-f5d23f118435"
        },
        "item": {
          "id": "99c1ca03-4327-496c-9c35-61d0c65e28de",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f211e25f-d2d7-44b3-bf2d-8faf85bf501e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d65adc0-8ff8-4417-9272-045535585d3c",
        "cursor": {
          "ref": "0cfeb9f7-535d-45ed-bcda-a598abb85d66",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "87647549-f740-4270-908c-5c350e5999b9"
        },
        "item": {
          "id": "8d65adc0-8ff8-4417-9272-045535585d3c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8f5d4234-d5ee-4adf-9140-c825242fe97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005f0981-343d-4a3a-9993-faae813dcba0",
        "cursor": {
          "ref": "afe36e2d-68c2-4684-86cf-16c1fc1f2498",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "32adc2eb-6c12-4938-8410-65d4bdd44b60"
        },
        "item": {
          "id": "005f0981-343d-4a3a-9993-faae813dcba0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3390b98b-99bf-4ac4-bbb9-8bbaa39f52f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314ba899-f433-4779-b2c3-4bdb1588a1a4",
        "cursor": {
          "ref": "163e6236-057d-481d-9181-c531920b2004",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e1b95161-4e00-463a-8abc-75e1ca78354b"
        },
        "item": {
          "id": "314ba899-f433-4779-b2c3-4bdb1588a1a4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "eb08c4b2-5074-4151-9ba5-0be57355f404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8d6c73-39de-4b27-8ecc-f03e646ce9e3",
        "cursor": {
          "ref": "5d0da3c5-d622-4638-b9c9-84922aaaf5ee",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2067795d-088e-4068-85a9-d4c40c218fcf"
        },
        "item": {
          "id": "7b8d6c73-39de-4b27-8ecc-f03e646ce9e3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e811ad18-14d0-4b1d-b7c7-c7db761d9927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3904df-c57d-466f-b07f-9be068f854ce",
        "cursor": {
          "ref": "d86c46db-ec3c-4c5c-a780-2fd6f637e641",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "08facbb6-508f-435d-9e0b-43e4c4bc7c0c"
        },
        "item": {
          "id": "fe3904df-c57d-466f-b07f-9be068f854ce",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d9c2f920-31f5-4303-8ba5-f18c2ca577db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ab8b76-57c1-4d60-870b-6e3e2e25d213",
        "cursor": {
          "ref": "f3f20e56-a404-4e17-a81d-612c0f4b3c5b",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7b0007f6-75b4-4c86-92cb-53fa348ffe91"
        },
        "item": {
          "id": "c7ab8b76-57c1-4d60-870b-6e3e2e25d213",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "467e040d-7b2e-4db4-8737-a9c58e7f5c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68c5eea-636c-4b90-8469-3d057031c986",
        "cursor": {
          "ref": "2ab39956-2c9c-4692-885c-34cc6e8cc060",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "93f12569-0f3e-4085-a66b-7716d675efce"
        },
        "item": {
          "id": "d68c5eea-636c-4b90-8469-3d057031c986",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "01da0caa-0867-408c-958e-23e10af843b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c497ab-e3de-4cfa-81bd-c39137f1d686",
        "cursor": {
          "ref": "377ea55d-6466-4b11-b7ae-d48b73537ae9",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "19f06c7e-26ec-42f6-9ced-4b4ca7bd742e"
        },
        "item": {
          "id": "73c497ab-e3de-4cfa-81bd-c39137f1d686",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2f8089d0-eca0-4ea8-bf5c-ed8ebbddc24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2013d8cb-ad49-4e2d-8b2b-2ad1be387bfb",
        "cursor": {
          "ref": "9a899084-f68e-4f08-89d2-1fbddae3116b",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "aa8eb8c4-94a4-43d8-a3c2-821ecd0ea9fe"
        },
        "item": {
          "id": "2013d8cb-ad49-4e2d-8b2b-2ad1be387bfb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2a34a6b1-e6db-4272-83ca-df46a4ef3ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1c3212-47e8-49c8-b861-d744720c5b49",
        "cursor": {
          "ref": "ae887f5a-dca2-4509-8427-ef2b7afa8874",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e355d3a5-789e-49e2-a131-4d0af4b7f946"
        },
        "item": {
          "id": "8c1c3212-47e8-49c8-b861-d744720c5b49",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "603c2ebf-6a7e-46cd-9ffb-893d075221de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9a1ebc-02c7-4f59-8f6c-47baf41ef590",
        "cursor": {
          "ref": "fd1b2b60-6d4a-49fe-9669-880056c864dc",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a94669d4-59f9-404f-b70c-e45d3d3abff6"
        },
        "item": {
          "id": "2e9a1ebc-02c7-4f59-8f6c-47baf41ef590",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "69b323da-6180-4331-97ab-4048dda252e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2eda0fe-11d7-4328-a824-a6abacaeb364",
        "cursor": {
          "ref": "1674b220-039c-4859-a92d-1dc38a8780da",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a121d026-127c-4e16-ad77-39cc21b52a43"
        },
        "item": {
          "id": "d2eda0fe-11d7-4328-a824-a6abacaeb364",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f766d432-f7a8-4184-a9f7-6c32fa5725b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76176f3e-145b-43ba-acbc-95dd8c454cbd",
        "cursor": {
          "ref": "cf44904f-3977-43a6-8198-d1b43bc14ab1",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "92d32e87-a65b-4ad0-8134-82d9fc3761da"
        },
        "item": {
          "id": "76176f3e-145b-43ba-acbc-95dd8c454cbd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "af141b5e-5fc1-4438-88e2-486a480b47f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbccd88a-7471-4e03-bb79-4b39614c45a9",
        "cursor": {
          "ref": "9e343ad4-d499-4b5b-a78e-4001378ad32a",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3fa506b0-efa7-4cd4-a750-388e79f27e14"
        },
        "item": {
          "id": "cbccd88a-7471-4e03-bb79-4b39614c45a9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0da246f5-3e47-40c1-b35c-933991b4ae87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a91cda2-08e7-498c-bb73-50901984de9b",
        "cursor": {
          "ref": "b844607f-2b2f-47e7-a51c-aeb4b2dbc23d",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b655b7e5-ced0-49b1-9752-18b1e22fd76b"
        },
        "item": {
          "id": "3a91cda2-08e7-498c-bb73-50901984de9b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2d52e19a-1964-418f-96f6-3166aff336ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17613e2-6c4a-4925-8dc1-16074e198955",
        "cursor": {
          "ref": "13219419-8bcf-4fad-af5b-8599a149cd5c",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8749c57e-fa75-4aa1-b638-ef92931e2148"
        },
        "item": {
          "id": "e17613e2-6c4a-4925-8dc1-16074e198955",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e06d4540-31dc-4d69-a062-e409b1a928eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd4a923-b4a5-4799-993d-0f5b5b1207fe",
        "cursor": {
          "ref": "61e24e86-7b4a-4519-8893-4e2900560891",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8984ac74-5050-4f1d-b1ae-358a04adc8f9"
        },
        "item": {
          "id": "ccd4a923-b4a5-4799-993d-0f5b5b1207fe",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "510225ba-c72b-44fd-b8d5-84b670c8fad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492356b8-8323-473e-a3c2-c9c09ec8361d",
        "cursor": {
          "ref": "3283b26c-9833-4ee6-9b34-041617cc32a5",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "289ebcf6-096d-401e-b02b-197677dbe178"
        },
        "item": {
          "id": "492356b8-8323-473e-a3c2-c9c09ec8361d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "97fe71b5-41c9-4bda-8875-9bf575231913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c892f20-01d0-45f3-9051-9de74dad077e",
        "cursor": {
          "ref": "2a90fc50-6fd7-4506-a79a-71ef1cf278a7",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7324b739-5e70-43ab-a0ab-64cfd8db38ac"
        },
        "item": {
          "id": "6c892f20-01d0-45f3-9051-9de74dad077e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b38c5c33-d09e-4f3e-b048-e83cd80c9456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b512a630-3053-4dac-aa8d-026d092269b2",
        "cursor": {
          "ref": "ca584615-dbcc-4216-b84a-fac8f44d37f7",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f6a05642-b75a-4c25-a8b5-b9ca417d5ddc"
        },
        "item": {
          "id": "b512a630-3053-4dac-aa8d-026d092269b2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a4956653-56a0-4ca8-ac55-67d21eb1a440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81038206-b43b-46d5-b3f6-9b6384054390",
        "cursor": {
          "ref": "a91d222a-3688-403b-bccc-2451db0f94ec",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1759f043-0ee1-4894-a3d8-c0f2367aa79a"
        },
        "item": {
          "id": "81038206-b43b-46d5-b3f6-9b6384054390",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c02bf4a0-0ce4-4e77-9659-21dd5e50ad65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffc3108-9282-4f14-8d27-f2f3c8cbf62a",
        "cursor": {
          "ref": "ce76166b-622d-4157-8a3f-1081dec7cf50",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "10bd45c9-2481-4260-9ed0-1b462e5f565e"
        },
        "item": {
          "id": "2ffc3108-9282-4f14-8d27-f2f3c8cbf62a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8790c352-2d85-4e09-bfe1-96895f47c120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c05790-9190-4601-956a-03b78fbcfaef",
        "cursor": {
          "ref": "65ca4b9b-f379-40db-ac70-3873b0f3c79f",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "59111664-03b3-4c00-97e4-cca722ea8246"
        },
        "item": {
          "id": "f9c05790-9190-4601-956a-03b78fbcfaef",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e6336120-78b6-490a-97bc-e6692b23eb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e99d5f9-b1dd-407e-8097-6518d4bbbf41",
        "cursor": {
          "ref": "1101505d-442a-4d9f-805b-d3944eb1ced9",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "94aab207-1056-4b31-bfb3-719f64cc0a2e"
        },
        "item": {
          "id": "3e99d5f9-b1dd-407e-8097-6518d4bbbf41",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "166ebcb8-d46e-46ca-88ed-4085ef56db55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22b1ce3-d17f-4961-8f3a-30d136b958a7",
        "cursor": {
          "ref": "62cbf01e-ff77-4176-812b-59f85ea660da",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fbe1231a-7104-4256-8d2e-81b33cc018c6"
        },
        "item": {
          "id": "d22b1ce3-d17f-4961-8f3a-30d136b958a7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2a60e9a2-2cce-42ba-bb47-46429bd9fce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f0002c-193a-40aa-8551-bc55a68cb637",
        "cursor": {
          "ref": "1ecb7e6d-7d21-45c5-8e98-67f406ae5215",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d19da5b0-e4c4-4a48-a2a8-540891b3417b"
        },
        "item": {
          "id": "f9f0002c-193a-40aa-8551-bc55a68cb637",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6cba53fa-7ea2-44cf-856e-cd7bb810929f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf96e4ac-6813-49fc-999b-a0a48f08f013",
        "cursor": {
          "ref": "8d2da89b-72ec-46ae-8927-d75fb7e4d99b",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f8ddf225-c9f6-4295-a530-6c65c0c38620"
        },
        "item": {
          "id": "bf96e4ac-6813-49fc-999b-a0a48f08f013",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4232d74f-4405-4bfe-a208-3a51253c65e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf19df6-722c-4308-90c0-c7b65b815f1a",
        "cursor": {
          "ref": "c102d7c7-5b55-4dc3-9df6-f1aa295d5225",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "10a5b735-f14b-4f73-93c3-87a0d059017e"
        },
        "item": {
          "id": "6cf19df6-722c-4308-90c0-c7b65b815f1a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "83b5cad6-2a06-4354-a407-469d50cdcbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e534cdc3-a413-461c-b8b4-177b0558558f",
        "cursor": {
          "ref": "4896db36-8a67-41ac-81c5-dcb55b6604cd",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fd5524d7-9bfd-44a9-8c15-74fd02f92434"
        },
        "item": {
          "id": "e534cdc3-a413-461c-b8b4-177b0558558f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "70b8a61f-f199-42f3-b295-662213114a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74806ee-d075-42c4-ae57-dfaa6abdbc68",
        "cursor": {
          "ref": "6f7ec2d3-08e9-4503-a995-2be0f95bcea2",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a9798939-da87-495a-9642-1ee03764d940"
        },
        "item": {
          "id": "f74806ee-d075-42c4-ae57-dfaa6abdbc68",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c134f4c1-29a9-4f7c-bcb8-d46a558f5257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1ea865-61df-4438-8cb3-8fb162e20cde",
        "cursor": {
          "ref": "a4a9e70b-d00c-4eb1-8e08-60a9ac1a02d8",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2baae749-5ca9-4c53-89e3-e9c5ee4f4f21"
        },
        "item": {
          "id": "1f1ea865-61df-4438-8cb3-8fb162e20cde",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9948b865-326e-436f-acaf-41643ecdc4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520e642b-f46f-47b2-9a38-72a340588bab",
        "cursor": {
          "ref": "3e313645-304c-4301-ad98-69d5727b135a",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8a11d7f6-bdb2-475b-bbe9-13e9dee0634c"
        },
        "item": {
          "id": "520e642b-f46f-47b2-9a38-72a340588bab",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a6a9520b-7258-4016-83fc-528dfe3ef89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71388ae4-51d6-487b-9326-8ec5c89d4b90",
        "cursor": {
          "ref": "9d0a73d2-280d-434c-b450-188b31444323",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "06340b30-efb6-4785-acab-4db7cbdce96d"
        },
        "item": {
          "id": "71388ae4-51d6-487b-9326-8ec5c89d4b90",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0f693327-4e86-4375-8b7f-fc556a3440de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fdb2e1-d467-433f-8eff-e28651b64d50",
        "cursor": {
          "ref": "68a05763-7a24-48c9-8efc-fb58b76b4a0a",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7c0662e1-3d05-4266-a876-b6bb6d812c6b"
        },
        "item": {
          "id": "43fdb2e1-d467-433f-8eff-e28651b64d50",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "398a3d88-4033-4977-9684-391b47559aa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c236f0-5719-4f38-b352-fecd2ba8af3f",
        "cursor": {
          "ref": "3dbd6fa0-e479-4434-98d9-96d13b837ef5",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5307bebe-c43a-4ae8-9d30-36f0dd3e1949"
        },
        "item": {
          "id": "60c236f0-5719-4f38-b352-fecd2ba8af3f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b07a3ce6-0775-4ed4-a6d0-c70cccb37c05",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd16444d-2f68-4557-bd8e-24acdd8a28cd",
        "cursor": {
          "ref": "25a4db90-537c-478e-b2cc-35662ec424d8",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "216309c9-65c5-4fd0-a894-1e807df37dc7"
        },
        "item": {
          "id": "cd16444d-2f68-4557-bd8e-24acdd8a28cd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "01c30964-10fa-4e79-bdaa-9982992d6825",
          "status": "OK",
          "code": 200,
          "responseTime": 529,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42bc0d56-4ca4-4bfe-8594-a373da16f094",
        "cursor": {
          "ref": "12f15d42-a81d-4c96-bd6c-858a4318f178",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c7593620-dd7d-4f67-bb13-cc83b1df3422"
        },
        "item": {
          "id": "42bc0d56-4ca4-4bfe-8594-a373da16f094",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "63e78c61-371d-40a1-8bc7-9b5509b4f9b8",
          "status": "OK",
          "code": 200,
          "responseTime": 329,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb18671-146d-4430-ba38-9cb9a517d0e3",
        "cursor": {
          "ref": "7d001014-e89d-428d-ab94-ca9babd624ab",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d7b06ea9-778a-419b-a8f8-b028426f8cda"
        },
        "item": {
          "id": "deb18671-146d-4430-ba38-9cb9a517d0e3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "96ff40b3-fd86-495a-bd71-61b21a1a7c63",
          "status": "OK",
          "code": 200,
          "responseTime": 880,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092ea19a-b330-4e4c-9647-b4cbf2d3a9aa",
        "cursor": {
          "ref": "ae3fe0b4-950b-4ec7-a264-9a9abcfc458a",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "95843ec5-bebf-4291-b873-2942209a637b"
        },
        "item": {
          "id": "092ea19a-b330-4e4c-9647-b4cbf2d3a9aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7e67bd77-89a8-4f73-a37f-36886d14cdfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092ea19a-b330-4e4c-9647-b4cbf2d3a9aa",
        "cursor": {
          "ref": "ae3fe0b4-950b-4ec7-a264-9a9abcfc458a",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "95843ec5-bebf-4291-b873-2942209a637b"
        },
        "item": {
          "id": "092ea19a-b330-4e4c-9647-b4cbf2d3a9aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7e67bd77-89a8-4f73-a37f-36886d14cdfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092ea19a-b330-4e4c-9647-b4cbf2d3a9aa",
        "cursor": {
          "ref": "ae3fe0b4-950b-4ec7-a264-9a9abcfc458a",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "95843ec5-bebf-4291-b873-2942209a637b"
        },
        "item": {
          "id": "092ea19a-b330-4e4c-9647-b4cbf2d3a9aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7e67bd77-89a8-4f73-a37f-36886d14cdfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e463546-7152-4638-823e-f5d65ebef7e2",
        "cursor": {
          "ref": "d2e57c5b-96b9-4a97-9fe5-e57143d0d904",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d97c8157-4c08-476f-b04e-baccfebc6856"
        },
        "item": {
          "id": "7e463546-7152-4638-823e-f5d65ebef7e2",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "65bbc3bb-5ab8-4865-897a-907c1e15ddb9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f7f954-e74d-4f7c-921e-5c160c358b3e",
        "cursor": {
          "ref": "adbe1823-bae2-4ab6-bbf0-1d127fddc0a1",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a37b546f-74b5-4fbe-97fe-14d6f5b6054b"
        },
        "item": {
          "id": "53f7f954-e74d-4f7c-921e-5c160c358b3e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5e6f0837-cfd7-43d4-906a-9333ca7d4af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "53f7f954-e74d-4f7c-921e-5c160c358b3e",
        "cursor": {
          "ref": "adbe1823-bae2-4ab6-bbf0-1d127fddc0a1",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a37b546f-74b5-4fbe-97fe-14d6f5b6054b"
        },
        "item": {
          "id": "53f7f954-e74d-4f7c-921e-5c160c358b3e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5e6f0837-cfd7-43d4-906a-9333ca7d4af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "464b7315-8d9f-4448-9173-9c7a7f706f9a",
        "cursor": {
          "ref": "f7fda13c-202d-4189-9afd-60d34c3c76aa",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c7d5470d-3fd7-483d-9a6f-575aed76a199"
        },
        "item": {
          "id": "464b7315-8d9f-4448-9173-9c7a7f706f9a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "163ead56-54b8-4f49-b283-037d4c87ca9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "9d4f0ffe-10ba-4cf3-994c-07aaec08ae12",
        "cursor": {
          "ref": "6f3c3b62-bf9b-46be-8b4c-c79d209b5e12",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5cd2254a-f4e6-48a0-ab74-e396b0ad8e38"
        },
        "item": {
          "id": "9d4f0ffe-10ba-4cf3-994c-07aaec08ae12",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c6b1a144-cc8f-47db-a7cf-2fea88c9a6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9d4f0ffe-10ba-4cf3-994c-07aaec08ae12",
        "cursor": {
          "ref": "6f3c3b62-bf9b-46be-8b4c-c79d209b5e12",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5cd2254a-f4e6-48a0-ab74-e396b0ad8e38"
        },
        "item": {
          "id": "9d4f0ffe-10ba-4cf3-994c-07aaec08ae12",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c6b1a144-cc8f-47db-a7cf-2fea88c9a6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c7634241-513f-4836-b13d-523516ae7099",
        "cursor": {
          "ref": "90ff1f2e-2788-4ca1-9dbf-483ca2d74165",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1f27937f-64a3-4919-b64f-58a56c38ecab"
        },
        "item": {
          "id": "c7634241-513f-4836-b13d-523516ae7099",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "955ed5d3-1a92-4f2d-bf15-9b97bbb9b59a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}