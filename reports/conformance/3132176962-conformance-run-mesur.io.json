{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3d5ca0b2-2b6b-43d5-9663-8a59203ebbf0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a012edda-0718-49e7-8b18-24534a99ed34",
            "name": "Positive Testing",
            "item": [
              {
                "id": "94275307-3e4c-4fca-bbbe-ce16176ec7a3",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73c47ab1-796e-4130-9995-b485fb573ab1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb1eebea-0de7-4058-a8a7-f65acf5d3f62"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "fe99ee32-e578-4712-ab5f-7de67bb8e44c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1c8e0be7-68b2-4cd1-86b8-9d2ebc6f8195",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d7c09c8-3d89-4ffe-bb6b-af7d4a408fcd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4523e0b8-6f07-4b2a-8de7-b36330273579",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bf7d6f-9a8e-4177-9827-8e50ce75c543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "710a1d81-93f7-4a6c-9749-26076cd5a6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b28b0d-fa76-4400-93a7-086c10e11aab",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8f5131-7c6d-4cda-9eb3-eebab9c0b8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eca2c00b-f8d0-4828-922d-e23aa083ec3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23af748-3736-4e60-8f88-9b61746b4216",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6c5a7c-b6f7-48a1-8f29-147d4442a926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23e368ae-d83d-4bf0-9fee-0293c8971312"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ad767f10-7ad1-486e-9f6a-1dd8a250adee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0d460fa-ff64-4dd2-b004-659c583d901e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a6320c-8d92-4ab2-95a1-c4c4ffac9632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58c2ec24-c837-4239-84dc-00113f1e675e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b201cd54-7496-4162-8fa0-2a5b534d7c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92de503-8c33-46f9-b97c-4af5477810fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120705d4-ccd6-4113-95df-3b77ff446ad7",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9c5c25-8c19-4005-8a0a-4748f9531293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c00c5bf0-5b9d-4736-bf9d-602354c545cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458adcfc-5a27-4ff8-b29f-3299aa199cc7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "cefa820f-f131-4aea-8a95-9762c517547d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c8e54562-a7d7-45c9-9ae1-59441d7c402f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "46d8e93b-de70-4820-b034-db8bf3889f73",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b816199-1e5c-42a6-87a0-77162a9966ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "69ce4baf-60b9-4463-a8a9-65d2189810fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "107ee6ec-b5a7-4ccc-93f5-520acdf2cb6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "54a83428-21d1-48d4-b277-be37af3ef4f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fcd3d7be-668e-4a8a-996b-1e034fa47334",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38a82fcf-ff88-4916-afda-e0eeb94f9390"
            }
          }
        ]
      },
      {
        "id": "2ac171ef-d877-4e4a-95d6-3ede8ff2792b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "517d305a-58a3-4e61-b888-d5f9abde089a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "317f77e3-b552-4127-947c-446352a0c844",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6dbf37d6-1b19-4308-a26c-3072c7c6b114",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7cd9fb-cd63-4aaa-836e-c4c9e2881b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9086ad5b-324a-4dfd-9e5d-75bf20311a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af18b15-af44-4eb9-83cb-7e5ba228fc23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd48fef7-65ba-478d-ba29-eaa5f89dfd75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a5e363-cbfc-4210-9fd8-9ef2f29ea73d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df87df5-eaa9-4b79-b70b-f9719e64f313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42780966-854b-4b9f-9092-5d24b10dbb1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbbe6fa-4a3c-4bfd-b230-10adefbd1dbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "decb9b6b-8a18-48b2-ba8e-869b1c7bd20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71eff4f6-a27f-4a90-9d31-96a6f0b80a18",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d566178b-3749-4cc2-b7b3-4873b7b8117b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a444b4-55af-4ffb-b769-5827cc0ceb51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70eff87e-9c1c-4cfb-ad81-9f1d81c6aa32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07b394b0-3c71-46a0-9a5c-280786409b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96dbbd8-c6dd-40a4-bd30-81a610303722",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a481cc50-da78-461c-a209-555c8c43f675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093e192e-14c5-46c5-8e78-c7966e64d632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c70421-d098-414b-a1f4-6497a26e8bab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65404067-f738-4451-9fa8-d3b3c981494d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780b1209-a6ec-47ae-ac64-e7b40d05cf41",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce6bc79-b72e-4e42-9953-7f83eb176b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5576dda-9033-4e25-8be2-ca6406ab8fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19f1c02-18fc-4eef-bee8-91428d71bf42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8510481f-7f66-44f7-a83b-ce255bcf17a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99148324-304b-4193-af30-78cd72f5b7a8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd70b153-3420-45dd-befe-1fd0291e3654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a008369e-fe80-489f-901a-3499c2921458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d582d476-ae39-4463-8c78-a27fd20532dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "188ac2b7-f47e-40e3-8b9f-912ab66588f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470b4e6c-4da1-453b-a3ad-8ea85d9e5561",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e480f54a-95f0-4c88-b817-6ba0cdb37836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec3bd50-6673-45ea-ae44-5dc20d72fbbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40022e0b-479a-486e-a9ec-4f05821bea35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf8602b7-07a2-44e4-a3dc-1f0e98364736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9aa9b8-e04c-4eb8-8565-cfefed6202e3",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cd4ef1-e62a-4433-8e02-4266eea7f91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88e53bc-139d-4922-9e52-8bad0b3d1e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6766a9d-a925-4434-8e1c-f8e90fff6dd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c41e28-3365-436d-a193-adeb41b78504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36dfe736-4926-4ca3-a905-1abf934b36ff",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3f505d-9079-4ad9-9557-f5f9506c672e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae7b5b0-8ab0-4c89-82a1-664d44dfebb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91705cad-d652-44aa-a1df-da5e5ce8824a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c5d903d-7151-4d14-9077-6cc1c2212b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1754f8d-9a13-486c-84ca-b9f86627b0b5",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9bb2d4-f70d-4f87-aa57-74593d5b679e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d4ae696-cbd5-4d2a-9203-83f4935b3f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77f0dec-0756-4ab8-a1e6-379c3277cf73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "349225d4-e9f1-42ec-92f7-1057dd29be78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bb11ac-479d-45db-88f5-6420a91961b0",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efdecfa-7691-48dd-a53a-87235c6326a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23bf6a0-3b37-4020-9a2b-d442cf40f4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cedbf9-52ac-4e39-9bdd-d64028eafbfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "60811160-ffb3-45a1-bdfd-4293e65260f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700927b8-185a-488e-9eac-a0b964842879",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc307d95-e269-46a4-9d88-7df69b738628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f61b5d-2611-4e0b-a0e8-ce06d7c0041b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9babdc38-8d77-42eb-ae9e-b2a4d8ab279c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "744f1060-cf5a-46ed-9523-badd5de448e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adccb13-88d4-4ac1-928a-64532ba54a94",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acd6d3e-d172-4257-a313-17088bf55d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52aca87-ba38-4ac3-8ef6-07bbafb5a5b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2022d9-4ae7-4dbe-b948-a91ee16df362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b12a1ff4-12bd-415a-8e85-9622f73a48ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7724574c-7474-4fdc-8524-1d66dd634661",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6004d61f-7fb3-48b3-8b70-82ac54dfe322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8cb1cd-a247-4689-a5cf-f6a6d7dcca34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ad42a9-b5cf-4b72-b0ee-5897ad03099a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb7b4fb6-e889-492d-bac0-36a4ab745f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0197ccd-fa1c-4203-97af-20413a6f0c5b",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ec68bb-003a-4d62-a6bd-32851dde5c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09fb460-9ed4-42c9-859f-e20fddfd83ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec2d437-9a5c-4e4e-b077-227b21846d9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "25137481-8bc3-423e-97c9-bd534ef713f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b08ed9d-4094-4b0e-8db0-58c228c8ba1e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51b5899-3e96-424d-ab7a-f84be7b4ebf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6828252b-ba0e-42bb-8c04-1ee16dd90268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db92e83c-2273-4535-b7d8-f1eeb0211dbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "779e917b-3690-4aa2-8f9d-ba574794ac19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be56297f-d05f-410b-881e-4c90ab80d329",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8211290b-8f6d-4b0e-8e06-e80758482995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124f08f3-fe25-4c48-99cc-518c16ed3b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47649af-fd70-47cc-8e62-835317e6af8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a7375ab-1703-49a4-834a-e602d2fb3cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ebf03c-04a7-44ee-9e9c-12ff362cbe39",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca8a00d-7a31-4bd0-ab71-af128a0adfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e4c101-c0d7-45c8-88f6-a906cf2a6731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056ea4b1-6482-4077-85af-f2b4ecfd0ca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01dc4928-475d-4128-b758-a4bacbb2c280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74af21e7-7b02-41ce-8a87-60f229b4b738",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9626f451-3443-44d8-95de-6679178669eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c568c4c9-201e-4630-94da-5752f793e0e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d459689f-0114-4693-bf45-f1435a264202",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dd3261a-d7e9-44f7-880f-890888757479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207a7c25-e3b9-424d-b610-d9697972aba6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be85d614-3342-43bf-989e-60ec8e8168ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef5e49c-7f7e-4aa8-82a0-9ab341e499a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26390f61-1153-4ef4-b0c0-1d109431e5f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9872cdac-7a5f-4ed3-a9aa-c22f656fdbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16540b8-3bc5-4cc1-80cd-9041798a1eed",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a51042-0dbd-46af-9862-057eea64f41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad76339-1e27-439c-b4e1-563271c6e7e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b75dd8-8ee7-44ad-a0a0-5613fa4cf200",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f203a5a8-6ab8-4e2e-9ae8-a044d21ad187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38bff7b-d3a7-4500-b6c4-9d1ab5b1c68b",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e917d7-9846-49e0-ac50-1ec37fdaa0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d42109-af69-4a9e-82ec-f57364c6b577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed08b42-4f13-476b-883c-f499471585ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff8f0ed1-98bb-4663-aa04-ef0eddead66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148e5dcb-9ac5-4014-be4f-50efdbd9147e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa10b39e-92d3-4560-99fb-bce28db0e1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a6747f-1969-40e3-b43e-aff4216c2c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc8f041-87ea-45d5-93b7-0cbe1d4415a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5439e2cd-0e60-473e-8404-6adb15bd2152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3020bf-6d3d-41ab-bad4-876e12979b90",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe808eed-273b-4d44-a853-a6fb8adb35d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0596e80f-b1a4-49b4-9685-947c307d5ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4ef00c-21b8-466e-b5bc-ec25e379c9be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af7cebf-addc-45f4-a9fe-d8e088191a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba6caf8-e777-4338-8173-f7ad790f9e73",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd586ddd-e23a-47f6-8be8-b5daf5bca3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838bff54-6bf5-4296-ad1b-de04d3abbd4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de584860-de62-48b1-905c-b7595d809fa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ad141f2-ee52-4f70-bd78-90b8a8d20653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb2fce8-8e82-41ac-809c-4eb7ca9b7e44",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97851251-2d69-4727-87ed-f80e6175caaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b90f6b-a26d-4923-8e55-e6be7be4b069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56239a76-354e-4a83-94ce-296cda434ed2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82a29c25-a10f-493e-9f62-09f75dfc28cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6ac710-1774-4dc5-b74b-d45434e1aabf",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b819f9e-2f50-4a28-b46f-fb88c766abf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d9cc04-a2e5-4040-b2b2-8625faefdf3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29cc92f-fb91-4acd-a152-92763e2f7979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89e9a603-fc6d-40fe-af80-83518ebecf61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6188bf0-81ea-45ec-af54-1625039ec21f",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fb501e-a2ee-4070-b840-b6fec28a866a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef1aa19-70cc-4e50-8c8c-17d37d60cd75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824d0b74-cc3f-4fb0-bff0-4e7eaa08236c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10d8cf56-d08c-4f3a-babd-01cc7ef7bedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8829f77-260d-472e-a213-b00e370cbf53",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90abbf54-95fa-406f-b89b-bc7825afa304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96be04b0-8e9b-416f-87c9-d7a8dba60b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69187f89-5f77-459b-8449-b9e76fe7d198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2971c7e8-bb14-46bb-980f-2a3300c3336a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39ced20-ac66-4735-b8fb-d91ff4f49a5e",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ef623f-d303-42eb-9136-27c0d6fb0b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ae630e-2342-48bc-b403-c9dcbad51d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a3c61e-8432-4f38-8748-181655bcf43d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc8b9a49-f4b0-42cd-b890-71da4a0d0048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba2e53f-e2bd-40d3-8d44-6b8676b4aead",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a6fe5b-ea74-4f16-860a-700142a43d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d5187d52-fbda-4f0c-815e-bc8f66f20d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cece79-1446-4c10-8417-dcac9c12e836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d471c11-082d-4cd6-ab05-ef8c72bb9695"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5cd6979a-4db3-4f8b-90d3-8b65059934d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8eea78c-f41c-469c-8270-963ef85c6731",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1940658e-5e69-4916-a062-50641717b4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35cb7946-7488-40e6-b100-cd7ad452e0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe20b35f-1859-4071-924a-50848a075698",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2821b210-272b-4d98-a6b3-de64fd2b68f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758299b9-d3f8-4fd7-b75c-8177630a1e14",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae11f71-058d-4ad3-bf28-d210d1743bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab7b797e-c2f7-482b-b205-ddddd8f18193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18eee9fc-8a6e-4bec-aa2a-ba7df8db0508",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8d0eab4b-6543-4393-875a-2d7a75fe328f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cec3449a-4e2b-4aaa-941c-b098057997ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "858d4a66-54ea-4b35-8bed-97c34799dc18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f330f3d6-62d5-42d5-b782-bc737edef124",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8baa3ae-27dc-4270-9b85-adc8ef1c108e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42cfef3f-a999-431c-bcb6-bc5dc6f9fcde",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea8fd47d-c91d-4af5-9070-3f68cd16b8ed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "08ea64a6-ac4b-46c3-a9ea-efd630a27719",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9a8674d1-4265-4e8b-a575-8b092615e2b5"
                }
              }
            ]
          },
          {
            "id": "b3733b9b-4376-4e62-963c-9a5d6cc1df2a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "efba4852-f28a-4b38-9f26-2412a9bf1817",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13aabfbb-b2ca-4d20-bcbc-51a3fe84352c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "afe8e373-5241-416b-9459-3b2df2d49525"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c9f7d1d-ea41-4944-9a40-49faca630993",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c39d0965-b07c-488b-908e-2d46f35a2194"
                    }
                  }
                ]
              },
              {
                "id": "0177c0b5-1e4f-4096-a4a8-cd6cbad19c0e",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f686417-10ec-4086-98b5-f78be690666e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa28d9f7-d717-47bb-bfd8-9855e7e05a3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6ce1e31-32ec-4825-b733-2c9a8dc01c60",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d2613d1f-ca4a-47b0-b3fd-15e67510cf77"
                    }
                  }
                ]
              },
              {
                "id": "a44a3bc2-5652-4e95-a48f-9dbde4854255",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48dc5b90-257b-4116-a08f-71ac2b431388",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c6d35a0-5c4b-49ab-a69c-fe98bb670563"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25436cba-e72f-472d-8e86-014ff6770e85",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "50d608a4-a895-4743-b115-cabef3b70e53"
                    }
                  }
                ]
              },
              {
                "id": "02fd5c0b-3912-4cc7-ab38-4ca901bf4fa1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c15ca175-03cb-47d6-a6f5-4a6ac9b255df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "306c5e6c-d093-4907-bea7-693d57cedaba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "995af4fd-7727-452b-9856-5860ae8eded9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9e80634a-3ae2-4983-b303-576b9cc09f93"
                    }
                  }
                ]
              },
              {
                "id": "22b87f29-5869-4ddf-8e46-86aaaf82a178",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d3bacd9-7e9a-4a2c-b148-71dd2502d039",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "235f1f3f-a1b3-4501-a8cd-abe76db54aa9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8653562-5eea-49f1-afd1-5f22e16ffdc0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "21d3d284-5e35-4273-87c6-9d95e59aec89"
                    }
                  }
                ]
              },
              {
                "id": "08242232-7d51-4757-b0c1-9069ed91fb72",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68f27176-b6a4-48ba-a556-40cb9603e427",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7a90f9d-70d3-4372-8b6b-0f5b1c61584e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8709a34a-6061-4cc1-b4c9-d0271efb64bf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "36f1c015-a123-41fd-9557-3d8fdcfbbd16"
                    }
                  }
                ]
              },
              {
                "id": "9f50c41f-4f01-4674-8aec-3736fd2db636",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa19676d-ff29-47f9-9c14-afb852062130",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f00ef368-1909-4475-9bf0-ae7dffc34670"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a2c420f-9f5b-4f4a-a88e-646b2066ac09",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8264b3dc-239f-44e5-95b0-01b5e76fb08b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11e65955-2611-480a-9ec3-161d96faacad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69dcf938-7e95-4a82-8422-cbfac23ea5c5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "91854fa2-f78b-40b3-897a-a69eed3e6e83",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2cc0cf6b-f082-4101-8dce-630b77e7f5e8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54a7d1a1-27a9-4175-85a1-2c680ec542a7",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "58753f9a-d9b9-43ca-90d8-ae6f39c28fd4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86251531-d30e-478d-bfba-fab041aa4ba2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30857b10-0122-4075-84fb-0beec260fc2a"
            }
          }
        ]
      },
      {
        "id": "aa79b149-a0ec-40d6-9377-ceb1808cde9a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "155231c3-a35f-4338-8404-d284a4838a6c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92a0a51e-ad49-411d-9003-51bda85f92a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a309f380-dc30-415b-bca3-29a37b5a68d0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a6ed06-89d0-4c2e-93cc-243f1033e86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b67a482-91df-47c2-8349-d1323bd5c473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "996a9a86-3bf7-4835-aea2-aa75387f1830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a4cbe6c-73f2-4071-bd03-4178d10d75fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d019b8-bed0-431c-a661-461af4f039cb",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b61aa0-a63a-4a49-b944-640993586bbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c8b3ae83-5bcc-46ea-8c80-b87a64f067b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbca441-2379-41a8-94d9-626ed7ad02cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6681ca44-1aec-4daf-8f97-89d0fdf62dfc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7eb9d3f8-4236-4d7e-80db-518e70485c68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3bf33e5-7b19-4526-ae3d-4dd99d7a713a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c8ee993-aa91-4b26-984d-35239d82508a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fad480c9-6478-43e2-9cf9-8fa3dca68922"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0eb8b1b-afcd-4b62-b3c3-d627a7244219",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "f29144c4-8318-49ae-8b1b-958cee0c645b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b98b3c5-53da-4d72-8585-cd1992ff13a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6068edd1-34d7-4c19-8f04-7e050004c304"
            }
          }
        ]
      },
      {
        "id": "59722f23-ba9c-4026-b958-be4e70919ecf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0726e707-72c2-4e26-a559-b9cefafb0f16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b7693aa-2909-47f8-8025-b0e3d2a8a4ef",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ff211000-ed0b-4d1e-b78c-87b9d868464d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36db1ba-c332-4866-9d2e-0f22f5010063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7665db18-636e-41d4-8ecf-eb0027f1405b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df124b5-97ab-42b6-8202-69962d118c48",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f41579-4421-4f5e-b49e-5b8a0e2a5ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01fdeefd-dcfc-4fe8-855a-e8a2c7c0ffda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6438d835-506a-466f-ba39-5824ed7efcd7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cd772a-6c7e-4a84-b8bd-3f890a06212a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2024b4-46e9-4286-b1c9-f94c52bfb844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531f19cc-7f18-4b5e-8996-390476214a03",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb263f3-cdb7-4fcf-9eed-933a340d3cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d207f56-9253-4b37-96bc-e680b0e00a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a183097-59fa-45fd-8040-023422d08db8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e87d99-fba7-44f3-8cd8-0cd540459764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8c7ee2-ee90-46a5-adf4-e90822eeece2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c44ad0-56b7-4531-a87f-04fd9a34bf79",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8638c7a4-1578-4ba9-ad6a-3a9cf7b9a540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93633cb9-688c-4623-948f-910f102f94ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48c4427-2658-4c77-81c1-e7fb012da191",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a633f9-3919-40f1-b705-14e3811a9f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a22f3d-9f09-4c3d-b954-d88e299b985e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01361171-ac0b-4d31-be42-03e485ef9bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f848fe8-bafe-4e9c-aefe-ef92cf1754e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5314c2-99c6-43ba-bbed-4a592159efd4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720be6dc-44ec-44ee-8755-5a33540312fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1d8a7bd-e88c-4c4d-a88b-34342c14cfbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89977276-c55e-4d5e-afee-39a25b9bd1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74fc0e2-e0ab-4262-95ac-2820283839b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf98d86-f75b-42f3-a238-c48cde938572",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bf77b2-fce0-4769-8fcf-795a6e1a5bdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "334e730e-ff89-48ba-97cf-759290fea37a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0657f9fc-f6a7-4d28-bf4b-0e6e50bc9de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9da9eb0-e9c6-4bab-8abc-4f05335358e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b0c711-ceec-4f14-ab24-006ccda5b1c1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2487fbf-c731-4a34-bb6f-34b10f13392c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff1a76a1-c5ac-4900-b743-6c16c153f2b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ab1b41-d8b5-4433-807c-4565b616b38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db77734d-0d1a-42c6-b579-90f00108bb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b49c66-bb1e-44e4-8c31-77c504f53bed",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..RJunbl8K6pk5JyKv0VkmdJT4I8sfatEPdbup0RAYKU6F1fDvEZ8j0xFlr1ocpNQGIi4H5cufTCRE3Fi45ZQ-CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ad2d8b-6277-45ac-9b4b-282eff49803d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9345fd-b26b-44aa-ad3c-7a1f4daceb3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4431284-686c-4dd8-a619-e3cedb973bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96824e7b-50d0-40c9-9cc0-992a8fc8d770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70495fee-3d89-4614-84a4-1b8f18414c88",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0fdfed3-78fc-46be-944e-5829166853d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd571755-d466-47fc-b221-c7c697b24510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24bc98bb-8b0e-49f8-b720-5e54609be426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e040e34d-8b2c-4103-bfcc-d289eace5ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4f1c14-593d-4097-a259-773a26e762c1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccbc4a9-ca22-4120-b22d-9010dcccb9a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40215e2a-7b60-4671-8acc-05104765db9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5989d3-7b3e-4ce8-89a0-4f388d8e6d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e77a6f-80d0-4f56-b1bd-4761e871865b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac7d80f-3c64-4c36-9417-a220edc6493d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566e9a97-4f67-417f-9127-6d59603d2e51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af29dec2-5fc8-492b-9319-94650cbfeba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7a587b-0330-41bf-9988-a70f0c2d08b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b72279-91fd-4f51-80e2-45d0638f311a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c595395-ff0f-472b-8d9d-983b5c6b06c1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5073b9b5-35c2-4189-b268-26b83fda3f81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56987a14-2f9d-4952-a759-98582e07f154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202ec728-0e07-42ad-8151-e4ac2b75fad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077f7a89-fc67-4a12-a673-5e8a882dafe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e733fd-4798-4bea-a245-dece772b326b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30647e6e-079e-42b7-9c59-cb886b10ea4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a37f8c0f-f4f2-4903-a96a-126026502380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a24c9e-dfac-46ec-870c-12bccdaf131f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab1eb36-a7a4-4489-8eec-0f77a170afbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388919ca-edd6-4140-a16e-3c8a7c2ba68b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08e7780-673a-41f1-83a3-e7f2932d0da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83515477-fa48-4c0c-8caf-d026cb6bd9f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e06fb36-1631-4cfc-8dc8-e814c9b6e5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a1f41b-5eb5-4a3f-abf6-85a0432eff0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120e4ccc-057a-4df7-9149-ccd7ea58857b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..CaZ2UcTNDOTCXaDXAclLPy7_3rpuf2sbL5xwaMnN2abolieE_C7fB7RsmZ7i5_6CoKRhGnrM3_YkAms8IlObCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a1603f-2fdd-4e91-8036-0686d2aa7922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5bbcd84-bec6-4a49-9227-56f0902203a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3e29f8-8117-4ba5-9fd7-45ea77b79e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4615b1e7-948e-484d-981e-07b52ab9d87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4292bbb1-d97c-44df-9f42-bf6a710b8c1b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..yonwdW7r7YFAAjZZxjVrYPkLVrbLR5TMZ3bkWN1uo2UbUi5tgtlikoyyHlj8QD0MPA7xd4Jv-1PlryIVOqtUCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7f39cd-1880-403b-9ad0-df72d01200d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "246e51fa-3e83-452e-a7b4-eadbca68f58e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e612b11-a50a-4e59-bf9a-ea738ba244d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea52e23-a81c-4831-8e48-e142a2352ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68cd328-dfd6-42d2-a37d-74cc1fa38951",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TRCl90uRMmkycDvfeHw1S7yxyAVl1-Vc2SfwwDzXkn1SqfCJxptwVsgJWwr3gQRAqveZR0xrxQczy4tWHq2FDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53cade5-ab24-4c90-b21b-65f8e3f0cfad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f51b742-201e-4cae-9853-831266f5dc03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e57c0eb-6043-462d-aede-6d3a4225496e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01787094-5d3f-44ab-871c-8109f3c225fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0a8c65-f0b4-4451-9a16-3b0fe4f8aa27",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49785a1-e102-4d0d-ba51-78e2a26f3e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e141d102-4ef0-4ca6-904c-244e74de8410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af57d3bb-5739-463d-8879-a3fd50e839e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d396e1-9934-4486-94f5-1665ca895f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea3e34a-e4f2-4d3e-9354-5e6649a763c8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ymo0kNnQ9mVHr1RKpfCuR_ekUAXzNEM7stSEtbbFv4ZPZb6NK7kUBkckgwrZyBp8re9RQEedJ9yiyfzTL41dCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04907cc0-694a-4421-aad6-0ec341cea69b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f40eae-1e33-40ba-ab0c-b11423c3e24f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed811ba-8334-4485-8968-c536b228c8b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25cd6c8-f0e4-4c62-9213-6f873738c435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9bc971-ad78-4336-a527-9460122017fd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7162ea-3cd6-453b-aa1f-b65edca3f361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb63200-7d69-4d3d-91cc-74ecc179126b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1852dae1-9ebc-40fd-ba21-e65e419fe09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ce64ab-9e2f-4a8f-9be5-e4f77015e620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9dd04e-090e-4958-8c5c-c1c475dbba45",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde2152a-4fe7-4b0a-8c27-c8551e4367cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5954f957-2220-4da5-8739-81be021f16b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3ae2a9-ddf5-475e-97a4-5e83348ea093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f55eff5-6d37-4fb0-8575-cfd49d720cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363c3cd8-57aa-433a-acbc-5eab89966a6b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8462b67a-cab5-4803-97c5-2ff295d68845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d7d8568-9833-4385-a82b-48edb74d5273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b8207a-87e7-45ff-8d2e-740a23ee0545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966d59f1-bc20-4eba-8cdf-7200d1ce4b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea96c527-ea6a-48ab-83b7-b5ffb2edbd74",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27e0794-6a36-4644-a2d6-9ef55f827439",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d1abc92-82fd-4e85-93af-f3feaf21d1e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3ab28b-c8aa-48a7-b0d2-f6b68ba1f49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819fc17e-9130-4633-ae6a-165aed4af313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa6294d-5406-4da1-bdc8-93e9d76e879c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1a5b8f-8713-43f8-9bb8-3acb3a16f2a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e45ad620-9e72-4cb9-b205-c193d728e91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a9cbfc-a2a3-471b-b349-b06ee1b7fedf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1963cc-7017-4a08-a7ac-5fa9e45fb788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e591a3-791e-4343-a71b-65632689e494",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38a38c5-b381-4883-a6f7-aa2fb8155a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d06e403-ad36-4228-ae7d-ddda9b82604a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7554727a-6017-489f-a92a-bf7c8dfa7902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ef7c59-af8d-45fc-88d7-f91b75d4eee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b741ffd-4e38-4e0a-b102-fa75a95db31b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e1df81-d9b9-47e4-9045-20ec5850b585",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d39cfa7-71a9-4d2a-a459-5e3d593343f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdfda1e-6708-452d-9afa-e6455ca2d6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98431d8f-3459-4a82-bab3-4e377019132d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27cca3b-b100-4930-a878-e4e24f74649e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3e8c85-388a-42ba-a929-7d14cb07615c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9633e2b-d6fe-4c0a-aabc-e13fa92ecfad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c2421c-6155-4079-b4b5-eb4f06767849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47b4668-ab08-43c6-aad9-f133c8db13a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15300775-8e5a-4f19-99c3-0caaf5a3f96d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfebfd04-38c5-41e5-ab10-a0b801149710",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a61ca1ff-3424-4cbe-bcd3-405452bf3d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abef3e3c-70a1-4061-8681-6855f1c4e247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358f89d1-5c46-469f-a36f-0dae016c628d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a702cd-4e52-4700-913a-291991c54d33",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40bdf04-a52d-434f-a79c-b924d02d4788",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d40cfb3f-a94f-4183-816a-e75cc916ce48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f04f30-6f59-4bb0-bc57-2227599fef77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a45eae-c426-40da-a629-295eaff6c500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb64e72-d72b-428d-b2cf-6da8a4378db7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90911204-d6e0-4423-ac9b-0c7b2cc983a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a41784c-645e-45ee-8767-ee935fee960d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863b36e4-7dfb-42e8-8286-5ecc0d05ff90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba8099b1-4296-4bfe-abc8-d886fac5ff1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f96c307-9c87-43d5-83d1-0fc8a6692086",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b014f0f6-48e0-4c30-830b-bd6c01ef303d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16de5e74-89b6-4247-b585-dd73068bb7a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69133e18-9ee2-440c-b1ee-d954b530b696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886eb3a5-fbb1-4371-8300-18f1b263b20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29856b2-0ce1-4f4c-bd0f-2697c97994a1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bgY03ZzK02APUHCDiqUVMYbbvu4mSPNC1sGY3lTC8ko7j5oZDB4rB8FRzsXCc9L0O4nHx4UNJURCsRZUErbRCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e12a577-6445-4ec4-b5eb-bcbe596a9d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af94493-71b7-4a87-845b-de53dd60a81b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24624679-afe3-420b-a277-4c094fb265b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c0ce0d-93a6-4472-b0a5-095b7e73793f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ff1556-9583-4362-b3c7-c6f79568c69a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..2Mu6q2PaIBjmfXHqLuT7XIFthDHboV4bdlIdLFY9KxapUXic6uhoefYFrarss-AN_5dUHdjWnHEMCoWYjW4MAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c691ba-fc95-4742-b7c3-19e5273b875d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f726a638-976d-44a8-bbd9-9a50c5b11884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e20a08c-f6b1-4a6b-b9fd-5e91d9557c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785f9a8d-bab0-4702-a6da-3d6430cc30d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3680830a-1651-492d-8457-4f452bc51914",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..L3RWLJfQzaffmRy3vXZF_7gfdlR-iQbA_8TjGFaBCmaOqm8R7Qi0B6JivEqshh8MZWufDitgO-r6ASk2iaGVDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a240a771-fdfd-438a-94c6-fd58bbed3665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56451680-211b-44cf-a9d0-0a9a7688726f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdaf025-d49d-4643-901e-7fded9ab7397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78e1157-bc02-462f-bbd4-da81d6e8dc07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33089b80-8e7a-4736-a7ee-c5ab4db31939",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b484dca0-b736-4c57-a057-8e8293d1ceb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8d2a08-f192-4c52-9850-e0f193d46276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "318212bb-bc74-4a46-88c6-e9c9c6c199a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702e43ee-68cd-4d3f-9869-1bbeed5b3085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c2b11c-8187-45e4-be5a-b58e6eda6d0a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8daf48-810b-42dc-9624-0567b048761c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8632f08-21e1-4893-a00d-9f9c944719da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0998e4e1-d597-4642-970b-9ce5705457c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1fedd41-6e9d-40b1-ba71-5e3664964dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b14d68-f526-42fa-9450-22e844c0fbff",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..E4WypAOLo4KNTnvHucei_9yLEMdlq_UwhS7mexlp5i3hF8SfBAlLv2scHANd3Ikhtqr9JIyaXuDnIN2LsaVFCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed97a180-f205-4ea0-9211-55147dd6a526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3b0532-58f2-4582-9c30-38923ff8cdff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a60b47-1965-41bb-a200-d570947e6d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387e407c-7d92-4c6f-a313-1868b2ccbd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9c67f6-98bc-44eb-abc8-67bc7ede5084",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rnEgkKo3EQPiGixl67oPIFuZ7H9zueq0ELswP2p_FdahgJooIojScCnp-AcxeC_G6YDtLUbsNlVy0SkDvTnwBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e32374b-a9aa-46c8-8f16-0b029f86272b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b31006-7a93-4f0a-b84a-fda0608d9d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba154bb0-415a-4db7-bb49-344bce3d3f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb99364d-5d74-4f33-9e29-3bde43379102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2711a778-56fd-47e6-8ed0-b7acbacde1b4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..nK8J_eHLw18__7Byp9ohgpDCHY1-Wfpw8vk-8k-nw4ezzjlwYoYjbo9x_xx3ES0WY0aCN2Xr9SbRoZHr78P0CQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc03067f-d4d5-44e8-853e-89071c38b5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811ec58b-6389-4027-aa13-995ff7e59558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2196629-d2e9-4a69-85aa-cf57ffe4d70d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa11ea4-240d-4a1f-924f-19168757b48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2b5c97-153c-4c5b-8ce5-bd89eb2f7f1e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e054158e-6dc0-4777-901c-0e20012c7dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ae3d89-15f0-4f33-b84b-243cdf9448ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bdb178-bcdc-4cb3-87d8-3b76d69c6a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9448ff-a5c0-4ed5-80ea-bb3845ad5bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2298e2f-c6e4-4f8a-af78-3d4b7de62192",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GEyy2tqmKf8AzHhXY06veUbSRVk9uoQIu21GZlYtcdMGh-VrTjvfVg2R8DAFtCBe6tEUL4dnsM87mT-20nG5Dg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae347fe2-60a4-4f91-8a8b-d1234412816c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c932c128-641c-4129-b6ce-5aa488263e95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1473a086-cfbe-4dd9-aeae-e5577902a6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c478b68-7623-44a3-89aa-7b03bcfa8153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e428a2-430d-471b-b6e1-2ad378547090",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5d3b49-3708-4ae4-87fc-c063c78b0f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752f322d-c279-4951-89f2-5c6b8182f0b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c624dfe-bcc0-4185-90b5-32cf8b4ea35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17bb8587-9054-4fdb-882a-d99dde55524f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9ca570-eccf-4e15-953f-583489daf6d0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vuVI_mdt7bpVwmKIsmIusWlCbj-wk33p6_FC2COcGBKzh9m5jxydHlDRIM6YoJQJWpS8_EavVFKwQvPuLuwNDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac762eb-cf36-41ce-9277-61b7b6ee7950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e814b6bb-74c8-4d1b-9730-8857d08c3507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fb7550-56ac-4953-843a-b71023ec3fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ad034b-f2e1-4bae-bdd6-262c3474c2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4423fb7f-47d2-467c-90c5-f85e3317a10e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jurLQ2KXgTdIxIAB1dwcysrBFVMT95g3Mn2SuyxAubRWS8Rbe-dFsoVG24kxo5wE6EZVYEuES8uHwNX_SSrvBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133bdc2a-cdf7-449c-94b8-e3882b8845ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f09070e3-8acc-4d90-8752-0305f64ff83a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e567569-0951-416a-a4e5-6f3c1d0d4881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae5e387-afd4-4307-96c6-e94d47e87afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1be61e-9af2-4b4f-8e0d-1cb5d94d77e7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..HyTRfrVnRzNCXO3qmmbQnmtXYV_bAdmZg-27bnuBGqQScL87kkmPfY3CpSTLN_8aV72mVBkvy1-uvYhkQotmDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850a2bc7-47fc-4e50-b19b-5618f7fbcefa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5afa87c0-d511-4cbc-8764-1e3b0f6ef814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb80432-7cb3-4756-b8f2-9e5980edc4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f448ff-790c-4ddd-9bfa-ce5f1a17a81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b20c8b-af4d-4e06-9eb6-cd4408216e09",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e4e3a4-0bb9-4c1b-bc8d-6006a961fac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e66d55c-3cbf-4c7d-818e-9ad229850b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ac7fb2-e1dd-4acd-b0dd-1a5d3eb7dd9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c794d2-4ed5-467b-b994-f18601ccd56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d22651-a783-4e3e-bc68-b92fd496de0d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5NhiK8XqFDY7TB3l0Mli_VAhnflErggK8zlj71jNg6F5WD4eNAVufeVLhK8HtvGaC-7R7nQzQfzkCH9692DUAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ff19e9-ed5f-48f9-bcf4-4aa025c426ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1da9bf0-bc91-4866-bbc8-485b765b7e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ec92f1-5082-47fa-9275-8845da68034b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8689de7-9f3f-46d4-8c91-b88c4f6a1da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8801e7bc-1791-4961-88a3-49a28cbfafae",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1phNak29yV9Dt7ljiilV_cD1b78U9dV8Zhwjgrocc4Nahxchof8QHmEAFjfupRQZ71WIBpW-VGUtW-OwUu6eDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a2a543-527b-4063-8374-16d8a93f63f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d619b1-7fa3-4955-b606-08011b670590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "988b654a-3004-4d43-9528-0060db276ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15a6a18-3af3-46ed-92c9-1b4a35c1dbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90684220-179a-45aa-ad56-adaf0caeecac",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cafc346-ec94-4e11-841e-47067ea5bc4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493bac6b-d8ce-48e1-919c-7b67494289db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d52b8c2-9227-4c28-9d36-1860f999ca62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9055b946-43a0-421c-b6f7-178e24a4c87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6b426b-b4c3-40ab-ba59-540ba1ad5581",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ef8d43-d203-434a-a703-9a0810120b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd0ac2d-d389-43de-85af-503115566e53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95695acd-bab3-45f1-8eb8-e1f63ed67473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129f8556-a811-44e5-9814-e728356c7682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f50731-7fbe-4cdb-a8af-3f2b7e39d77c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..j1W65DhMkwul7bodXfKrVNsT_27QIFO7rI-8TDk0-ef-wu4PU7OuA8MFAOXfx-HdVf5KdqVu0BB1ITE6WjIXCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7331dc59-9d7b-4ed4-8d7a-0d33740de033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf45076-31f4-4b1c-b5cb-752cf28dfe0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "067b17fe-f243-486e-a403-7db24d3647d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d02d42c-a278-4bf4-9d50-961045217e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5e1500-c7da-4a26-b5c1-2e5464122498",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Wm4yBzXF87zLmyA0LMEwHSWs-2EfPpdN2yJstmvPJkPVLFdXKUdjh7lZuHNVtTkAMGNT8Wi_RZ5Q1BWAY054Cw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a070412-447b-4b54-9a65-7266445413a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eda239d-578c-490c-a6df-6f3a4e128e6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd0195e-7d71-4f54-89a0-73b32090c524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be42b90e-736c-4b01-acbe-32f040653912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78f74ef-c0a0-40ca-bfcf-9ee311368f85",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f53ac9-39d9-44b5-805a-9a6966f38e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80443a4c-39a8-4417-9b0d-a53acd525f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded3ce1b-4cf6-443a-a2ab-281f294875ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "232772f5-799b-4e78-93fe-0f65007c19dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd23805-553f-4197-aa03-6d601287038b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af82e119-04a3-476f-bc4b-d13c021cb055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c6d79a-ed27-436c-acb1-2727aea85ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08faaea0-0a9a-4ec7-8240-ff5628bac798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0432b1af-24f5-4eb7-bada-b7e1f262accb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4aca5e-1e81-4637-ad68-81e7ca1b7085",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VDVadt3rnBQ7P8dSYyZU5RHdfxVBWz3liR1wKbXbfBuaNT-rJYOoUCLQj-7IQ2elQaB4Fhp2nsgul9ZQmZc1CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adbaa60-a811-49fb-92ec-f87fa4340dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f334b3b-22cc-462e-8593-6045c41a8827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd5f49c-b570-4f5c-a3bc-f28b524929a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31083ee1-ffaf-4462-8177-1b0138f178b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b21d7a-57ad-406e-88df-1844c7d8404e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Kz272GRCnCfgHy4D8txIaM1bY5O5vW8iFfQrL2B8a7OnaVTcq6nF-dhqnoMLHPEbrUNzHK7spVAZG05Njl6CDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbb253d-8fcf-497c-a555-20174cb2aec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c23a3352-9b73-4cca-9d1a-9423964a42a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b522601e-5210-4414-8f59-b0818fc3322e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0906468a-4f45-4269-805f-fe28e2d5c179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a205e489-60e0-4efb-9f75-a846ced5bf81",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..P9pVMuK8IN7B38_-uHlTyqAeQFcasIOW06wJWEZDZLPpaeLA4L-S6ee-tZsbGmM0QoSr8WTkbqkhiXpEhuIbAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d0fa96-5548-4844-8395-4a9c96173fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e247cb-16c4-40f0-bc41-60c3b584ce15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32c982f-a597-443e-931f-c45e5d9bb2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15744b6e-e7f6-4166-9f8e-ac777b6db002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fda1d6-e1b4-411d-b8c4-2f2f2ddc1838",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rdlyOsz8ZwKwD5_CacS7c9iPQnRUIywCc_sHdyJlADD9Cq4cRwRw0wwJ7OZtLDylbm512V0s3Cn69i1qMWc8Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98405898-9798-40b0-91c8-981be249fdb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c1c456-65b3-4764-b79c-b4ceb47ac7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9716bc4-7a29-4c7b-beed-713c4b7b5008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ea1e503-faa0-46bc-974e-35c1e1b3b688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59733f1a-e688-45bb-afe8-520bbffa2bac",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YXI2e8nVY98qybXn64g4bOG063TH6yjKFmSF9gRq0MtX3q3cex1t5ayc38JjZSBEgoJTKQzUTbL71FOukoNrAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585c253d-a52e-495b-8c22-ff722bbce252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8ad6ad-832b-492f-86bd-eb6788713b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c7f13a-70fb-409b-8642-769a591cd778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9dfd55e-984f-4b46-95d8-664cf42a4c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7946bd3d-d27d-4739-bef3-ba0906cd1d09",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2640a4d6-7f14-487d-ba7b-44816e8a5508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "348e2b89-5aee-429c-84b3-08cf66909af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25ced17-91b8-440c-8b99-ff05417dfb9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5949242-ae0a-4b5f-880c-5ee85a60fc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81db5e3d-4cdf-4813-918b-9d34974b49dc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beec5e53-d1f7-4fd1-bb50-ed19b75d9b05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb440e84-a319-49d5-9918-338426829638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff539ed-e665-46c8-ab43-6c29dff9b7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc296c82-0496-4adc-82e5-1c1788df4a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263f64bd-0205-4567-82b2-71408e507235",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3c3ff9-91fa-44f5-a1ca-bf659b0023e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a0d3db-5f71-4b45-b40a-2a7d36c08bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1179765b-4736-4cc2-aa4f-b7bdf408fabc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c445cfcd-00e9-4cfe-afcd-ee193a83246d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7ef803-823d-4cd0-bd3c-5e272373acd9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d23829-9220-4078-8453-c3f2ed4433c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18ebc24f-72d6-4e79-bbb1-746f01645783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2394d83-7f90-42c4-98a1-70c959ae0cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b888c4e7-14ee-49b2-a90c-f60b5e30cbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bd2902-a197-4981-8afe-28b40d7ced2e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99763862-9773-43aa-afbe-97a500598d71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97caeace-4057-4fd9-83a4-e80154b195c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69423474-3351-4d38-816b-e032f6ec9e6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28fd825b-bf44-423f-95dd-a061db723c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc1de0e-c3cb-43a7-85a6-173735c39c2f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2a3c82-0851-481d-ad88-9bd9228966a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8ae9c77-7ef2-4d18-9e5f-dede2610852e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df22f120-b85f-44a7-9d53-a5fd19e846a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3da3f5-8d2e-483f-b3bd-628559a17d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def20cca-b502-45f0-b7c5-62594adcd595",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc5fa97-472d-4572-83f4-c80be0d4eb66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f110177-0179-4e9f-8890-585af8d52527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "196ab8b3-cf82-4511-b122-4d19693a094c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "304e17fa-589b-4834-9001-970ecf764506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6a199f-81b9-4dd7-8589-61123b9cf465",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c454e073-2026-4bf2-9dec-0263c382c23a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7903be3-7913-44d1-8502-5b55ef9890d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b100e714-cd3e-4e89-96bc-380a637cf537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4084e3b0-e0ed-4be6-8901-775e557a44d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f885ded-845b-4ce9-8b56-2dac659c05ce",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f47f09b-c377-4e8f-9867-511c9b22dcab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58d25935-982d-44f0-af70-e59d3f0b9ddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f501f3-f66c-4757-80de-92b707ab3048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b286db-f8aa-49c4-b89d-2dbaba475511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44a5b69-8992-424c-9a4a-4c30492266a2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc7b0fe-e404-4088-8bef-6bf5bcbab3d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dccca191-936a-4bba-81ab-cd42f6be204a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "549e78e9-ff4e-4540-92c5-030b884a3588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776ec2c5-b62d-42b7-ab4b-896d70b36177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2524fbfc-7a17-49a7-ae2d-9f6b90fe9712",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a826fa5-0900-4b04-b859-508195f9137a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb42c144-7132-4720-b066-4b4dcc862562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc028762-95bc-44ad-ad3e-b78d26705fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd732275-7c73-4928-aa43-1d928c3afd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3439e193-f9b5-4a00-969e-36a170a17fe9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf441f0-a37a-4287-ac81-f071a0c6e3fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65257f7d-b8dc-4402-971a-701b8a308f23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb5abbc-0a90-4ac1-bfe9-9d5ae201592e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae358a1a-ccc6-4d88-bdce-856280417b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13966f32-dc70-4a13-bf37-1cff52fe77bb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72b64e1-64f5-4beb-8c41-ee13fdcad4e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52c50b7f-b927-4b45-9423-d4c7f074fcb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98323e26-1d08-435c-ab0e-c96b1e179e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7f785a-c8be-4b2b-98f7-a6d90e9fa19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa049a0-bdac-4a2e-88d6-c57b6ca1bcf6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74d5c79-6107-47b5-bcc2-52b5150905d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "271d128b-becd-4eac-a9cd-03cf45adcd7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e13e80c-5f56-42b3-8f04-e7991b41bf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531a46ae-89a4-4ef1-801e-5b9a96af154d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b240048-dc4b-419c-a345-21ce776b895a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a44fb53-79f1-4469-8456-ad16ea3d1ce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e835dcb-063b-4495-86e8-41fa972b2a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5fe159-b851-4faf-8c29-25281ac25b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d130302b-9ffd-47f8-bf46-c20fde071e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790c4a67-20e1-4957-80cb-a55cea64d377",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fb539a-7da3-48ee-8ae9-78c28fdbf085",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f1b67bf-7b23-4fa5-98cb-31ed483c872e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1156ff8b-d61c-4ab6-a064-16c44cad907a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6300d7c-c314-4293-ad40-6a931bf86364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e2a8e8-708f-436f-908c-66d5e7165fec",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfebd60-31e6-4668-9ba5-ec0e0a9c5148",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a30ba752-74df-4431-b4e6-b2c29eef5652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b32481-03b1-4116-8776-09a9f82c1642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3266b9f2-ddb3-4c31-845d-3c5a0cdf3d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404bc10b-8051-4d5d-b2ca-7c4499b8f516",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be1921e-7fa5-45bd-b630-94b5d0efbce4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90a99e51-caf1-4787-9fde-7f17329442c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce043df-1bd8-4a1d-b6f9-9810cc4b4bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8905ea-3b42-42c1-a00b-8b9ee131ca89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e660c029-f69e-4cba-b35d-495dcc096cf9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ca6f1d-7393-45a7-80ec-15c397225e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "249f410e-5575-4ceb-82f1-34ae870091ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fedb42-4515-4db6-aae8-52b4a4fa13ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "622566e7-7dd7-4df5-9caa-d31ec8fa4e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55dea83c-d1f1-4277-8617-5a7d9c0c5a61",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d198e077-7a03-429d-9f27-e0da5119bc58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bdfefd7-db05-46d2-98f0-d0613e4a870c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded4c589-9bf4-4b8b-b455-a19e0aee553d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03b1f70-9c98-46a9-95b8-542dc25ef06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5eadd78-8356-40b7-8a35-2c731b2484ea",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b3d973-9878-4ac0-9d33-93911b9e3198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58261d9d-3f19-4308-8136-59b4b18cdc6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b2775b-8055-4da7-aa05-d0cd68fc696c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499b1040-e208-4188-94b5-e039218ee126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f46a506-bb7e-4857-baa4-8efc0dea6ed8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ae6cc4-19bc-46d4-8819-65748477045e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79c2e311-62fe-4ae2-8a20-5d4b314041eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b72600-7427-45f4-9ec3-7592a82e016b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c93dd0f-2581-477f-90fe-981093b24b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24952db-881c-4083-bd1b-243e97d519da",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ab7378-a0f7-442f-9b32-93495072df7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b16b81b-89b1-4ba0-a831-c5a823bbf6f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2244df46-9ec6-4148-9bf1-116784160ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "951f26b6-72cd-4153-898a-668085788116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c1169e-0bd7-4228-91df-5c4175ad53ae",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e76d0d2-928c-4eb2-ae41-f15c7acbdee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8903326-351d-44d5-9626-57addad62961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9650c3-c0d9-4698-9748-71069fffb3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61167a1a-5c56-4d3c-8239-28e01ac051d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db39f59e-79b5-47ac-b095-79317affec0f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c53054a-b5fb-4bea-a214-47f7abb99de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c283ab4-4b63-4896-83a1-1a66a1d3754c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "866f269e-8db4-4ea9-8684-abf9c6f6829c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d0ba38-f4e2-41fd-9526-f9a3ed5ec4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37cb5978-0ac7-4061-a400-d055d2489763",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b881b24-4323-43b6-b9c6-f8dde256cb33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f701fb8-b014-4b80-9fec-3220c7441839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7afdaa7-0407-4b36-9bb0-1b6834622e24",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba907b6-89ab-4460-a741-34f7fef41006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4173889-683e-4fdb-82d7-1ed0dc7bb3d4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10549fde-20e5-4cb2-996c-c6a4d640f71f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c39ec3c-22f2-4c67-9972-a0a2b2a0d9d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e28570-3831-4568-ab0b-fda6c72ed832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71bf9d42-a141-4974-ad26-52ed8b0ed696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6a70df-3639-47bb-822f-4981661e05c5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397062cc-7f3f-4123-b68a-8319697e0fd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2905827-8306-4240-9fee-46bb793ab7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf004ce-c037-42a4-9fcc-726404f42646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e90ce3f7-d8f7-43e5-8645-3418b010ec83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6515852-249c-48f0-9e64-b277b98c8d27",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50304ee-db95-4fb7-bf26-e71f766744ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c85623ca-6c5c-4d0b-9b0b-75a9c76ac524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7389284-80c0-4193-9452-a89bfe518844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc7f5161-9ad8-4fe2-a7c3-3c20dab17eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fbc204-86b7-437a-a227-94b1dbe5a87b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5126292c-4990-40a0-aae1-0f4ed033915b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53211a95-957b-4394-a42d-143c0036e3fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c183dbe-1043-4420-8186-a93fccb54cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2457535-52a0-4019-ac51-d8716259f925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65545249-5ead-43e5-ac8f-b6eb0d09016e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0539e4f-342d-4b09-b510-7620228598ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "051819d0-24b1-4941-8f9d-ee4b6eb496f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b94376-f6c5-4db5-be76-85710f818fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ebd0d2-8338-40c7-bcb3-9ec24a9c2ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c84dcd-930a-4c7a-93e3-9801785113c0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f5f35e-153e-4f8b-853b-127016095fff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19112a4d-8483-4642-a4ad-d3a27c6a9ce0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba29294f-cbe0-4fce-b94c-8912b0ed05e4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f63e0d-e542-4982-9758-5a855e68a3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5678e6-a74a-496e-9779-71fea49a83a1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1ef1fa-55b1-460a-9342-f7a7cc3344fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "087dbbe9-0044-46b7-8ccd-41dcf12e5835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "132a14fe-dea1-4ec8-bf94-cf33e8ff470d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab68addb-3a72-428e-81cd-68527c5c9a81"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19c09e04-bdff-49e7-a060-7aea2c6fe442",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b6e9143-8a2d-49f3-8c3b-f544fd17a653"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d56ee02-ec4c-4f72-91c2-6de8d3269a71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea92c11d-1ea2-4ef9-8887-785df5709341"
                    }
                  }
                ]
              },
              {
                "id": "caa67791-58eb-4b58-a2ff-2b63d536110b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed78d001-349e-4a4a-b3a4-f8a76e7beb7e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431e1863-b702-43e9-b118-78e2670e7ec6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "52f8d5d3-f164-4808-91fd-a3a4a090b1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8c8052-0a85-46ad-9ce9-e96462c7f16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09a8781a-61c8-4ed7-a508-7576bf8775da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1351b868-2ebe-4a5a-b398-6c9f9b366e41",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1992d979-583a-4cd8-a47d-07fb91d864ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6a304116-531f-41c0-986b-d449211d77f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ee1f7a-9af2-4173-a4c1-520ff87f079d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac8deec8-4b79-40d7-b684-e81fd5732d7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33d31519-df15-4746-a447-ea7cdb95ed1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd797ce0-a1ca-4a7b-8f01-d2ded33cb2ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02fb4992-ad92-42f6-8759-2f42983286c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91483981-9f4b-4e0f-bc89-38ce000cf761"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39973aa7-4923-4794-be98-39c5c28a94bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c79e6f12-1ab4-4788-b459-2163942ce2d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5236b8ab-3b73-4f1d-93c0-5c957af8d359",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bdc47a0f-3203-4cff-9dbc-8c154ce9c829"
            }
          }
        ]
      },
      {
        "id": "4cd276c1-7703-47a5-b882-df5c8123497e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3de66df3-20de-4a91-9051-7b66264ba85e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13f98cd1-929d-40bd-96dc-c978b9d439cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc4c66ea-2622-4811-aae0-d79c9bd86fca",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f141aa-0ecd-49ed-9793-84bd321f1293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb087341-1c5f-479b-9418-69d49ed06a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd1bcd3-60a6-4ffc-8f9a-6ed301b8168c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a7319fe-a75d-41ba-ae31-a5b52f4aa46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a48ad42-a2a6-49ab-97f8-f6ffa46ab094",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13fce1d-85ff-49c7-a374-3830642ac854",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "1075ea00-f951-414f-8fd0-e9dade19eb8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "752ffb3d-2887-4ba8-99a4-41c817f3ec03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29df61b8-b442-4105-adeb-c441b0990768"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f20d15cc-33be-4c8f-aa37-a620c2b22173",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2af07ac4-153d-475d-a52a-8432369efd39"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29fd6bee-4204-4eab-81cf-100f2a13954f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b63ee858-f277-4f49-9dc7-5ce3fddbd1a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83147099-1b17-45e7-9171-d21c97874b90",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "d28e5516-0c8c-4c29-90ff-97b952149458"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e74f492b-d52e-4d50-b5ea-4e6bc290aa6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8bf14af-f3d7-4c89-90ac-ec3d62ea8ae9"
            }
          }
        ]
      },
      {
        "id": "6bee4251-da3e-4c08-898b-d4f1284449a5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f8177bad-de5f-42dd-a0fd-4d7af08cb7a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a1937d87-6609-4eab-b459-9f9b30eddfa3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5dc3e467-ff57-4c80-88bf-3af6f775ce18",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bacff8-d962-491e-ae15-8b3c8890b2a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7df82c-b2c3-494d-93ff-233e4223fa6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c9ce3d-cf85-4dd1-92ae-cc839412ae4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89905686-3182-4e3a-ab0d-08388b0dc612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810beb3f-e0ea-4ff0-948b-5823b9754405",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3bb333-a868-432f-91c5-44bf8015a8b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "27b2faaf-4cf0-40c4-9a05-68e4d982138b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c128c065-f2ef-4378-965f-2d864179a7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53dbef95-0322-4a58-8861-8df36f761e54"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2aaa40d2-b963-4dd2-a849-88f142993d73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04cb3a0d-96d3-4d98-af61-93ae9e763e9c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68edb440-75f3-43a3-80df-20c270f98e3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3e68304-2cf3-4f1c-abc2-b34d64cfed8d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d33d907-32cf-49a3-a0b8-c5c231e9bfb9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "921e7ecf-45ed-4c87-8a1d-261342d01181"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cce043f5-7a14-4b71-ae83-f5cbc63c261e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80920d69-697c-4134-990a-74ad378411cb"
            }
          }
        ]
      },
      {
        "id": "1cb0e2c2-0365-4f50-85d0-1685d465727b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1e4d9f45-6989-4d5b-a9d9-61de1bf47e38",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29a5bfd3-4565-488f-8c72-38a14214dd1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24ac4759-7b4b-4a67-8b37-2c05418d837f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4b1704-8fc1-4d91-a4c0-b21d9f63246e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93e18dc-f703-432b-8fa7-4a863b6be6fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b76f88f-53f2-4bfa-86f0-8d6e789ce2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d49249d5-b851-4bf5-ba01-0f542a378c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3819ab7e-3bd4-4aa1-9f33-a0535c57b3aa",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbea8a51-7e5d-4477-a970-a94956e0b81c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5bff29fd-df46-4186-8a14-5f8dd49c4b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11140be1-6c79-4c14-bfa3-08d99fc919ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7dfc1da5-ba4f-4bb6-89bd-c31a2223ac6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adf283ac-e842-4f51-b214-65d50aed7cf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95f7eb03-35c7-467d-b104-1c10e4f3eecb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e8426d4-3de7-4a65-a084-2b5cec9a2a34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fff4217c-4a89-423f-89c7-70a35c937ca2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cca52c3-1dee-4bf3-9ffc-2a935f64421e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "a232c544-ed8b-481f-b22c-c9109f99c402"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbbe9b82-a8d1-4d72-92fe-8623409a583b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a04fdd5-abf5-4143-8a63-eda566164032"
            }
          }
        ]
      },
      {
        "id": "c3127c8b-a4ad-4f49-94ce-df2fef03d758",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "0e705c9f-3180-497a-8b37-8c66975dc8f9",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1193,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 200,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 309,
        "pending": 0,
        "failed": 284
      },
      "testScripts": {
        "total": 602,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 591,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.235,
      "responseMin": 32,
      "responseMax": 616,
      "responseSd": 66.6701565544885,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1664240238534,
      "completed": 1664240257861
    },
    "executions": [
      {
        "id": "94275307-3e4c-4fca-bbbe-ce16176ec7a3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 152,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "604130b0-9596-4e03-afdd-8d6cfa828c21",
          "httpRequestId": "ec88986f-2bd6-4663-a48b-8341aa4b4adc"
        },
        "item": {
          "id": "94275307-3e4c-4fca-bbbe-ce16176ec7a3",
          "name": "did_json"
        },
        "response": {
          "id": "4301652c-4d1e-4c44-9b7f-f7e9afdf9783",
          "status": "OK",
          "code": 200,
          "responseTime": 327,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "4523e0b8-6f07-4b2a-8de7-b36330273579",
        "cursor": {
          "ref": "d6f9bb29-79fb-47b9-8662-83f18a1f540a",
          "length": 152,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "86cf773c-a100-4d53-a90c-bf03a067ff89"
        },
        "item": {
          "id": "4523e0b8-6f07-4b2a-8de7-b36330273579",
          "name": "did:invalid"
        },
        "response": {
          "id": "0f2fc4f9-4885-48ec-b9d2-e0d3afee2a18",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4523e0b8-6f07-4b2a-8de7-b36330273579",
        "cursor": {
          "ref": "d6f9bb29-79fb-47b9-8662-83f18a1f540a",
          "length": 152,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "86cf773c-a100-4d53-a90c-bf03a067ff89"
        },
        "item": {
          "id": "4523e0b8-6f07-4b2a-8de7-b36330273579",
          "name": "did:invalid"
        },
        "response": {
          "id": "0f2fc4f9-4885-48ec-b9d2-e0d3afee2a18",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b28b0d-fa76-4400-93a7-086c10e11aab",
        "cursor": {
          "ref": "fe23cdc5-d668-4127-bb64-6da2c2f8c3d7",
          "length": 152,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d2db1e70-48b4-47a2-9341-586d0294cf72"
        },
        "item": {
          "id": "57b28b0d-fa76-4400-93a7-086c10e11aab",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f671c090-9b79-494d-b4ea-af700a4f801e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 140,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "e23af748-3736-4e60-8f88-9b61746b4216",
        "cursor": {
          "ref": "8d4d70ce-eac0-4b94-a0c6-53d7f4ba264b",
          "length": 152,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d329a75f-4df7-4e9f-9c0b-236be9479f4d"
        },
        "item": {
          "id": "e23af748-3736-4e60-8f88-9b61746b4216",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a480e3f6-5f05-4c12-a728-440734785ab9",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f0d460fa-ff64-4dd2-b004-659c583d901e",
        "cursor": {
          "ref": "ef14c981-8e0f-4500-8a60-805a61afa852",
          "length": 152,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3bd4245c-60fa-4cf4-9a2d-3a47d8209b09"
        },
        "item": {
          "id": "f0d460fa-ff64-4dd2-b004-659c583d901e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "15289b40-4f01-4aee-9c4b-61a0efb78fb9",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "120705d4-ccd6-4113-95df-3b77ff446ad7",
        "cursor": {
          "ref": "8fdbe511-ab35-44be-ba08-993f4cd89a28",
          "length": 152,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8107cf8b-e25f-442e-aebd-b151371e643f"
        },
        "item": {
          "id": "120705d4-ccd6-4113-95df-3b77ff446ad7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "49127536-7193-4c00-ab39-04fe3c8947c1",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "120705d4-ccd6-4113-95df-3b77ff446ad7",
        "cursor": {
          "ref": "8fdbe511-ab35-44be-ba08-993f4cd89a28",
          "length": 152,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8107cf8b-e25f-442e-aebd-b151371e643f"
        },
        "item": {
          "id": "120705d4-ccd6-4113-95df-3b77ff446ad7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "49127536-7193-4c00-ab39-04fe3c8947c1",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "46d8e93b-de70-4820-b034-db8bf3889f73",
        "cursor": {
          "ref": "ca3eb5de-8ec6-49ea-92ac-d5f177cf8ed2",
          "length": 152,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "214343e5-3998-49e0-b8c4-5b52ea75ad8e"
        },
        "item": {
          "id": "46d8e93b-de70-4820-b034-db8bf3889f73",
          "name": "identifiers"
        },
        "response": {
          "id": "0ea49b7d-8285-4e27-a4ec-317de8a550dd",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "Error",
              "index": 1,
              "test": "response validates against schema",
              "message": "schema is invalid: data.properties['didDocument'].properties['service'].items.properties['oneOf'] should be object,boolean, data.properties['didDocument'].properties['service'].items should be array, data.properties['didDocument'].properties['service'].items should match some schema in anyOf",
              "stack": "Error: schema is invalid: data.properties['didDocument'].properties['service'].items.properties['oneOf'] should be object,boolean, data.properties['didDocument'].properties['service'].items should be array, data.properties['didDocument'].properties['service'].items should match some schema in anyOf\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "6dbf37d6-1b19-4308-a26c-3072c7c6b114",
        "cursor": {
          "ref": "8ec76a7a-a1cc-48e3-8856-e931b368b288",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e555c744-1c55-4755-bb5d-379e3301e138"
        },
        "item": {
          "id": "6dbf37d6-1b19-4308-a26c-3072c7c6b114",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3d81ac05-0dd2-4911-83ad-679e5eeb630f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 281,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6dbf37d6-1b19-4308-a26c-3072c7c6b114",
        "cursor": {
          "ref": "8ec76a7a-a1cc-48e3-8856-e931b368b288",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e555c744-1c55-4755-bb5d-379e3301e138"
        },
        "item": {
          "id": "6dbf37d6-1b19-4308-a26c-3072c7c6b114",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3d81ac05-0dd2-4911-83ad-679e5eeb630f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 281,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6dbf37d6-1b19-4308-a26c-3072c7c6b114",
        "cursor": {
          "ref": "8ec76a7a-a1cc-48e3-8856-e931b368b288",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e555c744-1c55-4755-bb5d-379e3301e138"
        },
        "item": {
          "id": "6dbf37d6-1b19-4308-a26c-3072c7c6b114",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3d81ac05-0dd2-4911-83ad-679e5eeb630f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 281,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "30a5e363-cbfc-4210-9fd8-9ef2f29ea73d",
        "cursor": {
          "ref": "37de682a-475a-40e8-81b2-a4bae8e80cb0",
          "length": 152,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "968a7dd4-f811-4a14-acfa-a84ced21b0fb"
        },
        "item": {
          "id": "30a5e363-cbfc-4210-9fd8-9ef2f29ea73d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d82afdcc-05e0-4fc5-be1b-385429ec673c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "30a5e363-cbfc-4210-9fd8-9ef2f29ea73d",
        "cursor": {
          "ref": "37de682a-475a-40e8-81b2-a4bae8e80cb0",
          "length": 152,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "968a7dd4-f811-4a14-acfa-a84ced21b0fb"
        },
        "item": {
          "id": "30a5e363-cbfc-4210-9fd8-9ef2f29ea73d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d82afdcc-05e0-4fc5-be1b-385429ec673c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "71eff4f6-a27f-4a90-9d31-96a6f0b80a18",
        "cursor": {
          "ref": "b10ae0fe-1bd9-4298-a0fb-df862a9ebbff",
          "length": 152,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b2a96099-9470-4367-922d-eda7f5f89402"
        },
        "item": {
          "id": "71eff4f6-a27f-4a90-9d31-96a6f0b80a18",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "75f315d2-38e5-4fa9-8e92-fb5e236636e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "71eff4f6-a27f-4a90-9d31-96a6f0b80a18",
        "cursor": {
          "ref": "b10ae0fe-1bd9-4298-a0fb-df862a9ebbff",
          "length": 152,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b2a96099-9470-4367-922d-eda7f5f89402"
        },
        "item": {
          "id": "71eff4f6-a27f-4a90-9d31-96a6f0b80a18",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "75f315d2-38e5-4fa9-8e92-fb5e236636e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "e96dbbd8-c6dd-40a4-bd30-81a610303722",
        "cursor": {
          "ref": "a1a28fbc-a07e-4122-a85a-514348551ff3",
          "length": 152,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a317fb23-b1fe-440e-8758-4bf694f41e80"
        },
        "item": {
          "id": "e96dbbd8-c6dd-40a4-bd30-81a610303722",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "17f96c05-9052-4f7c-9ecb-9986e0754835",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e96dbbd8-c6dd-40a4-bd30-81a610303722",
        "cursor": {
          "ref": "a1a28fbc-a07e-4122-a85a-514348551ff3",
          "length": 152,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a317fb23-b1fe-440e-8758-4bf694f41e80"
        },
        "item": {
          "id": "e96dbbd8-c6dd-40a4-bd30-81a610303722",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "17f96c05-9052-4f7c-9ecb-9986e0754835",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "780b1209-a6ec-47ae-ac64-e7b40d05cf41",
        "cursor": {
          "ref": "10db5f9d-7f50-43b3-a22f-4a7c9adb56fc",
          "length": 152,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "229f4301-775e-4afc-8840-17455d99f2d8"
        },
        "item": {
          "id": "780b1209-a6ec-47ae-ac64-e7b40d05cf41",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "37cdc37c-aae0-477b-8cc9-62f3d9d18c0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "780b1209-a6ec-47ae-ac64-e7b40d05cf41",
        "cursor": {
          "ref": "10db5f9d-7f50-43b3-a22f-4a7c9adb56fc",
          "length": 152,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "229f4301-775e-4afc-8840-17455d99f2d8"
        },
        "item": {
          "id": "780b1209-a6ec-47ae-ac64-e7b40d05cf41",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "37cdc37c-aae0-477b-8cc9-62f3d9d18c0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "99148324-304b-4193-af30-78cd72f5b7a8",
        "cursor": {
          "ref": "4ef85741-1d8a-470d-b52c-44fdd65fad58",
          "length": 152,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "898f4eab-a455-4a6f-b323-b93681e3f076"
        },
        "item": {
          "id": "99148324-304b-4193-af30-78cd72f5b7a8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "12abf251-6fde-44b2-82b7-f4467514084d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "99148324-304b-4193-af30-78cd72f5b7a8",
        "cursor": {
          "ref": "4ef85741-1d8a-470d-b52c-44fdd65fad58",
          "length": 152,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "898f4eab-a455-4a6f-b323-b93681e3f076"
        },
        "item": {
          "id": "99148324-304b-4193-af30-78cd72f5b7a8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "12abf251-6fde-44b2-82b7-f4467514084d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "470b4e6c-4da1-453b-a3ad-8ea85d9e5561",
        "cursor": {
          "ref": "aaf9b1f5-64b7-4c0a-a6a7-b88863b3c441",
          "length": 152,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "aedc6e20-a4a0-4a4f-85a2-4aa0c740bbd6"
        },
        "item": {
          "id": "470b4e6c-4da1-453b-a3ad-8ea85d9e5561",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "39f4390c-5abd-451c-92a1-f19f5e8280c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "470b4e6c-4da1-453b-a3ad-8ea85d9e5561",
        "cursor": {
          "ref": "aaf9b1f5-64b7-4c0a-a6a7-b88863b3c441",
          "length": 152,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "aedc6e20-a4a0-4a4f-85a2-4aa0c740bbd6"
        },
        "item": {
          "id": "470b4e6c-4da1-453b-a3ad-8ea85d9e5561",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "39f4390c-5abd-451c-92a1-f19f5e8280c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "ac9aa9b8-e04c-4eb8-8565-cfefed6202e3",
        "cursor": {
          "ref": "93b9a865-797e-4fc1-86c7-ac24c4937936",
          "length": 152,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b6058e02-48dd-46bf-b70a-c466a1b077c9"
        },
        "item": {
          "id": "ac9aa9b8-e04c-4eb8-8565-cfefed6202e3",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "03e0aa5b-51fb-4642-9fde-d221e4debca7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "ac9aa9b8-e04c-4eb8-8565-cfefed6202e3",
        "cursor": {
          "ref": "93b9a865-797e-4fc1-86c7-ac24c4937936",
          "length": 152,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b6058e02-48dd-46bf-b70a-c466a1b077c9"
        },
        "item": {
          "id": "ac9aa9b8-e04c-4eb8-8565-cfefed6202e3",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "03e0aa5b-51fb-4642-9fde-d221e4debca7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "36dfe736-4926-4ca3-a905-1abf934b36ff",
        "cursor": {
          "ref": "25a06f98-a06a-482c-9ed8-e5507bcb2ff7",
          "length": 152,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2f27b844-64ec-4b5c-9052-d74d8701fe14"
        },
        "item": {
          "id": "36dfe736-4926-4ca3-a905-1abf934b36ff",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "55c6a2cd-c294-4155-b19d-23625a22e638",
          "status": "Created",
          "code": 201,
          "responseTime": 103,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "36dfe736-4926-4ca3-a905-1abf934b36ff",
        "cursor": {
          "ref": "25a06f98-a06a-482c-9ed8-e5507bcb2ff7",
          "length": 152,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2f27b844-64ec-4b5c-9052-d74d8701fe14"
        },
        "item": {
          "id": "36dfe736-4926-4ca3-a905-1abf934b36ff",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "55c6a2cd-c294-4155-b19d-23625a22e638",
          "status": "Created",
          "code": 201,
          "responseTime": 103,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e1754f8d-9a13-486c-84ca-b9f86627b0b5",
        "cursor": {
          "ref": "80274f02-90f3-488d-a44a-cccc5a9a9b62",
          "length": 152,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b29a9294-4b74-4783-bf33-0943dfb98d95"
        },
        "item": {
          "id": "e1754f8d-9a13-486c-84ca-b9f86627b0b5",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "7f8c687f-bdd7-4107-b08e-6da10f771eaf",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e1754f8d-9a13-486c-84ca-b9f86627b0b5",
        "cursor": {
          "ref": "80274f02-90f3-488d-a44a-cccc5a9a9b62",
          "length": 152,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b29a9294-4b74-4783-bf33-0943dfb98d95"
        },
        "item": {
          "id": "e1754f8d-9a13-486c-84ca-b9f86627b0b5",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "7f8c687f-bdd7-4107-b08e-6da10f771eaf",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "77bb11ac-479d-45db-88f5-6420a91961b0",
        "cursor": {
          "ref": "12a6f7c7-a345-4888-87e6-66547af12adb",
          "length": 152,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3632eccb-f6f6-4a64-802f-1442d3e62a92"
        },
        "item": {
          "id": "77bb11ac-479d-45db-88f5-6420a91961b0",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "13457c24-439f-4463-b1ed-36ab314408e5",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "77bb11ac-479d-45db-88f5-6420a91961b0",
        "cursor": {
          "ref": "12a6f7c7-a345-4888-87e6-66547af12adb",
          "length": 152,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3632eccb-f6f6-4a64-802f-1442d3e62a92"
        },
        "item": {
          "id": "77bb11ac-479d-45db-88f5-6420a91961b0",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "13457c24-439f-4463-b1ed-36ab314408e5",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "700927b8-185a-488e-9eac-a0b964842879",
        "cursor": {
          "ref": "37759a75-2e5d-4730-a252-19718be489b4",
          "length": 152,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7a263cda-1cc5-4f07-90b8-b568fd7b8d60"
        },
        "item": {
          "id": "700927b8-185a-488e-9eac-a0b964842879",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "030d8456-5397-4558-af3d-34b400950cd6",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "700927b8-185a-488e-9eac-a0b964842879",
        "cursor": {
          "ref": "37759a75-2e5d-4730-a252-19718be489b4",
          "length": 152,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7a263cda-1cc5-4f07-90b8-b568fd7b8d60"
        },
        "item": {
          "id": "700927b8-185a-488e-9eac-a0b964842879",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "030d8456-5397-4558-af3d-34b400950cd6",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "2adccb13-88d4-4ac1-928a-64532ba54a94",
        "cursor": {
          "ref": "36104e48-bb0c-44af-8f31-847b09513464",
          "length": 152,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "80a1ce5a-d5f3-4ba2-b006-2ff8206b5a23"
        },
        "item": {
          "id": "2adccb13-88d4-4ac1-928a-64532ba54a94",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b73584ce-4d64-4805-be40-822da953a5ab",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "2adccb13-88d4-4ac1-928a-64532ba54a94",
        "cursor": {
          "ref": "36104e48-bb0c-44af-8f31-847b09513464",
          "length": 152,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "80a1ce5a-d5f3-4ba2-b006-2ff8206b5a23"
        },
        "item": {
          "id": "2adccb13-88d4-4ac1-928a-64532ba54a94",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b73584ce-4d64-4805-be40-822da953a5ab",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "7724574c-7474-4fdc-8524-1d66dd634661",
        "cursor": {
          "ref": "04d52f71-ddc3-4574-a8f7-3a64295dac32",
          "length": 152,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a0380c08-0a3c-4f28-8f6b-a707968eb096"
        },
        "item": {
          "id": "7724574c-7474-4fdc-8524-1d66dd634661",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "f575b244-f96a-48fe-81ea-3b49aa6f7573",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7724574c-7474-4fdc-8524-1d66dd634661",
        "cursor": {
          "ref": "04d52f71-ddc3-4574-a8f7-3a64295dac32",
          "length": 152,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a0380c08-0a3c-4f28-8f6b-a707968eb096"
        },
        "item": {
          "id": "7724574c-7474-4fdc-8524-1d66dd634661",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "f575b244-f96a-48fe-81ea-3b49aa6f7573",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f0197ccd-fa1c-4203-97af-20413a6f0c5b",
        "cursor": {
          "ref": "06a2372c-170d-4b88-a32c-763526a17c0a",
          "length": 152,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ff8c8d4f-1890-4bba-929e-a1225b4d10cf"
        },
        "item": {
          "id": "f0197ccd-fa1c-4203-97af-20413a6f0c5b",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "dcf1de6c-0dec-466b-b78e-0cf944fff088",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f0197ccd-fa1c-4203-97af-20413a6f0c5b",
        "cursor": {
          "ref": "06a2372c-170d-4b88-a32c-763526a17c0a",
          "length": 152,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ff8c8d4f-1890-4bba-929e-a1225b4d10cf"
        },
        "item": {
          "id": "f0197ccd-fa1c-4203-97af-20413a6f0c5b",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "dcf1de6c-0dec-466b-b78e-0cf944fff088",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "7b08ed9d-4094-4b0e-8db0-58c228c8ba1e",
        "cursor": {
          "ref": "7784fa7d-d1ae-4869-92a8-3418ea6d606e",
          "length": 152,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0df3f631-3cc1-4c41-b47a-944f76982f29"
        },
        "item": {
          "id": "7b08ed9d-4094-4b0e-8db0-58c228c8ba1e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c89c5a6e-08f1-428f-bd7e-e944a283e272",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "7b08ed9d-4094-4b0e-8db0-58c228c8ba1e",
        "cursor": {
          "ref": "7784fa7d-d1ae-4869-92a8-3418ea6d606e",
          "length": 152,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0df3f631-3cc1-4c41-b47a-944f76982f29"
        },
        "item": {
          "id": "7b08ed9d-4094-4b0e-8db0-58c228c8ba1e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c89c5a6e-08f1-428f-bd7e-e944a283e272",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "be56297f-d05f-410b-881e-4c90ab80d329",
        "cursor": {
          "ref": "f36a3aa6-edb3-4096-874d-b92f5be6cd3f",
          "length": 152,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4a364033-7015-40a5-bc99-dce8ad372a55"
        },
        "item": {
          "id": "be56297f-d05f-410b-881e-4c90ab80d329",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "25205987-a170-4ca9-b0ef-36b576eb25c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "be56297f-d05f-410b-881e-4c90ab80d329",
        "cursor": {
          "ref": "f36a3aa6-edb3-4096-874d-b92f5be6cd3f",
          "length": 152,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4a364033-7015-40a5-bc99-dce8ad372a55"
        },
        "item": {
          "id": "be56297f-d05f-410b-881e-4c90ab80d329",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "25205987-a170-4ca9-b0ef-36b576eb25c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "22ebf03c-04a7-44ee-9e9c-12ff362cbe39",
        "cursor": {
          "ref": "5b66ba63-a73a-4219-a84c-f0af077abcba",
          "length": 152,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a5b18738-9772-478f-ae94-3353617b011a"
        },
        "item": {
          "id": "22ebf03c-04a7-44ee-9e9c-12ff362cbe39",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "d1bf43e2-d01b-477c-a584-b6fdee0da602",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "22ebf03c-04a7-44ee-9e9c-12ff362cbe39",
        "cursor": {
          "ref": "5b66ba63-a73a-4219-a84c-f0af077abcba",
          "length": 152,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a5b18738-9772-478f-ae94-3353617b011a"
        },
        "item": {
          "id": "22ebf03c-04a7-44ee-9e9c-12ff362cbe39",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "d1bf43e2-d01b-477c-a584-b6fdee0da602",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "74af21e7-7b02-41ce-8a87-60f229b4b738",
        "cursor": {
          "ref": "c34f57df-92ab-47c1-a18b-480fac22d713",
          "length": 152,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "72731c3e-f7b7-490a-8bbd-9b732a864f07"
        },
        "item": {
          "id": "74af21e7-7b02-41ce-8a87-60f229b4b738",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "08a74f2c-eb5b-4a28-93ae-a4a5e5e87942",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "74af21e7-7b02-41ce-8a87-60f229b4b738",
        "cursor": {
          "ref": "c34f57df-92ab-47c1-a18b-480fac22d713",
          "length": 152,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "72731c3e-f7b7-490a-8bbd-9b732a864f07"
        },
        "item": {
          "id": "74af21e7-7b02-41ce-8a87-60f229b4b738",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "08a74f2c-eb5b-4a28-93ae-a4a5e5e87942",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "207a7c25-e3b9-424d-b610-d9697972aba6",
        "cursor": {
          "ref": "03810711-ae5c-4426-8400-e0d50cb0d3bd",
          "length": 152,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d9c380ad-8c5e-4c86-9c3b-9d361e295bae"
        },
        "item": {
          "id": "207a7c25-e3b9-424d-b610-d9697972aba6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fff699fe-f038-454b-aad6-38fb70c6a53c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "207a7c25-e3b9-424d-b610-d9697972aba6",
        "cursor": {
          "ref": "03810711-ae5c-4426-8400-e0d50cb0d3bd",
          "length": 152,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d9c380ad-8c5e-4c86-9c3b-9d361e295bae"
        },
        "item": {
          "id": "207a7c25-e3b9-424d-b610-d9697972aba6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fff699fe-f038-454b-aad6-38fb70c6a53c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "c16540b8-3bc5-4cc1-80cd-9041798a1eed",
        "cursor": {
          "ref": "0e54245d-448b-41bc-8f49-d6ad7ebf2677",
          "length": 152,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "aac6bab5-b3ed-47f6-b4c7-5ea17e5da47f"
        },
        "item": {
          "id": "c16540b8-3bc5-4cc1-80cd-9041798a1eed",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "5c6c9f2d-91b6-41a7-b720-90a3e1b20cf5",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "c16540b8-3bc5-4cc1-80cd-9041798a1eed",
        "cursor": {
          "ref": "0e54245d-448b-41bc-8f49-d6ad7ebf2677",
          "length": 152,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "aac6bab5-b3ed-47f6-b4c7-5ea17e5da47f"
        },
        "item": {
          "id": "c16540b8-3bc5-4cc1-80cd-9041798a1eed",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "5c6c9f2d-91b6-41a7-b720-90a3e1b20cf5",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "c38bff7b-d3a7-4500-b6c4-9d1ab5b1c68b",
        "cursor": {
          "ref": "8b805318-4be9-4ab9-828f-16379de82353",
          "length": 152,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "43edb978-7296-4343-a0e4-c4139302f675"
        },
        "item": {
          "id": "c38bff7b-d3a7-4500-b6c4-9d1ab5b1c68b",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "da4461f8-1c17-4bf0-b271-b84aa8a35665",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "c38bff7b-d3a7-4500-b6c4-9d1ab5b1c68b",
        "cursor": {
          "ref": "8b805318-4be9-4ab9-828f-16379de82353",
          "length": 152,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "43edb978-7296-4343-a0e4-c4139302f675"
        },
        "item": {
          "id": "c38bff7b-d3a7-4500-b6c4-9d1ab5b1c68b",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "da4461f8-1c17-4bf0-b271-b84aa8a35665",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "148e5dcb-9ac5-4014-be4f-50efdbd9147e",
        "cursor": {
          "ref": "c8c1d925-53c7-4e6d-b032-dfbbf120e499",
          "length": 152,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "075922bc-091d-46d1-9ebc-4ae005e67db4"
        },
        "item": {
          "id": "148e5dcb-9ac5-4014-be4f-50efdbd9147e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e8f57cb6-f898-417e-9461-116448b7f9ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "148e5dcb-9ac5-4014-be4f-50efdbd9147e",
        "cursor": {
          "ref": "c8c1d925-53c7-4e6d-b032-dfbbf120e499",
          "length": 152,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "075922bc-091d-46d1-9ebc-4ae005e67db4"
        },
        "item": {
          "id": "148e5dcb-9ac5-4014-be4f-50efdbd9147e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e8f57cb6-f898-417e-9461-116448b7f9ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "1c3020bf-6d3d-41ab-bad4-876e12979b90",
        "cursor": {
          "ref": "b1a1d7c9-b93b-4a18-a08a-4e4cf95a2296",
          "length": 152,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c31a7ed1-0997-4c82-8eeb-956a7c0af3b4"
        },
        "item": {
          "id": "1c3020bf-6d3d-41ab-bad4-876e12979b90",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "7efe5fdf-94b7-4916-89a3-053a0f9c1d3d",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "1c3020bf-6d3d-41ab-bad4-876e12979b90",
        "cursor": {
          "ref": "b1a1d7c9-b93b-4a18-a08a-4e4cf95a2296",
          "length": 152,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c31a7ed1-0997-4c82-8eeb-956a7c0af3b4"
        },
        "item": {
          "id": "1c3020bf-6d3d-41ab-bad4-876e12979b90",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "7efe5fdf-94b7-4916-89a3-053a0f9c1d3d",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "8ba6caf8-e777-4338-8173-f7ad790f9e73",
        "cursor": {
          "ref": "14c11866-0039-41c2-a205-48d44e5490d4",
          "length": 152,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ec0b000a-01f2-4746-9486-5cf58cbfa397"
        },
        "item": {
          "id": "8ba6caf8-e777-4338-8173-f7ad790f9e73",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3706b244-ddd8-440b-8849-51a5013d2109",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8ba6caf8-e777-4338-8173-f7ad790f9e73",
        "cursor": {
          "ref": "14c11866-0039-41c2-a205-48d44e5490d4",
          "length": 152,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ec0b000a-01f2-4746-9486-5cf58cbfa397"
        },
        "item": {
          "id": "8ba6caf8-e777-4338-8173-f7ad790f9e73",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3706b244-ddd8-440b-8849-51a5013d2109",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "4cb2fce8-8e82-41ac-809c-4eb7ca9b7e44",
        "cursor": {
          "ref": "f50f3468-6845-4c80-832e-9896628e0639",
          "length": 152,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "179dfa08-9c99-43a8-aa3e-e0ab02ea750c"
        },
        "item": {
          "id": "4cb2fce8-8e82-41ac-809c-4eb7ca9b7e44",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "7949d5d6-275a-4401-8653-c5dca8948380",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "4cb2fce8-8e82-41ac-809c-4eb7ca9b7e44",
        "cursor": {
          "ref": "f50f3468-6845-4c80-832e-9896628e0639",
          "length": 152,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "179dfa08-9c99-43a8-aa3e-e0ab02ea750c"
        },
        "item": {
          "id": "4cb2fce8-8e82-41ac-809c-4eb7ca9b7e44",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "7949d5d6-275a-4401-8653-c5dca8948380",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "4f6ac710-1774-4dc5-b74b-d45434e1aabf",
        "cursor": {
          "ref": "f6ea0f7f-8bf6-41e9-bb2b-a25eda09bd51",
          "length": 152,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a5d3bf7d-a662-4c24-b8c0-916bea30168d"
        },
        "item": {
          "id": "4f6ac710-1774-4dc5-b74b-d45434e1aabf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8c46fb44-b968-49db-a133-f6d3846d76f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "4f6ac710-1774-4dc5-b74b-d45434e1aabf",
        "cursor": {
          "ref": "f6ea0f7f-8bf6-41e9-bb2b-a25eda09bd51",
          "length": 152,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a5d3bf7d-a662-4c24-b8c0-916bea30168d"
        },
        "item": {
          "id": "4f6ac710-1774-4dc5-b74b-d45434e1aabf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8c46fb44-b968-49db-a133-f6d3846d76f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a6188bf0-81ea-45ec-af54-1625039ec21f",
        "cursor": {
          "ref": "2dbe7d8b-d41c-4cac-bd89-8f21e68de1c4",
          "length": 152,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ffbbb77b-fd68-4477-9494-ccf068e25c71"
        },
        "item": {
          "id": "a6188bf0-81ea-45ec-af54-1625039ec21f",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "eabc632c-f421-4133-b650-44226c7738e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "a6188bf0-81ea-45ec-af54-1625039ec21f",
        "cursor": {
          "ref": "2dbe7d8b-d41c-4cac-bd89-8f21e68de1c4",
          "length": 152,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ffbbb77b-fd68-4477-9494-ccf068e25c71"
        },
        "item": {
          "id": "a6188bf0-81ea-45ec-af54-1625039ec21f",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "eabc632c-f421-4133-b650-44226c7738e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "c8829f77-260d-472e-a213-b00e370cbf53",
        "cursor": {
          "ref": "302d7221-0451-4b9d-b067-e0a98fac8ec4",
          "length": 152,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "06f8ce51-c7c3-4441-b921-947a955b7933"
        },
        "item": {
          "id": "c8829f77-260d-472e-a213-b00e370cbf53",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "f9b14b0b-9c6d-43b7-a1c8-446d3ae12420",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "c8829f77-260d-472e-a213-b00e370cbf53",
        "cursor": {
          "ref": "302d7221-0451-4b9d-b067-e0a98fac8ec4",
          "length": 152,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "06f8ce51-c7c3-4441-b921-947a955b7933"
        },
        "item": {
          "id": "c8829f77-260d-472e-a213-b00e370cbf53",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "f9b14b0b-9c6d-43b7-a1c8-446d3ae12420",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e39ced20-ac66-4735-b8fb-d91ff4f49a5e",
        "cursor": {
          "ref": "0c96b48d-d6e4-459a-a098-89e83ca36fa2",
          "length": 152,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6306f419-1771-4a51-b556-0550bbc57d30"
        },
        "item": {
          "id": "e39ced20-ac66-4735-b8fb-d91ff4f49a5e",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "b9d3fd75-8f81-4d79-9b26-9b06bbf6f6c3",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "e39ced20-ac66-4735-b8fb-d91ff4f49a5e",
        "cursor": {
          "ref": "0c96b48d-d6e4-459a-a098-89e83ca36fa2",
          "length": 152,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6306f419-1771-4a51-b556-0550bbc57d30"
        },
        "item": {
          "id": "e39ced20-ac66-4735-b8fb-d91ff4f49a5e",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "b9d3fd75-8f81-4d79-9b26-9b06bbf6f6c3",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "4ba2e53f-e2bd-40d3-8d44-6b8676b4aead",
        "cursor": {
          "ref": "0fde61bf-6f53-4b57-b5df-af650f102819",
          "length": 152,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3ac32a67-3db5-4563-a0bc-bc943a6139af"
        },
        "item": {
          "id": "4ba2e53f-e2bd-40d3-8d44-6b8676b4aead",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "a91c0d17-cca3-424c-8f41-c4361cec9dc6",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "4ba2e53f-e2bd-40d3-8d44-6b8676b4aead",
        "cursor": {
          "ref": "0fde61bf-6f53-4b57-b5df-af650f102819",
          "length": 152,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3ac32a67-3db5-4563-a0bc-bc943a6139af"
        },
        "item": {
          "id": "4ba2e53f-e2bd-40d3-8d44-6b8676b4aead",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "a91c0d17-cca3-424c-8f41-c4361cec9dc6",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "b8eea78c-f41c-469c-8270-963ef85c6731",
        "cursor": {
          "ref": "dd4bcbea-9171-4bbb-a412-416623aba64e",
          "length": 152,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "819d82c2-5e92-42f8-a246-243ca816e2d7"
        },
        "item": {
          "id": "b8eea78c-f41c-469c-8270-963ef85c6731",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "74f84892-0684-4bfc-b11f-7bf801bebe2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b8eea78c-f41c-469c-8270-963ef85c6731",
        "cursor": {
          "ref": "dd4bcbea-9171-4bbb-a412-416623aba64e",
          "length": 152,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "819d82c2-5e92-42f8-a246-243ca816e2d7"
        },
        "item": {
          "id": "b8eea78c-f41c-469c-8270-963ef85c6731",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "74f84892-0684-4bfc-b11f-7bf801bebe2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "758299b9-d3f8-4fd7-b75c-8177630a1e14",
        "cursor": {
          "ref": "c39a4ce2-3689-490f-b82c-0c96dbbf1329",
          "length": 152,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7f437b9d-b242-48a3-ad34-9e7adbca6ead"
        },
        "item": {
          "id": "758299b9-d3f8-4fd7-b75c-8177630a1e14",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "038faa9e-0657-4674-8b51-ea3ba4d3a424",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "758299b9-d3f8-4fd7-b75c-8177630a1e14",
        "cursor": {
          "ref": "c39a4ce2-3689-490f-b82c-0c96dbbf1329",
          "length": 152,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7f437b9d-b242-48a3-ad34-9e7adbca6ead"
        },
        "item": {
          "id": "758299b9-d3f8-4fd7-b75c-8177630a1e14",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "038faa9e-0657-4674-8b51-ea3ba4d3a424",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "efba4852-f28a-4b38-9f26-2412a9bf1817",
        "cursor": {
          "ref": "fc627bab-ca68-487e-94a0-cc75cd265205",
          "length": 152,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "25480347-73f9-4445-84fe-9427fe29ae3d"
        },
        "item": {
          "id": "efba4852-f28a-4b38-9f26-2412a9bf1817",
          "name": "credentials_issue"
        },
        "response": {
          "id": "83ed61ec-cdbb-4728-ac1a-3652da78b8ae",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "efba4852-f28a-4b38-9f26-2412a9bf1817",
        "cursor": {
          "ref": "fc627bab-ca68-487e-94a0-cc75cd265205",
          "length": 152,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "25480347-73f9-4445-84fe-9427fe29ae3d"
        },
        "item": {
          "id": "efba4852-f28a-4b38-9f26-2412a9bf1817",
          "name": "credentials_issue"
        },
        "response": {
          "id": "83ed61ec-cdbb-4728-ac1a-3652da78b8ae",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "0177c0b5-1e4f-4096-a4a8-cd6cbad19c0e",
        "cursor": {
          "ref": "6bd01c2b-8874-40cc-9e1b-5bc5b46a96f1",
          "length": 152,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "07204721-a212-4dce-a705-40d707d69cda"
        },
        "item": {
          "id": "0177c0b5-1e4f-4096-a4a8-cd6cbad19c0e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f3dd247d-b28a-4d40-8fcd-8c66ed82ed08",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0177c0b5-1e4f-4096-a4a8-cd6cbad19c0e",
        "cursor": {
          "ref": "6bd01c2b-8874-40cc-9e1b-5bc5b46a96f1",
          "length": 152,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "07204721-a212-4dce-a705-40d707d69cda"
        },
        "item": {
          "id": "0177c0b5-1e4f-4096-a4a8-cd6cbad19c0e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f3dd247d-b28a-4d40-8fcd-8c66ed82ed08",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44a3bc2-5652-4e95-a48f-9dbde4854255",
        "cursor": {
          "ref": "41851649-0aaa-4a45-beb0-37bab180b53e",
          "length": 152,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9d7d9382-f4b0-4160-927c-f9c1cc5ee0cb"
        },
        "item": {
          "id": "a44a3bc2-5652-4e95-a48f-9dbde4854255",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "58970d12-43f1-4af9-8b06-b339379e5caa",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "a44a3bc2-5652-4e95-a48f-9dbde4854255",
        "cursor": {
          "ref": "41851649-0aaa-4a45-beb0-37bab180b53e",
          "length": 152,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9d7d9382-f4b0-4160-927c-f9c1cc5ee0cb"
        },
        "item": {
          "id": "a44a3bc2-5652-4e95-a48f-9dbde4854255",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "58970d12-43f1-4af9-8b06-b339379e5caa",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "02fd5c0b-3912-4cc7-ab38-4ca901bf4fa1",
        "cursor": {
          "ref": "b4de934c-a0cd-4b67-8875-adabde09e2fe",
          "length": 152,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ad39e83d-512a-4723-b042-7d652ac59e51"
        },
        "item": {
          "id": "02fd5c0b-3912-4cc7-ab38-4ca901bf4fa1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bf2a6427-3bc4-41df-bdf4-26596bef93fb",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fd5c0b-3912-4cc7-ab38-4ca901bf4fa1",
        "cursor": {
          "ref": "b4de934c-a0cd-4b67-8875-adabde09e2fe",
          "length": 152,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ad39e83d-512a-4723-b042-7d652ac59e51"
        },
        "item": {
          "id": "02fd5c0b-3912-4cc7-ab38-4ca901bf4fa1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bf2a6427-3bc4-41df-bdf4-26596bef93fb",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b87f29-5869-4ddf-8e46-86aaaf82a178",
        "cursor": {
          "ref": "d30bffc9-7c58-492c-98f0-e9b8e7946d67",
          "length": 152,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c00e8c03-562f-44dd-a606-92a704638bab"
        },
        "item": {
          "id": "22b87f29-5869-4ddf-8e46-86aaaf82a178",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "46b7617b-e2b6-4aca-822d-5cfe98cb42cf",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b87f29-5869-4ddf-8e46-86aaaf82a178",
        "cursor": {
          "ref": "d30bffc9-7c58-492c-98f0-e9b8e7946d67",
          "length": 152,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c00e8c03-562f-44dd-a606-92a704638bab"
        },
        "item": {
          "id": "22b87f29-5869-4ddf-8e46-86aaaf82a178",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "46b7617b-e2b6-4aca-822d-5cfe98cb42cf",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08242232-7d51-4757-b0c1-9069ed91fb72",
        "cursor": {
          "ref": "098bc4fb-8ebc-4f73-a407-294c25e5353a",
          "length": 152,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6cfabe67-375f-4143-a33a-68bc371ce5c2"
        },
        "item": {
          "id": "08242232-7d51-4757-b0c1-9069ed91fb72",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "61a35fed-822c-4e29-bf20-5194d7a2e793",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08242232-7d51-4757-b0c1-9069ed91fb72",
        "cursor": {
          "ref": "098bc4fb-8ebc-4f73-a407-294c25e5353a",
          "length": 152,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6cfabe67-375f-4143-a33a-68bc371ce5c2"
        },
        "item": {
          "id": "08242232-7d51-4757-b0c1-9069ed91fb72",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "61a35fed-822c-4e29-bf20-5194d7a2e793",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f50c41f-4f01-4674-8aec-3736fd2db636",
        "cursor": {
          "ref": "2b2487f4-2e9a-48b7-9b9a-d6658cb18442",
          "length": 152,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "66807e34-eac4-475f-96a4-3ec1d87380cb"
        },
        "item": {
          "id": "9f50c41f-4f01-4674-8aec-3736fd2db636",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "e3a53ad4-49b4-4fdb-a438-f545d259e22a",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f50c41f-4f01-4674-8aec-3736fd2db636",
        "cursor": {
          "ref": "2b2487f4-2e9a-48b7-9b9a-d6658cb18442",
          "length": 152,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "66807e34-eac4-475f-96a4-3ec1d87380cb"
        },
        "item": {
          "id": "9f50c41f-4f01-4674-8aec-3736fd2db636",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "e3a53ad4-49b4-4fdb-a438-f545d259e22a",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a309f380-dc30-415b-bca3-29a37b5a68d0",
        "cursor": {
          "ref": "2161b73b-42c0-4ec0-b4f3-5fb6914c4222",
          "length": 152,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c61e99e0-28f7-4357-9409-a35084f94813"
        },
        "item": {
          "id": "a309f380-dc30-415b-bca3-29a37b5a68d0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e692a577-543d-427a-b20c-5710e9972620",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a309f380-dc30-415b-bca3-29a37b5a68d0",
        "cursor": {
          "ref": "2161b73b-42c0-4ec0-b4f3-5fb6914c4222",
          "length": 152,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c61e99e0-28f7-4357-9409-a35084f94813"
        },
        "item": {
          "id": "a309f380-dc30-415b-bca3-29a37b5a68d0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e692a577-543d-427a-b20c-5710e9972620",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "46d019b8-bed0-431c-a661-461af4f039cb",
        "cursor": {
          "ref": "73b9cec3-5e18-43f8-a52a-604c9629fa64",
          "length": 152,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6dffb0d1-b10c-432e-821c-3c72ddac809c"
        },
        "item": {
          "id": "46d019b8-bed0-431c-a661-461af4f039cb",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "78904ee7-7ca6-4b00-93c7-e934093a25ef",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 36,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ff211000-ed0b-4d1e-b78c-87b9d868464d",
        "cursor": {
          "ref": "24260859-98e0-4ab5-ae8a-a8a893c9db58",
          "length": 152,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3a52cd2d-dc81-47f8-af7a-69d2f3670686"
        },
        "item": {
          "id": "ff211000-ed0b-4d1e-b78c-87b9d868464d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e63cef31-f507-4e42-af02-e8384ab9cf5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ff211000-ed0b-4d1e-b78c-87b9d868464d",
        "cursor": {
          "ref": "24260859-98e0-4ab5-ae8a-a8a893c9db58",
          "length": 152,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3a52cd2d-dc81-47f8-af7a-69d2f3670686"
        },
        "item": {
          "id": "ff211000-ed0b-4d1e-b78c-87b9d868464d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e63cef31-f507-4e42-af02-e8384ab9cf5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7df124b5-97ab-42b6-8202-69962d118c48",
        "cursor": {
          "ref": "06c72c73-3c38-41ae-bacc-7327082ee5a1",
          "length": 152,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0aaac6ff-1e04-40e3-b9c6-2f79f875a54b"
        },
        "item": {
          "id": "7df124b5-97ab-42b6-8202-69962d118c48",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "eef3abd8-7445-426d-9875-7f743ecd4be1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6438d835-506a-466f-ba39-5824ed7efcd7",
        "cursor": {
          "ref": "6a7ceb78-c14a-4069-9756-56b81d1164d8",
          "length": 152,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "616317e2-8af6-486d-a9dc-322e43da0fb0"
        },
        "item": {
          "id": "6438d835-506a-466f-ba39-5824ed7efcd7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1ccd3da0-b2e9-4ad8-97e2-3cfbc7d4bcfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "531f19cc-7f18-4b5e-8996-390476214a03",
        "cursor": {
          "ref": "4a2d77ef-1849-4812-a00f-de7da957fd25",
          "length": 152,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fe073550-aca1-4abd-83e6-86f39b56b3c6"
        },
        "item": {
          "id": "531f19cc-7f18-4b5e-8996-390476214a03",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c11fda9b-4026-473e-8f70-6edcb963397b",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "2a183097-59fa-45fd-8040-023422d08db8",
        "cursor": {
          "ref": "17512f8a-bde0-47ce-96bf-8fe69b2cc6ff",
          "length": 152,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "605cb5b7-54f8-4ddd-af00-133e875cb3e8"
        },
        "item": {
          "id": "2a183097-59fa-45fd-8040-023422d08db8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d0215331-2dd7-4c53-b872-e36adafa7540",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "33c44ad0-56b7-4531-a87f-04fd9a34bf79",
        "cursor": {
          "ref": "4b1dde66-4b20-47b6-b5d7-d545560bc535",
          "length": 152,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "819fe806-18b2-4b11-b96b-a4c6fb0413c5"
        },
        "item": {
          "id": "33c44ad0-56b7-4531-a87f-04fd9a34bf79",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "859d1927-1419-4e85-be0b-cf340fd98d80",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "d48c4427-2658-4c77-81c1-e7fb012da191",
        "cursor": {
          "ref": "841d93a7-06f8-4fe8-959e-5f0f9131fe30",
          "length": 152,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2a17ea50-826a-4f88-a417-0ff172b49787"
        },
        "item": {
          "id": "d48c4427-2658-4c77-81c1-e7fb012da191",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8a7ede09-508d-44e9-a99a-de8dcd31b294",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "9c5314c2-99c6-43ba-bbed-4a592159efd4",
        "cursor": {
          "ref": "98bc0e8b-9776-4641-9834-f960ede58b27",
          "length": 152,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "52439041-c0a7-443c-9823-d652423a0340"
        },
        "item": {
          "id": "9c5314c2-99c6-43ba-bbed-4a592159efd4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7d5b2af5-b3e4-41d6-8600-ed43e68f1f15",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "adf98d86-f75b-42f3-a238-c48cde938572",
        "cursor": {
          "ref": "a77fd279-06b5-4aa7-b09d-cde02daa5e33",
          "length": 152,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "828bb73d-cdf4-4318-b569-bd0ea0e7244b"
        },
        "item": {
          "id": "adf98d86-f75b-42f3-a238-c48cde938572",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4562a62b-f0f1-48e2-86b2-27f402f14088",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "44b0c711-ceec-4f14-ab24-006ccda5b1c1",
        "cursor": {
          "ref": "4d7ce0b9-f9b1-45e0-85a0-4011d4ff1110",
          "length": 152,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f960e06d-70b7-4e2e-b3cd-9aa6243a187e"
        },
        "item": {
          "id": "44b0c711-ceec-4f14-ab24-006ccda5b1c1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0d4acb62-5168-4b20-9be6-1c0228789f29",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "53b49c66-bb1e-44e4-8c31-77c504f53bed",
        "cursor": {
          "ref": "b2efaff6-9fb1-4ecb-b28a-be2c34169ce3",
          "length": 152,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6878760c-08bf-42e2-a197-60d6a3ff0d0c"
        },
        "item": {
          "id": "53b49c66-bb1e-44e4-8c31-77c504f53bed",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1181af9d-a4a9-474d-b02a-316f856fcff3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "70495fee-3d89-4614-84a4-1b8f18414c88",
        "cursor": {
          "ref": "6279cebf-cafd-474f-8ee1-913207aee402",
          "length": 152,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1941f59d-5161-4ec0-9be9-c935eedb55b3"
        },
        "item": {
          "id": "70495fee-3d89-4614-84a4-1b8f18414c88",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1f033f94-da80-4da6-bfa0-58dd34674551",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 170,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "1a4f1c14-593d-4097-a259-773a26e762c1",
        "cursor": {
          "ref": "cfa25641-cd22-42f6-8331-4493cabc5221",
          "length": 152,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1e470ad1-6d63-4091-bf31-204974384e74"
        },
        "item": {
          "id": "1a4f1c14-593d-4097-a259-773a26e762c1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9423a00b-34af-4a77-82c7-d09691be6342",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "7ac7d80f-3c64-4c36-9417-a220edc6493d",
        "cursor": {
          "ref": "cc201ac8-8337-4604-8262-2c20ac19908a",
          "length": 152,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d784fcd4-a64a-47ea-9cc5-bee292fb1834"
        },
        "item": {
          "id": "7ac7d80f-3c64-4c36-9417-a220edc6493d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b54d3a39-1425-4359-8aca-4df78a803f55",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "5c595395-ff0f-472b-8d9d-983b5c6b06c1",
        "cursor": {
          "ref": "170a9d97-e57b-42a4-8cf0-18340a95d94c",
          "length": 152,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4552344c-1e06-4bd2-8796-ad34b2c35fa5"
        },
        "item": {
          "id": "5c595395-ff0f-472b-8d9d-983b5c6b06c1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f575866d-56d1-41d3-9c80-2c31c274d2b0",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "91e733fd-4798-4bea-a245-dece772b326b",
        "cursor": {
          "ref": "5379380b-6b29-4f7c-be78-c82e834bb38a",
          "length": 152,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9ea116b5-7447-4463-a0dd-11d29c1119d0"
        },
        "item": {
          "id": "91e733fd-4798-4bea-a245-dece772b326b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "36b4f6a4-190d-4657-8ffc-305b56cff474",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "388919ca-edd6-4140-a16e-3c8a7c2ba68b",
        "cursor": {
          "ref": "c6949cf9-9b4d-477c-abdf-6383d6cffd20",
          "length": 152,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b695ba99-31b4-4d5e-8d12-90cbf09fbba5"
        },
        "item": {
          "id": "388919ca-edd6-4140-a16e-3c8a7c2ba68b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f72677a1-d77b-449a-8424-72c19743359f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "120e4ccc-057a-4df7-9149-ccd7ea58857b",
        "cursor": {
          "ref": "b6e081b6-9f14-4b9c-abd0-d7f766fde80f",
          "length": 152,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8532a976-4618-4904-a6d3-e2d99ecb089a"
        },
        "item": {
          "id": "120e4ccc-057a-4df7-9149-ccd7ea58857b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4e9bef5c-faba-4244-a70a-2f4ed93a98ac",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4292bbb1-d97c-44df-9f42-bf6a710b8c1b",
        "cursor": {
          "ref": "f4a8fd21-5e1f-4b5b-aaa2-41e800b9a347",
          "length": 152,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "923dcbdc-e294-4c35-b711-ee15ed760800"
        },
        "item": {
          "id": "4292bbb1-d97c-44df-9f42-bf6a710b8c1b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3be8d85e-bd44-40f7-a209-57e1a8b991f4",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c68cd328-dfd6-42d2-a37d-74cc1fa38951",
        "cursor": {
          "ref": "bd8142fb-65e4-4bd5-b1a3-f5b6cea683aa",
          "length": 152,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "41316e9d-e0c5-4134-804f-fb5537e15d9d"
        },
        "item": {
          "id": "c68cd328-dfd6-42d2-a37d-74cc1fa38951",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "15f9c2b9-e8de-412b-80fd-aa7264e2e626",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "fd0a8c65-f0b4-4451-9a16-3b0fe4f8aa27",
        "cursor": {
          "ref": "a4b577cb-14d4-4582-9718-f5fb0a8b84a4",
          "length": 152,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "434a3278-0cb6-485e-a342-ccfa96254e7f"
        },
        "item": {
          "id": "fd0a8c65-f0b4-4451-9a16-3b0fe4f8aa27",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "acc7d7c2-b8e5-4536-8638-6ceee0e4fcbf",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "eea3e34a-e4f2-4d3e-9354-5e6649a763c8",
        "cursor": {
          "ref": "9c685dee-3cd4-4364-9181-2acbd3b80970",
          "length": 152,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8560168f-d278-4457-9036-7e51996f5e0c"
        },
        "item": {
          "id": "eea3e34a-e4f2-4d3e-9354-5e6649a763c8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a4c2c992-e913-4cec-a3c7-027359955c92",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "5c9bc971-ad78-4336-a527-9460122017fd",
        "cursor": {
          "ref": "fddd27fa-e010-4204-892b-771af79b3cbd",
          "length": 152,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "57394d05-b4f5-4581-9b0c-da4638439ebf"
        },
        "item": {
          "id": "5c9bc971-ad78-4336-a527-9460122017fd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ed360c66-82a2-4e3f-ae92-e6c53492350d",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "4c9dd04e-090e-4958-8c5c-c1c475dbba45",
        "cursor": {
          "ref": "ebdd755c-c974-4aa0-ab44-14bc0eb3d020",
          "length": 152,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7c1a1264-56d4-4a5c-8958-1c6d56d1b38e"
        },
        "item": {
          "id": "4c9dd04e-090e-4958-8c5c-c1c475dbba45",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f5736d4c-1f09-4ac8-a0e9-e6a71295bcec",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "363c3cd8-57aa-433a-acbc-5eab89966a6b",
        "cursor": {
          "ref": "59a0e2f0-9cbb-46f6-928f-fa6d2a8c810a",
          "length": 152,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "18f0ba23-6728-4914-b0d7-54709eae899a"
        },
        "item": {
          "id": "363c3cd8-57aa-433a-acbc-5eab89966a6b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fac59546-0b44-4f51-8119-f467baf4e462",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "ea96c527-ea6a-48ab-83b7-b5ffb2edbd74",
        "cursor": {
          "ref": "016e6978-02c2-4bed-b598-b32f1c47c1f5",
          "length": 152,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a9ba0ea0-5cb0-4fe2-babe-38d82c8a3014"
        },
        "item": {
          "id": "ea96c527-ea6a-48ab-83b7-b5ffb2edbd74",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "190b7683-acdf-4802-b8c9-8f954cf41b59",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "baa6294d-5406-4da1-bdc8-93e9d76e879c",
        "cursor": {
          "ref": "ede7ce52-fed8-4b9d-a442-1c82cdc15643",
          "length": 152,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "77d7cdcb-e655-4229-8317-a9100f0affca"
        },
        "item": {
          "id": "baa6294d-5406-4da1-bdc8-93e9d76e879c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e5825ba6-8ce1-4849-9352-30ee0b64c17b",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "73e591a3-791e-4343-a71b-65632689e494",
        "cursor": {
          "ref": "a7c5a940-c435-4b0f-ac88-273507c73731",
          "length": 152,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "95f10582-cf1a-495f-8814-d9e126f5855c"
        },
        "item": {
          "id": "73e591a3-791e-4343-a71b-65632689e494",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a8289f71-fb5f-4539-a7e4-cb0d3691a189",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "7b741ffd-4e38-4e0a-b102-fa75a95db31b",
        "cursor": {
          "ref": "048bcd38-5528-4b47-b89f-91f0174712bc",
          "length": 152,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4f36143e-f19c-4a35-84b9-c2e05b40a7a6"
        },
        "item": {
          "id": "7b741ffd-4e38-4e0a-b102-fa75a95db31b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9e7fd40a-c273-44ff-813e-3e0ae654f1a0",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "d27cca3b-b100-4930-a878-e4e24f74649e",
        "cursor": {
          "ref": "3fdc142e-3b81-4962-8c4e-d2ec6b7facfb",
          "length": 152,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3f29cc4f-0e32-490a-aeb7-fc036fcc5731"
        },
        "item": {
          "id": "d27cca3b-b100-4930-a878-e4e24f74649e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d0ade10a-ee04-46c5-aa30-62bb2910a722",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "15300775-8e5a-4f19-99c3-0caaf5a3f96d",
        "cursor": {
          "ref": "76c7a3b8-6fa7-410a-84b5-968ab494a03f",
          "length": 152,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f3f9faaf-2c43-4987-a70b-4b85c1442121"
        },
        "item": {
          "id": "15300775-8e5a-4f19-99c3-0caaf5a3f96d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6387fff4-e8f2-468b-b0ff-5ede1b27f78c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "48a702cd-4e52-4700-913a-291991c54d33",
        "cursor": {
          "ref": "0d239d5b-83e3-449c-88de-5d121d657264",
          "length": 152,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2a61d6a7-47aa-4b8e-8907-70ba014b3621"
        },
        "item": {
          "id": "48a702cd-4e52-4700-913a-291991c54d33",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9cfaaaef-8e05-4b65-a92d-424c3bb1bbe8",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "dbb64e72-d72b-428d-b2cf-6da8a4378db7",
        "cursor": {
          "ref": "7aa5e6dd-90f2-42c4-9be9-d22ed2654071",
          "length": 152,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "adc2acc8-50d1-4a14-9301-0ac6cc881827"
        },
        "item": {
          "id": "dbb64e72-d72b-428d-b2cf-6da8a4378db7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f9f2b971-3cc2-4a66-9977-2df11c3c0766",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "1f96c307-9c87-43d5-83d1-0fc8a6692086",
        "cursor": {
          "ref": "0706d86c-6b08-4da9-a3e8-acbf56d0b417",
          "length": 152,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cdb5b1fd-6908-4b3c-92ab-5fa7f303fb17"
        },
        "item": {
          "id": "1f96c307-9c87-43d5-83d1-0fc8a6692086",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "97db7fdb-a3cb-4376-bacc-a59aefc5a4e9",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "a29856b2-0ce1-4f4c-bd0f-2697c97994a1",
        "cursor": {
          "ref": "9dcc62b9-02a8-4885-b2ab-c228340aa5ec",
          "length": 152,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0d0b45bc-01d0-4500-a82f-5adee194d9d7"
        },
        "item": {
          "id": "a29856b2-0ce1-4f4c-bd0f-2697c97994a1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4e191e45-db40-4099-8a45-5e6d6be93c20",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "30ff1556-9583-4362-b3c7-c6f79568c69a",
        "cursor": {
          "ref": "d6ad3033-7105-4fb0-9281-80ba848053e9",
          "length": 152,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "46a1b18e-60b8-4497-b4fc-6be6e636e9cc"
        },
        "item": {
          "id": "30ff1556-9583-4362-b3c7-c6f79568c69a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "da27808c-1196-4861-8448-cc6778a3fa43",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "3680830a-1651-492d-8457-4f452bc51914",
        "cursor": {
          "ref": "b6c29e7c-fdb0-4709-a29c-16913e48239b",
          "length": 152,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9e86fcd6-cdb1-4d92-b57a-1e761fae1e7f"
        },
        "item": {
          "id": "3680830a-1651-492d-8457-4f452bc51914",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e44ee993-7024-430f-8359-8bf27f3ec490",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "33089b80-8e7a-4736-a7ee-c5ab4db31939",
        "cursor": {
          "ref": "9ebb7282-3080-4a9d-9b5c-c5e1f73fcd70",
          "length": 152,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "60f52600-a019-4c6e-bbe3-fe4c76df56a1"
        },
        "item": {
          "id": "33089b80-8e7a-4736-a7ee-c5ab4db31939",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e667b2b7-5405-4ce2-a5f0-59689a4aa882",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "47c2b11c-8187-45e4-be5a-b58e6eda6d0a",
        "cursor": {
          "ref": "c2dbab16-cef1-482a-bb00-a745cd31e1c4",
          "length": 152,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5a5eef4f-0956-4021-9c0b-2d9fc732fbdd"
        },
        "item": {
          "id": "47c2b11c-8187-45e4-be5a-b58e6eda6d0a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "316a47c6-e780-411b-a288-eb4065a8d39e",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "55b14d68-f526-42fa-9450-22e844c0fbff",
        "cursor": {
          "ref": "09cf5bf5-e0ee-421f-b0bd-22d017d82a91",
          "length": 152,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b1b85b50-ddc0-4670-aff6-0949a7fd6e8e"
        },
        "item": {
          "id": "55b14d68-f526-42fa-9450-22e844c0fbff",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a0806d24-9638-4322-9de4-63b653148c95",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "3a9c67f6-98bc-44eb-abc8-67bc7ede5084",
        "cursor": {
          "ref": "10c35d5a-b9a7-4f41-abd1-791edadadc07",
          "length": 152,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3df5a0b4-afcf-441f-a9fc-e85e5c756fbd"
        },
        "item": {
          "id": "3a9c67f6-98bc-44eb-abc8-67bc7ede5084",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3982f206-9edd-46f6-9d83-0f1e71b44228",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "2711a778-56fd-47e6-8ed0-b7acbacde1b4",
        "cursor": {
          "ref": "5a8292ed-d30d-4adc-b9ee-90863340de8e",
          "length": 152,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "31977409-879e-4df7-ab24-ef92f8234ade"
        },
        "item": {
          "id": "2711a778-56fd-47e6-8ed0-b7acbacde1b4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "61c787ae-dd5e-4198-9d8a-3f34ee0f99e2",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "df2b5c97-153c-4c5b-8ce5-bd89eb2f7f1e",
        "cursor": {
          "ref": "ec5a30bb-245e-49e7-b2af-f2c4d8f5c44d",
          "length": 152,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8e4f00ee-b5c1-4ddc-a624-3cc5d1a15c58"
        },
        "item": {
          "id": "df2b5c97-153c-4c5b-8ce5-bd89eb2f7f1e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "77bb00b3-be76-4692-bf9a-d2f214c1990b",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "a2298e2f-c6e4-4f8a-af78-3d4b7de62192",
        "cursor": {
          "ref": "500637b6-88e9-4f4d-af3e-a16d57ac8392",
          "length": 152,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ed265207-5e74-462b-bc37-71b2104910a7"
        },
        "item": {
          "id": "a2298e2f-c6e4-4f8a-af78-3d4b7de62192",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a6c1ff22-bc30-4c60-8b5a-18774e3b560a",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "13e428a2-430d-471b-b6e1-2ad378547090",
        "cursor": {
          "ref": "80aa01a2-6f9a-480e-88e6-bc85908d98f7",
          "length": 152,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "39d9ab16-149d-4b16-bd42-8594c203eaf1"
        },
        "item": {
          "id": "13e428a2-430d-471b-b6e1-2ad378547090",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "058ec11d-cf51-499e-8b56-c5a41166d583",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "4c9ca570-eccf-4e15-953f-583489daf6d0",
        "cursor": {
          "ref": "75549325-090e-4a2d-b0d0-a120f432aba7",
          "length": 152,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f30f87ad-5a54-4b86-a7ed-eade530c2da2"
        },
        "item": {
          "id": "4c9ca570-eccf-4e15-953f-583489daf6d0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "98732281-5231-4554-8db1-9c08e6a3d19a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "4423fb7f-47d2-467c-90c5-f85e3317a10e",
        "cursor": {
          "ref": "d48a6bf1-3539-4267-8c3f-5064a620def8",
          "length": 152,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a3aea601-1f95-45c4-9369-405ffe643e72"
        },
        "item": {
          "id": "4423fb7f-47d2-467c-90c5-f85e3317a10e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "96e0c036-02b0-4db5-9101-401717392463",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "0e1be61e-9af2-4b4f-8e0d-1cb5d94d77e7",
        "cursor": {
          "ref": "2d3bde92-3273-4270-a524-70f7d88b3920",
          "length": 152,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c2c53066-c784-485f-b96d-d9256e5afd6c"
        },
        "item": {
          "id": "0e1be61e-9af2-4b4f-8e0d-1cb5d94d77e7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c845d3f1-50f3-4235-9314-26dc0567b416",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "41b20c8b-af4d-4e06-9eb6-cd4408216e09",
        "cursor": {
          "ref": "1f90e6f1-5888-439c-8bd9-9fb90b36c881",
          "length": 152,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4a617404-c8df-4d1a-8647-115d987af25c"
        },
        "item": {
          "id": "41b20c8b-af4d-4e06-9eb6-cd4408216e09",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bcfc69cb-fe21-4688-bfde-571c7eb6822e",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "69d22651-a783-4e3e-bc68-b92fd496de0d",
        "cursor": {
          "ref": "e9fbabb1-773f-4965-a45e-9e66ac8f8284",
          "length": 152,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4b6c3728-a447-4665-b657-5bffff526edb"
        },
        "item": {
          "id": "69d22651-a783-4e3e-bc68-b92fd496de0d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7c98396e-be31-46af-8960-c9cee686fe40",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "8801e7bc-1791-4961-88a3-49a28cbfafae",
        "cursor": {
          "ref": "d4143192-d2c3-4240-bd5c-7eb8ad35c443",
          "length": 152,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1501d920-619d-4d98-9e37-c0ef77aa3a9c"
        },
        "item": {
          "id": "8801e7bc-1791-4961-88a3-49a28cbfafae",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fe3614b8-f9ae-46fe-b6fc-21022458e64f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "90684220-179a-45aa-ad56-adaf0caeecac",
        "cursor": {
          "ref": "248b3cbd-24c6-4eb3-beca-04d8a1e42667",
          "length": 152,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "153b325e-291c-4a45-ab9b-6c30b7cc344d"
        },
        "item": {
          "id": "90684220-179a-45aa-ad56-adaf0caeecac",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cbc55b15-a410-4047-8d0b-274f2bdb22e8",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "da6b426b-b4c3-40ab-ba59-540ba1ad5581",
        "cursor": {
          "ref": "e0dcfb86-7d25-4014-a7f6-aa03d30182d1",
          "length": 152,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ec74b566-65bc-4de0-b127-a5fc84d760b1"
        },
        "item": {
          "id": "da6b426b-b4c3-40ab-ba59-540ba1ad5581",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "01c74eaa-85e8-4a83-8368-42418a7a03ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "a4f50731-7fbe-4cdb-a8af-3f2b7e39d77c",
        "cursor": {
          "ref": "2c600102-c189-4cfc-bc6a-43bb4fbcde54",
          "length": 152,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "49d5e186-0703-44c8-b584-7325721621e0"
        },
        "item": {
          "id": "a4f50731-7fbe-4cdb-a8af-3f2b7e39d77c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5d47772e-3c6f-4751-8e56-0b93689fe2e6",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8d5e1500-c7da-4a26-b5c1-2e5464122498",
        "cursor": {
          "ref": "ba1ffd7e-6e57-4351-bdc9-f04c9f11d605",
          "length": 152,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0263af28-a187-4961-98ce-750e7ad225ad"
        },
        "item": {
          "id": "8d5e1500-c7da-4a26-b5c1-2e5464122498",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ea0861a0-c383-4652-9202-7333e29ad14f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "f78f74ef-c0a0-40ca-bfcf-9ee311368f85",
        "cursor": {
          "ref": "99aea535-88eb-4fae-b329-6429f7e2633e",
          "length": 152,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b6dfab93-19c1-46eb-ad37-3b67f8f0a9aa"
        },
        "item": {
          "id": "f78f74ef-c0a0-40ca-bfcf-9ee311368f85",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4de1128d-3a1f-4ffd-a127-63579b677fbd",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "1cd23805-553f-4197-aa03-6d601287038b",
        "cursor": {
          "ref": "b94a9a03-cb70-4b20-9358-248e07ea3100",
          "length": 152,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d360e546-5856-4eee-8890-7fecb3969436"
        },
        "item": {
          "id": "1cd23805-553f-4197-aa03-6d601287038b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fc2803ce-7fbb-4385-97e5-e8b216736e15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "7a4aca5e-1e81-4637-ad68-81e7ca1b7085",
        "cursor": {
          "ref": "cca995d3-54b5-46ec-b664-9e08354bd698",
          "length": 152,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8915e3d6-9594-4f0c-9b1b-7af0c9bf87d3"
        },
        "item": {
          "id": "7a4aca5e-1e81-4637-ad68-81e7ca1b7085",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "45269742-f41b-4cd6-8a8d-4ed5192889d8",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "c0b21d7a-57ad-406e-88df-1844c7d8404e",
        "cursor": {
          "ref": "2e4e6494-ad06-44b8-9ab9-a857c774eb11",
          "length": 152,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0307dcb3-8749-499a-8b72-9d388d8d526b"
        },
        "item": {
          "id": "c0b21d7a-57ad-406e-88df-1844c7d8404e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "447d293a-fd16-47bc-bad6-a33c2f21f446",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "a205e489-60e0-4efb-9f75-a846ced5bf81",
        "cursor": {
          "ref": "3a258ccc-5b21-4851-a71c-38da54c1c657",
          "length": 152,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f1833d10-0719-432b-8cbf-545677f8f8da"
        },
        "item": {
          "id": "a205e489-60e0-4efb-9f75-a846ced5bf81",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "af5f108e-763e-48f1-82b0-6af07c0262fa",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "83fda1d6-e1b4-411d-b8c4-2f2f2ddc1838",
        "cursor": {
          "ref": "83b04294-91a5-4709-8cdb-4987657b660d",
          "length": 152,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6fc90321-9549-4f9b-9e25-e8fe8761ce18"
        },
        "item": {
          "id": "83fda1d6-e1b4-411d-b8c4-2f2f2ddc1838",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0fab489c-5988-4c3b-aa7f-545ff189714c",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "59733f1a-e688-45bb-afe8-520bbffa2bac",
        "cursor": {
          "ref": "4b7a3571-a838-4bd6-8e7f-f900cc1b17cb",
          "length": 152,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6bcf511c-4ff0-4c3f-bc83-933e67095c94"
        },
        "item": {
          "id": "59733f1a-e688-45bb-afe8-520bbffa2bac",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9d0b30ec-767c-420a-8e15-f4e3f84cad5e",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7946bd3d-d27d-4739-bef3-ba0906cd1d09",
        "cursor": {
          "ref": "dfe183da-da2e-4202-b2b9-6ec883bce69d",
          "length": 152,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "93c8ce58-4821-4dba-9fe0-d989a2ca0c89"
        },
        "item": {
          "id": "7946bd3d-d27d-4739-bef3-ba0906cd1d09",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a38c3419-c60b-4cbf-82f2-88818e423b54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "81db5e3d-4cdf-4813-918b-9d34974b49dc",
        "cursor": {
          "ref": "c23af8eb-3135-431b-a67b-a34c3ce6aed2",
          "length": 152,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f679104b-ceda-4134-8f90-f97c810a6ddd"
        },
        "item": {
          "id": "81db5e3d-4cdf-4813-918b-9d34974b49dc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c6930333-de48-4e54-95e3-b5e4c1c8647c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "263f64bd-0205-4567-82b2-71408e507235",
        "cursor": {
          "ref": "53f5df63-85d6-4d94-b48d-44d1016f49e2",
          "length": 152,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e831f1d0-6068-4cc8-8bb4-0e748425a99b"
        },
        "item": {
          "id": "263f64bd-0205-4567-82b2-71408e507235",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "51332698-a559-417e-9de2-79bb21e7ca82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ae7ef803-823d-4cd0-bd3c-5e272373acd9",
        "cursor": {
          "ref": "d7ad0505-18fe-40d5-825d-01239bfb259c",
          "length": 152,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "33519a8d-5593-42c5-ba9c-e3ab53d61ba1"
        },
        "item": {
          "id": "ae7ef803-823d-4cd0-bd3c-5e272373acd9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6f00d16d-598d-441c-8f08-faf9d5e36e35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "35bd2902-a197-4981-8afe-28b40d7ced2e",
        "cursor": {
          "ref": "b80c6d5a-30ea-4bae-97db-1614776f90fe",
          "length": 152,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6ce8ced7-78bc-4e00-aa01-4522df510538"
        },
        "item": {
          "id": "35bd2902-a197-4981-8afe-28b40d7ced2e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "27c26bd6-1d6d-4725-8286-82eb090c777d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "bbc1de0e-c3cb-43a7-85a6-173735c39c2f",
        "cursor": {
          "ref": "dbd47573-526a-49aa-aa4e-5ef20a1f1201",
          "length": 152,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bc27713c-fa2f-46f7-9129-05d20f122348"
        },
        "item": {
          "id": "bbc1de0e-c3cb-43a7-85a6-173735c39c2f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "93b0bac7-6f94-41be-a4b0-edaf743d51d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "def20cca-b502-45f0-b7c5-62594adcd595",
        "cursor": {
          "ref": "335fdb87-145a-4912-baf4-dece9dbd42aa",
          "length": 152,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "99870d99-0b5e-4457-a27a-56bd996c08ff"
        },
        "item": {
          "id": "def20cca-b502-45f0-b7c5-62594adcd595",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bcd9a417-81d0-4237-ba9f-caa391baf8dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "fd6a199f-81b9-4dd7-8589-61123b9cf465",
        "cursor": {
          "ref": "78f1855d-8290-42d5-8c07-15e8cdc70843",
          "length": 152,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8ad2ae26-3d39-474b-9a05-17cc19ba217d"
        },
        "item": {
          "id": "fd6a199f-81b9-4dd7-8589-61123b9cf465",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "eaf6b8b2-5756-4f97-a887-55f5b3561291",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "2f885ded-845b-4ce9-8b56-2dac659c05ce",
        "cursor": {
          "ref": "1d9ed6af-9642-4903-bc34-d139c932e4e7",
          "length": 152,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "89d37c22-4bd5-4946-97b0-ed33e157b49a"
        },
        "item": {
          "id": "2f885ded-845b-4ce9-8b56-2dac659c05ce",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7f95f02c-abd6-4c63-85d4-c9cf9485ba67",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "d44a5b69-8992-424c-9a4a-4c30492266a2",
        "cursor": {
          "ref": "753d3fcc-8ae2-4918-a96b-ab5fcbfd8be2",
          "length": 152,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f05b54f6-6210-4d33-af88-b06793cf1b49"
        },
        "item": {
          "id": "d44a5b69-8992-424c-9a4a-4c30492266a2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "17701674-64fb-4c52-8362-df1f0b881172",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2524fbfc-7a17-49a7-ae2d-9f6b90fe9712",
        "cursor": {
          "ref": "ff788b5a-1c4e-4a37-8581-741081696855",
          "length": 152,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "317d0334-734d-4280-b351-f095539f9f75"
        },
        "item": {
          "id": "2524fbfc-7a17-49a7-ae2d-9f6b90fe9712",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4314d0e2-7d77-4913-aa60-20c1931ddb54",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3439e193-f9b5-4a00-969e-36a170a17fe9",
        "cursor": {
          "ref": "aa43db28-193c-4fb0-a00c-5850d73f8d1a",
          "length": 152,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "672d31d2-7e50-499b-a5db-6c17a8aa6d5e"
        },
        "item": {
          "id": "3439e193-f9b5-4a00-969e-36a170a17fe9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "63481da7-3af2-4af8-8cf2-e890d4c847e5",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "13966f32-dc70-4a13-bf37-1cff52fe77bb",
        "cursor": {
          "ref": "6e409d16-e146-44df-a8ac-9ce2fff219c9",
          "length": 152,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9728a62f-3909-41da-ac1c-52d8e97de908"
        },
        "item": {
          "id": "13966f32-dc70-4a13-bf37-1cff52fe77bb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a6def045-eccc-4d20-a42c-98a40dba6616",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3fa049a0-bdac-4a2e-88d6-c57b6ca1bcf6",
        "cursor": {
          "ref": "0930cd0e-1966-437b-a68b-fbf1a280b070",
          "length": 152,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e33720e3-0d66-452d-b0e0-5247bd678797"
        },
        "item": {
          "id": "3fa049a0-bdac-4a2e-88d6-c57b6ca1bcf6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "99e02b37-357b-43fc-bc12-cb294eee36a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "4b240048-dc4b-419c-a345-21ce776b895a",
        "cursor": {
          "ref": "af4213aa-026b-4ef0-914c-8cb92e96969c",
          "length": 152,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c3dc2048-b407-4808-b778-51fedd87f9f6"
        },
        "item": {
          "id": "4b240048-dc4b-419c-a345-21ce776b895a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e5cf8d6e-bee8-4027-bb0e-9d30f6e774c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "790c4a67-20e1-4957-80cb-a55cea64d377",
        "cursor": {
          "ref": "d47ca7c1-7088-4553-8003-904f27aa3971",
          "length": 152,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "00ed7aec-1922-4243-9fac-f50c747f3e5a"
        },
        "item": {
          "id": "790c4a67-20e1-4957-80cb-a55cea64d377",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2a7b084a-40c4-475f-937e-acff759a3635",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "e5e2a8e8-708f-436f-908c-66d5e7165fec",
        "cursor": {
          "ref": "88233658-69c6-4a1c-ad92-743274903fcb",
          "length": 152,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "79a757fa-57fc-4d36-bb7f-dc8073ca680f"
        },
        "item": {
          "id": "e5e2a8e8-708f-436f-908c-66d5e7165fec",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8c67aa7f-fd42-43a6-b962-4eb21912461e",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "404bc10b-8051-4d5d-b2ca-7c4499b8f516",
        "cursor": {
          "ref": "49769c73-2665-47ee-bccf-1b593db942ec",
          "length": 152,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "29c7106e-f1b4-4831-b856-d745d31eacfc"
        },
        "item": {
          "id": "404bc10b-8051-4d5d-b2ca-7c4499b8f516",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b7872f4c-6f41-4667-a5b8-cafacde198f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e660c029-f69e-4cba-b35d-495dcc096cf9",
        "cursor": {
          "ref": "62ad848b-e8fb-424c-92af-09c969bcb1d7",
          "length": 152,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "845c7844-3996-4c29-9c78-cb37b393d61c"
        },
        "item": {
          "id": "e660c029-f69e-4cba-b35d-495dcc096cf9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ec85c563-f200-4791-a10d-e2f6489a9bf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "55dea83c-d1f1-4277-8617-5a7d9c0c5a61",
        "cursor": {
          "ref": "ae2f2cbd-26f8-4bda-8099-895f501379a4",
          "length": 152,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9ef2761e-d76a-4b77-bd15-f14c486bd30e"
        },
        "item": {
          "id": "55dea83c-d1f1-4277-8617-5a7d9c0c5a61",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d3717c59-4de1-4682-ab6a-f32b31f007bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "f5eadd78-8356-40b7-8a35-2c731b2484ea",
        "cursor": {
          "ref": "bdc4176f-3ee3-49ee-9f2d-0466d59f6152",
          "length": 152,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "71175049-26e4-4058-b611-e1af40bc5e51"
        },
        "item": {
          "id": "f5eadd78-8356-40b7-8a35-2c731b2484ea",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b63af8fe-3c74-4308-b779-864c4e9bc33f",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "1f46a506-bb7e-4857-baa4-8efc0dea6ed8",
        "cursor": {
          "ref": "28c950f9-d7c7-4fcc-9378-2252b906e507",
          "length": 152,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4c92d6ac-2a9b-443d-908a-9e334892f0c5"
        },
        "item": {
          "id": "1f46a506-bb7e-4857-baa4-8efc0dea6ed8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4f8ce71d-a45a-4bf9-8571-bfe4951d3bcc",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "d24952db-881c-4083-bd1b-243e97d519da",
        "cursor": {
          "ref": "709968d1-9bfd-46d9-b969-d4a2820c1b8f",
          "length": 152,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "66888842-9cd8-4980-aada-6644af8cbb76"
        },
        "item": {
          "id": "d24952db-881c-4083-bd1b-243e97d519da",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "210a762a-9dcb-4be4-b8c1-94a195118923",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "d4c1169e-0bd7-4228-91df-5c4175ad53ae",
        "cursor": {
          "ref": "234f10ce-1e18-4f83-aed5-3b1bd20a2967",
          "length": 152,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "925ea0cf-d443-430b-9d6f-1e67e386dfd9"
        },
        "item": {
          "id": "d4c1169e-0bd7-4228-91df-5c4175ad53ae",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "594c0054-d34e-4ef1-bdb8-7ad7ebab0b96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "db39f59e-79b5-47ac-b095-79317affec0f",
        "cursor": {
          "ref": "5ad10828-c86a-4abd-9fa8-3fdc5ba4ecc8",
          "length": 152,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a333630c-7f44-475e-bf44-1ddaf3b2024d"
        },
        "item": {
          "id": "db39f59e-79b5-47ac-b095-79317affec0f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1b8dc9bb-2b19-49e5-bd78-d813ddb31e59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "37cb5978-0ac7-4061-a400-d055d2489763",
        "cursor": {
          "ref": "a3442cde-1d45-4149-bbfd-bfd569613799",
          "length": 152,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a13767eb-71e9-4b4c-aa16-ef7287d7440c"
        },
        "item": {
          "id": "37cb5978-0ac7-4061-a400-d055d2489763",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "40a80cc4-d705-451f-9266-9c28758002be",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e4173889-683e-4fdb-82d7-1ed0dc7bb3d4",
        "cursor": {
          "ref": "6dcb736a-a87a-454a-b94c-fc9ec012c94e",
          "length": 152,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "388de214-849f-412d-ab2a-0a5067a4e78e"
        },
        "item": {
          "id": "e4173889-683e-4fdb-82d7-1ed0dc7bb3d4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "faa5ff81-23ea-4faa-8e17-4a02b81a8760",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "8c6a70df-3639-47bb-822f-4981661e05c5",
        "cursor": {
          "ref": "011fe75f-767b-40b8-b023-b9c5e25e0be4",
          "length": 152,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "05101ae8-3331-4e91-9e3d-a6af402ea7d4"
        },
        "item": {
          "id": "8c6a70df-3639-47bb-822f-4981661e05c5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a8fd570f-b20f-42bb-bc7c-de8705398b75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "f6515852-249c-48f0-9e64-b277b98c8d27",
        "cursor": {
          "ref": "168edab2-d779-41eb-a2ad-58af5e9a1226",
          "length": 152,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4bc7bf41-8d70-49b9-9514-b4696b5cc9ff"
        },
        "item": {
          "id": "f6515852-249c-48f0-9e64-b277b98c8d27",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3321b82b-8ff3-453d-a139-ab24c254eaa1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "39fbc204-86b7-437a-a227-94b1dbe5a87b",
        "cursor": {
          "ref": "51ef9492-64a7-4f38-ab1a-f2f28d804858",
          "length": 152,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0b373642-14ba-4379-9ce5-632dc2f35184"
        },
        "item": {
          "id": "39fbc204-86b7-437a-a227-94b1dbe5a87b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e62eb5ef-fbde-4657-b905-47a52db3ab95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "65545249-5ead-43e5-ac8f-b6eb0d09016e",
        "cursor": {
          "ref": "ba876089-ceee-4577-880a-09d0b4849ac6",
          "length": 152,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9e19f61d-f6fe-4394-9ff2-852f0193acf2"
        },
        "item": {
          "id": "65545249-5ead-43e5-ac8f-b6eb0d09016e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "27de5f5d-efb9-4503-bf2a-8e315f8b4a08",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "d0c84dcd-930a-4c7a-93e3-9801785113c0",
        "cursor": {
          "ref": "5cdc377e-6a51-4519-b8a3-93f090fb8e6e",
          "length": 152,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3a6a28c3-aa9c-4848-a173-7c6d8253c321"
        },
        "item": {
          "id": "d0c84dcd-930a-4c7a-93e3-9801785113c0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "44d9d616-37fb-4b45-822c-5c8382399891",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "ed5678e6-a74a-496e-9779-71fea49a83a1",
        "cursor": {
          "ref": "6622a845-0275-4955-9a91-f3a1d24653f7",
          "length": 152,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7df809fc-1fdb-4471-b848-6292dbc8a0f8"
        },
        "item": {
          "id": "ed5678e6-a74a-496e-9779-71fea49a83a1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "dff8fc80-dfb9-4732-89e8-8928004da37f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "ed78d001-349e-4a4a-b3a4-f8a76e7beb7e",
        "cursor": {
          "ref": "2cc544e0-5ed6-4c1f-8a25-2e379ef0fc03",
          "length": 152,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ae8337f9-2481-4b72-a8ec-627d4fb12db0"
        },
        "item": {
          "id": "ed78d001-349e-4a4a-b3a4-f8a76e7beb7e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c0b74e2c-7ed4-4ed2-bf05-5dc7ebe275d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "1351b868-2ebe-4a5a-b398-6c9f9b366e41",
        "cursor": {
          "ref": "0f1d6bac-8fac-4b05-924e-7c6b43321f0f",
          "length": 152,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ca8282b8-c6e7-496e-bc17-bb34acc21f87"
        },
        "item": {
          "id": "1351b868-2ebe-4a5a-b398-6c9f9b366e41",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "194a6ef4-1d9f-4636-be05-c04b227cfea0",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "bc4c66ea-2622-4811-aae0-d79c9bd86fca",
        "cursor": {
          "ref": "ff971e4d-4f96-4ebc-9193-2dc82820d755",
          "length": 152,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "299d6da5-602c-4f8e-84bb-1b43e32e270e"
        },
        "item": {
          "id": "bc4c66ea-2622-4811-aae0-d79c9bd86fca",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "055a3686-0ac2-40b6-8732-625f742e4ee1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "bc4c66ea-2622-4811-aae0-d79c9bd86fca",
        "cursor": {
          "ref": "ff971e4d-4f96-4ebc-9193-2dc82820d755",
          "length": 152,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "299d6da5-602c-4f8e-84bb-1b43e32e270e"
        },
        "item": {
          "id": "bc4c66ea-2622-4811-aae0-d79c9bd86fca",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "055a3686-0ac2-40b6-8732-625f742e4ee1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "1a48ad42-a2a6-49ab-97f8-f6ffa46ab094",
        "cursor": {
          "ref": "4469d346-ea55-4e82-a94b-baee7bee50ef",
          "length": 152,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "23b4214f-4d9e-415d-a365-969d72a826ce"
        },
        "item": {
          "id": "1a48ad42-a2a6-49ab-97f8-f6ffa46ab094",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "322d0c84-33a9-4e2a-8a31-07e898b21e2c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "5dc3e467-ff57-4c80-88bf-3af6f775ce18",
        "cursor": {
          "ref": "77b3a887-2a83-4bcb-b129-cce6b3d818a2",
          "length": 152,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2fc08248-b16a-4736-a513-e44592963783"
        },
        "item": {
          "id": "5dc3e467-ff57-4c80-88bf-3af6f775ce18",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "73bf513f-e955-45e9-9daa-14c4326f78ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "5dc3e467-ff57-4c80-88bf-3af6f775ce18",
        "cursor": {
          "ref": "77b3a887-2a83-4bcb-b129-cce6b3d818a2",
          "length": 152,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2fc08248-b16a-4736-a513-e44592963783"
        },
        "item": {
          "id": "5dc3e467-ff57-4c80-88bf-3af6f775ce18",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "73bf513f-e955-45e9-9daa-14c4326f78ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "810beb3f-e0ea-4ff0-948b-5823b9754405",
        "cursor": {
          "ref": "f7e27017-785f-431f-ad29-533954eebbb6",
          "length": 152,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "926a9d6b-3d62-41f3-b32c-929d7b91b974"
        },
        "item": {
          "id": "810beb3f-e0ea-4ff0-948b-5823b9754405",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f9018da8-5fc4-4b32-97db-93a83de2082e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "24ac4759-7b4b-4a67-8b37-2c05418d837f",
        "cursor": {
          "ref": "ed385921-08bf-406b-98fe-83e359caed29",
          "length": 152,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "82544963-a3ff-4e69-96ad-41e4a9c616a7"
        },
        "item": {
          "id": "24ac4759-7b4b-4a67-8b37-2c05418d837f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ff555800-41d7-4fa1-a968-f7a235bf5e63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "24ac4759-7b4b-4a67-8b37-2c05418d837f",
        "cursor": {
          "ref": "ed385921-08bf-406b-98fe-83e359caed29",
          "length": 152,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "82544963-a3ff-4e69-96ad-41e4a9c616a7"
        },
        "item": {
          "id": "24ac4759-7b4b-4a67-8b37-2c05418d837f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ff555800-41d7-4fa1-a968-f7a235bf5e63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "3819ab7e-3bd4-4aa1-9f33-a0535c57b3aa",
        "cursor": {
          "ref": "3c6be94e-5980-4928-a0e2-e69e71241d24",
          "length": 152,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "04906f81-7d2e-43cd-a963-22f82c98d7cc"
        },
        "item": {
          "id": "3819ab7e-3bd4-4aa1-9f33-a0535c57b3aa",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d6e71a3f-e83c-4ba7-8198-595c39dd7402",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      }
    ]
  }
}