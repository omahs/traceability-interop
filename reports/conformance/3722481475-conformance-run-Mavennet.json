{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "50b5821b-90de-46b0-8a68-c9eb31ba48b6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f89ad94f-cbf9-451a-bb34-8abad2f2b679",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "43904854-e89b-4f13-adb9-7d91db4296d3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b433f539-8858-4e4a-8579-ea003acafa45"
                }
              }
            ]
          },
          {
            "id": "4d927cde-df14-4784-98b4-7d40468f2356",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d388a867-f5bc-4827-970d-99e9340d56b2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0ce464ab-b099-4bf9-b8a4-36489dd8f106"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "210e07ea-a305-4d63-895a-b8b9c9e68802",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4da257f0-9caf-45da-a102-7e1b5a1fd1b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9c64dbaf-d096-416c-bbbe-ca061d92ba7c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb2f9ff8-8074-450a-91e5-a49affe599f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4e0c671-cb6a-4f65-9ddc-d16dc07b781c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ea29db51-3fe1-4a6b-acf6-d395bf8f796f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6467989-7d08-405a-82f4-6d67428ee033"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "075c659b-a1c9-4a5f-94c6-a46079ac7866",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "183141a5-4a9c-4529-8c5d-36e475238be9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33aa033c-e954-4ab1-94ae-48e777eee056",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "59e6c2c9-9fa3-48fa-a7db-028e76ad6f92"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48576e9e-dc46-409c-9bd9-0dcbf9ecc01a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d670c4af-ad4d-48f6-b9a4-25b140b3c36e"
            }
          }
        ]
      },
      {
        "id": "3f62dfeb-7d5e-418a-8f4a-150d5ff40ad3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1dcd2234-38d7-4cd0-a8bb-a7a7ffaeb106",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8e9c23e-218b-4d9c-9d5c-bbfb40dabeb0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "55546945-5f63-470c-90f8-f451eef0cfbe",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "926617a9-aa98-4b30-8900-b804b0173be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98d932d9-8145-48b5-a391-164162d2b641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9b9d08-b055-45d2-87f2-bda51ed6f84a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0916f843-ec53-4a40-aa71-675e145e0a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "413ae0e9-4485-46d2-8093-e33de46d473c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cd0e5c-9662-4f4f-b8ea-83a063a9d97f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c02b51-3103-4aa8-8c86-1cd1bfb5497c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70d8a4ab-c3c4-430c-9a21-3a1d7808fe4c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "296a4376-2733-4001-88c3-b31dae68e8ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "deeaf3e6-d3b0-41d0-9dec-37c3caad0fb9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73e3078-fe23-4f82-83e1-fdf6596b8463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "601270a9-e71a-4e23-884a-831abce42b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10433b0c-16d0-4f00-9d2a-fffebe3cdbd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4049d9-b2b2-41c2-b7ff-8c97618a1067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bb742c-6596-4b55-8ce5-1aa1ab810c0c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b875572-5e93-4365-b8c9-108b686cfc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aac427fc-a409-4e63-af04-48154f31f6aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27434e61-0a58-4e26-9257-f62cef43d996",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d3b09a94-f88f-493e-a9f9-3b98207a22a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "36e89b8d-744c-4141-b2f2-743155a9ecb4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc1c9b20-dd73-4b0b-96d7-3a43be38cc61",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0be3b865-1825-4230-9733-619ffa35534d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "813bacb7-25fe-4b83-8e89-2371b16f355f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca08b26a-613e-4400-b2ae-d18ee7623f17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b7c7da83-eb73-4b5b-b4f1-072250b12a4e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "146cc80d-fcc9-47fc-a98b-9e56f8dbdce1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24e633d7-6d0e-4ca2-9673-339d6b2a94b3"
            }
          }
        ]
      },
      {
        "id": "0b850a6f-f27a-42f1-a4f3-f9f05cd013fe",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "22471540-8198-4cd6-b7b3-577e106fa356",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23de0237-5483-4671-b318-d4e15a68c7ad",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3965a5d4-9b4d-40c0-a252-dbf943124c01",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c041791-cad3-48b8-a62f-7b6a4d7cd851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90cff35b-4642-4c79-8c8e-ba13406dc7d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6626980b-1968-4b1d-b892-0a805b8c6fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "768f61ce-8c3e-47e1-83af-9b3deee29ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00253e2-5220-40ce-8979-a6bd8b61683f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a768e138-c436-4a63-b8b5-54cc310e4f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3d2410-fb62-45d5-99c8-593f71c458f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9088cee1-31c0-4272-9032-e921678eef68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce30ccc1-4983-4849-b1bb-eac0cd795eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd553af-62eb-425b-9c36-1909d4775dc2",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6286dae0-6d61-4c74-a52c-05c8b1df145b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17ec05e-91a0-4e73-90d8-57634583faa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb62d00-47f8-4047-8bb0-d8770fa5ef8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbfe9501-82a8-4e05-bac1-5ddf8034ca8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3464d7-8c13-4d1a-906b-17963c6fd6fe",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8bb696-6ba8-4b0c-86ba-0e90bd1f8309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e65f4e-8245-45a9-ac45-aa86d88b1e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd7623c-b2cb-4448-bc28-085e1faa55d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7825405a-b8d5-488d-90be-41e967fe07fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89163355-6af3-4897-822f-308cc002688a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0f6f1d-daac-4764-8160-d2ae7097491c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a004fa-50a0-4b04-9aab-137fc33ada8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c11fd1b-61ae-4b27-be64-bfe1eb4a73bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53b4d870-ef17-4cd4-afb1-3c99557db48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01937a2e-daf1-4bda-b4ca-1e8de13e9a72",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e2c105-2719-464a-9cc0-28fb0e1a53d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d99c9d4-2e31-44db-bd69-a2f662e9ff94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b09a59-6585-420d-aaf4-3c52e3ebfc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "713f5157-61ec-43bf-a49c-f049018fecae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323221d5-691e-4d5d-8943-09b172356021",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f615c921-c92b-4ed3-ad20-e32e768194bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a1b37f-129b-4909-b7cc-6628a5e7579e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe839018-850a-440f-bb6b-fe0c9e59b9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1f28faf-75fe-45bd-8013-e4da25062df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f77a1a-97a5-4f4b-8f3a-087f2a5568ec",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b4a508-fa6a-4863-a019-27e12435cc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c41ab4-17e1-4e5f-a188-2a87a84f8cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c692f7-7a4d-4bc7-86ff-1ae47b5c62eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3aa520e-2cb7-4595-8e9e-289e9a1ab261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203e065b-1abb-4fea-ae9d-fde3194ba516",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a84e9b-16fc-4193-ab7e-2ef07ce7b823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5d3da7-e530-44bb-9238-b69abff63b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72920a62-7cfd-4f9f-a7d2-14ab8a2a41fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f89d508-0989-49e3-a68d-c2d2a3a1c24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49c0638-6d98-4b40-80b7-45c243a26f13",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80590813-1662-4c2c-93fb-d0e1325d11a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16683d7-1c0a-40c7-84ea-f1494085e1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb56658-6311-40e8-9a55-e0e11caec5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d0a9caf-5426-4998-af48-e2123dcc102e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795e7097-35d3-4cea-a59f-9420e708b616",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f01430f-ddf0-45fe-a315-027e92dd9048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50131d7-d1bc-4ba0-8514-a318b9433387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2627745-7acd-45b5-bfe4-98e9c74626c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41e69f49-4280-43a5-a0b8-f0d9863c6048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac5aded-8c70-4de0-90e4-ef3e01edd694",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83423e63-7fb9-4fb1-b4c6-060417c3a04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aae0a4a-ac02-48b6-85fa-3997ec45f76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6776fea-7539-4da2-a5f1-e87294f4a5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0beb512c-3568-49d2-be80-614c911331b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a687d56e-1893-42bb-9ffa-df2ec3770f65",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d43279f-103c-4e17-acc0-b6532a7d4ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb47136-607c-4379-870c-a180470ffa57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a18ea4-fb0c-4408-ade4-f5dacec5ff59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d94c087e-ca3c-4134-bd71-1e21f8d6012c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a088f122-c03a-4c45-b7f8-1114fd0e5af9",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d602588-5e60-44e5-828b-3854cc6050ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71017366-3de2-408b-b3ba-04df927a07ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c27d81-84a8-4fcd-8d5f-1550006e194d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "de508eb9-a2d7-4549-8616-b77fd572a9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db72b8d-39f1-4045-b45d-5f6afda4d861",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e7b991-2632-46ba-8b6f-f7d6308e9a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec837db-792b-4f02-8ec9-d07e794bcb6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dba7343-53ca-4f1e-8b51-f066c23723cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc9abeba-3482-40d5-b358-9952db3ede93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3fc162e-4227-4bd3-9eca-8bf17bdf8630",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad6a5fd-ec48-4e03-b2f1-1115ddec1f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90667b34-2e39-4778-a67f-e24299769714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ab3b65-2e45-45f0-91c5-5775b1fe46ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4c14b7c-8053-42f5-b9ec-72aa6b2ecae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6df4a45-513a-495b-b8a9-fe4f97b8bf90",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041378e2-8eac-4533-938b-7b8bc83141bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1210197f-3283-4684-aa64-c0a3c7d4e12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eaaceb6-059e-4fcf-9f44-19df9bf21692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da5029d6-064b-4aad-8b3f-fb4278ab82cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd2ad61-283a-4ee9-9c3a-d9a6e91947d9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade94a54-963e-4847-982b-3dce4e4a548b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ccc9b9-7d82-42e2-8257-ce0193cfea8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90aa410-9587-481b-a55e-804748383347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c750c56b-97fb-42c9-a016-d80503e67f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4157466-4c96-4ce7-8790-e6331f5b2434",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef82f6d-6834-475f-bb8a-19af4a51590b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c430c9fa-b5be-4fec-94c2-d8a3dc6c9fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d0caab-e017-4522-8254-33e6e4514280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdd6dc1d-4a45-472e-b0f8-d8e1eb1d0886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dd66ba-f7e1-496f-9f6a-62c2f01bae61",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4dd280-08cd-4fa5-9af2-95f4e74ee43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f3f8ce-cdc0-41c0-b808-67c194103837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa736cb-fc61-44be-80c0-b3ef55784707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2e981b-97c8-4d99-94c6-05013d0f07b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef61536-f874-41fb-867a-a2163ef00208",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a335fd0f-9caa-49b0-a227-4de95f60512f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a3a794-2049-46f5-bbe7-40659f0fade6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffc52ae-fb39-47aa-8b77-b08a9e7f961e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90f13bfa-da10-495e-b03e-eaca4f46b5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d352562-4ae8-4151-a6cf-bcc307db38db",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84f704f-72e3-4101-b404-570a5b97726b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c69a08-a2b2-4b55-bcbd-96df95bf0f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb51877-ba87-4f7b-9968-9901961312eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44ba8956-8d28-469c-baf2-9a7d3930397d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3e2ab9-093d-4ab7-9a38-55a97ef6fbe6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd93fca-3e84-4b0f-a69b-254b0dea995a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee7d029-d6fb-4250-a5a4-565f5c560f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8f6427-2130-4508-912b-a60ff7d52815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "822b1745-47f2-4b7f-9e59-9e15c1e14dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86007f54-1af0-456d-80fe-1b1e404f87a5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0da92cc-5267-4fee-be89-6286eef8debe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad412b2e-47e4-4b8b-b7e2-814f1a1b282e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6d3215-a64a-4491-9f32-ad70685b3643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "348fbce2-77d7-4854-9eaa-d8fdec2bfbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800e1598-eff7-4991-9c03-04fa66072490",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b5a900-ce8f-47f7-bd6d-1b2b3facb57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1a1020-4a56-44bc-9da3-d069262e59f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d6106c-e3ab-46d1-a4a0-1ef0e1429f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0ec69f-e19b-477a-8ba5-bfc957396135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c04bd8f-eb3f-4ff4-9520-9681f3d8dcbf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2bad2d-7bac-4384-972c-3a21d9ba70e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8299a77-ad21-4776-93b3-94792dcecc3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca29c07f-8d33-4b11-9e56-828a99043c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b15813-ef89-4aa8-8f74-e0403f10760c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be06874-8efe-42e1-b013-1e030120b5b9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c79da43-aa2b-4a0e-802d-0d74f4224abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d21904c-e7ff-4c5e-977f-7fa2ec2218be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51c4ea7-557a-460d-a843-ff6722c926bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc8822a-bb57-4a30-b038-bed8d9b16c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2407090-0785-4063-b356-46591c4e6d8a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f2f8fc-7995-4e55-a671-a37444430877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb283ae-006c-4d7e-bd07-d38050779cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6849be-734b-421d-851e-8dcd44c04d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c922d4d-d0a9-4e93-b88a-8bc8da34d712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d131f5-9979-4440-9143-5bb6ac388a07",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77acc71b-1500-40d0-9874-638afc161987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3aa67ff-43df-4505-bd97-ba0393d360a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4b6598-7955-4b2c-b4c0-252058394780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70b0b283-7fa9-42b7-954c-f2f7cef719e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676d3174-d721-4b5c-a3bb-4dd496f52a9d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030c5057-2798-4b4f-8cec-438d020259c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9979de6e-deb5-4af1-b972-48ed59ff9c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b985a5f8-262a-41d9-9761-5f96ecce758c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "df85d9dc-a5cc-4b83-8a9b-52718ec7e83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3756b088-4837-46cf-a301-efb3e306e4f3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95597c3a-e15c-4b9e-a089-bf99bd7a3a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431a8b17-7e63-4d58-9e2f-d6febec7cf4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483c440a-1b92-4cce-842e-ba7b4b3a4101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc707ef-bc75-4c96-bda5-c5e537f86e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3a7635-e9a1-4758-a221-cd69ce14ab77",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbb4f4b-d796-470d-b7a6-c938512e3d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "702c67e9-e74f-4c86-bb7c-7ff291ab9318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400c5c9b-c1ab-4872-a068-e8a706001d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff023b40-fb98-43d2-ac23-adfc161d9666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07cc71f5-b589-4e37-8517-9d3380a71694",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34dc605-451f-45ac-8d43-fb1d96d1ed0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a26087-c819-44d5-9a6a-8da6d4b64511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f50f4f4-f5fe-44d9-9274-9a55384d128c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f47b55e2-fbf4-45ad-9e56-380f039bda83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca744906-cada-428a-a340-2716eee721ae",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19772049-fa4d-4fec-b0c2-6162e72d6b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd74040b-b241-4cd0-8a28-28aed8f36613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa63c6eb-8cea-4a0e-ae19-e6a4e6552146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fbb3882-3306-4296-905f-189db305f9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02efbb4-6509-4a07-9e08-f8c3b7e3064b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c4f75f-e8f3-4215-919e-6adcf06fdc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6eaa3bf-c370-4ba7-aaae-a96385d6f9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52111e4-68f7-45d4-81a1-e25d78a07c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30752242-012f-438f-9005-9512ea29d2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2832ef1-42a6-45db-b20b-a651014e169b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ec37ed-d050-4837-8af0-ca91215d8bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475e1cf2-1fd2-49ef-a304-eff23853b394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19f930e-cb55-41e2-b1da-80b2c0fd6f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ceadcf4-2e46-4554-bd88-afffc0e616d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b86321-410f-4083-a836-bb0ebf73b89d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4ec2bd-1ad1-4264-8a8e-f32d58b80794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8e971d-0a6b-436a-a320-60df53924978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a287fec-2fb6-49a1-a48e-e2b0ac8dc11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "68d4f668-1a01-4c29-827e-4394b1af7e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4bc89b-3c9f-4473-b6df-9927e491045d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43160bac-0f82-459f-a33e-601e870efa77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8572145-3910-4f90-b3bf-06031810af79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e33629-8363-41df-aaac-2c4a4bc45d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67098032-2db2-4da8-8da9-e41bd8a74e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45aee319-40fd-4999-b6eb-19c9a533c24b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f9df7b-85d5-4eef-93b2-a4dee4ebd478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4abdcf-8648-47fd-b9ea-ddf8f2f278fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3a7fb2-f093-46d1-95dc-24e5d4643afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2202ad3d-9177-4c95-a16e-e71795febb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03672e6-de30-4890-9984-f524dbe00ec9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87d3633-4144-41b4-a8e9-24550748e8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497a4cc9-c2c2-4de7-8512-0673857b6baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2e7f60-dff9-4e3f-a5cd-a5f993397735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ccfe476-5b24-4e75-8c62-67b2d4c19d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229d3eaa-ebf6-4211-9d87-63ff2bc220b6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cee86f-4e79-4869-819f-67087d68b838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7471810-250e-49ed-a047-94d802c285d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e12f2e-d832-41a0-9c26-9ff5c6c909e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "46a755c8-5db2-4f7a-a706-438c02a5808d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7575be5c-485d-4972-96e1-79d6e0cb491e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f07712-b00f-4f87-aaae-89f036b36511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a91566-ea93-4719-a00a-2e2d7cf6d498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28fcb99-da63-425a-8f2d-d9351734034e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "87d9f9f1-3bf2-418d-9603-8e867fd0bc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1aab83-de88-4d7b-a06b-aaafddaf8cd2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8dba95-b39d-4a00-9feb-46ded050acd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc595530-51b8-47ec-86a2-dbfba74e27a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e22aafd-2f06-4476-b50a-9d3c06941a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0716daa9-dccd-4c51-956c-bedbef95f58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108e4b67-1bce-495f-ba22-4b233e16db15",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abe1204-ab83-4890-bff2-646bb6d2abcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6aef6f-72e1-43e3-ab26-e04489e9b575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f6f733-80b3-4165-b146-7d88ce2c7cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "83429e15-2b1c-4843-9600-68a6a7dd3774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee9f1f0-af26-430b-ab17-dc2aeff67050",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619dfdf2-3063-448f-a41a-fd7d2424e4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c804f3-c013-474a-a719-a3b534662698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41802f11-633f-4417-b072-a2880b9080aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4953861-276c-46a5-8b50-50e86730705f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20838cc-aa05-44a9-8da2-a207be638a29",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445beb67-459b-4fba-9f5b-d4403ab780d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2de579b-ea3d-4af2-a3b0-dbb0893ec455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a9fbe6-9bfc-4e3f-987d-5afe2adff052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "13e6b3ba-beeb-4637-9d58-7765abd33f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb2794f-783e-4842-bb2c-a922b476ef12",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210bd800-9a6e-4426-9a66-cfc4760eb148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd2a19b-10f9-463f-9da0-6b6f2b56cef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f0133b-34a3-4ab3-b0ee-c3cc1fdd2613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe3b122-e90e-4b13-b3d4-24dee760f51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28778cf5-8617-489b-9003-876a4e25caa9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64df149f-ef21-45d3-a92f-0284f910f560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd16bc90-d577-4078-a0b2-cf6a036eccb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d4caa5-a972-4792-af89-7e87f25113d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "930c83b1-f597-41f8-b163-26e79c112562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bf8642-709b-497d-9a70-bbc76a333e2c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f059ddcc-46c2-4de7-99a0-f2d3efc780e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb79eda9-ddea-4cb5-915e-8fb9f2db3d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ba9c3f-f92e-42d9-9270-1afc75214ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f6a07e-52c2-4d98-88f5-a9fca5f90d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3508dee-95af-4186-8664-d87ba688576d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13eafd4d-abac-411e-b89d-073513c078cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa250dc-484f-4367-a245-316ca471d6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7ac429-84c8-4251-9367-fe1450d36773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a90ae093-35a1-4cf1-89b1-ed064584de93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7635021-d24c-4065-9614-3310b4f2ee33",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c0fe8f-28d5-4c12-9e57-fe1b719fe582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31572235-f343-4853-8016-46dc004bee50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaff4f0b-deb0-4d80-ade4-0c895920db97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0bcfdf-8f7a-403b-a607-35cb39a2634f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175723cb-5d7d-4e7d-a887-191d3f314992",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa1bbb4-f38a-45a0-9b83-77916c687729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b27fb881-50d5-4c8e-9472-c46d6181471c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01375ec7-2d86-492a-a039-b16ab97e46b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f10ec59e-9158-4ef0-9b40-1b8d2747627c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d50c61f-e5eb-4baf-b804-a7792ea0959e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442f5376-345d-493f-af6a-89cd5dd9d2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6271323-3a1a-481d-8ef1-718fb382289d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b42d94-728d-42dd-aedc-3bae6ef46e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "071814e5-6361-4e58-b36d-aacb95e81714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dccdb069-416e-4403-a35f-e901ee2225de",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe44a349-9a20-47ed-bbfc-4bc9463d8566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be496c3b-13d5-473c-97f6-32f34b6bb907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb5f69c-1251-4a74-8fb0-7d4c56200a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2fd6c5-b667-4c88-8eeb-93cd6f337485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4161d7-a3d6-4e7f-9d99-c0ea0cb78ec0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b12217b-83f0-4cd7-9e0c-3df5f0023975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5141199-1fb2-4073-b809-00a9a342426d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4f8c6b-0aae-4454-8aeb-2f8b01f4f215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c248a228-7854-40ba-b7c2-964704d028cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b3799d-6665-4cf9-af7d-7ba5978b7160",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0811bf5e-97a7-4011-a00c-c4555fe792cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa71641f-7977-466d-aad7-97119d92e55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06afb9a4-7bae-4ff1-b195-10d06bc69c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b52fcf4d-1f80-449b-b0ef-14c2d51ec80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54ecbbb-3d6f-45ae-aa22-0590468efdbb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bff6e3-abd6-4812-8150-031350b5e8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4253937d-b243-442f-9660-fcc9a8add985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9524d6-ca51-4a99-994e-7c999d4d16f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12e41ff3-4648-4f12-bb27-b827f5f6cd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b29785-a735-4363-9465-2ec3ffb26224",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e434c3b-524d-49d4-a1ae-fe956da9c76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935059d3-64c1-43a9-adbb-665a88d29d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19aa8d4-ad32-453b-89b5-f5ac0b74568a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "546c6c4a-29f1-4063-999f-8a2d40d3e4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d680b1b-0f72-4ad4-a15a-e0f896a135d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84674e3f-3494-460c-827c-6d55ba905839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec79736-252d-4228-9512-05575dcbdbb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266455ac-6360-47ad-ac58-ea78bc1bf3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "22f8cc37-f1b6-4ae4-ba7a-20b955070311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784614ca-40d6-4a17-89ef-9e511b146638",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5faf76-b312-4d43-95fd-0cfe23321d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1226526-86e7-467b-9f3f-dfde871f86dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2a1f63-33d6-4eed-8fb3-0dda00dc7ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce8b9cc-7ec5-4876-a81b-673b8c70e990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966b67e7-c279-4c44-b374-f18e2f7b95dd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107284cf-7043-4ff5-99c5-cce3374cf6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df826fd-ba62-4a3c-8a07-f97d51135b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8853b9-3252-4902-b960-3b0a1f519f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "517117ab-1ffc-4520-b1fd-a24d998daf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd595c36-43f4-4f76-9a37-5f74a02b45d4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5befde9-4e61-4ae3-9df4-ab8387d87eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0839dd1-57b1-4955-9a67-d13f2fc280e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c26caf-9803-4af1-b0d7-912ead4da4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "59653e9a-8f49-4f17-9e1b-bab8099303fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd07bca8-5117-4e1f-b939-06568c94a4d4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2b0c96-00f2-41e4-baa0-9e764dbb0d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590ec2de-6e99-44cf-9480-a134f2b3a995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88c2384-a127-401c-a0b8-da07a0c8aa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2bd2b59-7fe3-4f1b-ae2b-a0c2fd434e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b47abed-76b6-4771-b716-34d9f659363d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bb70c0-9616-4853-91d5-6b3588dc2009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea217096-3740-4361-8ebc-73102a40ddc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68334e15-47a1-4b48-b178-d190f42e0165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b82308-439b-42b8-8d0c-ca0a002e6d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64247f2-08a3-4773-b2df-9b381cd3537d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7f7a7c-c49a-40a2-99f2-3bfb4c8fc590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeab5e69-5783-4ec2-a125-416d43042c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a527e3-1767-4312-9d46-02fd9a1755f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f331b7-4cae-4c2d-862a-42d559f8f5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b725f253-7d5f-4219-96f0-d3dfb6bc42bd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99de9f18-c91a-495b-bd09-d25625a54494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3349cb5-64f5-49da-9576-475eb6834511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ded959d-c4ae-48de-a829-5139c87ad68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "162042c5-c47f-4621-888e-ddd1e2152233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a21591-b5b2-4b5d-8eb5-812bae638559",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3986e5c3-d10e-4711-9b64-9994be53b441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0f91c7-5625-4061-b929-4601773476c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870f11e5-be98-4780-9b99-b679c6d19a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8869bb-821d-4223-b76e-44588bb32cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c180c8a-9879-4806-988f-5f61cd743683",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7415dfb5-f57a-451c-9879-39639338662e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5983532b-8899-4a94-81b8-17449a3cdf91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d84e4e4-d41f-4100-9192-272d26508e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b5f4ab6-71a5-4e03-b1d8-12177970934e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d40aff-0861-428f-943c-6192af1ea7d8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c26013e-c696-43db-b5fb-5c3c87ee1fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adbe6907-1226-4037-bc4c-775695c74373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be451321-03fe-4721-ad53-9ee66e2d0be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "313cea03-e43a-4dc6-9e61-bf6223ffeb30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43bf0012-40f8-4d1a-9120-7770d217296f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f55197-d802-47bd-83d3-f4dc6af8d93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030ff213-dd5f-494c-8987-2dc4ec73ebb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5202b56-a9c2-4b1d-b235-12b15db7b895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "76e8306a-76ec-4394-8ec2-256fb8c090fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9aa7360-d9cb-4708-887e-5005e8a91743",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8d5e32-6046-4891-a20f-228397c2dcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95575944-672c-4562-b9bc-2b420be3a61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af15a8a3-edaa-4b26-83ee-6872addd352c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b7d0a3-869d-4541-9bc4-f3614da60dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946b1332-1a8f-4e44-9639-7b7cc1f42c59",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d5dda5-3117-442d-b195-40024768b3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0b35d8-334b-4342-82af-77b81a421f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6545f4-dd4c-4891-b909-772aa72563e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "795f3981-f41f-489b-9a26-674cd16c6112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c269e3-6168-42ae-a6a9-e046c4c6340d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a672c697-41ed-4bbe-b9a2-ec2b64540827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe220c9-33f8-486e-8e02-08ebcd7fb4f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ec1dce-1b65-45b4-ab66-b5e969fc4f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "baa159fa-3212-4789-b69d-362da647f17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23bf895-34a9-4fdd-9592-8976c3283557",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e505c47-bfe7-441b-bb59-64e1f70afe90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670ecdfd-8b2b-47cb-bd61-3b218679c449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ea3762-f8f3-4979-b2ae-e52ed7295058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd6b378e-13ea-4dba-a052-4f5d94357efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034b30fc-2cf2-4040-89cf-51005dac5449",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f277b005-5c5c-4a67-9ce7-6c33a7b45878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0eaa18-bc19-406e-92aa-66de9d065f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a60e1c-e06c-482a-be28-95549cee3298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59866029-ac73-43c8-b283-0599b419bf56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24941483-6db3-4f23-9bb6-dda5f7e6fd70",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c285469d-c042-4646-a96b-f19b1e52c943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6382c49c-2618-4446-8128-0a388854fd36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914301c8-25b7-4f79-9c43-0fa8f42cd61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a48a2295-9f16-48f0-a9a5-56a7102c6e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9728ca-31e8-415f-9bf3-d98e63955d6c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fa0b3a-7faf-406e-b7dd-a137b1a73333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02540e2-5694-401b-a84a-7fb005536f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9e282f-a7db-4447-a50a-57dc5c49a23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd04bb0-cafb-4909-8f6f-e95dccaa9874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25f5a40-f152-4aef-812e-7830a3d8ff1c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18233a1-0c4b-4fe8-bd6a-1e148286bb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df729612-e82b-4b8c-b12b-55f7b2da0d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e30b341-fad4-480b-bd48-b0b794c313f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f48a6691-c02d-4005-a91a-774fb8689b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed2a7b0-5b7e-46fe-9748-e9a1ca5d8bae",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094ed8b9-38e7-4b82-ba4e-f347cc0d0491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b701a7-4d6b-4954-9f35-e869875e9551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99612fc-56cf-495e-9f73-fa3a1af14f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c90d4481-6d69-409e-a5a8-9970972e36dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afb1e71-e7b4-4dad-b9a1-1ded7e2fde96",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e105c59-abb3-4370-8520-0f1585cd240b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f2f7c1-426e-4756-9fae-bf2f6e0133d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3f1ba0-44dc-4ee8-8cdf-097b2a3820c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af3df512-1ce3-4e0f-b994-d545c9302f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae949aef-dd38-42c1-8ad3-083b321e5b1a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "868d6287-2901-4676-98b9-7dcc7dc2242d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d48a3c-dbc0-4b9c-9786-83080d8d1c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcaf17b-80c0-42fe-b084-7d6444be7b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e34dae80-1c34-4de3-965b-f379c68b8a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7183281d-3372-4a1a-82be-729399af85bd",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edfa13d-8577-4b18-b81d-1bc59e5eea7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45c7f16-d273-4a4b-a19f-954fba695c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751a436c-1202-412b-a9d2-fe86a79512a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "97d3627a-6af3-4f40-b844-7e99868afe56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc29a18-8178-4f44-81d5-42a995c8cc2b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8aafbc2-7026-44c9-866e-f94588de05b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234c61ce-81c8-4ad9-9a3b-a4bea273ad4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9686760b-16de-422a-a788-2ec461f2c63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "43d441e3-d021-4127-bb6b-1385ddfdc910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f72a32-a5d8-43e7-886d-e0d428c52089",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a822a11f-8df6-4a5e-ac1e-d75e08f94d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50432f7e-6a0c-4328-943a-a2244d244122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe7d728-6de0-4f89-a4b9-e4ee7ca8bb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3760f7-c066-444d-88ee-c12e7043f8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63ede82-781e-4232-bf1f-bee1dd2081f3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678a429e-047c-4a6b-a101-c0960a2bc336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df88611a-6a59-4387-a158-983740f2532c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1998c11-0f7d-4aff-ae92-9ecd82579915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d601e52f-edd0-4fd3-92ab-a13007cfef5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c781fac-f9ba-4366-b12e-9e144e39e310",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d7fb68-9185-4bdc-9fcd-127cc912c4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2aed621-e91e-4755-af58-42f37b4ff231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb89c0ab-24ee-42bd-8d24-656a1f193ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fde0e49f-ca54-45a7-a7b0-6425f4fce58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3eef914-49c7-4d2f-80d1-0f542be6d23d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7474328a-f74f-45c0-a74f-2d4675542c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e84a6a7-1a79-4251-9d7c-20d572ed43b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f458cc30-c6dd-488e-ab81-077d15eb8c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6529b0e8-71ef-4c26-9495-e0d564cca1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa89ceb-f1e0-4097-84cf-17f7a375c83c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d876f9-7d9d-4d96-8f50-68390796ff94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ffff18-a196-4342-8183-88700feaf2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad7cce4-bc8e-445d-8412-dfb35c038216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9bbb527-bf3c-49f8-86da-2ab4e5e5ed48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ea1cb1-f66b-4349-b1cf-de061c289c46",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ce8082-96bd-40a0-af52-1de386313d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944cd0c5-9b85-432a-9591-4e36b0af75dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1663f80-fc49-4d90-a5c9-1df08ef6b58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa68582a-1414-4a29-80b4-3a3b2b830a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1454e682-ca9e-4846-a38c-924364720d07",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1b0459-7cf1-4aab-adf2-f12861229f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f9891e-1f86-4db4-87f5-7202e5fb19f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cd0bc9-baaf-47ca-bf17-e252d39971c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d12098-9eaa-4e5c-b87c-47052240b447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546745b9-e793-41a3-a28c-6e81f3f21d84",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91b57e8-7511-492e-bee1-b7a3bc27c076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2dc31fc-8324-4433-83e1-01b21095b7c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ad9d3d-d952-4b54-88e6-92433c89cc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a213ccf-f3a0-41cb-937f-5764bec79e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd9c703-0c11-4c31-aaba-50646806f068",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e6b073-fe03-42c2-b414-4a6d7a6eac47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80279813-e25c-4734-9295-659d491a4840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8c7104-a626-4057-8242-1e4a369206a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5549ea-1ed8-4c43-9bb2-80c4a86c2f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4910d47f-e120-4f28-8fdb-6bf6007676a0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c14ebfa-da76-4270-b326-23eec76b8720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a07ca1e-a77a-4069-8409-14eb269463d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955c39d4-cf4c-4002-8e2e-55510a978e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd4bce5c-d152-4299-8ee7-3ad4e5cb6e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96240c2a-70ee-430f-989a-af534f2e1495",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18afc24-ab8d-486e-8c3b-b6ce0800d1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fe572bff-d398-487c-9f8e-cadb69cf7620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be221e41-aec1-47fe-b906-3f0242685111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "395e37cd-5221-4466-94b0-5f734c3552bb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "140c5b04-22cd-48d9-b307-e2cf5e0da546",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ce3c018-5ef1-4d34-93df-7611ceaa814f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6236397-a732-4686-aa0a-e83e18e177c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eacc7ef9-a296-49da-a9f1-994e883ef332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427acaae-5242-4dad-87c0-26c993e50548",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3dc936e8-6987-429e-a646-23b248fa34d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d797396-3118-4c34-9b33-70b82ca19d12",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2d4db6-c628-4ce4-9cea-6eebf5efde05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7eb7e2dd-0066-4e6a-b3e6-f465e6f61c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c26cda-bd43-4c6d-9208-aa18e31e1559",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d8d482d9-1cda-473e-8686-f76b29bcaf16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "052250d7-5372-4842-b199-1f2c49402226",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9f47631-2e2d-4b55-9eac-60f3ed785e14"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4edc86b1-4060-49fc-ba76-5ff56fc38482",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a029792-25f9-409a-8657-e3d16aee328b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "310cd0bb-9414-441b-9912-241562a72cc8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf5e1c8c-c6c5-4481-bae2-e1d4fc3a7382"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dbfa6901-f4f4-4210-a769-561c0bd9a2f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f19834cc-bf2a-4fbf-8aff-3b31f8caea4f"
                }
              }
            ]
          },
          {
            "id": "09f69cc1-9fe3-4a2b-8da3-62a7b8a91108",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d924a780-affc-4077-809d-985246822b22",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a9408d4-f690-49f8-b6ec-c2d5f75e830c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e0d7c2b-b059-4ffc-ab0b-30b2d523ccdc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76b6bf7f-3833-4a7d-b108-e4e8fc55be69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5026d0de-61c7-4ece-a7ee-37c89a7407b1"
                    }
                  }
                ]
              },
              {
                "id": "b6418064-55ef-450a-b1d5-eba6c245a575",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1af9385b-2462-43bd-9790-8a3f92cb79bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa08328c-fd55-4043-92e2-163d7005969e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4348c238-823a-467b-afa0-22e29ddf7944",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b6a5b2f9-9d2f-4993-a285-7cad1d016c63"
                    }
                  }
                ]
              },
              {
                "id": "0fe5dfa8-02f2-46b0-b239-6cdc4b9c8ab5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f114281f-7a53-4581-93b0-73c82a98d29f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c548721a-b5c9-444c-a020-7b01e808ed1e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89ae0b6e-7414-4d83-a3f5-b4c92296a5c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9c9f7293-856c-4fb7-9c52-9f6e29532740"
                    }
                  }
                ]
              },
              {
                "id": "5c7ec358-292e-4232-9ef7-a81d89958803",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "414e3d9e-3a7c-47b5-9319-b3161358996c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0701021e-e106-49a3-a0a5-aa44d065fffb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9ad5dba-716d-4f00-84c3-5826aebe5931",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c8e6810d-61be-4fde-98f2-ffacc3bd32f9"
                    }
                  }
                ]
              },
              {
                "id": "1d80498e-db96-4ebc-bf4f-f86a08baf0f2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79021e70-d111-4227-903c-ac05fe345133",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b562432c-d365-4e75-aee4-e8be07fcd0c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76f21dc1-2f47-4e88-ace1-018adc19bbe5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8d1c81e2-be29-4ee9-b8de-2057a13094db"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70658403-0284-4f26-93ee-84636e781e6b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "48c2fde8-a753-4f4d-a0f9-74a80e9d99b7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d8bb93f-5093-40c3-a126-2b4eac9b5bd2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b0dc29ab-2127-43bf-8e08-855de0f127db"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33270659-aace-450d-904c-b4ab04e76fa0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d02f0f10-abf7-46c6-9d95-858a9db6734b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9cf8110-2ba1-450f-ad9e-af49dcbba2f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c416ee5-70c7-4cad-873f-56bbdc7e5e65"
            }
          }
        ]
      },
      {
        "id": "ef599801-6d58-4136-b74f-46cdc8affd0f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8391d951-1a52-45fa-b458-d89ddbf1ea7a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb3d7f0c-0c34-4857-b1a9-ba594a810ca6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "504d8f9a-311d-41c4-9b96-13d9f72aab94",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d377f7-6b97-415f-8b08-1b47100b81da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a59e012-e818-481f-a942-83c95b64cef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5757df8-6291-4dae-ba18-de6876a05061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2afaea1-7ef8-49dd-8375-3c6a30123164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc134d65-ae51-48b7-a675-18e4dfc31af5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060d1b6d-09d2-47a5-b4af-eb8bf7874d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d438110d-af90-4d47-b5a3-bff2c9c70edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10e468f-e023-458d-8806-2792844056f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eadd9de0-b46d-4ec1-b7eb-eb66cb513613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1105de21-1ec5-40ca-b65c-14d9c4490cf1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e08434-5f82-4e18-a711-af1880ed2e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f600ad-80a9-4956-8c01-23ff7e4daacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ad993a-5010-43bb-968c-a7a9e11945ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6781ccb6-2e58-44e4-a136-498f601bea6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5460045-25b7-4ad2-a2a8-e7f753af26cb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d742e0-cd90-4ab5-875d-244b4d500e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4329d581-7c20-4814-b594-974be305f405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35bd8d69-a5f1-40a8-9026-97014f37a34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49812e2d-45bd-471f-9c45-22aef0454116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a5399c-4585-4597-aacc-bc567d038cc1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bdf3d2-26d2-44dc-b95c-f8610bd74ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d56c56ad-4c23-46f6-b9a0-4c49d558ffe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e78dfe-feaf-4800-8de7-72170a9a2ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf51aa9-baa8-4930-9749-534ded32c988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63299845-1eca-4886-bcee-cbc14ef721a9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6d3541-fb88-4670-b3ad-6016500fbd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b089eb48-7016-4801-9289-48846ea3ed75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ebc126-b437-4371-b948-844de50ed6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1f7dd7-0755-42c0-a465-1cc1f8d5575a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1c94ea-4071-4043-939a-f630ba8318ba",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe10e09a-48e3-422e-9f8d-4a90eb48ce8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7765d1e0-0615-4ea4-90e7-dff534a99523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9949762-b448-42dd-84a3-dc756b04c40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4b51d3-a13e-483a-9472-7ccd616927a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35f2fbb-7525-4ef7-92d5-09bc4ebc321d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a43e03-e994-444a-8f0d-1bc0843dd1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd7222f7-da05-44ac-a629-0676b5892d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecdcca2-aa11-44f6-b6ef-908dec07296d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95decf3c-f84d-4010-b485-4112c722884e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38a9b6c-662c-439a-abae-f794815fdc12",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c192eed3-603e-4f2a-a860-6d62e3cd46d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a838e4-2589-40b3-8c9c-fcd658736786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbaf59ab-7a49-4993-89e5-479c29775d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cbd1c7-d8e8-419e-9606-028d820debf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e083cfc8-1e31-4003-bf47-147316787987",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23088fb5-815d-45d9-8e98-840a5909f61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba44a6b-e67d-42a6-8fc2-d86fa8dfa6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c58cf8-f61a-4d5e-ad09-08b01fd657c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75ad3047-5eab-4e7e-8c36-265d094d40a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0274568-0e41-4bdc-8ada-fde777429af6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d1ac1b-7281-4b12-90c6-dc7278a1741c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6008012a-641d-4175-97ba-d0a0bc2aa170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b470f6c3-70fb-49e2-a759-93223680252c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1ebb6e-3e16-4b91-ba0d-e62a1ae86800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d490177-3d17-43e7-9b33-04876d3b8431",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de46bd9-8641-4670-aeed-dde2a7e496a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7f0f61-757a-4081-a5d5-4df19287c06e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5752ba9-73c8-4f06-abeb-72ba63012b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df9ee94f-4d3a-4e28-95b3-9848464ecbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d7f10d-67d1-4691-993e-4880d797003a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7207b53-d19f-429d-92ff-213ca1b3a284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214677db-f965-4bc9-865d-2dd49b168729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a461b6-e06c-43ec-917d-7cf494921811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6273060b-02bf-43cb-a98e-84c7c72d082f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5acc290-9408-455c-bbc6-f433b2c483eb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9461bf-e7f4-4ee6-ba73-76ebb1b3f2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f728fabc-e752-46e0-95c2-f59dd4295896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1fd093-8c71-416a-87bd-983591ec9a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca4b07f-9946-451a-b5f2-d004119242fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66ca33e-75a1-47f1-b2e1-6766a7aa90f7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd89f403-69e4-4113-8af0-d471996d3c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5018184d-32b6-4c9e-becb-769632b9bde7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0fe107-ae15-426a-88b3-0b75222641f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c4afaf9-2f48-49e6-ab9d-c645ca87aca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6f1e4a-64a5-4313-a3a6-c07971072aeb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e4a8e0-b8f7-4bcc-ac7e-5afd56366391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b839b04b-75cb-4f1c-9da9-311aaef9a469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9484bb0b-6a8c-4866-b3e5-a50b18e5884d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a85f84a3-cbc8-46f6-b7ad-8a0e32d6ff81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a348c5dc-e760-4245-a7f7-37761792f99d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f25ebce-4944-487f-b3a2-3b1b3df8aa92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0588ea-855d-419e-b8d3-0152b25e5362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26862aa9-8567-4a52-9d06-aeb3b9b19114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2a286e-b4a4-4440-9c41-d77b8480f46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd93aa4-8860-4547-989d-45da52e29c81",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f330beaa-58d9-439f-a164-36c01f6490b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec96ae2e-9a6b-4302-b925-33de9f1401a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43d3395-04f6-44e3-8918-f470959e4b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "49e81a88-2b7a-48c1-8d11-243187cfafd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cd1b5d-da0f-475e-8598-51d5c109f02b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e5c2e1-634e-40c5-a1b6-7374b081c3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8461aea-4995-4c2f-af14-62bc938207d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282da8c0-bebb-4106-b0cb-8fbec9ca2a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f2900e-cb94-4de7-8884-ad8545b82d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c04791-64fb-4c14-ab3a-f17c711c34e2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd804268-4a16-415d-a3b9-f7df49cec892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2331bf-f32b-4e3c-9196-d0a376f87cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99797633-7e2a-4895-b863-ee02d6fefd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a784ee7a-ca28-4cec-aade-256176ed9dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949e9694-dea4-43f5-9b42-3fade8be3542",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e79ae7-66a3-4b20-bbca-58f10e0b107b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e20d1ad-891f-4387-8761-d261d79bca65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98af20e-d05c-4e1e-a07d-d275ecb925e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d27958a-8561-4a7c-becf-18dfe6fd0642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8342c0cc-b4a2-468d-8f07-639c2ecf7f52",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe32ed8c-b60e-4b31-b86f-550d8b2d0ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338afd1b-427b-4900-9c5a-adf7b8b23c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b994363-162b-4fb3-9e6a-369bf8ddbcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a700743-b710-4b20-8770-c34dbafbffc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a772d01-eb51-4292-a8e7-d8cd9f181d1c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3908cc67-587c-4d57-b211-fd28413dfdab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e681d04d-a8ab-4fac-8559-f1b9171c20e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1820c1-3783-48f4-90f8-251e895a27a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aacb2619-7530-43ae-923c-49c5e03dd114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fe1f70-b1cb-4de3-b35c-1168b2d6ce49",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925f2b55-4abe-4bf7-8e32-9ee5b274640f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86af8017-3701-4076-9908-44669992fa44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bf750f-fba2-48f6-94e0-cbbcb41e6e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd94a87a-09be-4a66-be2d-6aeed71a6f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b49906-3728-4325-8056-8d783f80b460",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f623217c-95d8-4207-9fda-ff54576b4fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a0c4f0c-92c2-4ed9-9c68-c347153a6e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d3f949-cc39-433d-8f23-e44780669002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "588d00bd-40f6-4c09-920d-09535a21aa71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ace858-4c2f-4386-96e6-d84f83dcd743",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f28beb-5a0f-4a7b-bcbd-f0a48a0ec30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605e029f-e261-47e5-9ac8-2324e3107e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92fba49-77c6-43ad-b49d-92a3e1684df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e344539-1e98-4c15-bd5f-bd59ff78916d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7620f1a3-1c10-4527-9f44-97fc2d05170e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797b9601-dbe4-47cc-a211-802a6ffae5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8a5073-df76-4797-8d35-c95af22ebf28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2929e1dc-0ebb-440c-b469-a0f2d213c239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3657f64e-96de-4f41-8f48-afd9c3becb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719e8a22-9589-4053-a2bb-bced65365d72",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86ae67e-2990-42c6-9d9e-5a17c0bd92f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277c8ca5-017b-42c0-9e34-2a5dd4375dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff89282-688c-400e-a8e2-441841f7f480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5023b875-9653-4a08-a752-3548f04053ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c864fab1-97c7-4c19-bab8-36e0f56ac08a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0d98ca-d2fc-4c5a-8316-f83a278e2a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0530eddd-48d4-4e81-96ef-71a0e6e067d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0599e644-4810-44fa-be3a-16b15b9db63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f36e08d1-0f31-44bc-ae6c-fc5c0fec8e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c443dc26-8a7b-4e0b-b172-0645d41a1e9e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a110f3-9fd7-49d7-ab7f-44f43a8916e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c77caf5f-6320-4377-a707-2ee3d0177fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4109eee1-e8ab-4bba-8626-205821d21642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f8ed85-174a-4170-a326-e0c021be1e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d6c2ae-2f81-4530-97f8-e9737b582c0c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1cc9ff-9841-4c6e-8dea-635786431cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e31179-0fa3-43fd-b99f-f6eb11f365d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2b33e9-ab7f-4c5e-9177-1380f13877c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c1d4a5-de28-4c13-9efe-352d6b727664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a482f7-a2b5-452d-850f-7920e3b244cf",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e8148e-2c3c-4dba-b5ba-fb24d050029b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ffa1e7-a7ab-4344-9452-a8afbfeb43ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba943997-1a44-4017-b902-fa57702c4688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a3b77c-046c-4076-a319-83ab65a81141"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "86ce6038-1a90-4c62-9c09-62503900823f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3f0381c9-f5d4-4ebf-ac82-8994240a8f44",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86e0f75-e3c3-4cf7-996e-e6d853ca5835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc8e33e-b914-41d2-8b4d-e207f0505c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8d6de9-7c30-4367-aaab-a8c81bac4ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f64a6409-fefe-4f29-8ad2-def2495b7f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93605db2-e3c5-4e02-acf9-6ef9c97f3f57",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5120aaa8-5422-4ee1-a4e3-7e680fddc1fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "93438020-b641-4284-8929-2011ce4d9508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb796505-a6b4-4cc9-9490-4d2ac8d11db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "effaca4a-c3a8-4317-bed3-0011b0d27d90"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44e04b3e-c4b9-4eb6-9a7a-5ce618d216f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec4d79d5-2faf-4311-9d97-1a760135ccd2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe7fb5c7-8738-4c81-af14-462cddbd683e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88d4e91f-d3a6-4eda-b82c-aef05b38b553"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d21a068-537e-4250-b4e1-027494ad9788",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8777ebbf-6545-49b4-9575-4e5dae081ce7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2b939c5-a491-4d12-b54b-089fb8f5dd18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fe7152b-9e52-4a22-985f-7b3c335f4847"
            }
          }
        ]
      },
      {
        "id": "786f1e58-4a14-4645-9fc1-65cb50cc6f0d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1a30c5fa-5c17-40c0-9f55-279291b4eb4e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3835bde2-c11f-43f6-87ac-a07c9531eb69",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "807a66c3-526d-4961-8b1e-d3fcd6c332cb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6f0b31-ab31-4e13-afba-16b65220c1ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1e9a47-7e90-470f-a582-0cb4be8f70a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1576f364-6b91-44fe-bc11-c06e623528ce",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ddaf03-ef4f-433c-b3ca-5bfcc325f41e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa30b555-db02-4580-9122-48707bb9b233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920a99ed-8642-4397-b3ad-a0f1e47d7eeb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b4b2e7-353f-433f-9cee-71ce30c4a6c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40b17d7-e1bd-4851-9b11-978b6ac2858e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84392ce0-195e-40b5-9eac-6c11cce392fb",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480986ac-c06b-47bb-8628-54683c53a825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347c4b0e-5b62-4fe7-a3a5-f79b410d147a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25266827-5167-4dfa-bc99-37bee513da46",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a131e6d-9c56-4517-8155-44146cf2091d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab630099-a687-4247-a665-cfc7313e93f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476de445-5ef6-4db9-8643-ef908244c5e6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b8a32f-4165-4ac6-bc0b-e8face62c845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2b6499-dab2-40df-a078-06398d1e1a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4881422a-0c3e-4308-a840-9089ef6a8d13",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aad064e-141f-4c30-8537-ec5825dcb147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba33657c-963b-46c1-acf3-bb272017815c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "059f036a-8c0d-4fc5-9c95-ed77b988b1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e26bf5-090b-49a3-b8ee-932822fa3fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22376480-c254-4525-8e49-147b7f0ca3b8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b03c71-8fe8-4ae3-ab10-bda4bc7c0d95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a1a216b-3833-4e04-9347-454eb2592335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bed99da-5cd8-40ed-9ebb-03d6e7e06841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7c16c0-8e72-403d-8d15-372969460f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410dce70-b05f-4824-a659-dd35d96a3fa9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49dba615-9bfa-4690-99b1-6c155b6c87ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17379671-0afa-4e95-addc-d19e6552ec58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0596876-a7e5-426c-84d2-8e992725124c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa2a1b5-682a-4a89-87f0-f590653418b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7342bb29-0814-4172-b3ca-7545276090b6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d56ba63-c55c-4803-b36f-f3f0265a5281",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d36f8a2a-65f4-4dbb-9973-423e373c9f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1856fc69-5d19-411b-9279-dc65f41e86a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e648345-25a9-4960-af9d-b990f33d8824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e899baa-c0cb-4985-b34c-0a027c46ce85",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f034c81-ca89-44f2-9ebb-0f2d9ce63518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a632dc58-2e6d-43ba-bb4f-ea8593ba2b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b165914-60eb-45fa-94f4-7c8ad5f9a453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fba2429-b724-4b37-aa33-793700299add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a88fba9-32f4-4173-9bf2-5ecc4ccdbeed",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd590ead-539d-44c1-b71a-c09b7f71ba8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f48681-9ade-42f9-a641-14063a3eec91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fcdbfa-f00d-4e22-b3e2-637b08590a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fd0b31-5660-47bc-81a2-99b098e00ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9112b6bf-cffd-4c2a-9a1a-608ba34965dd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfccfb3-baba-4520-b4a4-f2baa4adc0b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5c2e06d-f94f-43ea-ab6c-40e714ac761a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63303cb0-44b9-4d49-9104-6adf180d16c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7418908-b07e-4640-8d40-2b8bcee35907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c094c12e-d922-4f22-8846-1b0eb2b4fd76",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b95c2a-7740-4ef2-9b2c-91e6594a1294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f26841a-80dd-4707-8b5b-534623425139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "488dbb00-8868-4c7e-b46f-feed03ecaf70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c4a04f-7875-479d-9371-bb7f43507afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d150c3-f59c-4b84-8165-4702600f9f12",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28be90c3-944d-4cad-b55a-03f78e38c492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4150e6c-2b14-4650-a287-579bc0be4803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7708c81-861d-45ca-86f4-b107875b5cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e2dc3de-4448-4f93-96fe-be77c4e2e809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024b4fb8-86d5-4964-87ae-2e1e3fa3bd1b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4c4bf7-8797-4149-b79e-af9a96d15c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a46245f8-9203-4c68-9513-abe55a2aa974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c47dcb9-eb73-4e99-a235-e827de67917b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db3c4f6-2732-484e-a25d-fd962c6c3e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95df9063-d617-4c97-8548-a83a95e76afe",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b635ae55-14d7-482f-b57d-261475d4ee17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206ec768-4284-44e8-a2c4-476580cdb8db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6d63f7-c6d4-4d96-b95e-e7daec37cf09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f4ac9d-7d2c-46fb-8654-fa19108e958a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed637e3-616c-4b73-9bf1-aac32c83c496",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d8cf03-8ce2-4705-ae6f-1da16a9e26c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6512ee-8a31-4e5a-a81c-f4b494b29325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97c8fad-7b20-4ba1-b228-b14cdacd75aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4a1ff7-8578-40d5-82ff-58a1a462488c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921a7b54-a3f7-4760-b927-7a79be795e46",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2268b0-e47c-4707-854b-5fb9777dd40b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667641ea-81cd-4145-b325-0022ed055a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35ee471-438b-4104-aafb-6e9be832e63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a828bacf-5d78-42f1-97ac-37131efb5144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6191e40-0433-47d8-b34c-99b5fa950354",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb5d319-4a18-46d8-a48c-3140307c5a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d20e2a0-a29e-40af-a42f-dc3b1f0fa213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8ad56d-be04-4122-92c6-5b564dd2ba11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14affc9c-f7e8-4fd5-aa59-cff1b6369d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b291ddb-9a35-467b-922e-62e3aa98a6fe",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807361dc-d51c-4220-abdf-7744fa1f1481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af3f703-6cc1-4b2d-a485-383ee29ab068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c52a243-36f6-49cf-9c42-144b720aafd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a927631-341a-4cf6-8736-cc6f2a863304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a941a9a-d8bc-470c-81d2-d93b561ac2cb",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4824f7b-2120-4b09-ab1a-09fce5892b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a684f78-38a6-4ee4-aaee-ede86efec039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361f56ac-d304-4bcb-ae17-f2d2eac90cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d0f69d-410b-4c0a-9df5-398468fc111e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20da7386-9061-4eee-946d-5f9dfb90d838",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f409cd01-f4fc-49aa-a593-938b41547263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa38a97-b0c0-428b-9355-46b58a256955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbfa8ce-ec90-455c-a0b0-dfccd26b8d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8016362-5a2d-4b41-8a23-ea021b6a742b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22997d40-4e7f-44b3-9ff4-c8769efbac07",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f85f68-2640-4e25-97ea-7e156471b17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7372252a-4cfb-43b8-b466-b6dfec2f7b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ebd1b3-3342-44a6-9ce3-cf7371158a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7f97ba-9635-42f4-9fa3-378c439c9e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c5e098-e4d6-499b-b64e-ef76b430effb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f890f4a3-bc26-49a6-bed2-f82558c99659",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adbd4c67-0fd5-4cb0-8a52-62bd135b7c08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f6bba6-1628-453e-813d-d159c97060ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1c4d36-e69c-4a85-a658-36789a3d19df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c343c0d3-5ba9-416b-877d-441643b84213",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6970a10-993e-451a-a106-d33c41f905df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af47a98c-0e26-4d02-a2af-b758c0eee42f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa8e559-b721-4128-90ea-32dc879c43cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2cc7d0-e4f2-448d-98e8-2c780bad7d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e5f1e0-fe3e-44e2-b4af-55133f244428",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d92157-2067-48a9-b075-575f5232eb93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b07f41bd-9acc-400f-99a2-4955614e8a40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea99a23-d92d-4b3f-ba1b-9edea80a6cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d810a389-17b2-4b53-86b0-451844c9e60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f644e5-d19e-454c-9089-0feef634954f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122267db-7d84-4699-aaf4-c911ed1c5c1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d5974f7-a7b1-41af-9d6e-fab2e20d4a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dac5eb-d619-49ee-9ce3-6978145abd3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bc59fb-414f-4391-a7aa-c6d4c6879d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70318ef7-bd52-4b18-a026-7eab2b056ebe",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bce6ffa-7f07-4860-b497-f176606766de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44d8810-8053-4699-9c9b-cca381a500d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e0a723-07ef-45da-9662-fee941803a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f77f85bb-0c20-4e33-806d-1eebd4bd4de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e094a5d-8285-46ef-b7d7-18e7f711f779",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a39414-2d0e-43be-9cb2-f67c35063bf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd96a3a5-9df8-465b-ba9a-eeb322f1dcc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b67ed84-335d-4f14-b0e1-8175fb6745b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c97660-a361-4de2-b373-94f5f88fd7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1aa373-32f1-4461-b8cf-7037c4087e80",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6e8b38-2e1f-442d-a31f-2541c34cbce0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c5cf49d-7172-486f-a0b4-d38d790631ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f9fa5d-bea2-4fbe-9814-baacf2974dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488bd661-c760-4b7f-94b9-1b4ca8ce5175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3a30ba-da1b-4afe-82a1-f86975910545",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282edbf8-a9ce-4484-8470-2b251b7c1fa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4a8063b-3cdb-41ed-8937-f669d7e626ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a80daa-6021-4a64-9230-d157c12e4309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91291da2-6b3d-4f4e-8343-a70332cf3026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d853cd-5149-47ee-aafe-8bcb4881c13d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5167ff-c416-470c-8a8f-72e7f57c2128",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "378e99de-4ac7-4010-a740-743da8f438ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62303dd9-0f39-418a-970a-bcb8f84f0a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c243259d-3784-4467-956e-6fa9508f0047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8202f814-ed8f-4847-befe-7f06bc277411",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c145e07d-ac7b-4f8b-8657-ff612bcd5eb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08ab9f6d-2989-4f72-be35-12f4001a8dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce19e5e0-427e-41e4-9077-71f99195bc3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b51df5b-5cfe-43dd-9849-83d45ee881ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a6e926-ca9b-4480-9925-e5ea6061b528",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a974e0-b014-4fea-af9d-e9f155b70b74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26776701-3182-4f8c-8d27-0fd7a4a90f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a8f7a9-e345-4e5f-9308-acb33f2afa9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51441752-88e8-44a9-b30f-4387b07ecee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcecb6ff-58c2-4b86-a37f-86fec97d8a9a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217069fa-0c4c-4440-b02e-7edcd8094ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542e7ed6-03a9-4e17-a1d1-c7a42f4c965f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35573aa-eaa0-404c-9b9f-4b930f0d537a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a9e021c-6185-4eb4-b817-bc2fb4a32ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0331e1-b67c-49b7-8962-fe838a3185a0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486886fe-9b7e-4c03-8466-089f1a6e88aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345f6835-19d0-475f-84ec-a79fd0334c6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa35aba6-b541-4f13-b43b-1ce34441337a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0789c0b-a080-44c8-93c4-a4e0e2d82c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde556fe-4d62-48e3-916a-6244de70ecbb",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c5ef4d-d02f-496a-a981-90a30e5e4e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f28006-904b-4706-8295-6cd0c95f2b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5372acd-6752-47f8-af58-5f903a43dde5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12cf401-7511-4975-8f54-9f1a4bca71aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ee20dd-b166-4c54-95e4-ec52753a2137",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00e8d23-b075-41a8-9ab5-a0d4c3bad3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c7fb3f-53a4-4fbc-acb6-e643a558276d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f3ff55-94a7-4d4d-a17c-cf999bc16e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359facc9-12f1-48a1-b4f5-2ca370276900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b8c640-e0f5-4fca-a83a-088d47c99618",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a177d05c-a772-4cdd-b46d-4d152c303b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3eed41-bcd6-4db9-9996-13dd72dd3553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8a673b-1efb-4745-9140-ea3121a19a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3464a411-fe4c-4699-9421-9188ff56b9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d588c46-9b60-4abf-b714-2e877409162a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636b0402-3dad-4cf1-913f-db7d8df1b446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed389888-7e23-471c-a96f-9b375bf70ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b550967-7b34-4193-baa7-1b27c89dfb81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d7c813-c53a-4e38-9864-63ff406a3a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a587571-ea61-41e5-bbce-82ef4acd44d2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a177d9c7-58a7-447b-acee-a0f1543719c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d0f5c6-e4a5-4efb-8140-0c5ce14a8fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d286ab88-0584-460d-9f48-3a9b7abdb4bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8e247d-7554-442a-839e-78e2b408e5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abfc45b-0b90-4bc0-96b1-9605f9215413",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60787a44-5c38-43cd-9da5-3c8ad1aa1dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85623585-bd53-4fda-a135-a749103750c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db949c5e-5193-4a79-adff-46a6639a7cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d796a98-4fe5-4389-a89b-213fedad34ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a45ddc1-30cf-4d65-85e7-3f3609cf2c30",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba59128-65e5-40b0-8363-d4e10f86b431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d226fb8-f33d-4dbf-901b-25509e1c0b8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8634a08-c3df-47aa-b662-fa433503dd46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd61fd70-43e2-4f1d-810b-d117a3886b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a348fe-313a-4418-9c2b-06b4e85ae893",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afc243f-141e-41d6-8988-059a11a52e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59763c28-2dc4-4bdb-9e17-fe1616ba9de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "483f2cf4-5377-465f-8a09-83c7a1cd032c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311be625-00b2-42f6-81f1-5ae837cea422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3318ab8e-79db-4c53-8a6a-612197f30a93",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bd319c-ba10-4801-beab-cf63e5b10652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4983b952-6a8d-432a-8ee3-6c4a372a6d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20300c8-2f86-48c7-8a34-13b6020f7a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ed2a97-32be-47fc-be2f-8fbb32f17214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4827ed-49ea-476f-b7c1-37de92a7cf86",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d9a91f-6ab0-4a97-a258-8412ca4ed8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22c5db6d-96dc-4366-87c0-1bc52b0336fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c41147-d51a-4768-a0e9-0ab4760252f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91ce282-9b34-4442-ac96-cae4aa9cf64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0e4e78-04e2-42d1-8979-3bb808dcd7e1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446f24d1-e80c-424d-b8b2-124f195ce8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "031fd7ca-c3b4-4397-ac7f-1d24e4a2a6eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8918f526-68d8-4f66-aa43-bab540cd5c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9d6a7f-faa7-42ad-a4b8-b97813a30d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd972f87-652a-4db1-9538-1d26900935af",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fb5963-f4f3-427c-8fd7-e23f6399f4d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333830f8-8809-406a-acad-1abed304040e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6067ae-8279-4830-8cf8-d9f08d28c986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7631d218-2f6b-4014-8199-4a298cc70506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89356040-288a-49c4-9adb-dbefbf65c42e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1593cef5-4588-4727-823c-f6d3e7d0c30d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2455cb8-de43-4b1d-a403-fd50a38ce837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad409c80-60db-43f3-bc20-1213bb6a35e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162cf895-9384-4430-8f2f-db5f0aca81ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b321c4b2-367c-4bcd-8670-a5bb873348ed",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09acb36-1233-4660-bc58-351ff2e8514e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa23e21-c2fd-4e4a-a7e6-c05147226905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d336edc-84a0-4d78-b2e7-56a5338fa316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5306a69-36e6-4e45-abc3-77968741bbb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b93cb70-f09e-4eb2-946b-82356688a935",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7dd312-c15d-401c-9427-5913f2ca074e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c63c48c-d833-4919-899e-0cbdd0088b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fff746-77a4-4a77-b59e-08db77d5a7f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc4392d-4c6e-4083-9952-320e7897d4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fedc66-663e-4346-a867-9cb8b3195847",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c09ab0-77c2-466b-b73b-f078a21806ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398ae20b-b3e3-4a3c-a7fc-942edaadd825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3740d5ba-bd5f-45f3-9e09-2e60d27d1a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b35684c-385d-4e72-b153-a1d7c36e1616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53198a11-edfc-47e6-b04c-6815548e13ca",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f96bb2a-f92f-4af8-9f30-22409cfd4b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b47141-1e6c-4688-95dc-8d6a63268733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2ec624-08ea-4fd1-bffa-53899c3586cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae6ddc4-7866-4759-9fa2-d8fc3752822a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad74bcab-cfe9-4b0f-b0b6-b27addc65025",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ff9679-a238-4af1-9e9a-da2d0d7068e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8c1b59-7db7-47bf-a227-9f48eedf52f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7b0588-0d55-4440-a9d3-f31974730deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd019f2-1101-4cd1-9349-f79c577ffc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af348d3-0c99-44a6-a6c1-6ce0dea28a0e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080fdce7-c9af-4aa9-abee-9c2637a0952c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16aeb870-04ff-437c-b10e-0212095d854f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01d7833-6206-41d2-a092-9a8a441dc10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb05f7c-0a34-4775-9071-d4a9c0e4205b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3f9434-b26c-4166-997f-807117c127e3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8b819c-7b9b-41ad-96e1-f8518eb613a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a6d7b15-b973-4389-aaeb-0237d0a9835d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1ef712-d500-48c4-b588-75ff5bab4e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005298f9-9aeb-4a9f-9607-47e026eb86b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478f894e-0267-4ed1-9231-a821f4d8f83a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc98fc69-809a-42ca-b086-c4a26a00c450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8c63f8-79f9-4bd2-883a-4d687781ee0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5d5a8d-758c-48e9-8c7e-7eef7a8b5499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4fa045a-158e-4b14-bed3-97631455b205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f95dbd-04f7-4cc0-90a6-2e788f36a066",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aea8b8f-0db8-4ad0-8033-79fcb12c8449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff029de-da99-419a-96a3-c36146d88a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9532143-4714-4e41-970e-91f90a9a936f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d38603-5513-430c-9316-2c7be9036f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae34911d-4951-4546-8bf3-8395f5226ba0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ee2c3a-1144-4c63-88fa-0e2b68187e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fdd1bd8-756d-439d-8a89-c136ffe67c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc8ccf4-9e0c-4841-ae6f-d0beba43de19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c4ac9b-b84b-47db-98ca-f65ec61cbde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3939025a-ba78-49a4-9ed4-c8de5151d1fc",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fa7c4e-a574-4098-b66e-a33b04bd797b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93eb750a-d5ac-4261-98c1-5313c2b8b835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e080cf-1a59-4f3c-82fe-428cd334ec5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467cb19f-ef9d-4f24-97be-c292fd914854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba77d42-7b9a-4e0c-a12b-b0505546ea8f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c879eff7-d21a-4834-aba9-7e280c8b0d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98e1826c-34fe-42d7-bb4a-1af8367e2f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dc1863-8cb4-49c8-957b-738e0e0603f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7162ffe8-3e43-400a-8c28-4ac085bd2987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1e491e-a881-479c-946e-381e84fde8e6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a8df8e-2082-4c79-839e-51342cb97753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da88848-3dc6-4818-b278-c0d57935c79e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61158cc-eecd-4462-85f2-1b632d83a49c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a6a846-dd1b-4a88-ae11-1481192a40b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14057d2-13c2-4cfb-84c6-407c6b585f0c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344a327e-8161-435f-9d70-35a4600cc82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3235e81c-d142-4778-ad79-2a83a34cba11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a2b252-fe51-4ed7-89d9-d1089698fb0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a9f534-2385-4517-9ef3-19ab9ecf20f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b6e37b-01b5-4844-aa83-0fa1fc3e8d8f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc2f0eb-742d-4774-8acc-6ef4e8b2ed49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "634ee5ba-f0fc-4d6d-8c17-805ae4e79a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48254ac8-b4d3-46e1-ab69-daff3bac41a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d9b7ce-b288-4043-b5e7-7a5a99b5cd51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472c91b3-e4bf-4f66-a0e3-41f97feabf3a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3d76b8-8cab-4944-a20c-c8e6f629a017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60fbfad4-fe0e-4a57-b873-a532fde5d0e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ffd599-6826-4553-a524-da50f5461f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9665bf0-2a08-45cd-bd97-a6e1ce83be36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438140cb-5def-4ef9-a942-f5d1259d5a76",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6d1fe6-0a16-45c8-b825-6ff09b27bf1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d88efd51-34af-40d5-830d-3eb021f6de53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc85504-7da0-4544-b507-0807f42ec618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9663e98-1cd8-4eff-b7de-5c02109c0c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d18c13-d5f0-4e98-a396-1dff1d4d0c5d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7119ce6f-cfe1-4a80-a6e3-e75841bc11ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5930853b-c892-4c83-82e8-4e2b22bf7be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6db560-2590-4f80-b27f-cdfa3b5c250b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbaaa042-b993-4857-ae99-12b0db7fde9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bcc033-765c-432b-8b5a-bd495f67771d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcb8b2f-9db3-4038-8355-1d5df1fe54bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ab2ccb-e0c5-4740-a593-5cbb11c8047e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c9f42d-04a9-4cca-8bee-39fc99ac2538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3067b3cd-ea8f-4ce2-81a2-6fb647e9bc1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d930da9-2a03-4c22-b785-a065e88512fe",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8aa9e2-9003-4c8c-9764-e4df5a50ee65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce8f9198-163c-4bcc-baff-646744deabb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac441e40-a677-4c21-b441-2a55ebc3ff1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa7186c-aa97-43e0-ae2b-a337dfb941aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cce0f2-a518-4d5c-9547-24e44d39aa3e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8346b4-1978-4e53-9a95-27d0562d3df1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e59b3ba-50d0-4045-9364-70ea4d9ce916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92244f2-1a71-4231-b365-0ad574a173e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2bd838-b84c-4717-b52a-0bfde9125ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2d757a-d8e7-4daa-87f6-02b5a0e4220d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b8b933-eaae-410c-9366-254c964ca7b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e283c7ad-e1cb-4640-bf9d-b4d5f39183ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b651d3-c53c-4f0b-8884-d8cf028e66af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f71982-14e5-49c8-bf5b-6f7b9037612c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bdb472-242a-4729-880a-52cd6a384b8a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0e4a45-1932-43ee-8d17-2fdd0b1d0aab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef4dcc78-9e8f-48fe-9ae7-a6842c624f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc26e444-7a51-47bf-9980-8ab48e9d2a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92cbf89c-69c0-4e02-a440-d0c28875913a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0dc9ff-04df-4db0-adfe-a872dd7f352b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef61c13-a3a8-4a58-909a-bc2c37a97437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca9a7083-c114-4694-9142-82e4952f3819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285ee855-3ef5-49c1-8db2-4ec719b4c597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7af121-dbd8-4e44-ae19-8939e74d95de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cfb3a9-346b-4226-94bf-ebd8097108f4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc202fb-a81a-4958-ada1-f6115ee11c18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b006872d-e771-45aa-bcb2-305ce9d6b909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc4a88a-3d57-4ff8-93d8-789c0c3f9539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "233bec59-ac74-44f3-b292-7034b799b3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5e780e-fea1-41e8-8da8-121f854a352f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf6a931-9977-43b8-982e-3ff7bdd03772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb8d5a2a-c222-4c6e-a434-d7eeab447d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c18df3c-d665-4c4e-8dbf-81336e0cacfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ea1215-fe95-418d-9f61-f1f05717a618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab924589-6f8d-4805-afa6-204e4cd69037",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9d869e-8a09-4c29-939a-1d45bf7fe1e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f63bdda3-ea03-446e-8a73-64844a0f0542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e524a245-255a-4bb8-b9a1-908477bf6296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1cbbf1-7370-4512-81f3-b21e3697f079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eb73c8-0df9-4558-a758-3be33a52e4bb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2739e733-8ae3-4d32-9be3-c73ae5d959a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fee4fe7-758c-4660-896b-fd4415a4ff15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2578e7ff-fe8c-4cc7-a315-4fec8bc2401d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc504456-0ed1-478e-90e6-66536e9cc541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6c1d15-228c-4e6c-b54f-65adea01f8da",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d949693-1f91-4628-907f-2f03d72fc5d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "889af4d6-3fee-4ce1-b748-4128ab187f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db28278-f2e2-45b1-8d66-534627e75711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba2e83c-d4a7-4098-ba60-260030909489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc3d3e0-5c7c-4659-81e6-6cfe0f1e766c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7708e5-58e0-478b-96c5-d531257ad374",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31d63087-d947-4ca6-ab46-1ab449bed699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e722e53c-cc04-44d8-96bc-a8b71b97d788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15e6086-4c7c-423a-81aa-1a831c3c7ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb2cdc8-4188-48a1-94af-74704ceea675",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5bc009-f3be-493b-883a-040661e1156b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4be70bc2-7824-4c8b-8f32-ee1c158705b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2356f63f-fe7b-43a9-9843-9fe1671fc1bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34190ac5-1009-426f-9044-dcc9432ea1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6556f3d2-3703-4318-a6a9-e010feb1e717",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9c0d7b-c212-40a2-b364-098c25cf5fa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78dada71-2df8-480b-962e-8f7cc8832580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8ddf91-be3e-4849-9987-e40aa65dfe4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334d24dc-02d7-4073-bae7-731434dba69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3912a46b-61c2-4572-8f5f-ead426cd5f73",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387a46db-aa0a-4b6c-8bdd-af5b1152546d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca26b728-1477-4933-adbc-9049f80f9ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69352171-f493-45cf-89f2-4eac38377def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d4e865-2946-4846-ac77-798e8053cc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f156d210-c1d9-4178-80fc-7d79f342b9d9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb75b6d-3ad6-4e24-ab7c-4547cd1a2ba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3eb4158-4286-4bc6-acad-d55273cd9187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcdc1e0-1624-46ac-82ca-f242d1562331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743a6684-9ab2-4441-950a-d907278f4833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783be2fc-460a-4865-aa6a-7fcffbe58e71",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ba98f2-34c9-44e8-aef0-f451b32b08fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32b7c287-fc54-47c5-b983-00af4204e202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d8ee73-5a38-42cc-9cc2-8ca2ba9f091b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af7936c-4213-4655-a26f-c5234fbfe82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7381e552-c9f6-49e9-b30a-2bffb01c6100",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01548d09-50fe-49d5-84b2-714025190f49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73d3d409-a67c-4428-8f21-dc5e00744cd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1863bec5-fb0e-4490-b123-51fe5d11d0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a06535b-46cd-458a-9d58-adb9d1b68db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b2221b-8d36-4cde-9c60-9701d71f109d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05484ab9-faf9-4cdf-bbe3-29a0ad5fa453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab72a1b8-ea10-446d-af2e-3926e7e54bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41ca14b-4492-4409-9617-a43d3444c53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8769936b-a6e5-46d8-9f56-64f3b06146a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b396fb7-848d-4e08-8584-727cd0cb2657",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb0ba5e-054d-4c16-9174-1949de58dcc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "875d46c8-7bb6-46cc-91ee-a6e0248dbf09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef56c9e5-46a0-45c6-8928-8a791680fe22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7823ed5-84c7-47d0-9bcc-cb1dd8b63eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba954e0-b748-4b66-ada1-008c434dd97d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4e1c6c-e80a-486c-b5fc-deb0bd98dea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc933be7-b731-4999-b7e5-92023f939546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "634f4753-1ca2-4739-a86f-fb951683598b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b242571f-8ec7-4acc-bb06-1160dcc39044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc7d6d9-1f48-4c37-b46b-feb8a6a50afb",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32d725e-90ae-4fe6-9141-4b0533d37b54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "772fab26-287e-4acd-b7a6-c6198b99492e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2feccf4d-675c-4169-b560-d0c1d4603007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ef5cf8-090a-4d9a-8b03-301de53a48f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebf38c7-f5d4-4cf9-8ece-5c7de9c3ae4f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a66f524-f4f2-4224-9cdb-b85df82bafd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2748e146-345c-4fda-bda9-392c9cfb52df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0750a532-73a4-4dc5-81d7-2a88563210d2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e3807f7-3b54-4e2d-8210-c35e17290d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316293cd-e62d-4ec7-83bd-eabc5a98dedc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f513a009-0993-49b7-a8d6-240f65289159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbec2ba9-ddff-4c0a-9958-5b5de3ad68bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c51a7c-bde3-4c35-b4c4-b78318705bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cfabea2-4d94-4e68-940d-b536426c955f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9cf995-a3fc-4541-9fa6-fdbe6c9b0da2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7d4244-57a6-4fd2-a630-5d07d934d145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a313788-b57f-4b93-b01a-1daf34f0abc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69344770-c2aa-4e08-9d55-2cf64f4854e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4547388a-0857-4798-8faf-e3125f040ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e0994e-d027-41c7-ab44-d311577d9ff7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f97f1d3-957e-4aea-9132-150a3ef37352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b517f01c-5aa6-4322-abe7-42f596aa065d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6819ef8e-9848-4e52-bca0-be8eaaa091be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a630144-b11d-4a9b-a96f-46bba860c543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c08e38a-70c0-4882-8854-8e6400fb1710",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535d0a00-347c-45cd-8ca4-33edc954d087",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7d4b678-4860-4eec-a005-303c4358a0a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab359b5-ced3-4f97-afcd-be59420d6d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86535357-5a6f-411a-bde1-22d0870291d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2730b7f5-6370-4ca9-bb8f-91eb600aa8ee",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5182a6-3e1b-4ae3-bddf-8aa8200dbeac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e3e51e2-a775-42a5-99f4-7a7ff09e841c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c062fbfe-5c0a-4231-a347-54999754031f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13fd2201-e4d4-4909-9632-cd7e964da492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84433d14-df7d-4b52-bc75-5e885911a42f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9129db-e4d3-400a-a23e-e06626195172",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f0e88e5-a86a-4a1c-b3ea-4fc519dd2f45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a549504a-2571-460c-9570-c126724269f1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc68da60-372e-43a0-b444-3e357ee17e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784e1b3c-afbf-4cac-807a-b4241a810f01",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956507c3-27ec-4dc2-9be2-04c5b18f5020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1d63505-cdcf-4059-aa9a-77227d02c354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d557e6-9d52-4b3e-a8ad-70efc1ef2060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c9ec3a-9d7b-46e4-af05-a6829b586b02"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd0af218-84eb-4781-bbec-291365e35bd0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65aea15d-04c0-45ee-ad74-a9da02438563"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb394bdb-79a2-4928-9e1f-87f6ae550af1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e577336-cc90-4275-81ad-1788ee7e403a"
                    }
                  }
                ]
              },
              {
                "id": "49f348dd-cae4-4ba5-a2e1-1dfd83888ed1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20220ca8-01f1-42a8-914d-c27781a78598",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59213e2d-d27a-4a7a-b375-6c6a02f23155",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8db3ccdf-4e02-4432-bec0-df3afe4227ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c0de5d-6a6c-47d5-b5b7-bd12b6d072be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f465e101-0f50-40c6-9988-711cc3708113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef74d7d4-4c32-40ea-aa2c-d392277fafb2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7994477b-f2fc-4791-aea0-0126c4c0f3ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "af059011-6f7a-439e-b95e-0d16f2cdeef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336caec7-187f-4d39-b236-a30f1228fdb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4f6ffb1-9464-4051-988d-22190a88a920"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95ef0a63-8b0a-4896-9f09-bb17180da3c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa1f42dc-0268-4e24-a9a6-b19e4c36dc9f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3897c83-5e10-4b56-a4f9-92010f944d2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29f744d9-cba0-4e6b-b8e3-4f418477b6a7"
                    }
                  }
                ]
              },
              {
                "id": "c8778a21-55b0-4727-b9f4-698dc4e0a6bf",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "fd72b66c-e5e9-4ea6-bde6-9a1ffd335d12",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e288b7-c48f-4a1b-8de3-551de22e619d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "eb148316-d3c5-473d-a4c6-64cadd34c3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73b5333-9ce8-4a0f-9769-e20a4624903b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c336a28-8e38-4cfd-8afd-802cb66e8d7d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c8fac8ad-eb54-42c7-905c-02a93a5570df",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ada91b37-34cc-4a2a-bcb8-2bad833270cc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0659872b-5583-40d5-8260-c6429fd5b8a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2eaf9038-ed0f-4602-b364-600e6468614d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66bef224-0bd1-4d32-bc84-c833847f7974",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd8c0e16-3c14-4411-b210-ffb72e9543c1"
                    }
                  }
                ]
              },
              {
                "id": "424d2374-7ddb-42c7-b67b-29163e4fae37",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "508a848e-f96b-4237-ad9d-460c1ea1b754",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0c8aeed0-ff0d-4e21-a24a-679eaa4fdbed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69efe0cc-8f2e-41b2-ae0a-9d6c47514b76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7398e8a1-f6a6-4de4-b597-1b6f549e93c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85c1a283-4a23-440a-8f13-01f6cdc7741e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "83fff61e-97f6-4f05-955f-b5a3872e3984"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67d0b465-1669-459c-aab6-0450ca9ea16c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c878144-f70b-4332-8ff0-c176dd37fa0e"
            }
          }
        ]
      },
      {
        "id": "0b30b516-14ac-42ea-8ab4-47c7cf52c6ba",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c53ccc42-cda8-4a35-8afd-74b5bdf43f50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04274aa0-c9d9-4ae0-976f-bb5d0552e0b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72349715-4960-4ece-8d5b-ae3993106c7b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e26c445-c805-4eab-bc22-ac5f5d8ade33",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2e1c3b5a-b572-428c-9670-6b7304ca3054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db07179-fa70-48a7-8b42-7d6cd6aadfa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35ecb72a-c86d-40e4-9689-66715de3304f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3d08e4-4920-4b51-a424-0a7f6a04a7cd",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da9328e-2879-4435-85e1-101220ffcee4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "194ad327-c2d5-49b1-a56d-77edde50c88e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d38be4-5788-4e54-bf59-04bc5440991d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5eee0cae-7b69-44c1-8713-67f32c87ff11"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d462419f-9410-42c4-93dd-04e19485c18c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5037f870-e30a-4193-a92a-391999c3408a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3746e7c6-112e-4356-afd5-7b598c104e12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0f19b90-df07-49a7-985c-c5dd6583d600"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13277fd2-b5a6-4809-aec7-3df6c924a9b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ff3f8ff1-9140-4401-91e2-060a864180c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5354d55-cdff-409b-b5a4-7a8e4ad6da6e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2067de6-4e2c-4427-a39e-eab48e7cd476"
            }
          }
        ]
      },
      {
        "id": "42afaaac-6c23-4d32-8ca5-3fb225e3643d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dd4a4e23-3174-4ecf-be71-ae4a793c44af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee676cf5-9ad2-42da-9ca3-19fac5acd215",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fbd6474-7379-439c-8fbc-2191a53d067f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8211f0a5-3deb-4f16-90f4-03d492b55741",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3f2ab172-27d1-4c34-b9d5-ba2e77e4fd7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d992a2-cea6-4247-a321-cf154c9e0ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c27c0ac-3717-4424-bf75-e2dfb6bdf98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd036805-af49-4da8-aab2-625dac096c43",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e257be-eb6b-440f-ab25-3e1089fa5815",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ebd07776-5875-4107-9d80-017367546521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb1d6fd-9d1b-47c5-82a9-a8040802a6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d88c1334-ae0e-4730-8cbb-f7e6ba4045e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9930ad93-4b04-49fb-8bc5-6d21b6f40d7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dabb7e24-8e0e-4db1-87c6-6b606be73f54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f73843d-48af-487e-9542-053144f3f8c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8eced764-e84d-45ac-b516-dec4e387858b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5eac0232-f186-4246-8640-0d806305db17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1faa890b-df64-480d-a626-ce6512d80354"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "532ae76c-7486-49b1-abc1-4035b1fe636a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f43af326-cc3b-42d9-a44d-9da131515b82"
            }
          }
        ]
      },
      {
        "id": "ebfe7ec0-3955-4cb0-9064-f9eb2615578c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "eb69f7bf-a7d8-4a41-af41-488add9b9c2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c565422f-abe6-4b34-80b2-2e6c09d1dc89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee9c5a41-d8c0-411f-9d23-17a80440926b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326c7625-5de9-45df-a9f5-7184d2407195",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3ed7d04e-7ae5-4fb0-8574-46d60b8894b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9482451-7a92-4019-a30e-76ca48984e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7af7f01e-034c-4d94-b41b-62c11c8e660a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acea4402-f01b-45bf-b12a-5b677c367625",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b27036-f43f-4381-80a2-7842d802188d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2867279f-bdf9-4233-9d47-2ea7934c4b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9281c33f-e308-439c-9408-fab8361f1fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93a102c9-9148-4e73-b255-61840e4f20bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e30b996-afc2-4d58-ae9a-03414b54e1a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8216be77-a0fb-49a7-90ff-85e15e752f97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52e7fedf-662a-4e19-9fba-0511b8bafe23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d9dcc21-d9d7-41d8-bd2e-7383d806e29b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "319a5fd3-c91a-4831-98a7-907f19186e34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7cea49fa-4f38-46ff-ac2a-3a60ef03030b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d5bcf5c-c222-430b-a473-014f4ba2d698",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4f937e6-bfa3-4615-8860-fd0a99937897"
            }
          }
        ]
      },
      {
        "id": "0c8a64b9-fbb8-429c-b00b-9bc0f119657c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fa079eb-a99f-4ec9-8df9-a3bb3da2434c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33e89bef-4bc5-457c-b996-e98fddf4ea77",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "012d2f92-90d2-4e77-a5a0-ebeba386de0f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2d182ee-58ee-4257-9865-7bb358e6f9ff",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73113be0-bc03-4f4a-a570-b7afbcc4f1ce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 474
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 138.9582852820466,
      "responseMin": 14,
      "responseMax": 6456,
      "responseSd": 675.6989620614661,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671323802657,
      "completed": 1671323868235
    },
    "executions": [
      {
        "id": "f89ad94f-cbf9-451a-bb34-8abad2f2b679",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "99936d42-7191-4698-be08-c7afa02ba7ab",
          "httpRequestId": "adea9d96-57d8-496d-ac5f-04bdf8d74e01"
        },
        "item": {
          "id": "f89ad94f-cbf9-451a-bb34-8abad2f2b679",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "06e49a13-8755-4b29-86a3-9ecad1b7f923",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 0
        }
      },
      {
        "id": "4d927cde-df14-4784-98b4-7d40468f2356",
        "cursor": {
          "ref": "a478ddcc-0f0c-42f6-8898-078fab58bbfc",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "97357e98-34ec-49cb-a3ae-82953cebdb61"
        },
        "item": {
          "id": "4d927cde-df14-4784-98b4-7d40468f2356",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a125bcdb-b53a-453b-a394-a1f68544ca39",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "9c64dbaf-d096-416c-bbbe-ca061d92ba7c",
        "cursor": {
          "ref": "27e1c6a0-d1aa-48aa-86d1-78ee894e084e",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fba24050-63bd-4460-a119-902feb759df0"
        },
        "item": {
          "id": "9c64dbaf-d096-416c-bbbe-ca061d92ba7c",
          "name": "did_json"
        },
        "response": {
          "id": "b12b6ed2-207e-41f7-a7a4-93b6b261275b",
          "status": "OK",
          "code": 200,
          "responseTime": 1268,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55546945-5f63-470c-90f8-f451eef0cfbe",
        "cursor": {
          "ref": "401d7323-e500-401a-8fe7-500f9f788212",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7ffd02c6-2626-4327-8f97-1a1839a01431"
        },
        "item": {
          "id": "55546945-5f63-470c-90f8-f451eef0cfbe",
          "name": "did:invalid"
        },
        "response": {
          "id": "d6b3d27b-8625-4cd3-8871-982e2715d375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55546945-5f63-470c-90f8-f451eef0cfbe",
        "cursor": {
          "ref": "401d7323-e500-401a-8fe7-500f9f788212",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7ffd02c6-2626-4327-8f97-1a1839a01431"
        },
        "item": {
          "id": "55546945-5f63-470c-90f8-f451eef0cfbe",
          "name": "did:invalid"
        },
        "response": {
          "id": "d6b3d27b-8625-4cd3-8871-982e2715d375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9b9d08-b055-45d2-87f2-bda51ed6f84a",
        "cursor": {
          "ref": "68867c79-8beb-4c5f-b9fe-05170cf20edb",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0c28401a-6a50-418c-af57-4ef6c910370f"
        },
        "item": {
          "id": "6c9b9d08-b055-45d2-87f2-bda51ed6f84a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8fc0a163-ca6a-4167-8cba-c0f4d5090e49",
          "status": "Not Found",
          "code": 404,
          "responseTime": 142,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cd0e5c-9662-4f4f-b8ea-83a063a9d97f",
        "cursor": {
          "ref": "38b82f68-234a-4ebb-a4f1-d5352f5749ec",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5f7d0347-b04a-4c77-89ce-b3d512518ec0"
        },
        "item": {
          "id": "05cd0e5c-9662-4f4f-b8ea-83a063a9d97f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b926ec7e-5e77-4237-b15e-58c7015360c8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deeaf3e6-d3b0-41d0-9dec-37c3caad0fb9",
        "cursor": {
          "ref": "9d3d1319-c5d8-4b13-8fd5-df79818b0099",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3c6e5b68-a780-4fa3-87e1-766714b642db"
        },
        "item": {
          "id": "deeaf3e6-d3b0-41d0-9dec-37c3caad0fb9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ce2cd1d8-f01c-4278-bd0c-6fa69aa00f0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bb742c-6596-4b55-8ce5-1aa1ab810c0c",
        "cursor": {
          "ref": "63f22216-86f1-4bc1-b637-675c551132b1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fb45c601-b4bf-4aa1-8b47-1c38f51099af"
        },
        "item": {
          "id": "27bb742c-6596-4b55-8ce5-1aa1ab810c0c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "faf3643e-e29a-4bf4-ace4-c50fea25611e",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "27bb742c-6596-4b55-8ce5-1aa1ab810c0c",
        "cursor": {
          "ref": "63f22216-86f1-4bc1-b637-675c551132b1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fb45c601-b4bf-4aa1-8b47-1c38f51099af"
        },
        "item": {
          "id": "27bb742c-6596-4b55-8ce5-1aa1ab810c0c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "faf3643e-e29a-4bf4-ace4-c50fea25611e",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "dc1c9b20-dd73-4b0b-96d7-3a43be38cc61",
        "cursor": {
          "ref": "9b71b0b5-710e-4378-bdaa-d9a90677e0c3",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c1fd577b-8c44-49ec-9d61-bca0b1f83644"
        },
        "item": {
          "id": "dc1c9b20-dd73-4b0b-96d7-3a43be38cc61",
          "name": "identifiers"
        },
        "response": {
          "id": "b7878af9-c76d-4127-816e-6b8f5810429e",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3965a5d4-9b4d-40c0-a252-dbf943124c01",
        "cursor": {
          "ref": "f6bc2052-3abc-4963-9b2e-8145b4c3da52",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5af6ff3b-8c47-4638-8a2f-3f7765a43cfe"
        },
        "item": {
          "id": "3965a5d4-9b4d-40c0-a252-dbf943124c01",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5e845aec-e588-4b58-8b5c-b20e5c0a523d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3965a5d4-9b4d-40c0-a252-dbf943124c01",
        "cursor": {
          "ref": "f6bc2052-3abc-4963-9b2e-8145b4c3da52",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5af6ff3b-8c47-4638-8a2f-3f7765a43cfe"
        },
        "item": {
          "id": "3965a5d4-9b4d-40c0-a252-dbf943124c01",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5e845aec-e588-4b58-8b5c-b20e5c0a523d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f00253e2-5220-40ce-8979-a6bd8b61683f",
        "cursor": {
          "ref": "4cab5ab0-3584-4f5d-8bb7-af21506354ce",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d70ddfa9-e094-4c91-b1b8-34812379e222"
        },
        "item": {
          "id": "f00253e2-5220-40ce-8979-a6bd8b61683f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3bf4e90d-56fa-4d44-9e66-17cb0b842867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "8dd553af-62eb-425b-9c36-1909d4775dc2",
        "cursor": {
          "ref": "e6a460c6-2966-42f5-a63e-aa2a0a5b4388",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3cdfd446-5ac3-44e8-aeec-a44b6fe8e8c1"
        },
        "item": {
          "id": "8dd553af-62eb-425b-9c36-1909d4775dc2",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "a9e220c1-8b45-45ac-9c2c-e806fa0fb479",
          "status": "Created",
          "code": 201,
          "responseTime": 119,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "da3464d7-8c13-4d1a-906b-17963c6fd6fe",
        "cursor": {
          "ref": "4346c1bf-3c35-4155-a104-66795c5adabc",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0ca73c64-7ca7-4bf7-b016-8dc6a4b05c74"
        },
        "item": {
          "id": "da3464d7-8c13-4d1a-906b-17963c6fd6fe",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c47008b5-10ec-4c3c-8ce0-629c738a33c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "89163355-6af3-4897-822f-308cc002688a",
        "cursor": {
          "ref": "81273ed8-999c-4b9e-ae79-0cf37908dda7",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "11d7d4df-5df4-47d3-894f-ff7a758ea842"
        },
        "item": {
          "id": "89163355-6af3-4897-822f-308cc002688a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2c018503-498e-4556-a625-742929acc3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "01937a2e-daf1-4bda-b4ca-1e8de13e9a72",
        "cursor": {
          "ref": "a906ed72-954c-4db8-b772-d3fe64c5573d",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1af57280-816c-4da4-9c15-e5e660cd6388"
        },
        "item": {
          "id": "01937a2e-daf1-4bda-b4ca-1e8de13e9a72",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cb323308-741d-43b3-baa3-4c2c5b52e9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "323221d5-691e-4d5d-8943-09b172356021",
        "cursor": {
          "ref": "c5f81c39-344d-407c-abcb-d7e15f39fae2",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c3f2da6c-c0db-42ac-94d8-714c8e8c39ff"
        },
        "item": {
          "id": "323221d5-691e-4d5d-8943-09b172356021",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fa95f4eb-ffc6-4a67-95eb-e771b076db54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "86f77a1a-97a5-4f4b-8f3a-087f2a5568ec",
        "cursor": {
          "ref": "6cbc21ec-ee7f-44b7-820a-7e36c84ede3c",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0504bf0d-e29b-4c1d-b7fa-be2fe21c1323"
        },
        "item": {
          "id": "86f77a1a-97a5-4f4b-8f3a-087f2a5568ec",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b19b8043-98cf-493f-ac9a-8c5ef091b7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "203e065b-1abb-4fea-ae9d-fde3194ba516",
        "cursor": {
          "ref": "831dd731-c5b6-449a-9ed5-47aa054153ea",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "eb2eee5d-f366-4b05-bd6e-4e8d6f58dd88"
        },
        "item": {
          "id": "203e065b-1abb-4fea-ae9d-fde3194ba516",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8702e66b-23a7-49e0-a745-abc603402fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "f49c0638-6d98-4b40-80b7-45c243a26f13",
        "cursor": {
          "ref": "22a33c87-e499-4f71-a8a2-7121f262cd17",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "245526ec-abae-492a-96e0-a285d2e6df24"
        },
        "item": {
          "id": "f49c0638-6d98-4b40-80b7-45c243a26f13",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "471eec99-ccfc-48b4-8b81-a70a96bf8a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "795e7097-35d3-4cea-a59f-9420e708b616",
        "cursor": {
          "ref": "ea25358e-154c-4fae-a968-bba8bc1f7fbf",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "30c8c4eb-f5b7-4386-8273-bff0238a2f37"
        },
        "item": {
          "id": "795e7097-35d3-4cea-a59f-9420e708b616",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e175b151-c08e-45c2-86b1-3e85eed8c1f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "fac5aded-8c70-4de0-90e4-ef3e01edd694",
        "cursor": {
          "ref": "b9141a8b-4646-4974-84cb-f07f4d136967",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8240c1c3-afe9-4c0a-881d-03e6a43a0b27"
        },
        "item": {
          "id": "fac5aded-8c70-4de0-90e4-ef3e01edd694",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7aba960d-d1f3-4c5a-b487-e7883ae6c331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "a687d56e-1893-42bb-9ffa-df2ec3770f65",
        "cursor": {
          "ref": "a60d83a4-259c-4ae0-9741-41d27dc2bff0",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "044d7c45-f9d1-4604-8d7b-629bfc252651"
        },
        "item": {
          "id": "a687d56e-1893-42bb-9ffa-df2ec3770f65",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3aa5d99d-3c2e-4523-b522-cd80fcca089c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a088f122-c03a-4c45-b7f8-1114fd0e5af9",
        "cursor": {
          "ref": "dc601391-220c-4454-9bb1-4642d82154af",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c751fc5e-3105-4528-80d8-31ec752e7cc4"
        },
        "item": {
          "id": "a088f122-c03a-4c45-b7f8-1114fd0e5af9",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "19079a02-7c90-4996-aa84-02874dba2adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "4db72b8d-39f1-4045-b45d-5f6afda4d861",
        "cursor": {
          "ref": "4d048754-678f-4681-8324-39642e6c6426",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "cb1ce3ab-a762-4036-bb51-12e7cdd48f9d"
        },
        "item": {
          "id": "4db72b8d-39f1-4045-b45d-5f6afda4d861",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "767c57ec-bca2-418c-a732-737c50ed9cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "c3fc162e-4227-4bd3-9eca-8bf17bdf8630",
        "cursor": {
          "ref": "40be75bc-af9f-4a0f-a79c-8640573bacd3",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e89b55d0-0dcb-466f-995e-fbff0d30aa47"
        },
        "item": {
          "id": "c3fc162e-4227-4bd3-9eca-8bf17bdf8630",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9926ed23-81be-44db-aeb4-65b59bf94e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "d6df4a45-513a-495b-b8a9-fe4f97b8bf90",
        "cursor": {
          "ref": "c44e1a6c-7e1b-4efb-9f2a-f7df5412db51",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5f830063-79c8-4bc9-b7c3-2efa8041fe1d"
        },
        "item": {
          "id": "d6df4a45-513a-495b-b8a9-fe4f97b8bf90",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "af858af5-326e-4fe2-ad18-1982396b42f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "8bd2ad61-283a-4ee9-9c3a-d9a6e91947d9",
        "cursor": {
          "ref": "ea16c694-56c2-4138-a089-81573fc679f4",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "909a0c18-12cf-4e5d-8433-6dffab1f9f0d"
        },
        "item": {
          "id": "8bd2ad61-283a-4ee9-9c3a-d9a6e91947d9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e2968aa7-5fa2-45c5-a2c9-f260427f0790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "f4157466-4c96-4ce7-8790-e6331f5b2434",
        "cursor": {
          "ref": "f86beee0-df9c-49d2-a4a8-c0e44e65c645",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "363a1749-8f84-4187-a44a-863cd63372fc"
        },
        "item": {
          "id": "f4157466-4c96-4ce7-8790-e6331f5b2434",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "19127f71-2745-4338-93ea-cd5f645b86c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "20dd66ba-f7e1-496f-9f6a-62c2f01bae61",
        "cursor": {
          "ref": "b8dfe65d-bee6-4207-8ea0-b0de876f4f4c",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7a753726-3aa6-43da-ab04-b19cd659e05c"
        },
        "item": {
          "id": "20dd66ba-f7e1-496f-9f6a-62c2f01bae61",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b4dd215e-06ab-429b-a711-e65b04280258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "8ef61536-f874-41fb-867a-a2163ef00208",
        "cursor": {
          "ref": "3794655c-626d-4983-92cd-0a6e404f95cf",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bfd03d4c-98e6-40f2-80d2-251b7e81e266"
        },
        "item": {
          "id": "8ef61536-f874-41fb-867a-a2163ef00208",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b26c63e9-ec15-4054-8726-d197cdf118a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "5d352562-4ae8-4151-a6cf-bcc307db38db",
        "cursor": {
          "ref": "88e09dbf-300b-4f53-8d64-697103d3e27d",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bf7bc918-8ee2-4eff-bd1e-1f0726bfb1a0"
        },
        "item": {
          "id": "5d352562-4ae8-4151-a6cf-bcc307db38db",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "441a5be3-8f31-4a7a-8666-b6b8daee2551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "9f3e2ab9-093d-4ab7-9a38-55a97ef6fbe6",
        "cursor": {
          "ref": "49839533-250a-4822-b05c-07800d7ef618",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4f4b4211-be99-4584-82c2-a43b7abb0978"
        },
        "item": {
          "id": "9f3e2ab9-093d-4ab7-9a38-55a97ef6fbe6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e891c359-38ca-45ed-bee2-17da238102d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "86007f54-1af0-456d-80fe-1b1e404f87a5",
        "cursor": {
          "ref": "3113a1b4-fdd9-4b02-abfb-88b9b6dc63f1",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4760ce18-fe15-4507-b963-323d2dcb62bb"
        },
        "item": {
          "id": "86007f54-1af0-456d-80fe-1b1e404f87a5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "985712b8-d10b-49fc-92a5-7a3fc6646c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "800e1598-eff7-4991-9c03-04fa66072490",
        "cursor": {
          "ref": "9e693ed2-a089-42d2-8399-a30d80db0b8b",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a909db32-be71-4b3f-b211-dc514f3e4de7"
        },
        "item": {
          "id": "800e1598-eff7-4991-9c03-04fa66072490",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dcd04088-72f6-44ef-b3ae-5a792ddf0d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "5c04bd8f-eb3f-4ff4-9520-9681f3d8dcbf",
        "cursor": {
          "ref": "3c8246f3-e558-4b47-b9e9-1c52eccd091d",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "060efd8f-425c-4277-b6b3-ebcd4c650aaa"
        },
        "item": {
          "id": "5c04bd8f-eb3f-4ff4-9520-9681f3d8dcbf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "329aea0f-f1bc-47ab-ba93-975c7b1a88ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "0be06874-8efe-42e1-b013-1e030120b5b9",
        "cursor": {
          "ref": "a968b434-9d33-4018-bbdc-6fe613b13c3d",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "415c164d-0cfb-46e0-a3f0-a541ef1646e7"
        },
        "item": {
          "id": "0be06874-8efe-42e1-b013-1e030120b5b9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "21e3a161-60c4-4d9e-8725-9ee6ae481c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4662,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e2407090-0785-4063-b356-46591c4e6d8a",
        "cursor": {
          "ref": "1063c72a-1172-43ae-bdb8-ad463ee9f271",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a8c48026-5ded-48f2-95f2-c8abe30d9f9d"
        },
        "item": {
          "id": "e2407090-0785-4063-b356-46591c4e6d8a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "70cb2873-ac9b-4b7b-ad41-5a34980eee5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5044,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "42d131f5-9979-4440-9143-5bb6ac388a07",
        "cursor": {
          "ref": "e559a1fa-5c5a-4f48-8da5-655647f3e738",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ec9141a5-1ea2-48cb-96b4-78856be4b687"
        },
        "item": {
          "id": "42d131f5-9979-4440-9143-5bb6ac388a07",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "86a41e95-bd7e-4d2c-91b0-6717877534a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4566,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "676d3174-d721-4b5c-a3bb-4dd496f52a9d",
        "cursor": {
          "ref": "fde35344-0087-4c34-b968-78fc005652b9",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e994027f-6d7b-4bc7-a559-5619d2d1256d"
        },
        "item": {
          "id": "676d3174-d721-4b5c-a3bb-4dd496f52a9d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dd13c6db-4d45-4f18-ab35-9c6915691700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6456,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3756b088-4837-46cf-a301-efb3e306e4f3",
        "cursor": {
          "ref": "0406794a-5608-4eb2-b3ca-59510368cfea",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "44a1bead-55ae-44e3-898f-a33959633639"
        },
        "item": {
          "id": "3756b088-4837-46cf-a301-efb3e306e4f3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "512cdbf1-b1d3-4f95-a70e-a228f912961d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5456,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ce3a7635-e9a1-4758-a221-cd69ce14ab77",
        "cursor": {
          "ref": "989a5e52-9a77-4366-89c1-70705f8b9d8d",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "33b817e3-7dc0-409f-8a93-944cb23adbe9"
        },
        "item": {
          "id": "ce3a7635-e9a1-4758-a221-cd69ce14ab77",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b29800a4-14e7-483a-84d8-0fcbadd30cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1218,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "07cc71f5-b589-4e37-8517-9d3380a71694",
        "cursor": {
          "ref": "2378e9cb-e087-437f-a794-d87a49be84b4",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c818be73-a973-4217-bf95-01d72b1a5f09"
        },
        "item": {
          "id": "07cc71f5-b589-4e37-8517-9d3380a71694",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "adfc9d69-c3b9-4219-a81d-9d6e38daaf79",
          "status": "Created",
          "code": 201,
          "responseTime": 4898,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "ca744906-cada-428a-a340-2716eee721ae",
        "cursor": {
          "ref": "234d8a16-886a-417f-9c12-80f226601e22",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "82529155-b7a4-404a-b9f5-042912a81100"
        },
        "item": {
          "id": "ca744906-cada-428a-a340-2716eee721ae",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b2454d16-a404-43a1-a234-0246ceff2903",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 4733,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a02efbb4-6509-4a07-9e08-f8c3b7e3064b",
        "cursor": {
          "ref": "01b466bc-0a87-414a-ad43-3c654a94517a",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "800619d3-b570-4213-b24e-5793537c8888"
        },
        "item": {
          "id": "a02efbb4-6509-4a07-9e08-f8c3b7e3064b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c89d0065-fb26-4a7a-9974-d95ae7e936e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a2832ef1-42a6-45db-b20b-a651014e169b",
        "cursor": {
          "ref": "4376333c-e497-4992-b3b1-c22365992c8a",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6f38e413-e9e9-4468-8c17-9958192d73a2"
        },
        "item": {
          "id": "a2832ef1-42a6-45db-b20b-a651014e169b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "052d01ff-bc04-4b91-85fd-51ea90826e02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "85b86321-410f-4083-a836-bb0ebf73b89d",
        "cursor": {
          "ref": "d70bd0a2-becb-477b-9ad6-2c68b38cb5a7",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1681508c-ac97-4677-8f8d-c9349bb1c331"
        },
        "item": {
          "id": "85b86321-410f-4083-a836-bb0ebf73b89d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fd483cc8-b204-448e-80d3-76b0e8888843",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5f4bc89b-3c9f-4473-b6df-9927e491045d",
        "cursor": {
          "ref": "f613f171-608e-4c8f-a1e8-066f6514dadc",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6c140bb9-cd21-47fc-b238-c431a4ff2ddd"
        },
        "item": {
          "id": "5f4bc89b-3c9f-4473-b6df-9927e491045d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "95795301-f1fe-4cb5-98c9-00c90765bde7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "45aee319-40fd-4999-b6eb-19c9a533c24b",
        "cursor": {
          "ref": "21d8ece6-d633-4dff-94d8-388fce88864f",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b0450e9c-43f7-44f1-8511-c481a60f8c4a"
        },
        "item": {
          "id": "45aee319-40fd-4999-b6eb-19c9a533c24b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9eed0c3d-8ef4-49d6-bfc5-d2ea5536a69f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b03672e6-de30-4890-9984-f524dbe00ec9",
        "cursor": {
          "ref": "7d1bb10f-dc02-4b47-9a51-718ad17bada0",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e2120429-544b-4952-80bd-ce79b8e064e8"
        },
        "item": {
          "id": "b03672e6-de30-4890-9984-f524dbe00ec9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8e546086-d788-4816-8c7e-d91a250d6a29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "229d3eaa-ebf6-4211-9d87-63ff2bc220b6",
        "cursor": {
          "ref": "5c68c8f4-9eee-4930-ba89-ccd643140b81",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "773bdfe9-564f-4d27-bd3c-d2778e1e9b6e"
        },
        "item": {
          "id": "229d3eaa-ebf6-4211-9d87-63ff2bc220b6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1a66ce4b-42bb-4484-8e18-2ae29f54b146",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7575be5c-485d-4972-96e1-79d6e0cb491e",
        "cursor": {
          "ref": "67f8e402-837a-4acf-9fdb-6a50e354e0fc",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a819d5c0-71b5-408b-9039-bad90d21b526"
        },
        "item": {
          "id": "7575be5c-485d-4972-96e1-79d6e0cb491e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4ac180be-5cfe-4ccf-80a4-4a5396e04525",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7c1aab83-de88-4d7b-a06b-aaafddaf8cd2",
        "cursor": {
          "ref": "d732d5b4-3c33-4577-bea9-b858aa88e827",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "62fcc24f-9d32-45a0-9d86-ba4caf06a5c2"
        },
        "item": {
          "id": "7c1aab83-de88-4d7b-a06b-aaafddaf8cd2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "88d8560e-1561-4d24-a199-ad82ec6468f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "108e4b67-1bce-495f-ba22-4b233e16db15",
        "cursor": {
          "ref": "159244d4-8a27-4029-9782-6f3d253a7077",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dc8c4afd-9dd8-4089-adda-86f9e90a99bc"
        },
        "item": {
          "id": "108e4b67-1bce-495f-ba22-4b233e16db15",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "501eff37-1a84-4a38-9b35-3bc938c61424",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "aee9f1f0-af26-430b-ab17-dc2aeff67050",
        "cursor": {
          "ref": "45e518fa-9a78-4874-b34e-8f1f2046f811",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "95ae4f31-7039-4cd1-9fa6-9764883a9ac3"
        },
        "item": {
          "id": "aee9f1f0-af26-430b-ab17-dc2aeff67050",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "413e6965-1d69-4073-b0b3-bc8f412cc789",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "a20838cc-aa05-44a9-8da2-a207be638a29",
        "cursor": {
          "ref": "230f935e-f107-4b47-8604-989bf71266b2",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5da84f7f-c20e-4b43-bd11-f1d234adee9e"
        },
        "item": {
          "id": "a20838cc-aa05-44a9-8da2-a207be638a29",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "db793b14-d757-412d-8d89-aaaf6a3c0133",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "ffb2794f-783e-4842-bb2c-a922b476ef12",
        "cursor": {
          "ref": "3f9cdbc7-c587-46d4-ab81-6fce87fa9213",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f5775e3e-2779-4411-b849-714bdb535444"
        },
        "item": {
          "id": "ffb2794f-783e-4842-bb2c-a922b476ef12",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0506a73a-637a-4632-bd77-c9312a7bb6fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "28778cf5-8617-489b-9003-876a4e25caa9",
        "cursor": {
          "ref": "85c05a92-7611-4f91-9b02-4ee77667a843",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "06b066ed-446e-4c80-89e0-330d31ab8f2b"
        },
        "item": {
          "id": "28778cf5-8617-489b-9003-876a4e25caa9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c7988240-d424-465b-8aef-2c4b9d6411e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "e6bf8642-709b-497d-9a70-bbc76a333e2c",
        "cursor": {
          "ref": "a1c2f100-efe0-4252-826f-3c87b4e53a3a",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6c9edbbc-046a-4ece-b887-ccf681048836"
        },
        "item": {
          "id": "e6bf8642-709b-497d-9a70-bbc76a333e2c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f139fdc4-0b9a-48f4-a862-9273c99580e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "d3508dee-95af-4186-8664-d87ba688576d",
        "cursor": {
          "ref": "90ae5d9b-1dce-4eae-a7c6-3eab17cbc5c9",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f4ce0528-f75a-4919-b1f3-7b35c260a90b"
        },
        "item": {
          "id": "d3508dee-95af-4186-8664-d87ba688576d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3ab8fb4a-08c4-417b-96d7-a949fbcb505d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "e7635021-d24c-4065-9614-3310b4f2ee33",
        "cursor": {
          "ref": "b7166f12-aef4-409c-b4b9-fda97d0a0fcd",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "03021da0-ba30-4319-8fb4-4b4ebc097746"
        },
        "item": {
          "id": "e7635021-d24c-4065-9614-3310b4f2ee33",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "742e9a75-2a82-4633-b109-9d18c81b54c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "175723cb-5d7d-4e7d-a887-191d3f314992",
        "cursor": {
          "ref": "fa3e212f-e5eb-44f2-9872-ec4bb9b8660b",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2c5ea01e-69d0-4641-ab78-a11b634c344c"
        },
        "item": {
          "id": "175723cb-5d7d-4e7d-a887-191d3f314992",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f0119814-fee2-4667-b8dc-6276c89034e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "1d50c61f-e5eb-4baf-b804-a7792ea0959e",
        "cursor": {
          "ref": "f3df8708-cd9a-4e54-b4e6-c716d1271960",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a0a0b91d-62aa-49b7-8f71-e5cb54e42253"
        },
        "item": {
          "id": "1d50c61f-e5eb-4baf-b804-a7792ea0959e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ebc1d676-c47a-4517-b87b-cb53f3e65dcb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "dccdb069-416e-4403-a35f-e901ee2225de",
        "cursor": {
          "ref": "d815c994-0b93-4d47-9cf1-9a231d100b5e",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "453c7ec5-8e08-406b-84b7-1d4b1e9e93d7"
        },
        "item": {
          "id": "dccdb069-416e-4403-a35f-e901ee2225de",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "18073f3d-fee0-49ec-a9ff-5f2b06ce1314",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "fc4161d7-a3d6-4e7f-9d99-c0ea0cb78ec0",
        "cursor": {
          "ref": "d4efea73-eeed-4343-b1a3-ceee672a7e03",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5d251c00-8475-455e-9c11-dbf97808bef7"
        },
        "item": {
          "id": "fc4161d7-a3d6-4e7f-9d99-c0ea0cb78ec0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "281113a4-e7e9-40c9-bee9-a98c1ae4b7c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "76b3799d-6665-4cf9-af7d-7ba5978b7160",
        "cursor": {
          "ref": "b405c129-fde8-4f2a-81ee-0be169cce3b9",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9bc9320c-8906-4d95-9b59-0b13ac0f70c6"
        },
        "item": {
          "id": "76b3799d-6665-4cf9-af7d-7ba5978b7160",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1f75c55e-663f-45f2-a1b9-24710d053f37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c54ecbbb-3d6f-45ae-aa22-0590468efdbb",
        "cursor": {
          "ref": "34b272a6-71eb-44a7-998e-46d00d768547",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4f0c940d-e34f-449f-a840-2f908e3694e6"
        },
        "item": {
          "id": "c54ecbbb-3d6f-45ae-aa22-0590468efdbb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8b117c37-2b04-4ee1-ad28-914ec2182a2e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "40b29785-a735-4363-9465-2ec3ffb26224",
        "cursor": {
          "ref": "ca717907-5617-42bb-b9a6-84a8048aa098",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9463e62e-63a7-4793-9114-6c5b8451a950"
        },
        "item": {
          "id": "40b29785-a735-4363-9465-2ec3ffb26224",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "84fc8ace-926e-4a3b-bac7-320bd262b9ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7d680b1b-0f72-4ad4-a15a-e0f896a135d3",
        "cursor": {
          "ref": "ec98890f-0336-45cd-9b0b-e157184dc59d",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b8e58c86-533f-4573-9085-ea64ac9c1709"
        },
        "item": {
          "id": "7d680b1b-0f72-4ad4-a15a-e0f896a135d3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3b649f10-7b29-4a8c-a19f-de21f60d7a74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "784614ca-40d6-4a17-89ef-9e511b146638",
        "cursor": {
          "ref": "cb269003-3a04-4a56-8d9a-428e809d2759",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c87a5487-6755-4c7a-adf7-3d2bd2dd8161"
        },
        "item": {
          "id": "784614ca-40d6-4a17-89ef-9e511b146638",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "638456e1-b2ff-4cba-9d13-f9c00281d904",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "966b67e7-c279-4c44-b374-f18e2f7b95dd",
        "cursor": {
          "ref": "78909587-66fd-4c1e-b264-089c27d5e14a",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "807e1036-4083-4d9c-a728-bc221bd24f84"
        },
        "item": {
          "id": "966b67e7-c279-4c44-b374-f18e2f7b95dd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8bdc2796-469b-491a-9541-bfe6f8f4ad36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "cd595c36-43f4-4f76-9a37-5f74a02b45d4",
        "cursor": {
          "ref": "a0c6a029-0bb2-4e1f-93b4-455455cd1e65",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1f4dc2fd-9343-44cf-bb74-339cee54466c"
        },
        "item": {
          "id": "cd595c36-43f4-4f76-9a37-5f74a02b45d4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0ab247ca-4fa9-4d15-9e3a-6193296e8d71",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "dd07bca8-5117-4e1f-b939-06568c94a4d4",
        "cursor": {
          "ref": "77a32418-ab4a-4adb-9867-9bcbf0222c45",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5fd503b5-689a-4f10-9701-28ec5e4dcc7e"
        },
        "item": {
          "id": "dd07bca8-5117-4e1f-b939-06568c94a4d4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e6cdd416-37bc-4902-b2f8-5f8b04b34d4e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "0b47abed-76b6-4771-b716-34d9f659363d",
        "cursor": {
          "ref": "a172b239-bb64-4f3e-89a0-06ca23f2158e",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fa82f667-e0df-44cc-beff-a4e7c8c5c451"
        },
        "item": {
          "id": "0b47abed-76b6-4771-b716-34d9f659363d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ec09a240-dd8b-4542-9be1-a09492a494bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "d64247f2-08a3-4773-b2df-9b381cd3537d",
        "cursor": {
          "ref": "64cc3fd6-e8e3-4a05-a53d-28e05d6fd284",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d4ecd1e5-cd45-433e-9a4d-8401a75a16fd"
        },
        "item": {
          "id": "d64247f2-08a3-4773-b2df-9b381cd3537d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ed5addd7-04a6-4223-83c5-b9d82b7ecdeb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "b725f253-7d5f-4219-96f0-d3dfb6bc42bd",
        "cursor": {
          "ref": "4907e127-0674-406e-a6b4-fc4d805d3a35",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0c566727-ad14-4fbf-83ec-2746797ffb98"
        },
        "item": {
          "id": "b725f253-7d5f-4219-96f0-d3dfb6bc42bd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "896c7d8f-fc20-4494-ab64-d1b429d72288",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "35a21591-b5b2-4b5d-8eb5-812bae638559",
        "cursor": {
          "ref": "d0fb0f7a-9607-46a3-b110-80fc3979660f",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9a881325-7bf6-4d99-b392-0cd4f7167825"
        },
        "item": {
          "id": "35a21591-b5b2-4b5d-8eb5-812bae638559",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e32803ee-4d37-48fe-9ec5-63413cd16235",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "9c180c8a-9879-4806-988f-5f61cd743683",
        "cursor": {
          "ref": "badd7274-79e0-458e-a01b-bdf4fe636ab8",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "24ca3f06-b555-4f87-9a12-b821aadffbd2"
        },
        "item": {
          "id": "9c180c8a-9879-4806-988f-5f61cd743683",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b6848cbf-649a-4cac-8c23-76312f07004f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "d7d40aff-0861-428f-943c-6192af1ea7d8",
        "cursor": {
          "ref": "9f49eff6-93f6-45ce-967a-6a900e0018ac",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0893be5d-c7ef-4965-935b-9bb4cfe90178"
        },
        "item": {
          "id": "d7d40aff-0861-428f-943c-6192af1ea7d8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2f05d4de-a6f2-4ddb-b4e5-f45e9d24c6ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "43bf0012-40f8-4d1a-9120-7770d217296f",
        "cursor": {
          "ref": "bb03a9b2-aeba-4eff-8d88-123a190515fe",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d48e3328-2778-4935-af16-49f621a23c40"
        },
        "item": {
          "id": "43bf0012-40f8-4d1a-9120-7770d217296f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "46687d87-2719-46ce-a0ad-78341a6d2c18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "d9aa7360-d9cb-4708-887e-5005e8a91743",
        "cursor": {
          "ref": "78e340a9-d7a5-49ec-a16f-75f14d9326e1",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ce96b55a-0f9c-478f-a8c4-28e2682f5d66"
        },
        "item": {
          "id": "d9aa7360-d9cb-4708-887e-5005e8a91743",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "60b11249-6df9-4065-ae18-b399768ba788",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "946b1332-1a8f-4e44-9639-7b7cc1f42c59",
        "cursor": {
          "ref": "0bda081a-7c7a-420a-aea4-31c0d4b025f7",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3a6f7442-d04d-4690-bfe4-de1157b8b30e"
        },
        "item": {
          "id": "946b1332-1a8f-4e44-9639-7b7cc1f42c59",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ba79bffa-0003-4628-86d4-8ab551521601",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "02c269e3-6168-42ae-a6a9-e046c4c6340d",
        "cursor": {
          "ref": "815fd966-4f37-42bf-b060-f3847a31228a",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b02ba0fc-8d1a-40d8-87f7-93c3afa8e0f1"
        },
        "item": {
          "id": "02c269e3-6168-42ae-a6a9-e046c4c6340d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5e8c718f-4af6-4a9d-91fe-d6b3024e205e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "d23bf895-34a9-4fdd-9592-8976c3283557",
        "cursor": {
          "ref": "703ea28a-672d-4633-a3db-851467e57460",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0b6469c5-5f47-431a-a8db-a9cedc24dd45"
        },
        "item": {
          "id": "d23bf895-34a9-4fdd-9592-8976c3283557",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "eb5f39f4-0868-486f-a554-03acffa939ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "034b30fc-2cf2-4040-89cf-51005dac5449",
        "cursor": {
          "ref": "2b0dc264-469a-4d09-a93f-dbb555c527bd",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6bbf88e1-09e2-4201-87c2-18bf35f1f2fe"
        },
        "item": {
          "id": "034b30fc-2cf2-4040-89cf-51005dac5449",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e22644d3-f4fd-4e30-bbfb-badb85d5ad67",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "24941483-6db3-4f23-9bb6-dda5f7e6fd70",
        "cursor": {
          "ref": "54211d05-2af9-4389-89c3-ac47133e071f",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3910ad9d-d0ef-47c8-9b6d-7eaff9168b95"
        },
        "item": {
          "id": "24941483-6db3-4f23-9bb6-dda5f7e6fd70",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "25569c4c-b97b-4f50-8f52-1a276a105fc7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "6e9728ca-31e8-415f-9bf3-d98e63955d6c",
        "cursor": {
          "ref": "e1b51cc8-6b0f-4d29-a739-169f798b2167",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c5676d9a-5ef5-4532-921c-41e5ee3b1ae6"
        },
        "item": {
          "id": "6e9728ca-31e8-415f-9bf3-d98e63955d6c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ab82fc5e-659b-4aa6-ad37-bbe9728b50d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "a25f5a40-f152-4aef-812e-7830a3d8ff1c",
        "cursor": {
          "ref": "6cda71c4-631a-4a7c-8c32-2bb010b895d2",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6c6ed638-293a-4f20-895a-a6bac2e691e6"
        },
        "item": {
          "id": "a25f5a40-f152-4aef-812e-7830a3d8ff1c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1a3a2406-297f-46af-9b16-76a3a3d7ca6c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "8ed2a7b0-5b7e-46fe-9748-e9a1ca5d8bae",
        "cursor": {
          "ref": "50a4d007-0bf6-49dd-a03b-a6d5b71e897f",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2ca70a26-9302-47a0-a288-24a687b42cf0"
        },
        "item": {
          "id": "8ed2a7b0-5b7e-46fe-9748-e9a1ca5d8bae",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "04e8cf34-b1a1-4407-b09b-1277c93d9c0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "5afb1e71-e7b4-4dad-b9a1-1ded7e2fde96",
        "cursor": {
          "ref": "82d7bb76-50b3-48e1-8dbb-f5acc93b9f34",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "206e178d-ddbb-4a92-938c-239b167a435f"
        },
        "item": {
          "id": "5afb1e71-e7b4-4dad-b9a1-1ded7e2fde96",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d1048931-ef96-4724-a85d-eef1a632b4f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "ae949aef-dd38-42c1-8ad3-083b321e5b1a",
        "cursor": {
          "ref": "90279129-7d91-40a6-a40c-c1966e12f7dd",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "096b6125-5e70-4a3e-a9ba-46808c062b0b"
        },
        "item": {
          "id": "ae949aef-dd38-42c1-8ad3-083b321e5b1a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "81375a23-bb74-4930-aa18-0c6a2f5d62e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "7183281d-3372-4a1a-82be-729399af85bd",
        "cursor": {
          "ref": "4e665eaf-a001-472d-83f8-f6a0dc24575c",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8fa399c0-5bcd-4ea3-8dc4-77101a9c0f3b"
        },
        "item": {
          "id": "7183281d-3372-4a1a-82be-729399af85bd",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4b25c7f8-68fc-4e73-988b-3149d1f0dcf4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "2bc29a18-8178-4f44-81d5-42a995c8cc2b",
        "cursor": {
          "ref": "d7e75d92-07f1-474f-84a3-40eb762041ca",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0aedd5bb-502f-4a64-86f1-03f5ec63facb"
        },
        "item": {
          "id": "2bc29a18-8178-4f44-81d5-42a995c8cc2b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "31070d14-8594-4c94-93c9-d734004572d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "b5f72a32-a5d8-43e7-886d-e0d428c52089",
        "cursor": {
          "ref": "4d00a267-8c50-4fc1-bc08-a053488c68b9",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "89d0669e-eb82-496a-afa2-453d08a1bd8c"
        },
        "item": {
          "id": "b5f72a32-a5d8-43e7-886d-e0d428c52089",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "814a95c9-af7d-42c7-a8a7-c38e3d681f9f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "b63ede82-781e-4232-bf1f-bee1dd2081f3",
        "cursor": {
          "ref": "7be8e315-3426-4e2c-886b-83b685f90388",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3a89d65c-b924-411c-80f4-1129c277e0d2"
        },
        "item": {
          "id": "b63ede82-781e-4232-bf1f-bee1dd2081f3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8936351c-b7d3-4f6d-8188-4abb68dcd009",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "9c781fac-f9ba-4366-b12e-9e144e39e310",
        "cursor": {
          "ref": "1288ab9a-b0cb-4618-93a0-2adfa0a20815",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "99ce1436-24a1-4cee-a7c5-2aa50e13dfb9"
        },
        "item": {
          "id": "9c781fac-f9ba-4366-b12e-9e144e39e310",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "76a0174c-fa53-4583-9602-5c5527856826",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "a3eef914-49c7-4d2f-80d1-0f542be6d23d",
        "cursor": {
          "ref": "177b03c7-93d3-4fed-b3c6-db4a557f42f3",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "11c73378-b752-401f-8f9b-6e7ce20b20f6"
        },
        "item": {
          "id": "a3eef914-49c7-4d2f-80d1-0f542be6d23d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5a6b9e5f-35c6-4253-91aa-d864df549c2f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "cfa89ceb-f1e0-4097-84cf-17f7a375c83c",
        "cursor": {
          "ref": "2a8a51bd-540a-4892-a067-79c37ad0c0e6",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b8144e96-37f0-4451-a245-8aac6715c6d2"
        },
        "item": {
          "id": "cfa89ceb-f1e0-4097-84cf-17f7a375c83c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "23210c64-b046-4a4e-b8e5-c72b60d3384f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "d8ea1cb1-f66b-4349-b1cf-de061c289c46",
        "cursor": {
          "ref": "0199e183-0041-4ad8-a113-5e0e8b5d042c",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7bbeae0e-f57c-4d3a-9d1b-442b40c6f6e8"
        },
        "item": {
          "id": "d8ea1cb1-f66b-4349-b1cf-de061c289c46",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "241d3036-ecd9-42ff-bd6e-6549d699110d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "1454e682-ca9e-4846-a38c-924364720d07",
        "cursor": {
          "ref": "006a5695-c29f-4c9f-93c8-3a089c14a8b3",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "30ac9150-3070-495e-bfeb-a5d2d9a7f9a6"
        },
        "item": {
          "id": "1454e682-ca9e-4846-a38c-924364720d07",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "edf2017e-cd33-4412-91ad-8585b23e3fd0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "546745b9-e793-41a3-a28c-6e81f3f21d84",
        "cursor": {
          "ref": "5f0c3463-c88c-4ec0-b6f6-b2b8fc981fce",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "68087ac5-117b-471a-a6ea-0770fcd3669f"
        },
        "item": {
          "id": "546745b9-e793-41a3-a28c-6e81f3f21d84",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b7e80b18-2214-43af-a266-74fe51882058",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "1bd9c703-0c11-4c31-aaba-50646806f068",
        "cursor": {
          "ref": "86296d1d-b989-4581-a6b4-305d6d827174",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fb6596d2-8d9e-4b95-932b-792a59e8b236"
        },
        "item": {
          "id": "1bd9c703-0c11-4c31-aaba-50646806f068",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2e5ab391-af8f-430e-a3d9-90491978b86f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "4910d47f-e120-4f28-8fdb-6bf6007676a0",
        "cursor": {
          "ref": "117311b8-f356-44f6-a6a7-6b3f19b6cf01",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7da36396-e6ec-4a78-ac3d-7be483ad7c35"
        },
        "item": {
          "id": "4910d47f-e120-4f28-8fdb-6bf6007676a0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e5d57012-8e36-4fb4-ab45-619cb6c223bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "96240c2a-70ee-430f-989a-af534f2e1495",
        "cursor": {
          "ref": "4f1208ad-4c03-4850-9618-0b73aba2ad3e",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "da667ba8-f172-4db5-a7e7-4dc05970921d"
        },
        "item": {
          "id": "96240c2a-70ee-430f-989a-af534f2e1495",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4d0a6a6a-b4fd-4f6a-9720-c975babf09d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7ce3c018-5ef1-4d34-93df-7611ceaa814f",
        "cursor": {
          "ref": "64a42952-9ee3-455a-951d-66f3f4dfec22",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1a15af8e-5248-4cad-a44d-45dd9ead3c26"
        },
        "item": {
          "id": "7ce3c018-5ef1-4d34-93df-7611ceaa814f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "adf69f5b-ea9f-4653-b2a5-6c951a0ffe50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "1d797396-3118-4c34-9b33-70b82ca19d12",
        "cursor": {
          "ref": "c64d026d-e014-47a8-b46f-c5d9fe499ccd",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "dc2133f1-6cb3-4cfc-909d-44f1e64ffeb0"
        },
        "item": {
          "id": "1d797396-3118-4c34-9b33-70b82ca19d12",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b4d8390d-96d9-4722-9d26-ee79e07c96a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "d924a780-affc-4077-809d-985246822b22",
        "cursor": {
          "ref": "44a8d4fa-5861-4cae-b447-23bc9dbf61b6",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "90926127-e1b0-4c46-8c94-ed75b7250850"
        },
        "item": {
          "id": "d924a780-affc-4077-809d-985246822b22",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f3bddc25-3d5f-4c12-9e65-35fad078aaa8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "b6418064-55ef-450a-b1d5-eba6c245a575",
        "cursor": {
          "ref": "a17c4b79-3b35-4047-8b31-a1e085cfa69f",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3fd6716c-2725-45bc-a3ed-a65856f3861f"
        },
        "item": {
          "id": "b6418064-55ef-450a-b1d5-eba6c245a575",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "91fa8b64-35e1-4292-b59b-f4c16998c77a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "0fe5dfa8-02f2-46b0-b239-6cdc4b9c8ab5",
        "cursor": {
          "ref": "5ad0c893-b4d7-4ddc-931e-b27d599fe666",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8cd6f234-c6a1-4362-9ed2-d4199328e3e2"
        },
        "item": {
          "id": "0fe5dfa8-02f2-46b0-b239-6cdc4b9c8ab5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c0b44447-e348-4565-b868-cd57c2759f08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "5c7ec358-292e-4232-9ef7-a81d89958803",
        "cursor": {
          "ref": "553fc1ef-9fea-4f29-a28a-f14d4de49b19",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "edbce584-c5f9-4383-8efd-74277c56c542"
        },
        "item": {
          "id": "5c7ec358-292e-4232-9ef7-a81d89958803",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3bbee03c-3a75-4b4f-9a1e-7d71a50ca6de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "1d80498e-db96-4ebc-bf4f-f86a08baf0f2",
        "cursor": {
          "ref": "9a5836c0-3213-4c06-a8d9-3dc7c70f25e9",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e8fafa8b-f516-4498-97ea-eb28eb7485c1"
        },
        "item": {
          "id": "1d80498e-db96-4ebc-bf4f-f86a08baf0f2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "81f9933c-d47e-4ead-84dc-ed05604df4a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "504d8f9a-311d-41c4-9b96-13d9f72aab94",
        "cursor": {
          "ref": "fe462719-c7b2-4d93-a33c-6dac871e292f",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4f86e6e5-addd-4a45-bf2b-0f75cc3deaf5"
        },
        "item": {
          "id": "504d8f9a-311d-41c4-9b96-13d9f72aab94",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "346f2016-19ee-4c8e-b11f-54df9f4bc8c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "504d8f9a-311d-41c4-9b96-13d9f72aab94",
        "cursor": {
          "ref": "fe462719-c7b2-4d93-a33c-6dac871e292f",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4f86e6e5-addd-4a45-bf2b-0f75cc3deaf5"
        },
        "item": {
          "id": "504d8f9a-311d-41c4-9b96-13d9f72aab94",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "346f2016-19ee-4c8e-b11f-54df9f4bc8c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "dc134d65-ae51-48b7-a675-18e4dfc31af5",
        "cursor": {
          "ref": "ba4cc735-1a21-4632-b63a-a32993bcd79f",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d2519e55-411f-4818-bd7b-7b1f4cddd7e7"
        },
        "item": {
          "id": "dc134d65-ae51-48b7-a675-18e4dfc31af5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ffe373fc-f6f4-4cb9-957e-21756d5d76d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "dc134d65-ae51-48b7-a675-18e4dfc31af5",
        "cursor": {
          "ref": "ba4cc735-1a21-4632-b63a-a32993bcd79f",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d2519e55-411f-4818-bd7b-7b1f4cddd7e7"
        },
        "item": {
          "id": "dc134d65-ae51-48b7-a675-18e4dfc31af5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ffe373fc-f6f4-4cb9-957e-21756d5d76d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "1105de21-1ec5-40ca-b65c-14d9c4490cf1",
        "cursor": {
          "ref": "8fd52e1c-c406-466d-a236-0a2e415d84d2",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "95dba515-641c-4a3f-9ea1-46d3ecc34798"
        },
        "item": {
          "id": "1105de21-1ec5-40ca-b65c-14d9c4490cf1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0b5f4a05-cb6b-4ff4-9999-b627601d34a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "1105de21-1ec5-40ca-b65c-14d9c4490cf1",
        "cursor": {
          "ref": "8fd52e1c-c406-466d-a236-0a2e415d84d2",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "95dba515-641c-4a3f-9ea1-46d3ecc34798"
        },
        "item": {
          "id": "1105de21-1ec5-40ca-b65c-14d9c4490cf1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0b5f4a05-cb6b-4ff4-9999-b627601d34a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "d5460045-25b7-4ad2-a2a8-e7f753af26cb",
        "cursor": {
          "ref": "1731b152-e2c6-4b1d-af63-2eccdd5cbd97",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6f438d89-5fa4-4deb-9473-fb50a5589e78"
        },
        "item": {
          "id": "d5460045-25b7-4ad2-a2a8-e7f753af26cb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2cd66d39-10fb-4b0c-af32-1f9b1278d0b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d5460045-25b7-4ad2-a2a8-e7f753af26cb",
        "cursor": {
          "ref": "1731b152-e2c6-4b1d-af63-2eccdd5cbd97",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6f438d89-5fa4-4deb-9473-fb50a5589e78"
        },
        "item": {
          "id": "d5460045-25b7-4ad2-a2a8-e7f753af26cb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2cd66d39-10fb-4b0c-af32-1f9b1278d0b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "30a5399c-4585-4597-aacc-bc567d038cc1",
        "cursor": {
          "ref": "5884e2b5-13cf-41a7-b718-fb506b5801cd",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "75be2e4a-198c-43a1-83ba-59c9d88877d6"
        },
        "item": {
          "id": "30a5399c-4585-4597-aacc-bc567d038cc1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2045dfc6-040f-4a15-90ad-66041ef3a690",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "30a5399c-4585-4597-aacc-bc567d038cc1",
        "cursor": {
          "ref": "5884e2b5-13cf-41a7-b718-fb506b5801cd",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "75be2e4a-198c-43a1-83ba-59c9d88877d6"
        },
        "item": {
          "id": "30a5399c-4585-4597-aacc-bc567d038cc1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2045dfc6-040f-4a15-90ad-66041ef3a690",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "63299845-1eca-4886-bcee-cbc14ef721a9",
        "cursor": {
          "ref": "c2a6d5a8-34f3-46dc-8192-fab8105ff02b",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5280573b-6198-4b77-85a8-c62e7e3c027f"
        },
        "item": {
          "id": "63299845-1eca-4886-bcee-cbc14ef721a9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6baf0513-2d64-45ac-8a65-11e7689e8f0b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "63299845-1eca-4886-bcee-cbc14ef721a9",
        "cursor": {
          "ref": "c2a6d5a8-34f3-46dc-8192-fab8105ff02b",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5280573b-6198-4b77-85a8-c62e7e3c027f"
        },
        "item": {
          "id": "63299845-1eca-4886-bcee-cbc14ef721a9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6baf0513-2d64-45ac-8a65-11e7689e8f0b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "1e1c94ea-4071-4043-939a-f630ba8318ba",
        "cursor": {
          "ref": "ac58fbc3-ecaf-4308-9543-9902c5ee4cfd",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "49c3de10-cd51-4be5-ae7c-3b31c9a96559"
        },
        "item": {
          "id": "1e1c94ea-4071-4043-939a-f630ba8318ba",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "51608470-6864-4d02-8dfb-1228323a5b23",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1e1c94ea-4071-4043-939a-f630ba8318ba",
        "cursor": {
          "ref": "ac58fbc3-ecaf-4308-9543-9902c5ee4cfd",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "49c3de10-cd51-4be5-ae7c-3b31c9a96559"
        },
        "item": {
          "id": "1e1c94ea-4071-4043-939a-f630ba8318ba",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "51608470-6864-4d02-8dfb-1228323a5b23",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "f35f2fbb-7525-4ef7-92d5-09bc4ebc321d",
        "cursor": {
          "ref": "6fa9f35a-3a2e-4f47-96ff-3cc724783339",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "08daa1d2-e587-4879-965f-c37239ea8906"
        },
        "item": {
          "id": "f35f2fbb-7525-4ef7-92d5-09bc4ebc321d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9f337179-6b53-43bd-9d93-1afcc501e293",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "f35f2fbb-7525-4ef7-92d5-09bc4ebc321d",
        "cursor": {
          "ref": "6fa9f35a-3a2e-4f47-96ff-3cc724783339",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "08daa1d2-e587-4879-965f-c37239ea8906"
        },
        "item": {
          "id": "f35f2fbb-7525-4ef7-92d5-09bc4ebc321d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9f337179-6b53-43bd-9d93-1afcc501e293",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "f38a9b6c-662c-439a-abae-f794815fdc12",
        "cursor": {
          "ref": "00b88b9a-24df-47b6-bf2c-d16deb549f89",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f20a2e2c-2081-4340-8f2e-9f96c2f6450c"
        },
        "item": {
          "id": "f38a9b6c-662c-439a-abae-f794815fdc12",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "12586b19-4992-43c4-ba58-9ead8a898322",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "f38a9b6c-662c-439a-abae-f794815fdc12",
        "cursor": {
          "ref": "00b88b9a-24df-47b6-bf2c-d16deb549f89",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f20a2e2c-2081-4340-8f2e-9f96c2f6450c"
        },
        "item": {
          "id": "f38a9b6c-662c-439a-abae-f794815fdc12",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "12586b19-4992-43c4-ba58-9ead8a898322",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e083cfc8-1e31-4003-bf47-147316787987",
        "cursor": {
          "ref": "6a68d398-f853-4e63-ab9e-7e83b026f467",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a35619cf-0f66-4181-97af-95560fcad50f"
        },
        "item": {
          "id": "e083cfc8-1e31-4003-bf47-147316787987",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c83bbe7f-592f-4b91-8360-0c409173e965",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e083cfc8-1e31-4003-bf47-147316787987",
        "cursor": {
          "ref": "6a68d398-f853-4e63-ab9e-7e83b026f467",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a35619cf-0f66-4181-97af-95560fcad50f"
        },
        "item": {
          "id": "e083cfc8-1e31-4003-bf47-147316787987",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c83bbe7f-592f-4b91-8360-0c409173e965",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "f0274568-0e41-4bdc-8ada-fde777429af6",
        "cursor": {
          "ref": "a042c931-3031-400c-92de-fa0f412f7d44",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "be928be7-6f64-43fa-8d60-6fd207ed987d"
        },
        "item": {
          "id": "f0274568-0e41-4bdc-8ada-fde777429af6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "804c65bf-e512-4438-ae58-15d618c11510",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f0274568-0e41-4bdc-8ada-fde777429af6",
        "cursor": {
          "ref": "a042c931-3031-400c-92de-fa0f412f7d44",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "be928be7-6f64-43fa-8d60-6fd207ed987d"
        },
        "item": {
          "id": "f0274568-0e41-4bdc-8ada-fde777429af6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "804c65bf-e512-4438-ae58-15d618c11510",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9d490177-3d17-43e7-9b33-04876d3b8431",
        "cursor": {
          "ref": "294fc9c7-8863-4bb3-8f9f-87584fa0417c",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0d24c65e-d1fa-4576-9838-a2189e5bcda0"
        },
        "item": {
          "id": "9d490177-3d17-43e7-9b33-04876d3b8431",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cde50286-ceae-4702-9fe7-202fe9b661b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9d490177-3d17-43e7-9b33-04876d3b8431",
        "cursor": {
          "ref": "294fc9c7-8863-4bb3-8f9f-87584fa0417c",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0d24c65e-d1fa-4576-9838-a2189e5bcda0"
        },
        "item": {
          "id": "9d490177-3d17-43e7-9b33-04876d3b8431",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cde50286-ceae-4702-9fe7-202fe9b661b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "64d7f10d-67d1-4691-993e-4880d797003a",
        "cursor": {
          "ref": "62d1b8c5-8118-455c-bceb-0e70c9ce06ab",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dcf701df-6fa6-42fa-a17b-fa6d080a4157"
        },
        "item": {
          "id": "64d7f10d-67d1-4691-993e-4880d797003a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "966154cd-45bd-4c35-9ee6-3b3d5e4744b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "64d7f10d-67d1-4691-993e-4880d797003a",
        "cursor": {
          "ref": "62d1b8c5-8118-455c-bceb-0e70c9ce06ab",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dcf701df-6fa6-42fa-a17b-fa6d080a4157"
        },
        "item": {
          "id": "64d7f10d-67d1-4691-993e-4880d797003a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "966154cd-45bd-4c35-9ee6-3b3d5e4744b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f5acc290-9408-455c-bbc6-f433b2c483eb",
        "cursor": {
          "ref": "d3551ccb-2c83-448d-b78f-24c6b5464cec",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c9373f77-c445-4e6d-baab-e9bdfd2fce4a"
        },
        "item": {
          "id": "f5acc290-9408-455c-bbc6-f433b2c483eb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9c4a928c-09dc-4e7a-976e-ebcdce95adf9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f5acc290-9408-455c-bbc6-f433b2c483eb",
        "cursor": {
          "ref": "d3551ccb-2c83-448d-b78f-24c6b5464cec",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c9373f77-c445-4e6d-baab-e9bdfd2fce4a"
        },
        "item": {
          "id": "f5acc290-9408-455c-bbc6-f433b2c483eb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9c4a928c-09dc-4e7a-976e-ebcdce95adf9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "d66ca33e-75a1-47f1-b2e1-6766a7aa90f7",
        "cursor": {
          "ref": "15f42b17-3949-4828-a559-39d934c42e77",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "772f5483-29e1-4e72-959e-ae7a5902b91e"
        },
        "item": {
          "id": "d66ca33e-75a1-47f1-b2e1-6766a7aa90f7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2d4d413f-b39c-46d1-9075-1cebc1c2fb3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "d66ca33e-75a1-47f1-b2e1-6766a7aa90f7",
        "cursor": {
          "ref": "15f42b17-3949-4828-a559-39d934c42e77",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "772f5483-29e1-4e72-959e-ae7a5902b91e"
        },
        "item": {
          "id": "d66ca33e-75a1-47f1-b2e1-6766a7aa90f7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2d4d413f-b39c-46d1-9075-1cebc1c2fb3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "fa6f1e4a-64a5-4313-a3a6-c07971072aeb",
        "cursor": {
          "ref": "d6dcda1b-e429-4c1a-8a2a-ae0593a2770c",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ebb86d59-de29-4130-a43f-51e06c3d3742"
        },
        "item": {
          "id": "fa6f1e4a-64a5-4313-a3a6-c07971072aeb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9fd7c136-2069-4920-8430-a14e9667d5e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "fa6f1e4a-64a5-4313-a3a6-c07971072aeb",
        "cursor": {
          "ref": "d6dcda1b-e429-4c1a-8a2a-ae0593a2770c",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ebb86d59-de29-4130-a43f-51e06c3d3742"
        },
        "item": {
          "id": "fa6f1e4a-64a5-4313-a3a6-c07971072aeb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9fd7c136-2069-4920-8430-a14e9667d5e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "a348c5dc-e760-4245-a7f7-37761792f99d",
        "cursor": {
          "ref": "62af239b-d1e2-492c-8359-b1e38814490c",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "de9c7a94-d28c-4b4b-a90b-0f68f91cfc3b"
        },
        "item": {
          "id": "a348c5dc-e760-4245-a7f7-37761792f99d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7098fe05-0685-4ae8-804f-4146ce82b86c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "a348c5dc-e760-4245-a7f7-37761792f99d",
        "cursor": {
          "ref": "62af239b-d1e2-492c-8359-b1e38814490c",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "de9c7a94-d28c-4b4b-a90b-0f68f91cfc3b"
        },
        "item": {
          "id": "a348c5dc-e760-4245-a7f7-37761792f99d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7098fe05-0685-4ae8-804f-4146ce82b86c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "fdd93aa4-8860-4547-989d-45da52e29c81",
        "cursor": {
          "ref": "d98fe64e-7997-4b11-9bbd-e4d322bffc50",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "005f7c0c-d371-4e0e-ada8-ff226714f412"
        },
        "item": {
          "id": "fdd93aa4-8860-4547-989d-45da52e29c81",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bd982594-55d6-420a-ab7d-ae07007aa1e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "fdd93aa4-8860-4547-989d-45da52e29c81",
        "cursor": {
          "ref": "d98fe64e-7997-4b11-9bbd-e4d322bffc50",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "005f7c0c-d371-4e0e-ada8-ff226714f412"
        },
        "item": {
          "id": "fdd93aa4-8860-4547-989d-45da52e29c81",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bd982594-55d6-420a-ab7d-ae07007aa1e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "f4cd1b5d-da0f-475e-8598-51d5c109f02b",
        "cursor": {
          "ref": "b6735868-9b14-4019-83ad-8b0513566ec2",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "18eced96-d56c-4aaa-8c56-c60dcddc56ca"
        },
        "item": {
          "id": "f4cd1b5d-da0f-475e-8598-51d5c109f02b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9931764e-f91b-49f8-9cf1-44aa3f086157",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f4cd1b5d-da0f-475e-8598-51d5c109f02b",
        "cursor": {
          "ref": "b6735868-9b14-4019-83ad-8b0513566ec2",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "18eced96-d56c-4aaa-8c56-c60dcddc56ca"
        },
        "item": {
          "id": "f4cd1b5d-da0f-475e-8598-51d5c109f02b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9931764e-f91b-49f8-9cf1-44aa3f086157",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "70c04791-64fb-4c14-ab3a-f17c711c34e2",
        "cursor": {
          "ref": "3b490cb8-00ba-415a-b9fc-a22e276f2d0d",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5398f47a-8667-4a65-a592-63916565f3d8"
        },
        "item": {
          "id": "70c04791-64fb-4c14-ab3a-f17c711c34e2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "58f9189a-6372-4238-a7e3-e766d79e47ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "70c04791-64fb-4c14-ab3a-f17c711c34e2",
        "cursor": {
          "ref": "3b490cb8-00ba-415a-b9fc-a22e276f2d0d",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5398f47a-8667-4a65-a592-63916565f3d8"
        },
        "item": {
          "id": "70c04791-64fb-4c14-ab3a-f17c711c34e2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "58f9189a-6372-4238-a7e3-e766d79e47ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "949e9694-dea4-43f5-9b42-3fade8be3542",
        "cursor": {
          "ref": "05625769-42d2-4bfc-af1d-37d49aa4d40b",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "27bcc098-4fe9-4986-864f-aa411ee2e496"
        },
        "item": {
          "id": "949e9694-dea4-43f5-9b42-3fade8be3542",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b079be70-75d8-4eb5-9d6a-7f16ee59d011",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "949e9694-dea4-43f5-9b42-3fade8be3542",
        "cursor": {
          "ref": "05625769-42d2-4bfc-af1d-37d49aa4d40b",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "27bcc098-4fe9-4986-864f-aa411ee2e496"
        },
        "item": {
          "id": "949e9694-dea4-43f5-9b42-3fade8be3542",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b079be70-75d8-4eb5-9d6a-7f16ee59d011",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "8342c0cc-b4a2-468d-8f07-639c2ecf7f52",
        "cursor": {
          "ref": "f9992d83-6aec-4256-979c-b038fbd53b87",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b8c70df5-4948-4ba4-b83e-7ee45e0255e6"
        },
        "item": {
          "id": "8342c0cc-b4a2-468d-8f07-639c2ecf7f52",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4062b2d5-f6e8-4335-b0c0-44e3787e9552",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8342c0cc-b4a2-468d-8f07-639c2ecf7f52",
        "cursor": {
          "ref": "f9992d83-6aec-4256-979c-b038fbd53b87",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b8c70df5-4948-4ba4-b83e-7ee45e0255e6"
        },
        "item": {
          "id": "8342c0cc-b4a2-468d-8f07-639c2ecf7f52",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4062b2d5-f6e8-4335-b0c0-44e3787e9552",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8a772d01-eb51-4292-a8e7-d8cd9f181d1c",
        "cursor": {
          "ref": "329b2876-d810-43c1-bf6d-607c7b8615f0",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "91978856-3845-4767-9b45-af70a93ac7e0"
        },
        "item": {
          "id": "8a772d01-eb51-4292-a8e7-d8cd9f181d1c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "18bac9fe-d529-4d45-8f28-0b54a3e6b036",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "8a772d01-eb51-4292-a8e7-d8cd9f181d1c",
        "cursor": {
          "ref": "329b2876-d810-43c1-bf6d-607c7b8615f0",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "91978856-3845-4767-9b45-af70a93ac7e0"
        },
        "item": {
          "id": "8a772d01-eb51-4292-a8e7-d8cd9f181d1c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "18bac9fe-d529-4d45-8f28-0b54a3e6b036",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "e1fe1f70-b1cb-4de3-b35c-1168b2d6ce49",
        "cursor": {
          "ref": "b3ea961f-e0d1-47c9-914e-3ec70603f919",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ee9bb877-5a27-4259-a377-bb419e0a4cf5"
        },
        "item": {
          "id": "e1fe1f70-b1cb-4de3-b35c-1168b2d6ce49",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7aa1b66c-f8b9-4018-9ca4-89b4882424b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "e1fe1f70-b1cb-4de3-b35c-1168b2d6ce49",
        "cursor": {
          "ref": "b3ea961f-e0d1-47c9-914e-3ec70603f919",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ee9bb877-5a27-4259-a377-bb419e0a4cf5"
        },
        "item": {
          "id": "e1fe1f70-b1cb-4de3-b35c-1168b2d6ce49",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7aa1b66c-f8b9-4018-9ca4-89b4882424b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "10b49906-3728-4325-8056-8d783f80b460",
        "cursor": {
          "ref": "0cc1fd2a-559a-4c71-8bed-efe8988ac6e5",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1bc41356-c08c-416b-9e17-d46a4dd2c924"
        },
        "item": {
          "id": "10b49906-3728-4325-8056-8d783f80b460",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7af08fe2-9584-45ea-b6d7-3fd6eaf93738",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "10b49906-3728-4325-8056-8d783f80b460",
        "cursor": {
          "ref": "0cc1fd2a-559a-4c71-8bed-efe8988ac6e5",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1bc41356-c08c-416b-9e17-d46a4dd2c924"
        },
        "item": {
          "id": "10b49906-3728-4325-8056-8d783f80b460",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7af08fe2-9584-45ea-b6d7-3fd6eaf93738",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a7ace858-4c2f-4386-96e6-d84f83dcd743",
        "cursor": {
          "ref": "b9486301-bcb7-4aa9-aa11-34c9a237445a",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "da453152-4d92-46b3-9b5a-493dd569c996"
        },
        "item": {
          "id": "a7ace858-4c2f-4386-96e6-d84f83dcd743",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "08288f64-975c-4b23-af29-a249783afbb7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "a7ace858-4c2f-4386-96e6-d84f83dcd743",
        "cursor": {
          "ref": "b9486301-bcb7-4aa9-aa11-34c9a237445a",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "da453152-4d92-46b3-9b5a-493dd569c996"
        },
        "item": {
          "id": "a7ace858-4c2f-4386-96e6-d84f83dcd743",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "08288f64-975c-4b23-af29-a249783afbb7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7620f1a3-1c10-4527-9f44-97fc2d05170e",
        "cursor": {
          "ref": "61039020-eaa4-46c5-b79b-5eec5bcfac05",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "221c4b91-837a-45fd-b11c-7401255e80f9"
        },
        "item": {
          "id": "7620f1a3-1c10-4527-9f44-97fc2d05170e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8bdeac5b-165e-4b44-a564-24ad38e4a438",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "7620f1a3-1c10-4527-9f44-97fc2d05170e",
        "cursor": {
          "ref": "61039020-eaa4-46c5-b79b-5eec5bcfac05",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "221c4b91-837a-45fd-b11c-7401255e80f9"
        },
        "item": {
          "id": "7620f1a3-1c10-4527-9f44-97fc2d05170e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8bdeac5b-165e-4b44-a564-24ad38e4a438",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "719e8a22-9589-4053-a2bb-bced65365d72",
        "cursor": {
          "ref": "f9139f44-24a1-42cb-9fda-42b750cab4d5",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "84bb8908-cc28-4cfc-84a3-bfe71c8fb1b8"
        },
        "item": {
          "id": "719e8a22-9589-4053-a2bb-bced65365d72",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ac08d521-b96e-402e-aa2d-0b30a395160e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "719e8a22-9589-4053-a2bb-bced65365d72",
        "cursor": {
          "ref": "f9139f44-24a1-42cb-9fda-42b750cab4d5",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "84bb8908-cc28-4cfc-84a3-bfe71c8fb1b8"
        },
        "item": {
          "id": "719e8a22-9589-4053-a2bb-bced65365d72",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ac08d521-b96e-402e-aa2d-0b30a395160e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c864fab1-97c7-4c19-bab8-36e0f56ac08a",
        "cursor": {
          "ref": "10ff42c4-18ed-48c7-9be9-d86558a680f4",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f48aecfe-062d-4a71-aa93-125c887ee9df"
        },
        "item": {
          "id": "c864fab1-97c7-4c19-bab8-36e0f56ac08a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "81c8e138-24c6-4b5a-881d-c39dbc0ed4f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c864fab1-97c7-4c19-bab8-36e0f56ac08a",
        "cursor": {
          "ref": "10ff42c4-18ed-48c7-9be9-d86558a680f4",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f48aecfe-062d-4a71-aa93-125c887ee9df"
        },
        "item": {
          "id": "c864fab1-97c7-4c19-bab8-36e0f56ac08a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "81c8e138-24c6-4b5a-881d-c39dbc0ed4f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c443dc26-8a7b-4e0b-b172-0645d41a1e9e",
        "cursor": {
          "ref": "a3bbeb1e-575a-4820-a812-318a92cba36e",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "104679ff-b0dd-4c88-bd58-cd2320c4fb13"
        },
        "item": {
          "id": "c443dc26-8a7b-4e0b-b172-0645d41a1e9e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8d2d71f5-a430-41f2-89a3-a78f687d8759",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c443dc26-8a7b-4e0b-b172-0645d41a1e9e",
        "cursor": {
          "ref": "a3bbeb1e-575a-4820-a812-318a92cba36e",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "104679ff-b0dd-4c88-bd58-cd2320c4fb13"
        },
        "item": {
          "id": "c443dc26-8a7b-4e0b-b172-0645d41a1e9e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8d2d71f5-a430-41f2-89a3-a78f687d8759",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "17d6c2ae-2f81-4530-97f8-e9737b582c0c",
        "cursor": {
          "ref": "f5898fd4-bf85-4549-81fe-4c6a7f14ef66",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b89eafdf-0ab1-4eb6-944e-b5982436f831"
        },
        "item": {
          "id": "17d6c2ae-2f81-4530-97f8-e9737b582c0c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0df18eeb-3ddd-4264-ae35-55855a486ce8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "17d6c2ae-2f81-4530-97f8-e9737b582c0c",
        "cursor": {
          "ref": "f5898fd4-bf85-4549-81fe-4c6a7f14ef66",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b89eafdf-0ab1-4eb6-944e-b5982436f831"
        },
        "item": {
          "id": "17d6c2ae-2f81-4530-97f8-e9737b582c0c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0df18eeb-3ddd-4264-ae35-55855a486ce8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b1a482f7-a2b5-452d-850f-7920e3b244cf",
        "cursor": {
          "ref": "4c9e77e5-5c2e-4392-9bab-07a4f63988a8",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2c23bfb2-5127-4fd3-a1b6-b771819f81e2"
        },
        "item": {
          "id": "b1a482f7-a2b5-452d-850f-7920e3b244cf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ff823207-4513-4f2d-85aa-483fedf1544a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b1a482f7-a2b5-452d-850f-7920e3b244cf",
        "cursor": {
          "ref": "4c9e77e5-5c2e-4392-9bab-07a4f63988a8",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2c23bfb2-5127-4fd3-a1b6-b771819f81e2"
        },
        "item": {
          "id": "b1a482f7-a2b5-452d-850f-7920e3b244cf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ff823207-4513-4f2d-85aa-483fedf1544a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3f0381c9-f5d4-4ebf-ac82-8994240a8f44",
        "cursor": {
          "ref": "0e9de315-e501-4382-95ff-4a03c6314ecd",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "102e66c1-51fe-4507-b303-53882e25cd5a"
        },
        "item": {
          "id": "3f0381c9-f5d4-4ebf-ac82-8994240a8f44",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "533f98d7-e898-4d68-81a0-1f6cf0f43b78",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "3f0381c9-f5d4-4ebf-ac82-8994240a8f44",
        "cursor": {
          "ref": "0e9de315-e501-4382-95ff-4a03c6314ecd",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "102e66c1-51fe-4507-b303-53882e25cd5a"
        },
        "item": {
          "id": "3f0381c9-f5d4-4ebf-ac82-8994240a8f44",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "533f98d7-e898-4d68-81a0-1f6cf0f43b78",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "93605db2-e3c5-4e02-acf9-6ef9c97f3f57",
        "cursor": {
          "ref": "10953b79-9a19-4eaa-a289-e0cb2f05e26c",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bc2b8de1-51d2-49d1-97af-aab26626c8cb"
        },
        "item": {
          "id": "93605db2-e3c5-4e02-acf9-6ef9c97f3f57",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "42a10e3a-30f0-4c2f-9d62-b3dbc1f8fe6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "93605db2-e3c5-4e02-acf9-6ef9c97f3f57",
        "cursor": {
          "ref": "10953b79-9a19-4eaa-a289-e0cb2f05e26c",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bc2b8de1-51d2-49d1-97af-aab26626c8cb"
        },
        "item": {
          "id": "93605db2-e3c5-4e02-acf9-6ef9c97f3f57",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "42a10e3a-30f0-4c2f-9d62-b3dbc1f8fe6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "807a66c3-526d-4961-8b1e-d3fcd6c332cb",
        "cursor": {
          "ref": "a99915e2-e759-49a9-a1c7-ea18516217cc",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "41a8ffc2-3b48-4bb7-b9c6-5b37aa22985b"
        },
        "item": {
          "id": "807a66c3-526d-4961-8b1e-d3fcd6c332cb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f05d383c-1b55-432d-8112-91dd97fc1965",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "807a66c3-526d-4961-8b1e-d3fcd6c332cb",
        "cursor": {
          "ref": "a99915e2-e759-49a9-a1c7-ea18516217cc",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "41a8ffc2-3b48-4bb7-b9c6-5b37aa22985b"
        },
        "item": {
          "id": "807a66c3-526d-4961-8b1e-d3fcd6c332cb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f05d383c-1b55-432d-8112-91dd97fc1965",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "1576f364-6b91-44fe-bc11-c06e623528ce",
        "cursor": {
          "ref": "c36350c3-d8d6-49a8-a55a-cc11e2a39324",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9cfca093-1418-4b9b-9593-5e8bbe4dafeb"
        },
        "item": {
          "id": "1576f364-6b91-44fe-bc11-c06e623528ce",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2f328701-601d-45f7-9a7f-903b01c40baf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "1576f364-6b91-44fe-bc11-c06e623528ce",
        "cursor": {
          "ref": "c36350c3-d8d6-49a8-a55a-cc11e2a39324",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9cfca093-1418-4b9b-9593-5e8bbe4dafeb"
        },
        "item": {
          "id": "1576f364-6b91-44fe-bc11-c06e623528ce",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2f328701-601d-45f7-9a7f-903b01c40baf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "920a99ed-8642-4397-b3ad-a0f1e47d7eeb",
        "cursor": {
          "ref": "06d5856b-1111-4ee2-9edf-cc21f8813717",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "296e3f4f-7342-4f93-9998-dc4e2ff879f0"
        },
        "item": {
          "id": "920a99ed-8642-4397-b3ad-a0f1e47d7eeb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e95714c7-21d7-4ca0-9834-9495ee1f10e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "920a99ed-8642-4397-b3ad-a0f1e47d7eeb",
        "cursor": {
          "ref": "06d5856b-1111-4ee2-9edf-cc21f8813717",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "296e3f4f-7342-4f93-9998-dc4e2ff879f0"
        },
        "item": {
          "id": "920a99ed-8642-4397-b3ad-a0f1e47d7eeb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e95714c7-21d7-4ca0-9834-9495ee1f10e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "84392ce0-195e-40b5-9eac-6c11cce392fb",
        "cursor": {
          "ref": "07af5f5f-c3fe-45c2-b4db-4dfce5985813",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8b012fd0-d4bd-4f4f-bb52-8f4d26143f54"
        },
        "item": {
          "id": "84392ce0-195e-40b5-9eac-6c11cce392fb",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "09644208-6d40-415e-b454-861a78304704",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "84392ce0-195e-40b5-9eac-6c11cce392fb",
        "cursor": {
          "ref": "07af5f5f-c3fe-45c2-b4db-4dfce5985813",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8b012fd0-d4bd-4f4f-bb52-8f4d26143f54"
        },
        "item": {
          "id": "84392ce0-195e-40b5-9eac-6c11cce392fb",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "09644208-6d40-415e-b454-861a78304704",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "25266827-5167-4dfa-bc99-37bee513da46",
        "cursor": {
          "ref": "2f0ac2c0-2c8e-4687-883d-4516f630b8c5",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dc3564b2-5e0d-46bc-9941-d5db39704c9f"
        },
        "item": {
          "id": "25266827-5167-4dfa-bc99-37bee513da46",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bfc80ad5-4c83-4136-ad3c-b9d4cea53141",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "25266827-5167-4dfa-bc99-37bee513da46",
        "cursor": {
          "ref": "2f0ac2c0-2c8e-4687-883d-4516f630b8c5",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dc3564b2-5e0d-46bc-9941-d5db39704c9f"
        },
        "item": {
          "id": "25266827-5167-4dfa-bc99-37bee513da46",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bfc80ad5-4c83-4136-ad3c-b9d4cea53141",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "476de445-5ef6-4db9-8643-ef908244c5e6",
        "cursor": {
          "ref": "03dbf5d8-c6b2-46ee-8405-e1f3268c170e",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b0a7851f-191c-4052-aed0-6f39caabf110"
        },
        "item": {
          "id": "476de445-5ef6-4db9-8643-ef908244c5e6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "971f0bc4-809d-426e-9dc5-663ef9f40635",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "476de445-5ef6-4db9-8643-ef908244c5e6",
        "cursor": {
          "ref": "03dbf5d8-c6b2-46ee-8405-e1f3268c170e",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b0a7851f-191c-4052-aed0-6f39caabf110"
        },
        "item": {
          "id": "476de445-5ef6-4db9-8643-ef908244c5e6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "971f0bc4-809d-426e-9dc5-663ef9f40635",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "4881422a-0c3e-4308-a840-9089ef6a8d13",
        "cursor": {
          "ref": "01df7c2a-f1e6-411f-8d0d-548ebfec4620",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8434b33f-05e5-457c-8638-af7556e8a8aa"
        },
        "item": {
          "id": "4881422a-0c3e-4308-a840-9089ef6a8d13",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "266a65c9-21b3-4dca-8792-77e5a9c7fe1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "4881422a-0c3e-4308-a840-9089ef6a8d13",
        "cursor": {
          "ref": "01df7c2a-f1e6-411f-8d0d-548ebfec4620",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8434b33f-05e5-457c-8638-af7556e8a8aa"
        },
        "item": {
          "id": "4881422a-0c3e-4308-a840-9089ef6a8d13",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "266a65c9-21b3-4dca-8792-77e5a9c7fe1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "22376480-c254-4525-8e49-147b7f0ca3b8",
        "cursor": {
          "ref": "e2e8f0d0-7fe8-495c-9ab0-8325445d2a36",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "87e4aa47-2582-4f35-8c93-3ee5cb0a5700"
        },
        "item": {
          "id": "22376480-c254-4525-8e49-147b7f0ca3b8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5672476d-0fe4-40b1-8141-362f6d9b9663",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "22376480-c254-4525-8e49-147b7f0ca3b8",
        "cursor": {
          "ref": "e2e8f0d0-7fe8-495c-9ab0-8325445d2a36",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "87e4aa47-2582-4f35-8c93-3ee5cb0a5700"
        },
        "item": {
          "id": "22376480-c254-4525-8e49-147b7f0ca3b8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5672476d-0fe4-40b1-8141-362f6d9b9663",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "410dce70-b05f-4824-a659-dd35d96a3fa9",
        "cursor": {
          "ref": "50db2dbe-a942-41f3-8a69-d646d76a3253",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ef437918-50ed-4724-b1ad-ef1590b7c495"
        },
        "item": {
          "id": "410dce70-b05f-4824-a659-dd35d96a3fa9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bdc4423b-9387-42dc-b927-5b8584c5b904",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "410dce70-b05f-4824-a659-dd35d96a3fa9",
        "cursor": {
          "ref": "50db2dbe-a942-41f3-8a69-d646d76a3253",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ef437918-50ed-4724-b1ad-ef1590b7c495"
        },
        "item": {
          "id": "410dce70-b05f-4824-a659-dd35d96a3fa9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bdc4423b-9387-42dc-b927-5b8584c5b904",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "7342bb29-0814-4172-b3ca-7545276090b6",
        "cursor": {
          "ref": "41e57744-c568-4f70-ab24-38113391304d",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bcecf915-dde5-4121-b08d-9dad5bbf7165"
        },
        "item": {
          "id": "7342bb29-0814-4172-b3ca-7545276090b6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1e520dd0-0e08-402e-a364-961fbb8de760",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "7342bb29-0814-4172-b3ca-7545276090b6",
        "cursor": {
          "ref": "41e57744-c568-4f70-ab24-38113391304d",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bcecf915-dde5-4121-b08d-9dad5bbf7165"
        },
        "item": {
          "id": "7342bb29-0814-4172-b3ca-7545276090b6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1e520dd0-0e08-402e-a364-961fbb8de760",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "7e899baa-c0cb-4985-b34c-0a027c46ce85",
        "cursor": {
          "ref": "6c30449a-1307-4666-8d66-3be56e0315d2",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ddf02188-3809-47c9-a1f1-973ccc0091ae"
        },
        "item": {
          "id": "7e899baa-c0cb-4985-b34c-0a027c46ce85",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "975b3c1c-25a6-4343-82d0-d0fd5c3f23f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "7e899baa-c0cb-4985-b34c-0a027c46ce85",
        "cursor": {
          "ref": "6c30449a-1307-4666-8d66-3be56e0315d2",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ddf02188-3809-47c9-a1f1-973ccc0091ae"
        },
        "item": {
          "id": "7e899baa-c0cb-4985-b34c-0a027c46ce85",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "975b3c1c-25a6-4343-82d0-d0fd5c3f23f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "6a88fba9-32f4-4173-9bf2-5ecc4ccdbeed",
        "cursor": {
          "ref": "e7f90853-47f6-406d-a1e3-d830deb28568",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "61d40fd7-15e4-4e49-a917-2849d3ac803a"
        },
        "item": {
          "id": "6a88fba9-32f4-4173-9bf2-5ecc4ccdbeed",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4a3f30d7-7e7b-4ca5-98b2-6a8b093fdc3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "6a88fba9-32f4-4173-9bf2-5ecc4ccdbeed",
        "cursor": {
          "ref": "e7f90853-47f6-406d-a1e3-d830deb28568",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "61d40fd7-15e4-4e49-a917-2849d3ac803a"
        },
        "item": {
          "id": "6a88fba9-32f4-4173-9bf2-5ecc4ccdbeed",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4a3f30d7-7e7b-4ca5-98b2-6a8b093fdc3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "9112b6bf-cffd-4c2a-9a1a-608ba34965dd",
        "cursor": {
          "ref": "3f8be4bd-6f07-42d3-ab04-b25a70ad4fdf",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "352a801d-c2d4-4ff2-a81f-bd9dc433ca2b"
        },
        "item": {
          "id": "9112b6bf-cffd-4c2a-9a1a-608ba34965dd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "22c9c6a7-cdbf-4087-8bd1-0f834902eb2f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "9112b6bf-cffd-4c2a-9a1a-608ba34965dd",
        "cursor": {
          "ref": "3f8be4bd-6f07-42d3-ab04-b25a70ad4fdf",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "352a801d-c2d4-4ff2-a81f-bd9dc433ca2b"
        },
        "item": {
          "id": "9112b6bf-cffd-4c2a-9a1a-608ba34965dd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "22c9c6a7-cdbf-4087-8bd1-0f834902eb2f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "c094c12e-d922-4f22-8846-1b0eb2b4fd76",
        "cursor": {
          "ref": "6472759d-46eb-4c59-bed9-6c54138ae287",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "642b7325-8343-4786-ac7a-ccd586c6a5a7"
        },
        "item": {
          "id": "c094c12e-d922-4f22-8846-1b0eb2b4fd76",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9d6b4885-ecf2-4997-a977-d6ac1c1fe37a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "c094c12e-d922-4f22-8846-1b0eb2b4fd76",
        "cursor": {
          "ref": "6472759d-46eb-4c59-bed9-6c54138ae287",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "642b7325-8343-4786-ac7a-ccd586c6a5a7"
        },
        "item": {
          "id": "c094c12e-d922-4f22-8846-1b0eb2b4fd76",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9d6b4885-ecf2-4997-a977-d6ac1c1fe37a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "81d150c3-f59c-4b84-8165-4702600f9f12",
        "cursor": {
          "ref": "a6ae6090-5f4b-4968-9bed-7ff768550431",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d46ffaec-daba-449b-a5e9-4d7a9f6f18ea"
        },
        "item": {
          "id": "81d150c3-f59c-4b84-8165-4702600f9f12",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dda32aa5-a718-47a5-9de3-1d892cf56f82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "81d150c3-f59c-4b84-8165-4702600f9f12",
        "cursor": {
          "ref": "a6ae6090-5f4b-4968-9bed-7ff768550431",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d46ffaec-daba-449b-a5e9-4d7a9f6f18ea"
        },
        "item": {
          "id": "81d150c3-f59c-4b84-8165-4702600f9f12",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dda32aa5-a718-47a5-9de3-1d892cf56f82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "024b4fb8-86d5-4964-87ae-2e1e3fa3bd1b",
        "cursor": {
          "ref": "21b33aca-4931-4a75-a691-5a5d9798d7a5",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "25bb3ba6-687e-408c-861a-af5a1c0ce1b8"
        },
        "item": {
          "id": "024b4fb8-86d5-4964-87ae-2e1e3fa3bd1b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "92e5e4b2-0463-47b9-85d0-31a0b07c54a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "024b4fb8-86d5-4964-87ae-2e1e3fa3bd1b",
        "cursor": {
          "ref": "21b33aca-4931-4a75-a691-5a5d9798d7a5",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "25bb3ba6-687e-408c-861a-af5a1c0ce1b8"
        },
        "item": {
          "id": "024b4fb8-86d5-4964-87ae-2e1e3fa3bd1b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "92e5e4b2-0463-47b9-85d0-31a0b07c54a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "95df9063-d617-4c97-8548-a83a95e76afe",
        "cursor": {
          "ref": "9ed0243b-1313-40c0-b364-8283aae04322",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5660397d-58a3-4921-9666-a53187cddd29"
        },
        "item": {
          "id": "95df9063-d617-4c97-8548-a83a95e76afe",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "642c7ff8-6ce6-48e1-a00b-38c70cc64df7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "95df9063-d617-4c97-8548-a83a95e76afe",
        "cursor": {
          "ref": "9ed0243b-1313-40c0-b364-8283aae04322",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5660397d-58a3-4921-9666-a53187cddd29"
        },
        "item": {
          "id": "95df9063-d617-4c97-8548-a83a95e76afe",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "642c7ff8-6ce6-48e1-a00b-38c70cc64df7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "3ed637e3-616c-4b73-9bf1-aac32c83c496",
        "cursor": {
          "ref": "0ea3de84-2254-4ada-ba76-6ceec319b2d4",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "233373c1-db8e-415d-a40e-37435d4c9d4c"
        },
        "item": {
          "id": "3ed637e3-616c-4b73-9bf1-aac32c83c496",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "ac483f71-371e-46e2-b084-5914537301fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3ed637e3-616c-4b73-9bf1-aac32c83c496",
        "cursor": {
          "ref": "0ea3de84-2254-4ada-ba76-6ceec319b2d4",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "233373c1-db8e-415d-a40e-37435d4c9d4c"
        },
        "item": {
          "id": "3ed637e3-616c-4b73-9bf1-aac32c83c496",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "ac483f71-371e-46e2-b084-5914537301fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "921a7b54-a3f7-4760-b927-7a79be795e46",
        "cursor": {
          "ref": "c083b883-74e4-41a5-8bb7-2a23dfbba047",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8b6840fa-ab7d-4b3a-b03d-e1c7c1e5d62b"
        },
        "item": {
          "id": "921a7b54-a3f7-4760-b927-7a79be795e46",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "afb1b65b-474b-4226-ad06-68050d37e630",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "921a7b54-a3f7-4760-b927-7a79be795e46",
        "cursor": {
          "ref": "c083b883-74e4-41a5-8bb7-2a23dfbba047",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8b6840fa-ab7d-4b3a-b03d-e1c7c1e5d62b"
        },
        "item": {
          "id": "921a7b54-a3f7-4760-b927-7a79be795e46",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "afb1b65b-474b-4226-ad06-68050d37e630",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "d6191e40-0433-47d8-b34c-99b5fa950354",
        "cursor": {
          "ref": "3ad7736c-ac9f-43ef-866f-192b9f98516f",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f84fb4f8-0aa4-4e68-8d98-dfe922952a42"
        },
        "item": {
          "id": "d6191e40-0433-47d8-b34c-99b5fa950354",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "772ea1c7-079c-4e27-ace0-cbf45e2d2b07",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "d6191e40-0433-47d8-b34c-99b5fa950354",
        "cursor": {
          "ref": "3ad7736c-ac9f-43ef-866f-192b9f98516f",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f84fb4f8-0aa4-4e68-8d98-dfe922952a42"
        },
        "item": {
          "id": "d6191e40-0433-47d8-b34c-99b5fa950354",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "772ea1c7-079c-4e27-ace0-cbf45e2d2b07",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "0b291ddb-9a35-467b-922e-62e3aa98a6fe",
        "cursor": {
          "ref": "b576486b-8202-41a4-b1da-80279d962551",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "217c05a6-14ad-4aaf-ba7b-79138915f541"
        },
        "item": {
          "id": "0b291ddb-9a35-467b-922e-62e3aa98a6fe",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ec8f5115-54d7-41fc-8d7b-e623bac70d26",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "0b291ddb-9a35-467b-922e-62e3aa98a6fe",
        "cursor": {
          "ref": "b576486b-8202-41a4-b1da-80279d962551",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "217c05a6-14ad-4aaf-ba7b-79138915f541"
        },
        "item": {
          "id": "0b291ddb-9a35-467b-922e-62e3aa98a6fe",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ec8f5115-54d7-41fc-8d7b-e623bac70d26",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "6a941a9a-d8bc-470c-81d2-d93b561ac2cb",
        "cursor": {
          "ref": "198ee457-500c-4986-bc8a-3affb5dc7f85",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b918dacd-e361-4729-9a29-06ef233e1ee8"
        },
        "item": {
          "id": "6a941a9a-d8bc-470c-81d2-d93b561ac2cb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1d4609e8-0d48-4272-9cb1-3c3c724b1ede",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "6a941a9a-d8bc-470c-81d2-d93b561ac2cb",
        "cursor": {
          "ref": "198ee457-500c-4986-bc8a-3affb5dc7f85",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b918dacd-e361-4729-9a29-06ef233e1ee8"
        },
        "item": {
          "id": "6a941a9a-d8bc-470c-81d2-d93b561ac2cb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1d4609e8-0d48-4272-9cb1-3c3c724b1ede",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "20da7386-9061-4eee-946d-5f9dfb90d838",
        "cursor": {
          "ref": "2d6281a4-cc4b-4182-a444-648b13ca33d6",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b0f08990-3547-4609-9f73-019fe1ad9356"
        },
        "item": {
          "id": "20da7386-9061-4eee-946d-5f9dfb90d838",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6d5041b1-c9fe-4efc-99ce-68d57e33f223",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "20da7386-9061-4eee-946d-5f9dfb90d838",
        "cursor": {
          "ref": "2d6281a4-cc4b-4182-a444-648b13ca33d6",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b0f08990-3547-4609-9f73-019fe1ad9356"
        },
        "item": {
          "id": "20da7386-9061-4eee-946d-5f9dfb90d838",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6d5041b1-c9fe-4efc-99ce-68d57e33f223",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "22997d40-4e7f-44b3-9ff4-c8769efbac07",
        "cursor": {
          "ref": "efb3926e-3553-4810-8b50-fa068f0af5cc",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b881537f-49d5-4aa7-a097-a2967af70740"
        },
        "item": {
          "id": "22997d40-4e7f-44b3-9ff4-c8769efbac07",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "af5998e2-66df-460c-83f2-d7ba5b94a247",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "22997d40-4e7f-44b3-9ff4-c8769efbac07",
        "cursor": {
          "ref": "efb3926e-3553-4810-8b50-fa068f0af5cc",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b881537f-49d5-4aa7-a097-a2967af70740"
        },
        "item": {
          "id": "22997d40-4e7f-44b3-9ff4-c8769efbac07",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "af5998e2-66df-460c-83f2-d7ba5b94a247",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "a4c5e098-e4d6-499b-b64e-ef76b430effb",
        "cursor": {
          "ref": "92396d9e-4958-4128-97d6-2f1030679ad3",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "98e8be9b-13c2-4a15-bf7f-2af3c2c8bc38"
        },
        "item": {
          "id": "a4c5e098-e4d6-499b-b64e-ef76b430effb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d49d8801-c852-49d3-8aa0-1a88a300419f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "a4c5e098-e4d6-499b-b64e-ef76b430effb",
        "cursor": {
          "ref": "92396d9e-4958-4128-97d6-2f1030679ad3",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "98e8be9b-13c2-4a15-bf7f-2af3c2c8bc38"
        },
        "item": {
          "id": "a4c5e098-e4d6-499b-b64e-ef76b430effb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d49d8801-c852-49d3-8aa0-1a88a300419f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "c343c0d3-5ba9-416b-877d-441643b84213",
        "cursor": {
          "ref": "94c9cc00-d8b0-4c9e-b50a-3d856a9a4e94",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d515d901-d4c7-4d1f-80fb-6f18a1371eda"
        },
        "item": {
          "id": "c343c0d3-5ba9-416b-877d-441643b84213",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b9c2fb2a-d490-450b-8f6e-b897758dff85",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "c343c0d3-5ba9-416b-877d-441643b84213",
        "cursor": {
          "ref": "94c9cc00-d8b0-4c9e-b50a-3d856a9a4e94",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d515d901-d4c7-4d1f-80fb-6f18a1371eda"
        },
        "item": {
          "id": "c343c0d3-5ba9-416b-877d-441643b84213",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b9c2fb2a-d490-450b-8f6e-b897758dff85",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "97e5f1e0-fe3e-44e2-b4af-55133f244428",
        "cursor": {
          "ref": "281f38b3-7a85-4264-a1b5-b0b34688d7c4",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e29dbbe7-78f9-4024-a421-6702737909f0"
        },
        "item": {
          "id": "97e5f1e0-fe3e-44e2-b4af-55133f244428",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a65c7d5e-3161-4636-b059-7083fe36495c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "97e5f1e0-fe3e-44e2-b4af-55133f244428",
        "cursor": {
          "ref": "281f38b3-7a85-4264-a1b5-b0b34688d7c4",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e29dbbe7-78f9-4024-a421-6702737909f0"
        },
        "item": {
          "id": "97e5f1e0-fe3e-44e2-b4af-55133f244428",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a65c7d5e-3161-4636-b059-7083fe36495c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "03f644e5-d19e-454c-9089-0feef634954f",
        "cursor": {
          "ref": "081db272-287f-47c5-a7fa-9ad338f45132",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "697a961e-83f2-47d3-b2ce-34d03d58bb05"
        },
        "item": {
          "id": "03f644e5-d19e-454c-9089-0feef634954f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4f36caac-cdc8-44e7-aaf9-3b986a341ae6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "03f644e5-d19e-454c-9089-0feef634954f",
        "cursor": {
          "ref": "081db272-287f-47c5-a7fa-9ad338f45132",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "697a961e-83f2-47d3-b2ce-34d03d58bb05"
        },
        "item": {
          "id": "03f644e5-d19e-454c-9089-0feef634954f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4f36caac-cdc8-44e7-aaf9-3b986a341ae6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "70318ef7-bd52-4b18-a026-7eab2b056ebe",
        "cursor": {
          "ref": "a55258cd-450b-4372-ae89-f9095b8cc188",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ffa673f6-5cc5-4fe6-9cc3-5a057fbcaca3"
        },
        "item": {
          "id": "70318ef7-bd52-4b18-a026-7eab2b056ebe",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9e44219c-8da3-410e-bf03-4848506afe88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "70318ef7-bd52-4b18-a026-7eab2b056ebe",
        "cursor": {
          "ref": "a55258cd-450b-4372-ae89-f9095b8cc188",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ffa673f6-5cc5-4fe6-9cc3-5a057fbcaca3"
        },
        "item": {
          "id": "70318ef7-bd52-4b18-a026-7eab2b056ebe",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9e44219c-8da3-410e-bf03-4848506afe88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "4e094a5d-8285-46ef-b7d7-18e7f711f779",
        "cursor": {
          "ref": "db4d0165-f297-40ec-b6ff-125602cc03ba",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "17c829ee-0c88-45b4-a949-bf64a5f98fa1"
        },
        "item": {
          "id": "4e094a5d-8285-46ef-b7d7-18e7f711f779",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ae4efea8-1841-41e7-9e8e-2738e4845d84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "4e094a5d-8285-46ef-b7d7-18e7f711f779",
        "cursor": {
          "ref": "db4d0165-f297-40ec-b6ff-125602cc03ba",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "17c829ee-0c88-45b4-a949-bf64a5f98fa1"
        },
        "item": {
          "id": "4e094a5d-8285-46ef-b7d7-18e7f711f779",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ae4efea8-1841-41e7-9e8e-2738e4845d84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "be1aa373-32f1-4461-b8cf-7037c4087e80",
        "cursor": {
          "ref": "14f34f5a-6a64-4ec1-afa4-805d97538523",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b9a76044-150d-4b0b-93e0-9b682ba6a7e5"
        },
        "item": {
          "id": "be1aa373-32f1-4461-b8cf-7037c4087e80",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ec921cda-42ae-4db4-9285-cd4918568657",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "be1aa373-32f1-4461-b8cf-7037c4087e80",
        "cursor": {
          "ref": "14f34f5a-6a64-4ec1-afa4-805d97538523",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b9a76044-150d-4b0b-93e0-9b682ba6a7e5"
        },
        "item": {
          "id": "be1aa373-32f1-4461-b8cf-7037c4087e80",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ec921cda-42ae-4db4-9285-cd4918568657",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "5b3a30ba-da1b-4afe-82a1-f86975910545",
        "cursor": {
          "ref": "407a0e16-968d-4c9b-b7a2-fc9cd9ad67b1",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c8728713-67aa-4197-81b3-ee3672462b83"
        },
        "item": {
          "id": "5b3a30ba-da1b-4afe-82a1-f86975910545",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a029a280-57c6-41ab-8e82-599b1868b9f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "5b3a30ba-da1b-4afe-82a1-f86975910545",
        "cursor": {
          "ref": "407a0e16-968d-4c9b-b7a2-fc9cd9ad67b1",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c8728713-67aa-4197-81b3-ee3672462b83"
        },
        "item": {
          "id": "5b3a30ba-da1b-4afe-82a1-f86975910545",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a029a280-57c6-41ab-8e82-599b1868b9f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "29d853cd-5149-47ee-aafe-8bcb4881c13d",
        "cursor": {
          "ref": "903325ee-ea3b-4fa8-90af-cf6da7323faa",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "af64d91e-4ad0-4af6-9c13-efa279c7d2f2"
        },
        "item": {
          "id": "29d853cd-5149-47ee-aafe-8bcb4881c13d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "69946d85-9531-40c6-9698-886d8a56e7f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "29d853cd-5149-47ee-aafe-8bcb4881c13d",
        "cursor": {
          "ref": "903325ee-ea3b-4fa8-90af-cf6da7323faa",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "af64d91e-4ad0-4af6-9c13-efa279c7d2f2"
        },
        "item": {
          "id": "29d853cd-5149-47ee-aafe-8bcb4881c13d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "69946d85-9531-40c6-9698-886d8a56e7f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "8202f814-ed8f-4847-befe-7f06bc277411",
        "cursor": {
          "ref": "a76e396e-708d-4de2-9a60-ac8d9155ddaf",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "18b26a8a-9316-465d-9dc5-a088ea81ee08"
        },
        "item": {
          "id": "8202f814-ed8f-4847-befe-7f06bc277411",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5fc537f9-c707-439d-a5fd-d8e790710199",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "8202f814-ed8f-4847-befe-7f06bc277411",
        "cursor": {
          "ref": "a76e396e-708d-4de2-9a60-ac8d9155ddaf",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "18b26a8a-9316-465d-9dc5-a088ea81ee08"
        },
        "item": {
          "id": "8202f814-ed8f-4847-befe-7f06bc277411",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5fc537f9-c707-439d-a5fd-d8e790710199",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "81a6e926-ca9b-4480-9925-e5ea6061b528",
        "cursor": {
          "ref": "61adf7ad-db5a-4845-8413-5141de509dc5",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cf908819-bce4-4f47-bb1c-aa70a17205cd"
        },
        "item": {
          "id": "81a6e926-ca9b-4480-9925-e5ea6061b528",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "682a8d1b-9d76-42d4-b999-dca9c6f855fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "81a6e926-ca9b-4480-9925-e5ea6061b528",
        "cursor": {
          "ref": "61adf7ad-db5a-4845-8413-5141de509dc5",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cf908819-bce4-4f47-bb1c-aa70a17205cd"
        },
        "item": {
          "id": "81a6e926-ca9b-4480-9925-e5ea6061b528",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "682a8d1b-9d76-42d4-b999-dca9c6f855fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "fcecb6ff-58c2-4b86-a37f-86fec97d8a9a",
        "cursor": {
          "ref": "2f159d1e-d850-499c-9a37-49dc602b8669",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cabac4ce-e494-4979-aff2-c9451911bc87"
        },
        "item": {
          "id": "fcecb6ff-58c2-4b86-a37f-86fec97d8a9a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2b63c0bd-0201-4a4e-83c7-630c4f04049b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "fcecb6ff-58c2-4b86-a37f-86fec97d8a9a",
        "cursor": {
          "ref": "2f159d1e-d850-499c-9a37-49dc602b8669",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cabac4ce-e494-4979-aff2-c9451911bc87"
        },
        "item": {
          "id": "fcecb6ff-58c2-4b86-a37f-86fec97d8a9a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2b63c0bd-0201-4a4e-83c7-630c4f04049b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "9e0331e1-b67c-49b7-8962-fe838a3185a0",
        "cursor": {
          "ref": "2e5c56b6-b6fb-45db-bb88-c70d499d1512",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a62c9b87-77a0-4637-bdf3-944ccc39600d"
        },
        "item": {
          "id": "9e0331e1-b67c-49b7-8962-fe838a3185a0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8dc7048a-64c2-4d4a-a0c9-d28cdc904060",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "9e0331e1-b67c-49b7-8962-fe838a3185a0",
        "cursor": {
          "ref": "2e5c56b6-b6fb-45db-bb88-c70d499d1512",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a62c9b87-77a0-4637-bdf3-944ccc39600d"
        },
        "item": {
          "id": "9e0331e1-b67c-49b7-8962-fe838a3185a0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8dc7048a-64c2-4d4a-a0c9-d28cdc904060",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "fde556fe-4d62-48e3-916a-6244de70ecbb",
        "cursor": {
          "ref": "18f7b3a5-945b-4a6c-baea-06ba923789bd",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "574854c5-5e63-4670-8f69-d49cda1f2b61"
        },
        "item": {
          "id": "fde556fe-4d62-48e3-916a-6244de70ecbb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8288e7c4-c2c5-421b-9f5c-fc0904932a7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "fde556fe-4d62-48e3-916a-6244de70ecbb",
        "cursor": {
          "ref": "18f7b3a5-945b-4a6c-baea-06ba923789bd",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "574854c5-5e63-4670-8f69-d49cda1f2b61"
        },
        "item": {
          "id": "fde556fe-4d62-48e3-916a-6244de70ecbb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8288e7c4-c2c5-421b-9f5c-fc0904932a7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "84ee20dd-b166-4c54-95e4-ec52753a2137",
        "cursor": {
          "ref": "0213a262-9676-4b84-8934-478ff745c041",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8878e9df-7622-42e3-b6f9-aeef82b9417e"
        },
        "item": {
          "id": "84ee20dd-b166-4c54-95e4-ec52753a2137",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9da7aef4-ae32-4807-a0b0-1fa6134fc2e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "84ee20dd-b166-4c54-95e4-ec52753a2137",
        "cursor": {
          "ref": "0213a262-9676-4b84-8934-478ff745c041",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8878e9df-7622-42e3-b6f9-aeef82b9417e"
        },
        "item": {
          "id": "84ee20dd-b166-4c54-95e4-ec52753a2137",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9da7aef4-ae32-4807-a0b0-1fa6134fc2e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "66b8c640-e0f5-4fca-a83a-088d47c99618",
        "cursor": {
          "ref": "c22c87a2-0795-416e-9ddd-f2a315136dac",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "226db625-64e3-40e7-aa7d-3b689e966182"
        },
        "item": {
          "id": "66b8c640-e0f5-4fca-a83a-088d47c99618",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d618a54b-fbc9-4ec7-9688-7ef78843eb32",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "66b8c640-e0f5-4fca-a83a-088d47c99618",
        "cursor": {
          "ref": "c22c87a2-0795-416e-9ddd-f2a315136dac",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "226db625-64e3-40e7-aa7d-3b689e966182"
        },
        "item": {
          "id": "66b8c640-e0f5-4fca-a83a-088d47c99618",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d618a54b-fbc9-4ec7-9688-7ef78843eb32",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6d588c46-9b60-4abf-b714-2e877409162a",
        "cursor": {
          "ref": "339aa4fe-bfa5-460c-beee-74ecc7653f6b",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e06752f1-6dd0-42c4-a4cf-4c33088124d6"
        },
        "item": {
          "id": "6d588c46-9b60-4abf-b714-2e877409162a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "088e69af-5f93-4ead-8b06-f32b83986126",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "6d588c46-9b60-4abf-b714-2e877409162a",
        "cursor": {
          "ref": "339aa4fe-bfa5-460c-beee-74ecc7653f6b",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e06752f1-6dd0-42c4-a4cf-4c33088124d6"
        },
        "item": {
          "id": "6d588c46-9b60-4abf-b714-2e877409162a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "088e69af-5f93-4ead-8b06-f32b83986126",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "7a587571-ea61-41e5-bbce-82ef4acd44d2",
        "cursor": {
          "ref": "600ab774-f9e4-48fc-9af7-3dab0e176920",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f4391b6a-c4cb-4c72-a0a6-3c825ac77564"
        },
        "item": {
          "id": "7a587571-ea61-41e5-bbce-82ef4acd44d2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a2dc862b-fd9b-4465-8d3c-d6e915ddc26a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7a587571-ea61-41e5-bbce-82ef4acd44d2",
        "cursor": {
          "ref": "600ab774-f9e4-48fc-9af7-3dab0e176920",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f4391b6a-c4cb-4c72-a0a6-3c825ac77564"
        },
        "item": {
          "id": "7a587571-ea61-41e5-bbce-82ef4acd44d2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a2dc862b-fd9b-4465-8d3c-d6e915ddc26a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "4abfc45b-0b90-4bc0-96b1-9605f9215413",
        "cursor": {
          "ref": "49648fe2-11d2-4bb8-b4b9-675cdcd533dd",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "530bc31a-ea41-4881-a9fe-d036b72cd803"
        },
        "item": {
          "id": "4abfc45b-0b90-4bc0-96b1-9605f9215413",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ccae0bd4-e525-4612-b4f0-4bba366b95db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "4abfc45b-0b90-4bc0-96b1-9605f9215413",
        "cursor": {
          "ref": "49648fe2-11d2-4bb8-b4b9-675cdcd533dd",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "530bc31a-ea41-4881-a9fe-d036b72cd803"
        },
        "item": {
          "id": "4abfc45b-0b90-4bc0-96b1-9605f9215413",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ccae0bd4-e525-4612-b4f0-4bba366b95db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "9a45ddc1-30cf-4d65-85e7-3f3609cf2c30",
        "cursor": {
          "ref": "7ea5d6b0-b290-4ee6-a6bb-5006ec13d84f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2f841b20-77cf-494f-8638-5b50c51030f5"
        },
        "item": {
          "id": "9a45ddc1-30cf-4d65-85e7-3f3609cf2c30",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a88d9b67-a974-46c5-a1ce-b61601fa4149",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9a45ddc1-30cf-4d65-85e7-3f3609cf2c30",
        "cursor": {
          "ref": "7ea5d6b0-b290-4ee6-a6bb-5006ec13d84f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2f841b20-77cf-494f-8638-5b50c51030f5"
        },
        "item": {
          "id": "9a45ddc1-30cf-4d65-85e7-3f3609cf2c30",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a88d9b67-a974-46c5-a1ce-b61601fa4149",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "34a348fe-313a-4418-9c2b-06b4e85ae893",
        "cursor": {
          "ref": "82c02167-ec21-4e42-ac95-fc1bef6e32c3",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "64a02851-352a-4acf-a548-9815fd7dbf07"
        },
        "item": {
          "id": "34a348fe-313a-4418-9c2b-06b4e85ae893",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7e55d7ac-f406-4f0c-ae06-d2e9ca0bc29e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "34a348fe-313a-4418-9c2b-06b4e85ae893",
        "cursor": {
          "ref": "82c02167-ec21-4e42-ac95-fc1bef6e32c3",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "64a02851-352a-4acf-a548-9815fd7dbf07"
        },
        "item": {
          "id": "34a348fe-313a-4418-9c2b-06b4e85ae893",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7e55d7ac-f406-4f0c-ae06-d2e9ca0bc29e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "3318ab8e-79db-4c53-8a6a-612197f30a93",
        "cursor": {
          "ref": "e44d1c8f-5118-4c3a-b629-2f0eb06b7fae",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5ec13342-c3b1-475e-9142-64883c3a8a2b"
        },
        "item": {
          "id": "3318ab8e-79db-4c53-8a6a-612197f30a93",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "19bf2f5c-8ff5-4a29-94ff-5390b45319d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "3318ab8e-79db-4c53-8a6a-612197f30a93",
        "cursor": {
          "ref": "e44d1c8f-5118-4c3a-b629-2f0eb06b7fae",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5ec13342-c3b1-475e-9142-64883c3a8a2b"
        },
        "item": {
          "id": "3318ab8e-79db-4c53-8a6a-612197f30a93",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "19bf2f5c-8ff5-4a29-94ff-5390b45319d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ab4827ed-49ea-476f-b7c1-37de92a7cf86",
        "cursor": {
          "ref": "d4b8288d-d131-46b3-969b-1558e94e0d90",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5721a346-f087-498d-a9a7-7625ada830a4"
        },
        "item": {
          "id": "ab4827ed-49ea-476f-b7c1-37de92a7cf86",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8af5ea24-d86c-4290-bfb9-4394dd5239bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ab4827ed-49ea-476f-b7c1-37de92a7cf86",
        "cursor": {
          "ref": "d4b8288d-d131-46b3-969b-1558e94e0d90",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5721a346-f087-498d-a9a7-7625ada830a4"
        },
        "item": {
          "id": "ab4827ed-49ea-476f-b7c1-37de92a7cf86",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8af5ea24-d86c-4290-bfb9-4394dd5239bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ea0e4e78-04e2-42d1-8979-3bb808dcd7e1",
        "cursor": {
          "ref": "0c434e8e-80f7-4cc5-a21a-80fea99e984d",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "04535469-7667-4506-a716-1dc66ba26ba2"
        },
        "item": {
          "id": "ea0e4e78-04e2-42d1-8979-3bb808dcd7e1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a999e662-b652-4b8b-98c7-94487fb5eb07",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "ea0e4e78-04e2-42d1-8979-3bb808dcd7e1",
        "cursor": {
          "ref": "0c434e8e-80f7-4cc5-a21a-80fea99e984d",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "04535469-7667-4506-a716-1dc66ba26ba2"
        },
        "item": {
          "id": "ea0e4e78-04e2-42d1-8979-3bb808dcd7e1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a999e662-b652-4b8b-98c7-94487fb5eb07",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "fd972f87-652a-4db1-9538-1d26900935af",
        "cursor": {
          "ref": "bef51dc4-a140-4db0-a901-0441097ff799",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ab56008c-139e-40b2-9b4b-cd12541d271c"
        },
        "item": {
          "id": "fd972f87-652a-4db1-9538-1d26900935af",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "394459f9-ae14-48a3-8499-caec8ea7acef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "fd972f87-652a-4db1-9538-1d26900935af",
        "cursor": {
          "ref": "bef51dc4-a140-4db0-a901-0441097ff799",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ab56008c-139e-40b2-9b4b-cd12541d271c"
        },
        "item": {
          "id": "fd972f87-652a-4db1-9538-1d26900935af",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "394459f9-ae14-48a3-8499-caec8ea7acef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "89356040-288a-49c4-9adb-dbefbf65c42e",
        "cursor": {
          "ref": "e3c5c2c4-0928-4eae-a51b-63897cf4ff1b",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "68d518dd-9c09-4a69-a338-0ff9bff2e5a8"
        },
        "item": {
          "id": "89356040-288a-49c4-9adb-dbefbf65c42e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e4deefb3-37f0-43ee-b34b-59cc9f25c04b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "89356040-288a-49c4-9adb-dbefbf65c42e",
        "cursor": {
          "ref": "e3c5c2c4-0928-4eae-a51b-63897cf4ff1b",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "68d518dd-9c09-4a69-a338-0ff9bff2e5a8"
        },
        "item": {
          "id": "89356040-288a-49c4-9adb-dbefbf65c42e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e4deefb3-37f0-43ee-b34b-59cc9f25c04b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "b321c4b2-367c-4bcd-8670-a5bb873348ed",
        "cursor": {
          "ref": "b0e6cb08-267c-4292-9103-4ffaea0ca8c7",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "59d3efc3-f800-4e1f-9192-c77a9e2a6fdc"
        },
        "item": {
          "id": "b321c4b2-367c-4bcd-8670-a5bb873348ed",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fa95549c-5480-4cde-b418-8a03cf2c71df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "b321c4b2-367c-4bcd-8670-a5bb873348ed",
        "cursor": {
          "ref": "b0e6cb08-267c-4292-9103-4ffaea0ca8c7",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "59d3efc3-f800-4e1f-9192-c77a9e2a6fdc"
        },
        "item": {
          "id": "b321c4b2-367c-4bcd-8670-a5bb873348ed",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fa95549c-5480-4cde-b418-8a03cf2c71df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "7b93cb70-f09e-4eb2-946b-82356688a935",
        "cursor": {
          "ref": "09b1efb9-bae3-48be-9c0e-6ccdaa97fa08",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "293b16bc-0ec7-445e-99fd-6de80cf63cd0"
        },
        "item": {
          "id": "7b93cb70-f09e-4eb2-946b-82356688a935",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "962d63f8-870c-444e-8301-86fb32882c04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "7b93cb70-f09e-4eb2-946b-82356688a935",
        "cursor": {
          "ref": "09b1efb9-bae3-48be-9c0e-6ccdaa97fa08",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "293b16bc-0ec7-445e-99fd-6de80cf63cd0"
        },
        "item": {
          "id": "7b93cb70-f09e-4eb2-946b-82356688a935",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "962d63f8-870c-444e-8301-86fb32882c04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "08fedc66-663e-4346-a867-9cb8b3195847",
        "cursor": {
          "ref": "2c32be00-0380-42d0-b88f-cffdb6ee94ea",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "eafe2157-e6c4-42f9-9f2c-b57f23d480d0"
        },
        "item": {
          "id": "08fedc66-663e-4346-a867-9cb8b3195847",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e304a1b7-8220-457a-a157-15118f01d3d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "08fedc66-663e-4346-a867-9cb8b3195847",
        "cursor": {
          "ref": "2c32be00-0380-42d0-b88f-cffdb6ee94ea",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "eafe2157-e6c4-42f9-9f2c-b57f23d480d0"
        },
        "item": {
          "id": "08fedc66-663e-4346-a867-9cb8b3195847",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e304a1b7-8220-457a-a157-15118f01d3d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "53198a11-edfc-47e6-b04c-6815548e13ca",
        "cursor": {
          "ref": "3ad76014-ee21-446b-b6f4-59c22762bcdb",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "edc511af-87f1-4bd5-b0ba-1b0ae7b01364"
        },
        "item": {
          "id": "53198a11-edfc-47e6-b04c-6815548e13ca",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "480903c3-fb4d-4133-9424-3d9b0403536c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "53198a11-edfc-47e6-b04c-6815548e13ca",
        "cursor": {
          "ref": "3ad76014-ee21-446b-b6f4-59c22762bcdb",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "edc511af-87f1-4bd5-b0ba-1b0ae7b01364"
        },
        "item": {
          "id": "53198a11-edfc-47e6-b04c-6815548e13ca",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "480903c3-fb4d-4133-9424-3d9b0403536c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "ad74bcab-cfe9-4b0f-b0b6-b27addc65025",
        "cursor": {
          "ref": "d0b3c8c7-1632-4125-822a-a608d7bbc9ce",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "de0993b4-9347-4d3f-958f-30c68248023a"
        },
        "item": {
          "id": "ad74bcab-cfe9-4b0f-b0b6-b27addc65025",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "bb1936fb-478a-4917-a0e5-4a6f26973f79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "ad74bcab-cfe9-4b0f-b0b6-b27addc65025",
        "cursor": {
          "ref": "d0b3c8c7-1632-4125-822a-a608d7bbc9ce",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "de0993b4-9347-4d3f-958f-30c68248023a"
        },
        "item": {
          "id": "ad74bcab-cfe9-4b0f-b0b6-b27addc65025",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "bb1936fb-478a-4917-a0e5-4a6f26973f79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "9af348d3-0c99-44a6-a6c1-6ce0dea28a0e",
        "cursor": {
          "ref": "44c422ee-b25c-4ce8-b9ac-80bbab541b6e",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7a6d7ebd-7c3c-43e6-9a12-826d6f5df598"
        },
        "item": {
          "id": "9af348d3-0c99-44a6-a6c1-6ce0dea28a0e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2379d558-0c8d-46d1-9879-c2e1e45a34a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "9af348d3-0c99-44a6-a6c1-6ce0dea28a0e",
        "cursor": {
          "ref": "44c422ee-b25c-4ce8-b9ac-80bbab541b6e",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7a6d7ebd-7c3c-43e6-9a12-826d6f5df598"
        },
        "item": {
          "id": "9af348d3-0c99-44a6-a6c1-6ce0dea28a0e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2379d558-0c8d-46d1-9879-c2e1e45a34a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "3f3f9434-b26c-4166-997f-807117c127e3",
        "cursor": {
          "ref": "2a107c96-ff2e-4ef8-bb28-5978702fafd8",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9ff0a617-3bab-4e3e-882e-7b6ca76dd5cd"
        },
        "item": {
          "id": "3f3f9434-b26c-4166-997f-807117c127e3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "aba8bcf0-1004-4bc5-b5f9-71a994ec932e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "3f3f9434-b26c-4166-997f-807117c127e3",
        "cursor": {
          "ref": "2a107c96-ff2e-4ef8-bb28-5978702fafd8",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9ff0a617-3bab-4e3e-882e-7b6ca76dd5cd"
        },
        "item": {
          "id": "3f3f9434-b26c-4166-997f-807117c127e3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "aba8bcf0-1004-4bc5-b5f9-71a994ec932e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "478f894e-0267-4ed1-9231-a821f4d8f83a",
        "cursor": {
          "ref": "bcaad428-ec31-4c00-8208-450c078b4389",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a44af9ae-94e4-4403-bd81-c91b15a143e0"
        },
        "item": {
          "id": "478f894e-0267-4ed1-9231-a821f4d8f83a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d57070a9-6374-4c9d-880a-7bdbd61468ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "478f894e-0267-4ed1-9231-a821f4d8f83a",
        "cursor": {
          "ref": "bcaad428-ec31-4c00-8208-450c078b4389",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a44af9ae-94e4-4403-bd81-c91b15a143e0"
        },
        "item": {
          "id": "478f894e-0267-4ed1-9231-a821f4d8f83a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d57070a9-6374-4c9d-880a-7bdbd61468ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "12f95dbd-04f7-4cc0-90a6-2e788f36a066",
        "cursor": {
          "ref": "02f17034-f326-4e97-87e3-6981909604d9",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6f505e95-892c-49a1-80c7-4a12f96b3e52"
        },
        "item": {
          "id": "12f95dbd-04f7-4cc0-90a6-2e788f36a066",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "feb8e0e3-b2f5-49bb-a8ae-6e5438f45eb6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "12f95dbd-04f7-4cc0-90a6-2e788f36a066",
        "cursor": {
          "ref": "02f17034-f326-4e97-87e3-6981909604d9",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6f505e95-892c-49a1-80c7-4a12f96b3e52"
        },
        "item": {
          "id": "12f95dbd-04f7-4cc0-90a6-2e788f36a066",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "feb8e0e3-b2f5-49bb-a8ae-6e5438f45eb6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "ae34911d-4951-4546-8bf3-8395f5226ba0",
        "cursor": {
          "ref": "cd126960-81c5-4c2c-ba1b-8b7ac393b72c",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ca65a170-db08-41a6-903c-29fd4cc39e62"
        },
        "item": {
          "id": "ae34911d-4951-4546-8bf3-8395f5226ba0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7d901365-7cc5-4b23-be89-b72a05a26528",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "ae34911d-4951-4546-8bf3-8395f5226ba0",
        "cursor": {
          "ref": "cd126960-81c5-4c2c-ba1b-8b7ac393b72c",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ca65a170-db08-41a6-903c-29fd4cc39e62"
        },
        "item": {
          "id": "ae34911d-4951-4546-8bf3-8395f5226ba0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7d901365-7cc5-4b23-be89-b72a05a26528",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "3939025a-ba78-49a4-9ed4-c8de5151d1fc",
        "cursor": {
          "ref": "8ebbca0c-f7f2-4f3d-9bc4-cb9c7911d217",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b71ce473-2ecd-440b-9d38-c31dd8798ea5"
        },
        "item": {
          "id": "3939025a-ba78-49a4-9ed4-c8de5151d1fc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bb189bca-9850-4df5-9788-fcb24716036d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "3939025a-ba78-49a4-9ed4-c8de5151d1fc",
        "cursor": {
          "ref": "8ebbca0c-f7f2-4f3d-9bc4-cb9c7911d217",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b71ce473-2ecd-440b-9d38-c31dd8798ea5"
        },
        "item": {
          "id": "3939025a-ba78-49a4-9ed4-c8de5151d1fc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bb189bca-9850-4df5-9788-fcb24716036d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "0ba77d42-7b9a-4e0c-a12b-b0505546ea8f",
        "cursor": {
          "ref": "1fb18f2b-06e5-42b4-aae7-3f546fa0d85a",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3891c508-829f-414b-9aca-2cf15f2e5e02"
        },
        "item": {
          "id": "0ba77d42-7b9a-4e0c-a12b-b0505546ea8f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "60e26282-e65c-4c38-9fd7-7aa1d4ebd13e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "0ba77d42-7b9a-4e0c-a12b-b0505546ea8f",
        "cursor": {
          "ref": "1fb18f2b-06e5-42b4-aae7-3f546fa0d85a",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3891c508-829f-414b-9aca-2cf15f2e5e02"
        },
        "item": {
          "id": "0ba77d42-7b9a-4e0c-a12b-b0505546ea8f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "60e26282-e65c-4c38-9fd7-7aa1d4ebd13e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6a1e491e-a881-479c-946e-381e84fde8e6",
        "cursor": {
          "ref": "4b8bb7ca-5225-445f-9f91-41d38d9893b5",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5aeacbd4-f73e-45d6-9406-6db02fa9585b"
        },
        "item": {
          "id": "6a1e491e-a881-479c-946e-381e84fde8e6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f41a8a18-d117-4c42-aceb-071ed6c7f842",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "6a1e491e-a881-479c-946e-381e84fde8e6",
        "cursor": {
          "ref": "4b8bb7ca-5225-445f-9f91-41d38d9893b5",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5aeacbd4-f73e-45d6-9406-6db02fa9585b"
        },
        "item": {
          "id": "6a1e491e-a881-479c-946e-381e84fde8e6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f41a8a18-d117-4c42-aceb-071ed6c7f842",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "a14057d2-13c2-4cfb-84c6-407c6b585f0c",
        "cursor": {
          "ref": "cc4a8de2-81ec-43ea-9817-64d5f4e0352a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "87643ce2-5f8d-4d10-bf1d-f5353c9a713f"
        },
        "item": {
          "id": "a14057d2-13c2-4cfb-84c6-407c6b585f0c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9aeeddce-f1d1-46ed-b66a-16210efa1567",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "a14057d2-13c2-4cfb-84c6-407c6b585f0c",
        "cursor": {
          "ref": "cc4a8de2-81ec-43ea-9817-64d5f4e0352a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "87643ce2-5f8d-4d10-bf1d-f5353c9a713f"
        },
        "item": {
          "id": "a14057d2-13c2-4cfb-84c6-407c6b585f0c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9aeeddce-f1d1-46ed-b66a-16210efa1567",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "30b6e37b-01b5-4844-aa83-0fa1fc3e8d8f",
        "cursor": {
          "ref": "3c37f6ff-fa7d-4102-9135-16a4abc0a733",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3a5451e2-b8c0-472b-8604-5cfbc3218285"
        },
        "item": {
          "id": "30b6e37b-01b5-4844-aa83-0fa1fc3e8d8f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b02d4d60-3fc9-486b-85b6-7c2ce7dae9c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "30b6e37b-01b5-4844-aa83-0fa1fc3e8d8f",
        "cursor": {
          "ref": "3c37f6ff-fa7d-4102-9135-16a4abc0a733",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3a5451e2-b8c0-472b-8604-5cfbc3218285"
        },
        "item": {
          "id": "30b6e37b-01b5-4844-aa83-0fa1fc3e8d8f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b02d4d60-3fc9-486b-85b6-7c2ce7dae9c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "472c91b3-e4bf-4f66-a0e3-41f97feabf3a",
        "cursor": {
          "ref": "bba50be4-a264-410b-ac2e-543ede6117aa",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b992ee3a-277f-4ad8-ada4-fc1b3604ba38"
        },
        "item": {
          "id": "472c91b3-e4bf-4f66-a0e3-41f97feabf3a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c4f3e07b-08e5-45ea-bedd-c787df130c87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "472c91b3-e4bf-4f66-a0e3-41f97feabf3a",
        "cursor": {
          "ref": "bba50be4-a264-410b-ac2e-543ede6117aa",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b992ee3a-277f-4ad8-ada4-fc1b3604ba38"
        },
        "item": {
          "id": "472c91b3-e4bf-4f66-a0e3-41f97feabf3a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c4f3e07b-08e5-45ea-bedd-c787df130c87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "438140cb-5def-4ef9-a942-f5d1259d5a76",
        "cursor": {
          "ref": "b834ed19-3e0b-4541-a27c-55acbf1891d1",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2d9bd622-9ca4-46f2-be32-9c5a49cdf55c"
        },
        "item": {
          "id": "438140cb-5def-4ef9-a942-f5d1259d5a76",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bc776097-da12-4e11-8e13-d70e5d0d4168",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "438140cb-5def-4ef9-a942-f5d1259d5a76",
        "cursor": {
          "ref": "b834ed19-3e0b-4541-a27c-55acbf1891d1",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2d9bd622-9ca4-46f2-be32-9c5a49cdf55c"
        },
        "item": {
          "id": "438140cb-5def-4ef9-a942-f5d1259d5a76",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bc776097-da12-4e11-8e13-d70e5d0d4168",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "72d18c13-d5f0-4e98-a396-1dff1d4d0c5d",
        "cursor": {
          "ref": "d8768804-7210-415f-b20c-2636f2b19710",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6e5b176a-f366-49b5-b598-4bea0b22eced"
        },
        "item": {
          "id": "72d18c13-d5f0-4e98-a396-1dff1d4d0c5d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e9d640a9-c5ac-4754-8646-2bd3ef6586ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "72d18c13-d5f0-4e98-a396-1dff1d4d0c5d",
        "cursor": {
          "ref": "d8768804-7210-415f-b20c-2636f2b19710",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6e5b176a-f366-49b5-b598-4bea0b22eced"
        },
        "item": {
          "id": "72d18c13-d5f0-4e98-a396-1dff1d4d0c5d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e9d640a9-c5ac-4754-8646-2bd3ef6586ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "73bcc033-765c-432b-8b5a-bd495f67771d",
        "cursor": {
          "ref": "15e7fd5a-26ab-43bc-ad6d-d48d30bc07b4",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4606b706-6c40-4500-aebd-dbce29618398"
        },
        "item": {
          "id": "73bcc033-765c-432b-8b5a-bd495f67771d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bfe7f4d9-a3e5-401b-853b-fb179b686138",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "73bcc033-765c-432b-8b5a-bd495f67771d",
        "cursor": {
          "ref": "15e7fd5a-26ab-43bc-ad6d-d48d30bc07b4",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4606b706-6c40-4500-aebd-dbce29618398"
        },
        "item": {
          "id": "73bcc033-765c-432b-8b5a-bd495f67771d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bfe7f4d9-a3e5-401b-853b-fb179b686138",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "2d930da9-2a03-4c22-b785-a065e88512fe",
        "cursor": {
          "ref": "cd018988-271c-4521-bc72-4d5c3b763f5a",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "12a849e5-3bb8-400c-8185-68b5510fe872"
        },
        "item": {
          "id": "2d930da9-2a03-4c22-b785-a065e88512fe",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9cfcd0d1-3dd2-41a1-8fb9-a4279b341da8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "2d930da9-2a03-4c22-b785-a065e88512fe",
        "cursor": {
          "ref": "cd018988-271c-4521-bc72-4d5c3b763f5a",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "12a849e5-3bb8-400c-8185-68b5510fe872"
        },
        "item": {
          "id": "2d930da9-2a03-4c22-b785-a065e88512fe",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9cfcd0d1-3dd2-41a1-8fb9-a4279b341da8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "b5cce0f2-a518-4d5c-9547-24e44d39aa3e",
        "cursor": {
          "ref": "4af8adae-25bc-4286-8acc-cf29d32413d3",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "28b52fe2-b052-4ea5-92b2-afc2cfce5e84"
        },
        "item": {
          "id": "b5cce0f2-a518-4d5c-9547-24e44d39aa3e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "32cb1e08-03ec-4906-91f3-984bb6239e97",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "b5cce0f2-a518-4d5c-9547-24e44d39aa3e",
        "cursor": {
          "ref": "4af8adae-25bc-4286-8acc-cf29d32413d3",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "28b52fe2-b052-4ea5-92b2-afc2cfce5e84"
        },
        "item": {
          "id": "b5cce0f2-a518-4d5c-9547-24e44d39aa3e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "32cb1e08-03ec-4906-91f3-984bb6239e97",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8e2d757a-d8e7-4daa-87f6-02b5a0e4220d",
        "cursor": {
          "ref": "10ce6263-1067-4da1-8c88-fba426b71bc2",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7b7a41e0-f710-413c-a28b-8505d6e5e658"
        },
        "item": {
          "id": "8e2d757a-d8e7-4daa-87f6-02b5a0e4220d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bccf352c-b7e0-4eaa-880b-588a93a0553e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8e2d757a-d8e7-4daa-87f6-02b5a0e4220d",
        "cursor": {
          "ref": "10ce6263-1067-4da1-8c88-fba426b71bc2",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7b7a41e0-f710-413c-a28b-8505d6e5e658"
        },
        "item": {
          "id": "8e2d757a-d8e7-4daa-87f6-02b5a0e4220d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bccf352c-b7e0-4eaa-880b-588a93a0553e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "20bdb472-242a-4729-880a-52cd6a384b8a",
        "cursor": {
          "ref": "c6ae9943-98a2-48f0-a916-1a69064bd685",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "aecf524b-21d3-4fe3-9ee5-5586bcad893e"
        },
        "item": {
          "id": "20bdb472-242a-4729-880a-52cd6a384b8a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "66928ed3-a601-4fd6-a7d9-910a756ae947",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "20bdb472-242a-4729-880a-52cd6a384b8a",
        "cursor": {
          "ref": "c6ae9943-98a2-48f0-a916-1a69064bd685",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "aecf524b-21d3-4fe3-9ee5-5586bcad893e"
        },
        "item": {
          "id": "20bdb472-242a-4729-880a-52cd6a384b8a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "66928ed3-a601-4fd6-a7d9-910a756ae947",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "7a0dc9ff-04df-4db0-adfe-a872dd7f352b",
        "cursor": {
          "ref": "c4adc3d0-dc96-4135-9e8c-3dc54d01e54d",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7c6bdbc6-3fb9-4c47-a869-43127e5d268a"
        },
        "item": {
          "id": "7a0dc9ff-04df-4db0-adfe-a872dd7f352b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d9c19de6-69d9-41ba-a05e-d93c1094d096",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "7a0dc9ff-04df-4db0-adfe-a872dd7f352b",
        "cursor": {
          "ref": "c4adc3d0-dc96-4135-9e8c-3dc54d01e54d",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7c6bdbc6-3fb9-4c47-a869-43127e5d268a"
        },
        "item": {
          "id": "7a0dc9ff-04df-4db0-adfe-a872dd7f352b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d9c19de6-69d9-41ba-a05e-d93c1094d096",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "54cfb3a9-346b-4226-94bf-ebd8097108f4",
        "cursor": {
          "ref": "cf2c76a2-87b3-4fcd-96f1-40f1632c610f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bf25e92c-ed13-43ab-8961-48e42ee1313a"
        },
        "item": {
          "id": "54cfb3a9-346b-4226-94bf-ebd8097108f4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0187d475-84fc-4cd7-ab61-611b38679648",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "54cfb3a9-346b-4226-94bf-ebd8097108f4",
        "cursor": {
          "ref": "cf2c76a2-87b3-4fcd-96f1-40f1632c610f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bf25e92c-ed13-43ab-8961-48e42ee1313a"
        },
        "item": {
          "id": "54cfb3a9-346b-4226-94bf-ebd8097108f4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0187d475-84fc-4cd7-ab61-611b38679648",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ec5e780e-fea1-41e8-8da8-121f854a352f",
        "cursor": {
          "ref": "914b6ba1-5d6d-41db-8063-b79ef5919523",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2155c1fe-efe1-451f-9862-fad76ae9390c"
        },
        "item": {
          "id": "ec5e780e-fea1-41e8-8da8-121f854a352f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d5289508-4e75-478c-8ab3-4ab1d7b8575c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ec5e780e-fea1-41e8-8da8-121f854a352f",
        "cursor": {
          "ref": "914b6ba1-5d6d-41db-8063-b79ef5919523",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2155c1fe-efe1-451f-9862-fad76ae9390c"
        },
        "item": {
          "id": "ec5e780e-fea1-41e8-8da8-121f854a352f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d5289508-4e75-478c-8ab3-4ab1d7b8575c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ab924589-6f8d-4805-afa6-204e4cd69037",
        "cursor": {
          "ref": "793e98ba-99b5-420a-a98f-73053a8aeeae",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8b16d0fb-3d61-4b9e-b968-d472a394b1d1"
        },
        "item": {
          "id": "ab924589-6f8d-4805-afa6-204e4cd69037",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "54cf3a73-1a9b-471c-97d7-a5a3bcc2c776",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ab924589-6f8d-4805-afa6-204e4cd69037",
        "cursor": {
          "ref": "793e98ba-99b5-420a-a98f-73053a8aeeae",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8b16d0fb-3d61-4b9e-b968-d472a394b1d1"
        },
        "item": {
          "id": "ab924589-6f8d-4805-afa6-204e4cd69037",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "54cf3a73-1a9b-471c-97d7-a5a3bcc2c776",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a4eb73c8-0df9-4558-a758-3be33a52e4bb",
        "cursor": {
          "ref": "c18bc127-a906-47a8-b29e-230c8bf0f5d7",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9d54713a-9029-427e-a987-b4c3d49c8aaf"
        },
        "item": {
          "id": "a4eb73c8-0df9-4558-a758-3be33a52e4bb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8ba8ed41-31ba-4df6-b47b-1ffe1c462681",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a4eb73c8-0df9-4558-a758-3be33a52e4bb",
        "cursor": {
          "ref": "c18bc127-a906-47a8-b29e-230c8bf0f5d7",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9d54713a-9029-427e-a987-b4c3d49c8aaf"
        },
        "item": {
          "id": "a4eb73c8-0df9-4558-a758-3be33a52e4bb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8ba8ed41-31ba-4df6-b47b-1ffe1c462681",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "9a6c1d15-228c-4e6c-b54f-65adea01f8da",
        "cursor": {
          "ref": "062265cf-2241-4408-a3cd-05c81a44ac67",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "21f5d372-45df-4739-8a31-2d33e38721e7"
        },
        "item": {
          "id": "9a6c1d15-228c-4e6c-b54f-65adea01f8da",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b175529e-6c42-4081-9da8-88c0093e7974",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9a6c1d15-228c-4e6c-b54f-65adea01f8da",
        "cursor": {
          "ref": "062265cf-2241-4408-a3cd-05c81a44ac67",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "21f5d372-45df-4739-8a31-2d33e38721e7"
        },
        "item": {
          "id": "9a6c1d15-228c-4e6c-b54f-65adea01f8da",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b175529e-6c42-4081-9da8-88c0093e7974",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "dcc3d3e0-5c7c-4659-81e6-6cfe0f1e766c",
        "cursor": {
          "ref": "f6e75e3a-318a-474f-95d6-26188e7acf42",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f527baf3-7dd6-4ef6-a635-04aa58bb0ead"
        },
        "item": {
          "id": "dcc3d3e0-5c7c-4659-81e6-6cfe0f1e766c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5892f1ad-4174-403c-86f0-b262606c98b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "dcc3d3e0-5c7c-4659-81e6-6cfe0f1e766c",
        "cursor": {
          "ref": "f6e75e3a-318a-474f-95d6-26188e7acf42",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f527baf3-7dd6-4ef6-a635-04aa58bb0ead"
        },
        "item": {
          "id": "dcc3d3e0-5c7c-4659-81e6-6cfe0f1e766c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5892f1ad-4174-403c-86f0-b262606c98b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ecb2cdc8-4188-48a1-94af-74704ceea675",
        "cursor": {
          "ref": "28182353-c3a6-4d22-968a-9734905338ca",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "15e93b8b-c43e-4068-9ab1-b581d5930b47"
        },
        "item": {
          "id": "ecb2cdc8-4188-48a1-94af-74704ceea675",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ca40970e-8a0d-4deb-b51a-3942293e8924",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "ecb2cdc8-4188-48a1-94af-74704ceea675",
        "cursor": {
          "ref": "28182353-c3a6-4d22-968a-9734905338ca",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "15e93b8b-c43e-4068-9ab1-b581d5930b47"
        },
        "item": {
          "id": "ecb2cdc8-4188-48a1-94af-74704ceea675",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ca40970e-8a0d-4deb-b51a-3942293e8924",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "6556f3d2-3703-4318-a6a9-e010feb1e717",
        "cursor": {
          "ref": "b6f3e071-48fb-459a-b212-f8d436ac2230",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "400f4a6d-304f-4516-84d9-7233ff373fea"
        },
        "item": {
          "id": "6556f3d2-3703-4318-a6a9-e010feb1e717",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "94017ffb-81a4-455a-abff-2760e83a56b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "6556f3d2-3703-4318-a6a9-e010feb1e717",
        "cursor": {
          "ref": "b6f3e071-48fb-459a-b212-f8d436ac2230",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "400f4a6d-304f-4516-84d9-7233ff373fea"
        },
        "item": {
          "id": "6556f3d2-3703-4318-a6a9-e010feb1e717",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "94017ffb-81a4-455a-abff-2760e83a56b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "3912a46b-61c2-4572-8f5f-ead426cd5f73",
        "cursor": {
          "ref": "a09cbc25-3269-4d2c-bc11-76c6a3d4b21b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5c574dbb-92e3-423c-aa9f-d0f8c27338e0"
        },
        "item": {
          "id": "3912a46b-61c2-4572-8f5f-ead426cd5f73",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "53d50ffb-e2d5-40e3-b7e0-77cfc9c0e39f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "3912a46b-61c2-4572-8f5f-ead426cd5f73",
        "cursor": {
          "ref": "a09cbc25-3269-4d2c-bc11-76c6a3d4b21b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5c574dbb-92e3-423c-aa9f-d0f8c27338e0"
        },
        "item": {
          "id": "3912a46b-61c2-4572-8f5f-ead426cd5f73",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "53d50ffb-e2d5-40e3-b7e0-77cfc9c0e39f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "f156d210-c1d9-4178-80fc-7d79f342b9d9",
        "cursor": {
          "ref": "b18bb100-bcaa-4944-ac30-3a0a6fedceee",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3f0a4659-49b0-42db-a3df-69f848d0e288"
        },
        "item": {
          "id": "f156d210-c1d9-4178-80fc-7d79f342b9d9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4c95af56-f722-4454-804a-b5944a983d12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "f156d210-c1d9-4178-80fc-7d79f342b9d9",
        "cursor": {
          "ref": "b18bb100-bcaa-4944-ac30-3a0a6fedceee",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3f0a4659-49b0-42db-a3df-69f848d0e288"
        },
        "item": {
          "id": "f156d210-c1d9-4178-80fc-7d79f342b9d9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4c95af56-f722-4454-804a-b5944a983d12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "783be2fc-460a-4865-aa6a-7fcffbe58e71",
        "cursor": {
          "ref": "daadc92c-bc42-48b7-90e6-ca95000b6d35",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "aa7116e1-bd20-491c-b248-72afe0656f39"
        },
        "item": {
          "id": "783be2fc-460a-4865-aa6a-7fcffbe58e71",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "bb2f2648-b945-4fb2-b1ab-832d7e6666ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "783be2fc-460a-4865-aa6a-7fcffbe58e71",
        "cursor": {
          "ref": "daadc92c-bc42-48b7-90e6-ca95000b6d35",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "aa7116e1-bd20-491c-b248-72afe0656f39"
        },
        "item": {
          "id": "783be2fc-460a-4865-aa6a-7fcffbe58e71",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "bb2f2648-b945-4fb2-b1ab-832d7e6666ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "7381e552-c9f6-49e9-b30a-2bffb01c6100",
        "cursor": {
          "ref": "aac548b0-f051-442b-ac65-dfd3ae8f3aa4",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "68337026-b6a3-4f79-bd85-59af6f594bda"
        },
        "item": {
          "id": "7381e552-c9f6-49e9-b30a-2bffb01c6100",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9be2610c-cce0-4658-85d7-e7b114f1327a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "7381e552-c9f6-49e9-b30a-2bffb01c6100",
        "cursor": {
          "ref": "aac548b0-f051-442b-ac65-dfd3ae8f3aa4",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "68337026-b6a3-4f79-bd85-59af6f594bda"
        },
        "item": {
          "id": "7381e552-c9f6-49e9-b30a-2bffb01c6100",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9be2610c-cce0-4658-85d7-e7b114f1327a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "e2b2221b-8d36-4cde-9c60-9701d71f109d",
        "cursor": {
          "ref": "be8fef69-e62b-4cfb-8492-622b1a3e6259",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e41ed474-add5-4ddf-bd44-02e6a796ab99"
        },
        "item": {
          "id": "e2b2221b-8d36-4cde-9c60-9701d71f109d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fd56b911-b25c-4457-bf4c-40e4059c2386",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "e2b2221b-8d36-4cde-9c60-9701d71f109d",
        "cursor": {
          "ref": "be8fef69-e62b-4cfb-8492-622b1a3e6259",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e41ed474-add5-4ddf-bd44-02e6a796ab99"
        },
        "item": {
          "id": "e2b2221b-8d36-4cde-9c60-9701d71f109d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fd56b911-b25c-4457-bf4c-40e4059c2386",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "8b396fb7-848d-4e08-8584-727cd0cb2657",
        "cursor": {
          "ref": "a5a8c7f4-eea1-49b8-bf11-d14f8e9287b4",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "74d3a846-314f-43cb-93a6-961daa982646"
        },
        "item": {
          "id": "8b396fb7-848d-4e08-8584-727cd0cb2657",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0a81fb44-e8ef-4934-a723-2d3c2ec52d8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "8b396fb7-848d-4e08-8584-727cd0cb2657",
        "cursor": {
          "ref": "a5a8c7f4-eea1-49b8-bf11-d14f8e9287b4",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "74d3a846-314f-43cb-93a6-961daa982646"
        },
        "item": {
          "id": "8b396fb7-848d-4e08-8584-727cd0cb2657",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0a81fb44-e8ef-4934-a723-2d3c2ec52d8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "dba954e0-b748-4b66-ada1-008c434dd97d",
        "cursor": {
          "ref": "482fee72-b4de-4f90-a02d-f5c8f312dbf0",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4b619a96-948e-4d06-bd33-dd108d8106b5"
        },
        "item": {
          "id": "dba954e0-b748-4b66-ada1-008c434dd97d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3af2d16e-8ac4-4594-acda-7609160c89c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "dba954e0-b748-4b66-ada1-008c434dd97d",
        "cursor": {
          "ref": "482fee72-b4de-4f90-a02d-f5c8f312dbf0",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4b619a96-948e-4d06-bd33-dd108d8106b5"
        },
        "item": {
          "id": "dba954e0-b748-4b66-ada1-008c434dd97d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3af2d16e-8ac4-4594-acda-7609160c89c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "1bc7d6d9-1f48-4c37-b46b-feb8a6a50afb",
        "cursor": {
          "ref": "57ead677-fd9f-47e6-9c50-bce0c16962b6",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c265ae54-c52e-4e72-9513-d7e74188aac7"
        },
        "item": {
          "id": "1bc7d6d9-1f48-4c37-b46b-feb8a6a50afb",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "92170671-f3bb-4b7e-8894-4fb82bb3d255",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "1bc7d6d9-1f48-4c37-b46b-feb8a6a50afb",
        "cursor": {
          "ref": "57ead677-fd9f-47e6-9c50-bce0c16962b6",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c265ae54-c52e-4e72-9513-d7e74188aac7"
        },
        "item": {
          "id": "1bc7d6d9-1f48-4c37-b46b-feb8a6a50afb",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "92170671-f3bb-4b7e-8894-4fb82bb3d255",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "0ebf38c7-f5d4-4cf9-8ece-5c7de9c3ae4f",
        "cursor": {
          "ref": "ddd5eb98-3c12-46d3-8dec-3c32e2d09feb",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "02b1ed48-3756-45fe-be82-454182de2a80"
        },
        "item": {
          "id": "0ebf38c7-f5d4-4cf9-8ece-5c7de9c3ae4f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "31a62e36-344c-4714-b80b-e2437f6e12d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "0ebf38c7-f5d4-4cf9-8ece-5c7de9c3ae4f",
        "cursor": {
          "ref": "ddd5eb98-3c12-46d3-8dec-3c32e2d09feb",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "02b1ed48-3756-45fe-be82-454182de2a80"
        },
        "item": {
          "id": "0ebf38c7-f5d4-4cf9-8ece-5c7de9c3ae4f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "31a62e36-344c-4714-b80b-e2437f6e12d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "316293cd-e62d-4ec7-83bd-eabc5a98dedc",
        "cursor": {
          "ref": "0dec017f-196a-4572-ba11-06cd6c000e8e",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0cb5f75a-0a1b-4093-86a0-009404903e4d"
        },
        "item": {
          "id": "316293cd-e62d-4ec7-83bd-eabc5a98dedc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "97086429-27b3-4adf-b34c-f9f0183aa151",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "316293cd-e62d-4ec7-83bd-eabc5a98dedc",
        "cursor": {
          "ref": "0dec017f-196a-4572-ba11-06cd6c000e8e",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0cb5f75a-0a1b-4093-86a0-009404903e4d"
        },
        "item": {
          "id": "316293cd-e62d-4ec7-83bd-eabc5a98dedc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "97086429-27b3-4adf-b34c-f9f0183aa151",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "aa9cf995-a3fc-4541-9fa6-fdbe6c9b0da2",
        "cursor": {
          "ref": "48ba4caf-a933-46c7-84bf-d6e9f5cf672f",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c53cab05-71c7-4afe-9187-4d7187479f72"
        },
        "item": {
          "id": "aa9cf995-a3fc-4541-9fa6-fdbe6c9b0da2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "11d33770-7662-440c-a32d-77046c8419ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "aa9cf995-a3fc-4541-9fa6-fdbe6c9b0da2",
        "cursor": {
          "ref": "48ba4caf-a933-46c7-84bf-d6e9f5cf672f",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c53cab05-71c7-4afe-9187-4d7187479f72"
        },
        "item": {
          "id": "aa9cf995-a3fc-4541-9fa6-fdbe6c9b0da2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "11d33770-7662-440c-a32d-77046c8419ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "48e0994e-d027-41c7-ab44-d311577d9ff7",
        "cursor": {
          "ref": "987c6996-3664-471f-b79c-bd92a4c6f84f",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7f0b4c3e-7cef-4338-a779-5b04293654c2"
        },
        "item": {
          "id": "48e0994e-d027-41c7-ab44-d311577d9ff7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "077b29f8-c95e-461c-ac87-40523e60cf6b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "48e0994e-d027-41c7-ab44-d311577d9ff7",
        "cursor": {
          "ref": "987c6996-3664-471f-b79c-bd92a4c6f84f",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7f0b4c3e-7cef-4338-a779-5b04293654c2"
        },
        "item": {
          "id": "48e0994e-d027-41c7-ab44-d311577d9ff7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "077b29f8-c95e-461c-ac87-40523e60cf6b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "1c08e38a-70c0-4882-8854-8e6400fb1710",
        "cursor": {
          "ref": "0db41bc8-7832-452e-92a5-c55f033ec761",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ef7f9472-8099-4468-a445-af01717fef9f"
        },
        "item": {
          "id": "1c08e38a-70c0-4882-8854-8e6400fb1710",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "aacb6652-80df-4000-b256-f709d4f135a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1c08e38a-70c0-4882-8854-8e6400fb1710",
        "cursor": {
          "ref": "0db41bc8-7832-452e-92a5-c55f033ec761",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ef7f9472-8099-4468-a445-af01717fef9f"
        },
        "item": {
          "id": "1c08e38a-70c0-4882-8854-8e6400fb1710",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "aacb6652-80df-4000-b256-f709d4f135a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2730b7f5-6370-4ca9-bb8f-91eb600aa8ee",
        "cursor": {
          "ref": "5a37e7fa-8465-44ab-8f58-60021c0a0a09",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cf7cfcc2-5b7a-4804-9117-333d630a7e69"
        },
        "item": {
          "id": "2730b7f5-6370-4ca9-bb8f-91eb600aa8ee",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c068dcc8-b2be-49c4-a657-bb4f1cb337a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2730b7f5-6370-4ca9-bb8f-91eb600aa8ee",
        "cursor": {
          "ref": "5a37e7fa-8465-44ab-8f58-60021c0a0a09",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cf7cfcc2-5b7a-4804-9117-333d630a7e69"
        },
        "item": {
          "id": "2730b7f5-6370-4ca9-bb8f-91eb600aa8ee",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c068dcc8-b2be-49c4-a657-bb4f1cb337a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "84433d14-df7d-4b52-bc75-5e885911a42f",
        "cursor": {
          "ref": "8ef15308-f93b-44df-8cd3-ab0ccebd12a5",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f292886d-fb1e-4b23-b12e-78a24b61089f"
        },
        "item": {
          "id": "84433d14-df7d-4b52-bc75-5e885911a42f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6ec0e8f5-893b-4d5f-8f05-4881f9d4472d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "84433d14-df7d-4b52-bc75-5e885911a42f",
        "cursor": {
          "ref": "8ef15308-f93b-44df-8cd3-ab0ccebd12a5",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f292886d-fb1e-4b23-b12e-78a24b61089f"
        },
        "item": {
          "id": "84433d14-df7d-4b52-bc75-5e885911a42f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6ec0e8f5-893b-4d5f-8f05-4881f9d4472d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "784e1b3c-afbf-4cac-807a-b4241a810f01",
        "cursor": {
          "ref": "56d6e8cb-5b13-4b2f-9132-123ad19ae266",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0fbbaaad-afd5-49e4-9ce1-71431626e633"
        },
        "item": {
          "id": "784e1b3c-afbf-4cac-807a-b4241a810f01",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b6602539-aae0-48d6-9e4c-570c5dbe612d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "784e1b3c-afbf-4cac-807a-b4241a810f01",
        "cursor": {
          "ref": "56d6e8cb-5b13-4b2f-9132-123ad19ae266",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0fbbaaad-afd5-49e4-9ce1-71431626e633"
        },
        "item": {
          "id": "784e1b3c-afbf-4cac-807a-b4241a810f01",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b6602539-aae0-48d6-9e4c-570c5dbe612d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "20220ca8-01f1-42a8-914d-c27781a78598",
        "cursor": {
          "ref": "0f151d79-c138-4210-abb7-d4a8b8a0e066",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6edcbcb1-f41d-4bcb-a22c-8fa47c749c04"
        },
        "item": {
          "id": "20220ca8-01f1-42a8-914d-c27781a78598",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c248f85f-2332-48a2-ac81-5cc30ceefe63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "20220ca8-01f1-42a8-914d-c27781a78598",
        "cursor": {
          "ref": "0f151d79-c138-4210-abb7-d4a8b8a0e066",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6edcbcb1-f41d-4bcb-a22c-8fa47c749c04"
        },
        "item": {
          "id": "20220ca8-01f1-42a8-914d-c27781a78598",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c248f85f-2332-48a2-ac81-5cc30ceefe63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "ef74d7d4-4c32-40ea-aa2c-d392277fafb2",
        "cursor": {
          "ref": "eff17018-1371-4fb0-903e-cc5ed32d1e8f",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e4d87a41-caa9-4388-880e-06740ef26d0c"
        },
        "item": {
          "id": "ef74d7d4-4c32-40ea-aa2c-d392277fafb2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "deb62b45-8dc9-4799-9831-4035c0bb586e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "ef74d7d4-4c32-40ea-aa2c-d392277fafb2",
        "cursor": {
          "ref": "eff17018-1371-4fb0-903e-cc5ed32d1e8f",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e4d87a41-caa9-4388-880e-06740ef26d0c"
        },
        "item": {
          "id": "ef74d7d4-4c32-40ea-aa2c-d392277fafb2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "deb62b45-8dc9-4799-9831-4035c0bb586e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "fd72b66c-e5e9-4ea6-bde6-9a1ffd335d12",
        "cursor": {
          "ref": "6343201c-6283-48bc-a26b-856f02ea0efc",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "84edc633-a4ed-4d5a-af44-a7e220aca13d"
        },
        "item": {
          "id": "fd72b66c-e5e9-4ea6-bde6-9a1ffd335d12",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3b057f80-1c7f-4c02-8d23-36a1fb3a54bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "fd72b66c-e5e9-4ea6-bde6-9a1ffd335d12",
        "cursor": {
          "ref": "6343201c-6283-48bc-a26b-856f02ea0efc",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "84edc633-a4ed-4d5a-af44-a7e220aca13d"
        },
        "item": {
          "id": "fd72b66c-e5e9-4ea6-bde6-9a1ffd335d12",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3b057f80-1c7f-4c02-8d23-36a1fb3a54bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ada91b37-34cc-4a2a-bcb8-2bad833270cc",
        "cursor": {
          "ref": "e51a6c56-3fe9-437c-af6a-fc5daf09156f",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "887f2530-5bef-47d7-a3ec-442d410ba47f"
        },
        "item": {
          "id": "ada91b37-34cc-4a2a-bcb8-2bad833270cc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9df421fb-9090-4e55-b7c7-fdca45bbf58e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "ada91b37-34cc-4a2a-bcb8-2bad833270cc",
        "cursor": {
          "ref": "e51a6c56-3fe9-437c-af6a-fc5daf09156f",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "887f2530-5bef-47d7-a3ec-442d410ba47f"
        },
        "item": {
          "id": "ada91b37-34cc-4a2a-bcb8-2bad833270cc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9df421fb-9090-4e55-b7c7-fdca45bbf58e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "424d2374-7ddb-42c7-b67b-29163e4fae37",
        "cursor": {
          "ref": "69c1d1b7-5ba6-4b1c-8fb4-2e69624b6e0b",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "46d256ba-505c-46a3-93ae-9f87b503e1ea"
        },
        "item": {
          "id": "424d2374-7ddb-42c7-b67b-29163e4fae37",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "75ce90a2-35fc-4e6e-a55e-842660fb39ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "424d2374-7ddb-42c7-b67b-29163e4fae37",
        "cursor": {
          "ref": "69c1d1b7-5ba6-4b1c-8fb4-2e69624b6e0b",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "46d256ba-505c-46a3-93ae-9f87b503e1ea"
        },
        "item": {
          "id": "424d2374-7ddb-42c7-b67b-29163e4fae37",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "75ce90a2-35fc-4e6e-a55e-842660fb39ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "72349715-4960-4ece-8d5b-ae3993106c7b",
        "cursor": {
          "ref": "591026ce-023c-4084-9e20-cbb6b9c428f4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e61112c6-8aff-4bcc-bffe-8c5807947dac"
        },
        "item": {
          "id": "72349715-4960-4ece-8d5b-ae3993106c7b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "72349715-4960-4ece-8d5b-ae3993106c7b",
        "cursor": {
          "ref": "591026ce-023c-4084-9e20-cbb6b9c428f4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e61112c6-8aff-4bcc-bffe-8c5807947dac"
        },
        "item": {
          "id": "72349715-4960-4ece-8d5b-ae3993106c7b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "72349715-4960-4ece-8d5b-ae3993106c7b",
        "cursor": {
          "ref": "591026ce-023c-4084-9e20-cbb6b9c428f4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e61112c6-8aff-4bcc-bffe-8c5807947dac"
        },
        "item": {
          "id": "72349715-4960-4ece-8d5b-ae3993106c7b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "cb3d08e4-4920-4b51-a424-0a7f6a04a7cd",
        "cursor": {
          "ref": "b57cbb61-0129-4363-85aa-05dfd7884098",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "73ea4c4f-ac6b-4cf3-af67-3e9989501704"
        },
        "item": {
          "id": "cb3d08e4-4920-4b51-a424-0a7f6a04a7cd",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "cb3d08e4-4920-4b51-a424-0a7f6a04a7cd",
        "cursor": {
          "ref": "b57cbb61-0129-4363-85aa-05dfd7884098",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "73ea4c4f-ac6b-4cf3-af67-3e9989501704"
        },
        "item": {
          "id": "cb3d08e4-4920-4b51-a424-0a7f6a04a7cd",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "cb3d08e4-4920-4b51-a424-0a7f6a04a7cd",
        "cursor": {
          "ref": "b57cbb61-0129-4363-85aa-05dfd7884098",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "73ea4c4f-ac6b-4cf3-af67-3e9989501704"
        },
        "item": {
          "id": "cb3d08e4-4920-4b51-a424-0a7f6a04a7cd",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2fbd6474-7379-439c-8fbc-2191a53d067f",
        "cursor": {
          "ref": "227c2d9f-a05e-467c-865d-80ba98f37b21",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6f67582b-6210-437c-8e1e-9d77a9433b2d"
        },
        "item": {
          "id": "2fbd6474-7379-439c-8fbc-2191a53d067f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2fbd6474-7379-439c-8fbc-2191a53d067f",
        "cursor": {
          "ref": "227c2d9f-a05e-467c-865d-80ba98f37b21",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6f67582b-6210-437c-8e1e-9d77a9433b2d"
        },
        "item": {
          "id": "2fbd6474-7379-439c-8fbc-2191a53d067f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2fbd6474-7379-439c-8fbc-2191a53d067f",
        "cursor": {
          "ref": "227c2d9f-a05e-467c-865d-80ba98f37b21",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6f67582b-6210-437c-8e1e-9d77a9433b2d"
        },
        "item": {
          "id": "2fbd6474-7379-439c-8fbc-2191a53d067f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "cd036805-af49-4da8-aab2-625dac096c43",
        "cursor": {
          "ref": "91d92e18-a596-478c-aa42-d1a3ce3af271",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5134465c-713f-4dc9-a6db-88ef751a8c8f"
        },
        "item": {
          "id": "cd036805-af49-4da8-aab2-625dac096c43",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "cd036805-af49-4da8-aab2-625dac096c43",
        "cursor": {
          "ref": "91d92e18-a596-478c-aa42-d1a3ce3af271",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5134465c-713f-4dc9-a6db-88ef751a8c8f"
        },
        "item": {
          "id": "cd036805-af49-4da8-aab2-625dac096c43",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "cd036805-af49-4da8-aab2-625dac096c43",
        "cursor": {
          "ref": "91d92e18-a596-478c-aa42-d1a3ce3af271",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5134465c-713f-4dc9-a6db-88ef751a8c8f"
        },
        "item": {
          "id": "cd036805-af49-4da8-aab2-625dac096c43",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ee9c5a41-d8c0-411f-9d23-17a80440926b",
        "cursor": {
          "ref": "96f4d577-d846-4187-bf19-5c9467f26942",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7ca5390e-9a6a-4417-bae0-a45724cf537f"
        },
        "item": {
          "id": "ee9c5a41-d8c0-411f-9d23-17a80440926b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ee9c5a41-d8c0-411f-9d23-17a80440926b",
        "cursor": {
          "ref": "96f4d577-d846-4187-bf19-5c9467f26942",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7ca5390e-9a6a-4417-bae0-a45724cf537f"
        },
        "item": {
          "id": "ee9c5a41-d8c0-411f-9d23-17a80440926b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ee9c5a41-d8c0-411f-9d23-17a80440926b",
        "cursor": {
          "ref": "96f4d577-d846-4187-bf19-5c9467f26942",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7ca5390e-9a6a-4417-bae0-a45724cf537f"
        },
        "item": {
          "id": "ee9c5a41-d8c0-411f-9d23-17a80440926b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "acea4402-f01b-45bf-b12a-5b677c367625",
        "cursor": {
          "ref": "6919f8a4-a8a6-4d11-b1c4-a95615bd1a97",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2a26cde5-d3ec-4c4a-8df2-f95acfbf2491"
        },
        "item": {
          "id": "acea4402-f01b-45bf-b12a-5b677c367625",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "acea4402-f01b-45bf-b12a-5b677c367625",
        "cursor": {
          "ref": "6919f8a4-a8a6-4d11-b1c4-a95615bd1a97",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2a26cde5-d3ec-4c4a-8df2-f95acfbf2491"
        },
        "item": {
          "id": "acea4402-f01b-45bf-b12a-5b677c367625",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "acea4402-f01b-45bf-b12a-5b677c367625",
        "cursor": {
          "ref": "6919f8a4-a8a6-4d11-b1c4-a95615bd1a97",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2a26cde5-d3ec-4c4a-8df2-f95acfbf2491"
        },
        "item": {
          "id": "acea4402-f01b-45bf-b12a-5b677c367625",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}