{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3516fec0-35e5-43b4-a563-0115376f4c71",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8a68dd86-260f-44f9-b972-0d236d28a803",
            "name": "Positive Testing",
            "item": [
              {
                "id": "61cef263-26d1-43df-8508-e9c150292dbf",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c30b0f5-adb5-4fdf-8adb-d4855eb6c281",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ecc15f9f-9063-4f7c-8ec4-46e0c5496ca6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "b5bf7f7d-842a-47c2-b75b-d3ad94e4c513",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ace51cb1-2c9e-4b31-9abb-f9997c5ecc5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a844a05f-4664-4a35-a9d3-3a6278acd99b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c6e767c2-0e6a-49b0-813a-3872bb249d0e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c2df76-1d63-491b-ab94-9315dd79a9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "067c3df4-4a90-4b8c-8647-5092d712fecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363d6c8b-7af7-4552-86c1-1313419142a1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e356abd-0bae-41d0-b668-b8d29c1732fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76ea26d9-1df4-418a-a941-89ac6096b17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8260d3ad-a20f-49ac-a8b4-d78dfd5f752a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef71a3b-42b8-4e62-9ca1-934687dddfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8144b5c-fe0b-47e9-942f-19d7bf093449"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4d891e2c-b6d5-4d6f-a251-138855cfbcd7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e689ec8-f4f5-462c-aac4-204ac3d0b4e7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3597e4e-52f7-4968-a255-2a4da3ff3fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ddb69a70-3290-499a-8c50-38c61addfd6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca2a489-c85d-448f-8e0e-0a16bc31a3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2b1881-0fa8-4dec-b5ea-2b66dfc7619e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2109201c-fe14-4ccd-aa9c-02a652abe13b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31cbb16-5abe-429b-a733-e15bd0a66bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97e8e0f8-169d-47b4-8ff9-145893051749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b746bd-e50e-4882-b9ab-dba595220f99",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "6df5e5b5-13ab-4b76-9cef-74aa3021dde0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e0eb9e5b-911d-4acd-9571-671c2c331550",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b2ee4be9-955a-4680-b9d7-436aff67623d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eac23d82-36e1-4c5a-9f13-3d5b6f80ce36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "958dd196-ef61-42ee-b8bc-4b3657db97d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "420a4789-df83-4e5e-a2ec-9cecb744d47d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6e1c09ef-4350-4a2f-ae90-691714f2442b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ebb4cb2-9268-4acc-b8eb-ea03f4c42c70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02638c95-8e0a-4de2-806e-d518c485e7a3"
            }
          }
        ]
      },
      {
        "id": "ef75939b-05ac-4820-b4b9-4ff6494ae9cc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f7279329-74c2-4f4e-8d50-442bf33722ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7294efe0-eab4-4524-8f6a-252d9c80c0c8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0a38c3c3-8c28-4efe-a1a0-8de46b6684a0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c28abc5-036c-4a73-9fed-df405262732d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a281f5a-ce8e-4897-9ddd-47aebb46515e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb8dbbe-bf74-46d7-8936-734693becfa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52cca256-2536-49a3-8af0-6a19d2f9f474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a23049-880a-44b9-a045-60b81c127b5b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d86ef1-eb62-4bde-bb6f-b1f70b1895ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c19f9e-2a68-4f9b-b658-47d743d85dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1873e47d-c9cb-4e15-b064-3266858f2faf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "464467a6-f994-42fd-9a79-e9dde9501629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231e5211-1acd-41db-bfb7-838507c30c5a",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94a0a9b-e3b8-43b7-9ff8-7b0e6fe3b2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee763fb-b3fd-40ee-984d-f76fd1932bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c77cb9b-b676-45fe-bb07-a0b43a4daf5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ba95df3-8e47-4c96-ab5e-7a76632b99dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da964828-2567-444e-b4a0-b4ca26484332",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1170ff-0d45-401d-889e-65ee6293820a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77127805-284f-4e4b-9204-22c6cf28c312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecc5e61-890a-4877-b056-54fc1e797edd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfdfb384-7332-4d82-8bdd-4141516be948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ca832d-95a6-4022-a316-952d49996e8e",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8cb225-dd59-4c88-854c-32ab549dbee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4263af4-2098-4172-a587-af7cf20cae1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1dc6c32-1f97-42a8-933a-95cb61faa888",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d0e17c3-2d96-40b4-8a4f-a215ac0cd2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5685ea-8600-4de5-9f46-f8873b126201",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fcc409-ba15-45e0-94e5-50988724006b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94ebaa1-a5d6-486b-8ea5-a8d738d123af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a175cdc-7f1b-4380-a73c-ed42e49a1579",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40affab0-9d83-4cbb-a780-d60563cebd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc15040-bfe9-460c-a709-7127efef039b",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3eaf0a-0dc2-41d5-985f-b7225769404a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e78f43-b9b7-49d1-8c33-d4e6cc1e5b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b26f6d5-01b3-497f-b56e-5ce0e8e45bde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4762bc5-1860-43ab-be74-6e349e3f4f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c82b3f-8ca1-4a10-878c-c7915d97fe6d",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4ca2dc-b131-4554-aa5b-1533a8ab5a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee78955-dcb1-45dc-a751-7a4e36c3471a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e338e1f-57cb-4532-873a-7d22f3d63d36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6801e13-3ac7-472b-a597-420de4823c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bec4d1-c7ac-4bfb-baa4-6ce3a9ac5940",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4786ff-c7e5-46b7-b559-a507d4509011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4366b006-9ac3-42d5-b915-4d92845fc1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1a92ec-43ae-46d3-b087-0bdcf2a53740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "558f023c-9e13-4cc7-b801-7c15fb2624dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16950df5-2634-4a74-bc4d-179364520c1c",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2720bee3-29e9-4cfe-9dae-f5fea9cfd584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81370ac5-89ba-4995-9eaa-9b528c21061e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e355db79-fbf0-43c3-be76-d47f949c9c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b562cf-af84-49dc-bb17-9656d2684459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e05edea-815d-4a51-8ad2-b04cc205c3e6",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c41f52-b67d-460e-a372-c174498903f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba00547-a93e-4f28-9511-8d61ca9075af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39702fb4-fa3c-4a1b-bd33-8f37fdfbf6f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "f06f8f64-b888-4e38-a395-112afd1a7d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485354a0-b03e-48ae-ae9c-597198449001",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7028dcab-6398-43a1-8b9f-c5a155ddc0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc40fe7b-4d3c-4ffe-a2d9-ab2abd8dffb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1449abd-b120-43a7-bbd9-0345378e7f8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "c8132a73-bd50-44ff-8297-4b0d82047437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982cf5a4-c86c-4ca9-bf7f-38aa2cb2876f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cbbc9b-8a6b-497c-b2b7-9eda60f3a080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499edc9f-0c82-4bec-b6e7-5c53fc4b95b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d09a97e-0256-414e-99ea-df83ce5a6fd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77b841a1-5024-42cd-bae4-eb307dc1f9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f59ee52-4a01-41d2-a9ec-f79bd97f789f",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c455b1-b0ab-46f5-b17e-a79414577a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daeec420-17c0-432c-a445-328fca55326e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cb4b73-9d24-48ce-8697-9d8593def0d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbbf736f-c6d4-4f32-b8d5-a42ebb207e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a435a0-bc3d-4205-a8b5-926bd9a33541",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dffe232-3e0d-452d-a8f4-c32fab8838c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e69c1c-5ee9-43aa-b691-aacaac2639a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687ccc73-0705-4f8b-a3c1-6dd34a0a2efd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "70ba41e1-7fe9-404b-aa85-b8176fe87b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8475ee05-4823-4e4f-b12d-acaa35c7b127",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af651dc-fd3b-402c-b36f-f803dac85598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea493a77-25f3-46de-b466-6ba2a4f664c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f419c322-9966-4681-8752-fb956c5fcc82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "56d02418-48fc-42a4-bf62-83e01bcc1291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6a047e-855f-40d1-aed1-84df73cb2440",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2731a7-5549-43fa-9f8b-48b33908d80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c590c3a-5b24-4a8a-b8dd-b97074a7e18a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61e1f65-7822-463c-b97e-c3424cf37472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a03a9f6e-e002-4650-ae5f-56ef36184672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33a5d14-f30f-4dce-84b7-118d33cd3ed7",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d3ef8c-3181-4dc9-aacd-4a1b2156309b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3655d747-2871-4a66-9176-653c0bb108ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5d9c73-3d7a-4da3-b04c-3dafc41f771e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d458dfc-68a0-47c3-99d2-a7f0b1d90413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9b69d3-82df-48b1-b8f1-decd2785e095",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed599cc-8faa-4938-ab93-d7f4c5ecb403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3fc336-de49-41c7-ab6a-6b7b1c9702da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43fc16e-1849-486c-a6de-1e81e7953a71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7813c41-4890-4906-bdab-fde630021ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5758615-cb5e-4de2-8449-58b0d3c80613",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78f1a43-1c3c-41eb-82a3-3385d9ca215b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd74607-a855-497c-a8de-0ca6b89983ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c374948-2b0d-4599-84f3-af0f304f5345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc67e906-0cb2-471a-9ed4-ff92689ca391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1033ff-b5bb-486b-8940-140128dd8985",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec85ab9-7610-4aa5-9ee0-8c56bfc4a4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbd9be1-d995-4dae-870f-e9b5c3069e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1190d5eb-0267-473a-a88b-6b0e8520104c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5e2adec-50f1-4dd8-992d-0a70e725e89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f0d58c-4dca-4fbd-80cd-3e4a580c0cdd",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176f78f9-eb67-45a1-88e3-44f638838ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fccb619-0e70-4a7f-a4c2-d9c344486f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87cf302-7a36-42e3-a765-9760de30d00b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aacc429-86ec-42d2-8b2d-f770679e769d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a8e300-6266-4c3e-aa38-13258b67e5d8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c335154-bc99-4f12-9616-465bc1bf4314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaaa08f8-967d-4fbf-a28a-d2de9671a524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c224aada-cc30-4691-a3e2-4d175e9bbead",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c100c4b5-1c4f-4f94-9c4c-3178a8a56c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab28430-b42c-4af7-a47c-ec5371c922b0",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8420c621-f3be-45f1-acc9-f411344a7ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266e65d6-705d-46b1-8d14-21739525d609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c441eadf-5137-4467-abc6-f26acc04763d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78d34f80-3954-4a85-97da-4757b00e4b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b10303-ddfe-4964-94e3-6dce9e84218c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ec296f-0776-4abd-ab55-3517d7699ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb8670e-c7da-42e6-a1fb-774b1a578c85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc34c56f-bfff-40ad-b9b1-06bb546001dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9f09274-1965-410e-b611-d99777fb1ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f591e3e-4a4c-46f7-bcbe-34b0e050cab4",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c2b431-b761-4fbf-a5a1-196ce91b50b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdff10a2-2897-44a0-814f-5477d26e4790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1162cb9-5269-4c5f-b1ef-3ca896311c3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "001448cd-bb2c-4bbc-9a59-9b973dea25ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799fa315-38cb-4555-b629-87966764e92a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1832d3-2335-4b8e-b65b-5e02b578aaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071fc458-45e8-48c3-aee5-490ba5543e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd27d188-3657-4a86-a130-192fcf7108c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9658d559-e219-4e37-a3ca-ea5f2a8c25b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e9621b-a36a-443c-8ee1-3f0bd8b6d414",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534ca8e7-1f18-49db-8838-2f1f8df54e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ded37fa-c5f6-41ea-9f25-e686755fa94a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772a7f33-5771-4601-87ce-926b9c27984b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4069702c-06cf-4ebe-a62f-bf8193bf8213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fe1199-8912-4800-93e7-4ec924c7e817",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2595d7e2-0d53-4a0e-8394-547e851b86dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01adaa23-3d0e-42d6-9b44-2e10079aba76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef29b6a-ea2f-476d-a7da-c79ecfb2502e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eb7450b-af6d-4764-aff1-be22391f24d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a6c08d-17f8-4e4e-be21-b05e012d3322",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260eb8bc-d087-49b7-8d36-dfaa24a69dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065425d3-6363-4395-b1ea-7961932e4964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1edff74-ed6a-4018-93d7-955e6fe143c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0934e00-c2b6-452e-bdb0-b7d613cfd12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4577f6a5-fed3-42c3-af72-4532929ff82b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed2df30-88a3-41a4-b8b4-c6de31b800ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "920e9be5-1ece-4ec7-8233-ad8aefbb8056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc23014-388c-4bb7-89ce-d598cc20a636",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "738be22a-1e8a-4705-ab60-1cbe88e7f22a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "99151a3a-28cd-40ef-99d0-33b478b9b57b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e789b1d-122d-451a-a69e-50c59bd005ac",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc0cbde-3fa3-44e3-a53d-7f2e16b9664c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5896663-3a3a-4ef1-938f-6701b4ac42c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b827a890-bc4f-4694-a8d2-b3e65f2c90d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1b353c63-fa0e-4783-a855-e08040a00aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c17150-330e-4d36-bfa0-c2f5bb2a8424",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1748836-d9c8-489f-9c8d-3c7f323ab9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcd33b5a-e167-4b1a-8847-a6b52203eadb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ccf084-4153-412f-a144-89e849f132ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6d9b242e-eabc-4d18-8f4e-8ae85a8d6a1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "babf78dc-b5b1-4c96-85fe-2c42f67ff064",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55aded50-daca-4e0b-97af-a0bc28d62904"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fd2ac5e-25fc-41e7-b98d-c7de19f78fca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d1b55eb-e8ec-44e2-a21b-d61ede317cf9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b9ca54e2-4c39-4ecd-b75d-c889ed269aed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44911a4c-fe65-4043-ae9e-5db09964e95e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "863648f3-02cd-42f1-9431-dd1e91bf557e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c809b880-059c-4169-a65c-ed751a455c82"
                }
              }
            ]
          },
          {
            "id": "f5e8b6ca-b55f-40a4-af54-de636b5e16d4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "51a452cc-5113-47ee-961b-c903db5f76d7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df25e3e5-ba9b-4149-af1f-9e6537669e91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dbcbe935-99cb-4f0d-ad8f-8efd24db827c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99fabc2e-9ebd-4b6f-9c4f-0c7ba1add73e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "64116918-708f-4765-a770-7e595cdf5266"
                    }
                  }
                ]
              },
              {
                "id": "8725711f-f391-478a-9b25-263fd25f462c",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7173fe5c-260a-42d8-b304-2004227c89ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b087a9a8-7f52-468b-971c-b7dc741bcd8c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ca8904c-ae69-4db3-85c2-8bf0bb7c8d2c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0bbcda0f-0c1c-4b43-a8a6-116f29f5dcd8"
                    }
                  }
                ]
              },
              {
                "id": "7a1f023c-e4bd-48d4-a3e2-31df54cd0042",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f75e475-973d-466e-b747-a632364dca26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b45e41ed-ed29-49f2-90e7-43937e92aee7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84320d04-78c7-4222-9fc9-c0b5fe9236d5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "02f53e11-0eed-4de9-93d7-73c71833ac45"
                    }
                  }
                ]
              },
              {
                "id": "f82aa218-4260-4fea-ae13-ca28b794899e",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9103bc38-7772-4929-8f91-f74e061f07e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eab927ee-08cc-4926-a11a-21b4a56f12d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa9f789f-cfdf-4f98-92b6-9f7822c1d8a6",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "bfc6f082-c7cb-47f4-b456-ce87fcf05207"
                    }
                  }
                ]
              },
              {
                "id": "e7976fe8-4e36-4bf4-9f6e-01ab48be8829",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1714b0ba-419e-49d3-816e-0954674c685e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "9fcd57ea-7759-4292-917b-562c0a2a70cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a039b5f4-e0ba-4651-9a3b-97ee7dbffe57",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "66744b97-0534-48ce-aefd-38a5f2f52e0d"
                    }
                  }
                ]
              },
              {
                "id": "488a8629-2ed3-4113-b746-2d33b9edcadc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "932f4786-7745-4988-a47e-bb4055430e29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b150856d-3521-43d5-9d8f-08642da6ee06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24b39232-e953-49e8-83bd-b7bf87084596",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "02e23259-5ab9-48b3-af59-613ccc262cf6"
                    }
                  }
                ]
              },
              {
                "id": "2c155dbf-3afb-450a-8572-a4463fe4d3c0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "803f5331-b8f5-4d5a-87a6-9aedb8c2e7cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f424d53-ec0e-4ad7-9561-671c9657e663"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db67c5a7-b62b-4376-a238-a37648eb45d5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1d76752c-5ab8-47f8-b696-6a78691cb320"
                    }
                  }
                ]
              },
              {
                "id": "4f7d87c0-eacf-4e11-8d67-9b16d49937ee",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "974f2882-2e45-45e8-b40c-ed41ac22a080",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80c63484-d345-4ba7-8128-68dd6a0dca27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "487e6d6d-f3ce-4b01-8a15-a4bfaffcbcea",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "69abb4fe-3248-44e6-a420-dae320d35c65"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "26762370-bd8f-4c7c-b3da-c688a9123558",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2108c94a-870e-4cd5-8801-c0a26e9abf54"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4deb1ae2-63e8-4f66-8016-cfa0456ee3b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5eae6e89-c2c5-4898-bd1e-1cbd818d398a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aab15615-8254-4dba-abb9-8ecf70045092",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "3dc173d7-ede1-488b-83a6-0a8251c3461c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c767799-4d86-40e7-afab-b6e46c7b4f16",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47c09eb1-4375-4a8c-939e-99eed02c9cbf"
            }
          }
        ]
      },
      {
        "id": "7a935bc4-21be-4707-b2a5-9ba38e7164a8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "71513977-d155-4fb0-a5f2-88a38c4641fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4ba7cc7-56b3-4677-b4ed-64b625c82e94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8e30440-39e1-4f75-b972-a936cddcbd04",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4429f66-9a9c-443a-9e30-a85183bb3675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a365d3ae-bb50-4ff3-9d92-81468d32436b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1f3772-36f2-4312-b47c-609bd09afc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eedaff47-3f03-4784-98bc-d89dca2fed99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200bbd84-e9d0-4617-b96d-c40eab930022",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1eec1a-8df0-4ec2-b7f0-25c3c5facb71",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a28b20c7-2a5d-4fb9-8c7e-f2fcd6ce8410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2a92a6-5ea6-45b8-9022-f8e152b50be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "464e2a6c-cbec-4dd7-be02-0484d0af7f8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbfc820d-7fad-46e4-a883-3872e032483a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76fa22ed-4715-4a26-a82c-a12be5f885ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "710bb919-0576-4c15-ad91-9e72604f428e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b3e6482-4e83-47b3-9155-67e140d63bde"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1025fac-9ee3-4a0d-b265-15f0d1ce965d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "de969819-4b73-43cc-95d1-b69fb6049b46"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "348dfb13-3fc1-43b7-8595-6f0a6ae7237b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b98e84b-9fff-40ca-8dbc-c2492a7e5263"
            }
          }
        ]
      },
      {
        "id": "8e85c9fd-7a71-4232-b796-6442b87ddac8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4b0b327b-c232-4b35-94e8-6c1c2ceaf331",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67f191ef-e119-4945-8693-cf23f9ba0081",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee1eb891-87ca-46de-885d-5e0c50579fff",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9d17f2-9c36-499f-903d-a7f29a4105e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "9865c124-7564-4c84-afd1-ba843d94546c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2159a70-4d01-4e5b-8c69-41e2e7ced21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "014ca079-03f1-4381-89de-1446db1a5365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30efe5c7-e88d-4c25-b4a3-dc73aed6040d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b92a762-d833-458d-b04c-1433283493d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "e2a848b0-1319-4dd4-b6ae-f3b7e9f6f6bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fbee93-a1c2-48c6-8f1b-ff2f6e8ee165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "773de7a5-dd1f-41ba-98a2-e6b195b7fff4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ce1453e-07dd-4343-83c9-a6f4764f5170",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87820656-97c9-4bb1-a9f8-6bb2c12ae766"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0d08cb1-f0f2-43ef-a84b-7ae4aa7ceecc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd025dd1-d0e8-4a84-b024-76feebdda759"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "133fecb8-ef58-48e8-b580-cb345aa0b79f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c7ba666c-d408-4f41-983b-b11c577e54b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55e5ba64-5011-409c-aecf-c6973a7fb2ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b74611a3-74f9-4a17-a3ee-bd391561b996"
            }
          }
        ]
      },
      {
        "id": "728cb4b1-fc25-435c-be1b-a010336467ed",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2e5ffa60-dc44-4cdf-9312-ce7d9f37f342",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b409a16-faa6-4bbe-8cc1-48aa4c36edc4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30416764-dc9a-46ad-8488-c990c2fac08f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3faa74f4-3fca-433a-a4b7-ae374feb3652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b79084f-2fae-438d-abec-0249155c8126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fd48b9-07d9-4400-a4a5-2c988d727777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e6713bf-0996-4d44-9983-53db19fa222a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0028b4-8c82-4fd7-b458-1546cdc8641f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3655ab0f-9aea-4679-8668-cf642b08725b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "bd3d9383-becb-4835-9b96-6ee28f07d059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a71010-a7a1-42d0-8cc1-7b39f4388036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53869856-0efd-456a-8003-99a3569e0c84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f68f1f0-2334-4dc0-ae9c-e84339190732",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd33706d-6cbd-4f82-a1b0-72b666b3a9ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "867820f9-9c81-447c-9b9d-f0a36086ad8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03183c86-5484-424c-8edf-5d30c02d63cd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "785202e0-339f-4d6b-8165-25d2e809895c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "d6f98c86-fa5f-4554-b354-9580a05f9cc2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8f42f44-4b35-4e23-8a8a-34876b31997b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "59b85571-6e40-4976-962a-a6117a0e3d84"
            }
          }
        ]
      },
      {
        "id": "9d5aefd4-f471-48b5-a5f7-10068b7d7444",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fe622241-d5bd-4f7e-9d34-780ad13600a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62362fa1-2ec1-4dbc-8d12-6b33fb5f4f44",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8431000-977d-4aba-9715-6e27ccfa24b0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30cffb3-b33c-4a97-a0c8-dd85f29bc857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb469b4e-f9a4-4a45-817c-477f717b37f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f11786-0f3a-4e7c-a5e8-466ed8441088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d118d122-fab2-4d84-b931-54cd3e1ec512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37c30bd-dd88-4058-ab27-90e7065af6c3",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8671a85-5233-4fb1-8bf4-5591572fdd41",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6f45ab28-9de1-4eca-9198-d75e173634cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72b8b78-8395-4c15-966f-2a86be8d944b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6732daa2-db7e-4d11-9529-03a162c722a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5ff459c-3e4b-48a7-b5d9-87f198a52281",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b92e35fb-406b-4d42-812d-abe6661da506"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c135db66-4d37-4c89-9735-bf860e5ba14e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79c9839c-2829-4056-a3ef-96f7ef0fc9a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d3c6fef-7ec2-45aa-b5cd-16f5a5da21c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "a01f135b-b9b0-4967-966a-e8a4534e0730"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c3726ac-0c36-4ea4-8e9a-08bfc28ab012",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cdf89458-87a0-47f2-8ae7-0e79ba9a5506"
            }
          }
        ]
      },
      {
        "id": "a1896659-ff4a-4e20-84c5-5004baa78685",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e49723bb-f9c8-4c2e-a2be-cfd749f44104",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c57fe18-eecc-4600-bfae-8135a46630cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc665c4e-93ef-4711-88b4-dc8bd1a7119f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781c7e9d-86b9-4bb8-833a-122033916baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4abb77f9-ab81-4ad6-89a9-69d797029143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca13353-17fe-48a0-a39a-5e93b84daae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05353871-42c3-434a-b648-bb3c67ef863e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d731317b-7727-45d7-8a4c-6cc94aef9310",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a11303-a175-4809-a137-3155187675bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0030bd9b-1138-48c4-8a18-9052be16524f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f58914-58c2-4d65-ade9-82029c2262b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e91fcbb-8679-4999-a2a1-0a3038a2b3d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bc61094-40cc-4d9e-bb97-9a34084705d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49fb94dc-e188-4213-86f2-79e730c8957d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3742d59-4a5d-4a18-8a80-4b5bff7b2804",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d61669c-5c3a-4f24-b6ff-3ed5c400712a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "254709f9-702e-4286-bc1c-c686ec5065d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "e52045bc-40df-4500-8f53-05fea3be91e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39da064b-9ffd-40cf-b6cb-e80e97d5385a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d021f81e-b4ad-4475-86c5-19879b511dcc"
            }
          }
        ]
      },
      {
        "id": "2f5617f0-0802-4849-abb7-7039df5b1891",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "9a2e28a6-07b3-4777-a478-121570820613",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 94.20560747663552,
      "responseMin": 33,
      "responseMax": 994,
      "responseSd": 145.4302503799177,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661821009293,
      "completed": 1661821023322
    },
    "executions": [
      {
        "id": "61cef263-26d1-43df-8508-e9c150292dbf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "90427ed8-8350-4ef5-a96d-7dc8f0261dc2",
          "httpRequestId": "b8a1f4cd-9f5b-4fc1-9d1b-e5dbc0a0ec08"
        },
        "item": {
          "id": "61cef263-26d1-43df-8508-e9c150292dbf",
          "name": "did_json"
        },
        "response": {
          "id": "7b5316aa-c063-45a0-8b2f-7acf58088dbf",
          "status": "OK",
          "code": 200,
          "responseTime": 251,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e767c2-0e6a-49b0-813a-3872bb249d0e",
        "cursor": {
          "ref": "afe999a8-1823-4d08-b67f-44d7d08e0666",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1b048284-aa8c-4e37-93c4-8d227d15e5cf"
        },
        "item": {
          "id": "c6e767c2-0e6a-49b0-813a-3872bb249d0e",
          "name": "did:invalid"
        },
        "response": {
          "id": "b7f4a3f5-341c-40e0-ad13-dcd873f39cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e767c2-0e6a-49b0-813a-3872bb249d0e",
        "cursor": {
          "ref": "afe999a8-1823-4d08-b67f-44d7d08e0666",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1b048284-aa8c-4e37-93c4-8d227d15e5cf"
        },
        "item": {
          "id": "c6e767c2-0e6a-49b0-813a-3872bb249d0e",
          "name": "did:invalid"
        },
        "response": {
          "id": "b7f4a3f5-341c-40e0-ad13-dcd873f39cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363d6c8b-7af7-4552-86c1-1313419142a1",
        "cursor": {
          "ref": "0328508a-8b61-4d95-924f-eac4b7b72b06",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "238b9db0-be34-4956-866e-087232a5efc9"
        },
        "item": {
          "id": "363d6c8b-7af7-4552-86c1-1313419142a1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b116cecc-0400-4b42-8c69-a7972e93bb11",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8260d3ad-a20f-49ac-a8b4-d78dfd5f752a",
        "cursor": {
          "ref": "dabccfd9-31b9-4c5b-9b11-a8e8a425fb23",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0c303903-46fc-4175-9ea4-1a23c6ce2ba8"
        },
        "item": {
          "id": "8260d3ad-a20f-49ac-a8b4-d78dfd5f752a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f0d68fa3-fca4-47fb-8236-0a857287ceca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e689ec8-f4f5-462c-aac4-204ac3d0b4e7",
        "cursor": {
          "ref": "7c936a65-d280-4242-8678-4199ea6ae4ac",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "606ee669-893a-4c78-8572-fbbe8f44f874"
        },
        "item": {
          "id": "1e689ec8-f4f5-462c-aac4-204ac3d0b4e7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9c0e1724-2ae1-41dc-a83c-79e4ca0c6a52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2109201c-fe14-4ccd-aa9c-02a652abe13b",
        "cursor": {
          "ref": "0f4c3160-d2a7-4722-a24a-d0fad99fac44",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5841145e-1b50-4f57-99f6-836f7e30af3a"
        },
        "item": {
          "id": "2109201c-fe14-4ccd-aa9c-02a652abe13b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2c1a52bc-f303-495c-b095-6635b393181e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2109201c-fe14-4ccd-aa9c-02a652abe13b",
        "cursor": {
          "ref": "0f4c3160-d2a7-4722-a24a-d0fad99fac44",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5841145e-1b50-4f57-99f6-836f7e30af3a"
        },
        "item": {
          "id": "2109201c-fe14-4ccd-aa9c-02a652abe13b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2c1a52bc-f303-495c-b095-6635b393181e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ee4be9-955a-4680-b9d7-436aff67623d",
        "cursor": {
          "ref": "1cf8690a-8075-4f94-b445-708799076a31",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8b3b5575-16f9-4bcf-b023-e095c3222b05"
        },
        "item": {
          "id": "b2ee4be9-955a-4680-b9d7-436aff67623d",
          "name": "identifiers"
        },
        "response": {
          "id": "0ebdabb4-8eee-4392-8343-73a62309a110",
          "status": "OK",
          "code": 200,
          "responseTime": 446,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a38c3c3-8c28-4efe-a1a0-8de46b6684a0",
        "cursor": {
          "ref": "0e4fe05f-8adf-48e7-8448-b235d290dbc4",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "32ee49dd-ca0e-4ab9-8a3a-11ee980d6b9d"
        },
        "item": {
          "id": "0a38c3c3-8c28-4efe-a1a0-8de46b6684a0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dbf31bc3-e9fa-4da1-b081-fd1551b26d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a38c3c3-8c28-4efe-a1a0-8de46b6684a0",
        "cursor": {
          "ref": "0e4fe05f-8adf-48e7-8448-b235d290dbc4",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "32ee49dd-ca0e-4ab9-8a3a-11ee980d6b9d"
        },
        "item": {
          "id": "0a38c3c3-8c28-4efe-a1a0-8de46b6684a0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dbf31bc3-e9fa-4da1-b081-fd1551b26d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a38c3c3-8c28-4efe-a1a0-8de46b6684a0",
        "cursor": {
          "ref": "0e4fe05f-8adf-48e7-8448-b235d290dbc4",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "32ee49dd-ca0e-4ab9-8a3a-11ee980d6b9d"
        },
        "item": {
          "id": "0a38c3c3-8c28-4efe-a1a0-8de46b6684a0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dbf31bc3-e9fa-4da1-b081-fd1551b26d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a23049-880a-44b9-a045-60b81c127b5b",
        "cursor": {
          "ref": "201b1e61-d3dc-4403-abd5-bf9a91e73982",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "116c3c3d-ee61-4660-9ce4-6326dddae27a"
        },
        "item": {
          "id": "23a23049-880a-44b9-a045-60b81c127b5b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "375c02fa-8266-4066-a419-1ec0c590e16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a23049-880a-44b9-a045-60b81c127b5b",
        "cursor": {
          "ref": "201b1e61-d3dc-4403-abd5-bf9a91e73982",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "116c3c3d-ee61-4660-9ce4-6326dddae27a"
        },
        "item": {
          "id": "23a23049-880a-44b9-a045-60b81c127b5b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "375c02fa-8266-4066-a419-1ec0c590e16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231e5211-1acd-41db-bfb7-838507c30c5a",
        "cursor": {
          "ref": "5de04f59-642a-438e-870f-e29ba12a9f7e",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0efbfba2-c5b6-4e2a-a9e7-f183c945765a"
        },
        "item": {
          "id": "231e5211-1acd-41db-bfb7-838507c30c5a",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "74a019f8-ecf1-4214-b08b-4d1830508b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231e5211-1acd-41db-bfb7-838507c30c5a",
        "cursor": {
          "ref": "5de04f59-642a-438e-870f-e29ba12a9f7e",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0efbfba2-c5b6-4e2a-a9e7-f183c945765a"
        },
        "item": {
          "id": "231e5211-1acd-41db-bfb7-838507c30c5a",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "74a019f8-ecf1-4214-b08b-4d1830508b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da964828-2567-444e-b4a0-b4ca26484332",
        "cursor": {
          "ref": "c6adfc9e-889a-4a89-8082-0b60cdfece77",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5232a2ce-ad2a-4f69-b9a1-b3513015b21f"
        },
        "item": {
          "id": "da964828-2567-444e-b4a0-b4ca26484332",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "338272d7-283a-423e-8946-aaf30db8e73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da964828-2567-444e-b4a0-b4ca26484332",
        "cursor": {
          "ref": "c6adfc9e-889a-4a89-8082-0b60cdfece77",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5232a2ce-ad2a-4f69-b9a1-b3513015b21f"
        },
        "item": {
          "id": "da964828-2567-444e-b4a0-b4ca26484332",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "338272d7-283a-423e-8946-aaf30db8e73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ca832d-95a6-4022-a316-952d49996e8e",
        "cursor": {
          "ref": "925c75c0-8dce-4cf1-bde3-d443b7950b64",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "30f02381-969c-4efd-b08c-94dec6765f1a"
        },
        "item": {
          "id": "b5ca832d-95a6-4022-a316-952d49996e8e",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "95acdc8b-eebd-456e-8e72-cc1945c4ac9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ca832d-95a6-4022-a316-952d49996e8e",
        "cursor": {
          "ref": "925c75c0-8dce-4cf1-bde3-d443b7950b64",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "30f02381-969c-4efd-b08c-94dec6765f1a"
        },
        "item": {
          "id": "b5ca832d-95a6-4022-a316-952d49996e8e",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "95acdc8b-eebd-456e-8e72-cc1945c4ac9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5685ea-8600-4de5-9f46-f8873b126201",
        "cursor": {
          "ref": "595b88ac-8ff8-42db-889c-1b8fd777f921",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "136f340e-c91d-4aba-8704-ed0ae09d741d"
        },
        "item": {
          "id": "8e5685ea-8600-4de5-9f46-f8873b126201",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "67a93264-7e94-46e9-b545-9f8ebf73f1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5685ea-8600-4de5-9f46-f8873b126201",
        "cursor": {
          "ref": "595b88ac-8ff8-42db-889c-1b8fd777f921",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "136f340e-c91d-4aba-8704-ed0ae09d741d"
        },
        "item": {
          "id": "8e5685ea-8600-4de5-9f46-f8873b126201",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "67a93264-7e94-46e9-b545-9f8ebf73f1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc15040-bfe9-460c-a709-7127efef039b",
        "cursor": {
          "ref": "d4d34dba-3416-488f-a118-832359da3a9e",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "23d5a7e6-6030-487b-adee-19da37fb25e8"
        },
        "item": {
          "id": "ccc15040-bfe9-460c-a709-7127efef039b",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "ec9c2e3f-5ea9-418f-b906-81a8fc30cdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc15040-bfe9-460c-a709-7127efef039b",
        "cursor": {
          "ref": "d4d34dba-3416-488f-a118-832359da3a9e",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "23d5a7e6-6030-487b-adee-19da37fb25e8"
        },
        "item": {
          "id": "ccc15040-bfe9-460c-a709-7127efef039b",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "ec9c2e3f-5ea9-418f-b906-81a8fc30cdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c82b3f-8ca1-4a10-878c-c7915d97fe6d",
        "cursor": {
          "ref": "f187fc29-53ed-48e0-b6c2-96515c86278d",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8ccf5d53-b094-4a82-aa6a-4295dc354a16"
        },
        "item": {
          "id": "04c82b3f-8ca1-4a10-878c-c7915d97fe6d",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "b2efba0c-edef-4b67-a0b3-da84c508c8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c82b3f-8ca1-4a10-878c-c7915d97fe6d",
        "cursor": {
          "ref": "f187fc29-53ed-48e0-b6c2-96515c86278d",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8ccf5d53-b094-4a82-aa6a-4295dc354a16"
        },
        "item": {
          "id": "04c82b3f-8ca1-4a10-878c-c7915d97fe6d",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "b2efba0c-edef-4b67-a0b3-da84c508c8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bec4d1-c7ac-4bfb-baa4-6ce3a9ac5940",
        "cursor": {
          "ref": "b75b2ad6-3c4d-4478-9f6f-b9b82923452d",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "78c1d0b0-1ab4-4100-a0de-9ed563dd221b"
        },
        "item": {
          "id": "c3bec4d1-c7ac-4bfb-baa4-6ce3a9ac5940",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f3333c02-00bd-4fe9-b21f-d2ea6e3ff996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bec4d1-c7ac-4bfb-baa4-6ce3a9ac5940",
        "cursor": {
          "ref": "b75b2ad6-3c4d-4478-9f6f-b9b82923452d",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "78c1d0b0-1ab4-4100-a0de-9ed563dd221b"
        },
        "item": {
          "id": "c3bec4d1-c7ac-4bfb-baa4-6ce3a9ac5940",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f3333c02-00bd-4fe9-b21f-d2ea6e3ff996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16950df5-2634-4a74-bc4d-179364520c1c",
        "cursor": {
          "ref": "5abd470a-c756-4f1a-aa40-cbd8bb134241",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "edfae0c6-7aa8-42e7-b6db-dfb7bba4f717"
        },
        "item": {
          "id": "16950df5-2634-4a74-bc4d-179364520c1c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "e9f3c288-0cc2-4c4a-9fb8-85a2b3f4df47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16950df5-2634-4a74-bc4d-179364520c1c",
        "cursor": {
          "ref": "5abd470a-c756-4f1a-aa40-cbd8bb134241",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "edfae0c6-7aa8-42e7-b6db-dfb7bba4f717"
        },
        "item": {
          "id": "16950df5-2634-4a74-bc4d-179364520c1c",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "e9f3c288-0cc2-4c4a-9fb8-85a2b3f4df47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e05edea-815d-4a51-8ad2-b04cc205c3e6",
        "cursor": {
          "ref": "1d654c99-0ba1-42aa-bee0-c3704641fe42",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c5abb4e4-cbcd-4dae-9757-254b5752bad8"
        },
        "item": {
          "id": "8e05edea-815d-4a51-8ad2-b04cc205c3e6",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d99b1420-e298-4bdc-9de0-aca6140e608c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e05edea-815d-4a51-8ad2-b04cc205c3e6",
        "cursor": {
          "ref": "1d654c99-0ba1-42aa-bee0-c3704641fe42",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c5abb4e4-cbcd-4dae-9757-254b5752bad8"
        },
        "item": {
          "id": "8e05edea-815d-4a51-8ad2-b04cc205c3e6",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d99b1420-e298-4bdc-9de0-aca6140e608c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485354a0-b03e-48ae-ae9c-597198449001",
        "cursor": {
          "ref": "b1dcbd0b-7237-4a5f-9514-08c64153cf9d",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bd697eb3-0b06-488d-b682-38b83d1237af"
        },
        "item": {
          "id": "485354a0-b03e-48ae-ae9c-597198449001",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0a101519-dc68-4f86-8782-76223dd06fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485354a0-b03e-48ae-ae9c-597198449001",
        "cursor": {
          "ref": "b1dcbd0b-7237-4a5f-9514-08c64153cf9d",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bd697eb3-0b06-488d-b682-38b83d1237af"
        },
        "item": {
          "id": "485354a0-b03e-48ae-ae9c-597198449001",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0a101519-dc68-4f86-8782-76223dd06fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982cf5a4-c86c-4ca9-bf7f-38aa2cb2876f",
        "cursor": {
          "ref": "9c9f028e-d80d-40ea-bc01-46f0da153c2e",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f402705e-4777-405a-be14-676f397766bf"
        },
        "item": {
          "id": "982cf5a4-c86c-4ca9-bf7f-38aa2cb2876f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "63ea5588-2fc8-4ae0-a8f8-91da8a1fa685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982cf5a4-c86c-4ca9-bf7f-38aa2cb2876f",
        "cursor": {
          "ref": "9c9f028e-d80d-40ea-bc01-46f0da153c2e",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f402705e-4777-405a-be14-676f397766bf"
        },
        "item": {
          "id": "982cf5a4-c86c-4ca9-bf7f-38aa2cb2876f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "63ea5588-2fc8-4ae0-a8f8-91da8a1fa685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f59ee52-4a01-41d2-a9ec-f79bd97f789f",
        "cursor": {
          "ref": "9de7f7b6-b529-458c-a668-eaf153252d59",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5aec2f21-7ef5-47fa-bfe3-6d725706a573"
        },
        "item": {
          "id": "2f59ee52-4a01-41d2-a9ec-f79bd97f789f",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "9490b3de-ad15-44c8-9089-dd5022520ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f59ee52-4a01-41d2-a9ec-f79bd97f789f",
        "cursor": {
          "ref": "9de7f7b6-b529-458c-a668-eaf153252d59",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5aec2f21-7ef5-47fa-bfe3-6d725706a573"
        },
        "item": {
          "id": "2f59ee52-4a01-41d2-a9ec-f79bd97f789f",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "9490b3de-ad15-44c8-9089-dd5022520ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a435a0-bc3d-4205-a8b5-926bd9a33541",
        "cursor": {
          "ref": "7aeda6a5-e114-4e8d-ae3d-cdbc454ad832",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e81ad50b-4911-41ea-a548-6bccb1cc2851"
        },
        "item": {
          "id": "61a435a0-bc3d-4205-a8b5-926bd9a33541",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "ac3817a7-7099-4c22-a1df-73b19be84e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a435a0-bc3d-4205-a8b5-926bd9a33541",
        "cursor": {
          "ref": "7aeda6a5-e114-4e8d-ae3d-cdbc454ad832",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e81ad50b-4911-41ea-a548-6bccb1cc2851"
        },
        "item": {
          "id": "61a435a0-bc3d-4205-a8b5-926bd9a33541",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "ac3817a7-7099-4c22-a1df-73b19be84e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8475ee05-4823-4e4f-b12d-acaa35c7b127",
        "cursor": {
          "ref": "23c34cf2-2bf6-41e2-ae18-6c938f3f65a1",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6b610e04-be13-448c-86bf-80582b7e8874"
        },
        "item": {
          "id": "8475ee05-4823-4e4f-b12d-acaa35c7b127",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a49c37cf-5e83-48a0-8518-b4f22cb4aa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8475ee05-4823-4e4f-b12d-acaa35c7b127",
        "cursor": {
          "ref": "23c34cf2-2bf6-41e2-ae18-6c938f3f65a1",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6b610e04-be13-448c-86bf-80582b7e8874"
        },
        "item": {
          "id": "8475ee05-4823-4e4f-b12d-acaa35c7b127",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a49c37cf-5e83-48a0-8518-b4f22cb4aa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6a047e-855f-40d1-aed1-84df73cb2440",
        "cursor": {
          "ref": "647a9fa7-9ec4-4836-a87d-7155d76efd39",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "466a61a8-ac7b-4b44-b5c3-330eba6eca89"
        },
        "item": {
          "id": "6c6a047e-855f-40d1-aed1-84df73cb2440",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "53c718bf-bd0e-4fa9-a9d8-7363926582d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6a047e-855f-40d1-aed1-84df73cb2440",
        "cursor": {
          "ref": "647a9fa7-9ec4-4836-a87d-7155d76efd39",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "466a61a8-ac7b-4b44-b5c3-330eba6eca89"
        },
        "item": {
          "id": "6c6a047e-855f-40d1-aed1-84df73cb2440",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "53c718bf-bd0e-4fa9-a9d8-7363926582d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33a5d14-f30f-4dce-84b7-118d33cd3ed7",
        "cursor": {
          "ref": "20441a77-e0ec-4fe4-a08e-5ef870ae28b9",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e1dd01b2-8a76-467d-9d44-4760456c0c30"
        },
        "item": {
          "id": "d33a5d14-f30f-4dce-84b7-118d33cd3ed7",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "593d1caa-e26a-4c2e-b471-6dae4a02f35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33a5d14-f30f-4dce-84b7-118d33cd3ed7",
        "cursor": {
          "ref": "20441a77-e0ec-4fe4-a08e-5ef870ae28b9",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e1dd01b2-8a76-467d-9d44-4760456c0c30"
        },
        "item": {
          "id": "d33a5d14-f30f-4dce-84b7-118d33cd3ed7",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "593d1caa-e26a-4c2e-b471-6dae4a02f35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9b69d3-82df-48b1-b8f1-decd2785e095",
        "cursor": {
          "ref": "ce786c66-be42-4378-8247-4ef591f97c7e",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "21eb0a2b-2b12-4e12-b997-eadf4c10e59d"
        },
        "item": {
          "id": "5e9b69d3-82df-48b1-b8f1-decd2785e095",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d01c3551-7c1f-47fb-8a48-e887d3ec4cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9b69d3-82df-48b1-b8f1-decd2785e095",
        "cursor": {
          "ref": "ce786c66-be42-4378-8247-4ef591f97c7e",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "21eb0a2b-2b12-4e12-b997-eadf4c10e59d"
        },
        "item": {
          "id": "5e9b69d3-82df-48b1-b8f1-decd2785e095",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d01c3551-7c1f-47fb-8a48-e887d3ec4cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5758615-cb5e-4de2-8449-58b0d3c80613",
        "cursor": {
          "ref": "76014351-cca8-44d2-a2a6-05c9e30df25d",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "77a5459d-8842-4cae-935a-41b10fabc8a6"
        },
        "item": {
          "id": "d5758615-cb5e-4de2-8449-58b0d3c80613",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1dc5c825-9e02-4c64-85c6-3624dd8ca8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5758615-cb5e-4de2-8449-58b0d3c80613",
        "cursor": {
          "ref": "76014351-cca8-44d2-a2a6-05c9e30df25d",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "77a5459d-8842-4cae-935a-41b10fabc8a6"
        },
        "item": {
          "id": "d5758615-cb5e-4de2-8449-58b0d3c80613",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1dc5c825-9e02-4c64-85c6-3624dd8ca8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1033ff-b5bb-486b-8940-140128dd8985",
        "cursor": {
          "ref": "d97bfc32-3ca2-40fc-933d-de15214f1d4e",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "94eb2ff6-2d47-4b2a-b839-28901a1ac468"
        },
        "item": {
          "id": "2a1033ff-b5bb-486b-8940-140128dd8985",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f568d250-14ad-406d-895d-b34acf83809f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1033ff-b5bb-486b-8940-140128dd8985",
        "cursor": {
          "ref": "d97bfc32-3ca2-40fc-933d-de15214f1d4e",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "94eb2ff6-2d47-4b2a-b839-28901a1ac468"
        },
        "item": {
          "id": "2a1033ff-b5bb-486b-8940-140128dd8985",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f568d250-14ad-406d-895d-b34acf83809f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f0d58c-4dca-4fbd-80cd-3e4a580c0cdd",
        "cursor": {
          "ref": "84377b59-dfb1-4ba7-a432-f096fc379fc1",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "21533580-ac4f-4780-8c40-7fcafbfc7c4f"
        },
        "item": {
          "id": "c2f0d58c-4dca-4fbd-80cd-3e4a580c0cdd",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "9f641036-f524-46a2-8638-01a812d155d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f0d58c-4dca-4fbd-80cd-3e4a580c0cdd",
        "cursor": {
          "ref": "84377b59-dfb1-4ba7-a432-f096fc379fc1",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "21533580-ac4f-4780-8c40-7fcafbfc7c4f"
        },
        "item": {
          "id": "c2f0d58c-4dca-4fbd-80cd-3e4a580c0cdd",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "9f641036-f524-46a2-8638-01a812d155d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a8e300-6266-4c3e-aa38-13258b67e5d8",
        "cursor": {
          "ref": "a751eaab-1805-42ae-9f44-66f4135f205f",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5632daa9-f9e5-4dd3-8932-cceed47eb6c2"
        },
        "item": {
          "id": "a2a8e300-6266-4c3e-aa38-13258b67e5d8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6bd39b37-20be-4879-9d7a-755ec63d5452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a8e300-6266-4c3e-aa38-13258b67e5d8",
        "cursor": {
          "ref": "a751eaab-1805-42ae-9f44-66f4135f205f",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5632daa9-f9e5-4dd3-8932-cceed47eb6c2"
        },
        "item": {
          "id": "a2a8e300-6266-4c3e-aa38-13258b67e5d8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6bd39b37-20be-4879-9d7a-755ec63d5452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab28430-b42c-4af7-a47c-ec5371c922b0",
        "cursor": {
          "ref": "3b615462-0d41-4055-a825-3a2aa07a9b01",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9e53d97f-30f2-47a6-bea0-36cec7379240"
        },
        "item": {
          "id": "6ab28430-b42c-4af7-a47c-ec5371c922b0",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "e1f64150-89cd-44fa-8bea-7aada65fd9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab28430-b42c-4af7-a47c-ec5371c922b0",
        "cursor": {
          "ref": "3b615462-0d41-4055-a825-3a2aa07a9b01",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9e53d97f-30f2-47a6-bea0-36cec7379240"
        },
        "item": {
          "id": "6ab28430-b42c-4af7-a47c-ec5371c922b0",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "e1f64150-89cd-44fa-8bea-7aada65fd9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b10303-ddfe-4964-94e3-6dce9e84218c",
        "cursor": {
          "ref": "93558c0a-355c-4493-b5c0-309d5be5b68c",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7030e843-fb4d-4d46-8b85-faed2d806054"
        },
        "item": {
          "id": "b8b10303-ddfe-4964-94e3-6dce9e84218c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ed773535-058f-4beb-a3b5-02e17d66b069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b10303-ddfe-4964-94e3-6dce9e84218c",
        "cursor": {
          "ref": "93558c0a-355c-4493-b5c0-309d5be5b68c",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7030e843-fb4d-4d46-8b85-faed2d806054"
        },
        "item": {
          "id": "b8b10303-ddfe-4964-94e3-6dce9e84218c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ed773535-058f-4beb-a3b5-02e17d66b069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f591e3e-4a4c-46f7-bcbe-34b0e050cab4",
        "cursor": {
          "ref": "237cb6ba-e626-494d-bcf2-efc7818862e4",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "92912970-e937-4dfe-9f16-3416ce8d116b"
        },
        "item": {
          "id": "7f591e3e-4a4c-46f7-bcbe-34b0e050cab4",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "eef0cc2b-d07f-4609-bf48-ba9e0e146a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f591e3e-4a4c-46f7-bcbe-34b0e050cab4",
        "cursor": {
          "ref": "237cb6ba-e626-494d-bcf2-efc7818862e4",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "92912970-e937-4dfe-9f16-3416ce8d116b"
        },
        "item": {
          "id": "7f591e3e-4a4c-46f7-bcbe-34b0e050cab4",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "eef0cc2b-d07f-4609-bf48-ba9e0e146a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799fa315-38cb-4555-b629-87966764e92a",
        "cursor": {
          "ref": "de90c8d2-c16d-4843-b6d2-c61852490682",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f93ca88e-eedd-40c0-ba29-aa702edf34a8"
        },
        "item": {
          "id": "799fa315-38cb-4555-b629-87966764e92a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "192deff6-395a-435e-b269-e0e9f8b96358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 994,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799fa315-38cb-4555-b629-87966764e92a",
        "cursor": {
          "ref": "de90c8d2-c16d-4843-b6d2-c61852490682",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f93ca88e-eedd-40c0-ba29-aa702edf34a8"
        },
        "item": {
          "id": "799fa315-38cb-4555-b629-87966764e92a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "192deff6-395a-435e-b269-e0e9f8b96358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 994,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e9621b-a36a-443c-8ee1-3f0bd8b6d414",
        "cursor": {
          "ref": "8748b955-b554-4fed-838b-bc6ae819cf0f",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5534df23-74a8-4a86-bea5-2822405a4e39"
        },
        "item": {
          "id": "43e9621b-a36a-443c-8ee1-3f0bd8b6d414",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "b05ac1e4-1042-461c-8564-f274e57980a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e9621b-a36a-443c-8ee1-3f0bd8b6d414",
        "cursor": {
          "ref": "8748b955-b554-4fed-838b-bc6ae819cf0f",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5534df23-74a8-4a86-bea5-2822405a4e39"
        },
        "item": {
          "id": "43e9621b-a36a-443c-8ee1-3f0bd8b6d414",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "b05ac1e4-1042-461c-8564-f274e57980a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fe1199-8912-4800-93e7-4ec924c7e817",
        "cursor": {
          "ref": "0d51a184-93c4-4619-b364-4e5d4ce932f0",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "697f8963-d7c5-4096-bb43-03e21abce208"
        },
        "item": {
          "id": "21fe1199-8912-4800-93e7-4ec924c7e817",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "5cfa511a-4a3d-496d-8cf3-c81d3c28b5da",
          "status": "Created",
          "code": 201,
          "responseTime": 747,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "21fe1199-8912-4800-93e7-4ec924c7e817",
        "cursor": {
          "ref": "0d51a184-93c4-4619-b364-4e5d4ce932f0",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "697f8963-d7c5-4096-bb43-03e21abce208"
        },
        "item": {
          "id": "21fe1199-8912-4800-93e7-4ec924c7e817",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "5cfa511a-4a3d-496d-8cf3-c81d3c28b5da",
          "status": "Created",
          "code": 201,
          "responseTime": 747,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "95a6c08d-17f8-4e4e-be21-b05e012d3322",
        "cursor": {
          "ref": "9c3bb67a-56cb-4b9f-a6e0-b37e1ddb37eb",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "44b412c6-78a7-438b-bc2c-08dfadca5548"
        },
        "item": {
          "id": "95a6c08d-17f8-4e4e-be21-b05e012d3322",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ca6457c9-9056-4e56-b61c-a4b4841956c2",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "95a6c08d-17f8-4e4e-be21-b05e012d3322",
        "cursor": {
          "ref": "9c3bb67a-56cb-4b9f-a6e0-b37e1ddb37eb",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "44b412c6-78a7-438b-bc2c-08dfadca5548"
        },
        "item": {
          "id": "95a6c08d-17f8-4e4e-be21-b05e012d3322",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ca6457c9-9056-4e56-b61c-a4b4841956c2",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "4577f6a5-fed3-42c3-af72-4532929ff82b",
        "cursor": {
          "ref": "7def1f95-568f-4357-88ef-0211de95824d",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "64e227df-e2cf-4559-985a-0506773a754e"
        },
        "item": {
          "id": "4577f6a5-fed3-42c3-af72-4532929ff82b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "0f029ff7-dff2-4142-8620-b522d13abbec",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "4577f6a5-fed3-42c3-af72-4532929ff82b",
        "cursor": {
          "ref": "7def1f95-568f-4357-88ef-0211de95824d",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "64e227df-e2cf-4559-985a-0506773a754e"
        },
        "item": {
          "id": "4577f6a5-fed3-42c3-af72-4532929ff82b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "0f029ff7-dff2-4142-8620-b522d13abbec",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "2e789b1d-122d-451a-a69e-50c59bd005ac",
        "cursor": {
          "ref": "7ceb2449-c853-4d83-850b-ee17a251a9de",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9ef48d69-7851-474e-aea7-a197702ba819"
        },
        "item": {
          "id": "2e789b1d-122d-451a-a69e-50c59bd005ac",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "90ab9fff-710c-44ca-aff2-9e1ea9f0a374",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e789b1d-122d-451a-a69e-50c59bd005ac",
        "cursor": {
          "ref": "7ceb2449-c853-4d83-850b-ee17a251a9de",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9ef48d69-7851-474e-aea7-a197702ba819"
        },
        "item": {
          "id": "2e789b1d-122d-451a-a69e-50c59bd005ac",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "90ab9fff-710c-44ca-aff2-9e1ea9f0a374",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c17150-330e-4d36-bfa0-c2f5bb2a8424",
        "cursor": {
          "ref": "3c76f749-f4ba-4c13-8d94-e5aedff85aa6",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e4ec9e4e-3660-4a46-a98e-429d113c2ec0"
        },
        "item": {
          "id": "49c17150-330e-4d36-bfa0-c2f5bb2a8424",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e95a31db-5504-46b2-a862-af3eff32ce52",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c17150-330e-4d36-bfa0-c2f5bb2a8424",
        "cursor": {
          "ref": "3c76f749-f4ba-4c13-8d94-e5aedff85aa6",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e4ec9e4e-3660-4a46-a98e-429d113c2ec0"
        },
        "item": {
          "id": "49c17150-330e-4d36-bfa0-c2f5bb2a8424",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e95a31db-5504-46b2-a862-af3eff32ce52",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a452cc-5113-47ee-961b-c903db5f76d7",
        "cursor": {
          "ref": "3c336919-b074-40bc-9ebb-c7cbe762b609",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b23f3091-51ff-40c0-9e46-282899af86ed"
        },
        "item": {
          "id": "51a452cc-5113-47ee-961b-c903db5f76d7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "925d089e-70e7-4270-a3c7-791ba58c7a4e",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a452cc-5113-47ee-961b-c903db5f76d7",
        "cursor": {
          "ref": "3c336919-b074-40bc-9ebb-c7cbe762b609",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b23f3091-51ff-40c0-9e46-282899af86ed"
        },
        "item": {
          "id": "51a452cc-5113-47ee-961b-c903db5f76d7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "925d089e-70e7-4270-a3c7-791ba58c7a4e",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "8725711f-f391-478a-9b25-263fd25f462c",
        "cursor": {
          "ref": "9daf161a-a59c-4153-9c37-656c3b85906c",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0d566c06-ec7b-4d3b-890e-8f78c61f7d6d"
        },
        "item": {
          "id": "8725711f-f391-478a-9b25-263fd25f462c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "d24127fb-dc70-4438-9e25-809235947e49",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "8725711f-f391-478a-9b25-263fd25f462c",
        "cursor": {
          "ref": "9daf161a-a59c-4153-9c37-656c3b85906c",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0d566c06-ec7b-4d3b-890e-8f78c61f7d6d"
        },
        "item": {
          "id": "8725711f-f391-478a-9b25-263fd25f462c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "d24127fb-dc70-4438-9e25-809235947e49",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "7a1f023c-e4bd-48d4-a3e2-31df54cd0042",
        "cursor": {
          "ref": "f849497a-d809-41c6-925b-3a56b29ecc96",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "750e6173-5ffd-47b7-be37-d8df862f5918"
        },
        "item": {
          "id": "7a1f023c-e4bd-48d4-a3e2-31df54cd0042",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "78bd33a8-faae-4eae-90a4-7b156dfb350d",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1f023c-e4bd-48d4-a3e2-31df54cd0042",
        "cursor": {
          "ref": "f849497a-d809-41c6-925b-3a56b29ecc96",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "750e6173-5ffd-47b7-be37-d8df862f5918"
        },
        "item": {
          "id": "7a1f023c-e4bd-48d4-a3e2-31df54cd0042",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "78bd33a8-faae-4eae-90a4-7b156dfb350d",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82aa218-4260-4fea-ae13-ca28b794899e",
        "cursor": {
          "ref": "4ebc7509-7e84-4595-9c30-9c06f1083458",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c504f4fe-d260-4411-9278-2059faf2bfa7"
        },
        "item": {
          "id": "f82aa218-4260-4fea-ae13-ca28b794899e",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "944f13c4-e2c1-45a3-a2f6-c2e8098261bb",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f82aa218-4260-4fea-ae13-ca28b794899e",
        "cursor": {
          "ref": "4ebc7509-7e84-4595-9c30-9c06f1083458",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c504f4fe-d260-4411-9278-2059faf2bfa7"
        },
        "item": {
          "id": "f82aa218-4260-4fea-ae13-ca28b794899e",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "944f13c4-e2c1-45a3-a2f6-c2e8098261bb",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e7976fe8-4e36-4bf4-9f6e-01ab48be8829",
        "cursor": {
          "ref": "6e9311a4-1d4e-4129-8311-062d5556aaf0",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d4be1f8c-e487-4e9c-8a29-1bee9bc54b7a"
        },
        "item": {
          "id": "e7976fe8-4e36-4bf4-9f6e-01ab48be8829",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "997d97c4-adc9-4347-9e27-bd992439cd40",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7976fe8-4e36-4bf4-9f6e-01ab48be8829",
        "cursor": {
          "ref": "6e9311a4-1d4e-4129-8311-062d5556aaf0",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d4be1f8c-e487-4e9c-8a29-1bee9bc54b7a"
        },
        "item": {
          "id": "e7976fe8-4e36-4bf4-9f6e-01ab48be8829",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "997d97c4-adc9-4347-9e27-bd992439cd40",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "488a8629-2ed3-4113-b746-2d33b9edcadc",
        "cursor": {
          "ref": "fb066ed7-3d2c-443a-9d18-991ebe4fd327",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5436c7fa-d482-4c7b-83c3-308669ad808f"
        },
        "item": {
          "id": "488a8629-2ed3-4113-b746-2d33b9edcadc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6c50310d-9b06-4655-ba60-c5d79222441b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "488a8629-2ed3-4113-b746-2d33b9edcadc",
        "cursor": {
          "ref": "fb066ed7-3d2c-443a-9d18-991ebe4fd327",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5436c7fa-d482-4c7b-83c3-308669ad808f"
        },
        "item": {
          "id": "488a8629-2ed3-4113-b746-2d33b9edcadc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6c50310d-9b06-4655-ba60-c5d79222441b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2c155dbf-3afb-450a-8572-a4463fe4d3c0",
        "cursor": {
          "ref": "7c587ba7-150e-43ae-ab16-060bc5b23052",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7fffaf0b-b16d-4118-aacb-a42793e847af"
        },
        "item": {
          "id": "2c155dbf-3afb-450a-8572-a4463fe4d3c0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2d29a9f0-ea44-4d63-8504-42ccb29b4cf5",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2c155dbf-3afb-450a-8572-a4463fe4d3c0",
        "cursor": {
          "ref": "7c587ba7-150e-43ae-ab16-060bc5b23052",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7fffaf0b-b16d-4118-aacb-a42793e847af"
        },
        "item": {
          "id": "2c155dbf-3afb-450a-8572-a4463fe4d3c0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2d29a9f0-ea44-4d63-8504-42ccb29b4cf5",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4f7d87c0-eacf-4e11-8d67-9b16d49937ee",
        "cursor": {
          "ref": "d8486894-a087-49ab-9c42-238a484cdad6",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e74ec38c-ee53-41c6-9435-304ea88b70f1"
        },
        "item": {
          "id": "4f7d87c0-eacf-4e11-8d67-9b16d49937ee",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "dd612c94-775a-42ae-8ee3-210b4e6bd254",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4f7d87c0-eacf-4e11-8d67-9b16d49937ee",
        "cursor": {
          "ref": "d8486894-a087-49ab-9c42-238a484cdad6",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e74ec38c-ee53-41c6-9435-304ea88b70f1"
        },
        "item": {
          "id": "4f7d87c0-eacf-4e11-8d67-9b16d49937ee",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "dd612c94-775a-42ae-8ee3-210b4e6bd254",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b8e30440-39e1-4f75-b972-a936cddcbd04",
        "cursor": {
          "ref": "3aa76325-00cd-4219-b20b-e82384ed3844",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cee11b14-2af1-4f51-881c-05f5aa7940c4"
        },
        "item": {
          "id": "b8e30440-39e1-4f75-b972-a936cddcbd04",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "70cb61df-8cb1-4e55-bfc4-d36ecfb6db92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e30440-39e1-4f75-b972-a936cddcbd04",
        "cursor": {
          "ref": "3aa76325-00cd-4219-b20b-e82384ed3844",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cee11b14-2af1-4f51-881c-05f5aa7940c4"
        },
        "item": {
          "id": "b8e30440-39e1-4f75-b972-a936cddcbd04",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "70cb61df-8cb1-4e55-bfc4-d36ecfb6db92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200bbd84-e9d0-4617-b96d-c40eab930022",
        "cursor": {
          "ref": "cf8b264f-bd05-4d37-a440-b1ce90dd8d58",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5c4798a6-e35b-4b8c-9e52-e33e7b6b25d4"
        },
        "item": {
          "id": "200bbd84-e9d0-4617-b96d-c40eab930022",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "0b6b84e5-93ae-4e06-9d74-62b8cfc2ba6e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 38,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1eb891-87ca-46de-885d-5e0c50579fff",
        "cursor": {
          "ref": "eb46e96c-df05-4c4e-9d57-1f9739bdb4d6",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e84d75ea-439f-4005-a506-e4395ba94835"
        },
        "item": {
          "id": "ee1eb891-87ca-46de-885d-5e0c50579fff",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1d50dfe1-f65a-4ee0-a468-56ab616a1cfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1eb891-87ca-46de-885d-5e0c50579fff",
        "cursor": {
          "ref": "eb46e96c-df05-4c4e-9d57-1f9739bdb4d6",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e84d75ea-439f-4005-a506-e4395ba94835"
        },
        "item": {
          "id": "ee1eb891-87ca-46de-885d-5e0c50579fff",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1d50dfe1-f65a-4ee0-a468-56ab616a1cfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30efe5c7-e88d-4c25-b4a3-dc73aed6040d",
        "cursor": {
          "ref": "4a4555c5-8bc2-4872-9b79-bb592e7c515c",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "870f61ae-d519-4001-a1d8-c1713e138c87"
        },
        "item": {
          "id": "30efe5c7-e88d-4c25-b4a3-dc73aed6040d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2f40c07b-aeb6-456c-9b3a-f61beafd55dd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 36,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30416764-dc9a-46ad-8488-c990c2fac08f",
        "cursor": {
          "ref": "3f25f48a-8739-4980-ac64-289751ce92a3",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dbb597e5-c407-4070-aaad-0b59b9133c63"
        },
        "item": {
          "id": "30416764-dc9a-46ad-8488-c990c2fac08f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e7383bb1-2b53-4f8b-81e0-5a48a1edb828",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30416764-dc9a-46ad-8488-c990c2fac08f",
        "cursor": {
          "ref": "3f25f48a-8739-4980-ac64-289751ce92a3",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dbb597e5-c407-4070-aaad-0b59b9133c63"
        },
        "item": {
          "id": "30416764-dc9a-46ad-8488-c990c2fac08f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e7383bb1-2b53-4f8b-81e0-5a48a1edb828",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0028b4-8c82-4fd7-b458-1546cdc8641f",
        "cursor": {
          "ref": "e2e95a8f-8c5f-46c2-8b2f-138ce0b00f43",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9b24375d-ae03-4aea-b1f6-ee93d2d65461"
        },
        "item": {
          "id": "6e0028b4-8c82-4fd7-b458-1546cdc8641f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2c20c621-3dae-4962-9ea1-8173bfa6c86d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8431000-977d-4aba-9715-6e27ccfa24b0",
        "cursor": {
          "ref": "26feec03-088e-4705-9949-a0d9e0d86298",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "97c1d48b-e295-4a47-a8b3-3af6ae5b5e6c"
        },
        "item": {
          "id": "f8431000-977d-4aba-9715-6e27ccfa24b0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2ebfe7fd-bcb0-49d6-b922-e5571f8ea358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f8431000-977d-4aba-9715-6e27ccfa24b0",
        "cursor": {
          "ref": "26feec03-088e-4705-9949-a0d9e0d86298",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "97c1d48b-e295-4a47-a8b3-3af6ae5b5e6c"
        },
        "item": {
          "id": "f8431000-977d-4aba-9715-6e27ccfa24b0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2ebfe7fd-bcb0-49d6-b922-e5571f8ea358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "b37c30bd-dd88-4058-ab27-90e7065af6c3",
        "cursor": {
          "ref": "476cd2c2-53bc-4a0f-a24c-05ad1236fd7d",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "14814a30-1f7b-47df-95aa-cd284c52a55b"
        },
        "item": {
          "id": "b37c30bd-dd88-4058-ab27-90e7065af6c3",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "33b12fd3-0843-40f5-95c0-28ea21150ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "fc665c4e-93ef-4711-88b4-dc8bd1a7119f",
        "cursor": {
          "ref": "25c2e73a-0fae-42e7-9553-34758cc8cf05",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "37660f98-0dff-4a18-893d-f955f33ca73e"
        },
        "item": {
          "id": "fc665c4e-93ef-4711-88b4-dc8bd1a7119f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1391f675-36bc-4023-a544-e8b55c45575c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc665c4e-93ef-4711-88b4-dc8bd1a7119f",
        "cursor": {
          "ref": "25c2e73a-0fae-42e7-9553-34758cc8cf05",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "37660f98-0dff-4a18-893d-f955f33ca73e"
        },
        "item": {
          "id": "fc665c4e-93ef-4711-88b4-dc8bd1a7119f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1391f675-36bc-4023-a544-e8b55c45575c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d731317b-7727-45d7-8a4c-6cc94aef9310",
        "cursor": {
          "ref": "8fb5bdc3-9884-40f9-9322-eb542ecad83d",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bcfa87be-dfdb-4575-b7be-8336d1076983"
        },
        "item": {
          "id": "d731317b-7727-45d7-8a4c-6cc94aef9310",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "8aa24500-d579-4c35-843a-f23d4e1ab34d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}