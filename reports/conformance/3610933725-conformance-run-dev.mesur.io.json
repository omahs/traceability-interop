{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e3dd608b-9606-42ff-8d5b-d8174ec4a3ab",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a7fa7eae-b133-49d7-a4c3-d5a1d35983bc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "484e4967-4822-44fd-8501-abe4061250fe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bd3a787c-f636-4803-9c88-f5c37798ecd2"
                }
              }
            ]
          },
          {
            "id": "25a676ed-12d5-4c9b-9fed-de57e55aa003",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "04590819-33bc-44e0-aab7-3cee6c0ae1c3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "34436d1b-3bff-45a9-86d9-9762e3f302cb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "30f3bce3-8b62-404e-bc12-09b32299996a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5c274547-5e69-4b9f-a8db-9298d4346274",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6cea33d7-09bd-4ec0-854b-77ebf3dcf9ee",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "996ed8e2-2673-4808-8922-d540b7ece43a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c600924-f42d-4d9d-8ad7-899954aa2e33"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6530190a-bee0-417c-98b0-fe52f83914c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fbbe5e19-ccd5-4ace-8176-62f74079cde6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8411e56a-6bc3-4494-b349-64cff6cf0820",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "710f2257-1ece-4e13-92f2-4dd04865c42c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "200dbed3-b119-4167-880b-3c9c359349a4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1eecbe3f-d10d-4a6c-826c-323e73cf6bdb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1de6aa66-a8ac-452a-9c87-ca611de7a330",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1569815-c74b-4ebd-91f7-b150c8f81ead"
            }
          }
        ]
      },
      {
        "id": "7a3a05fb-3507-43a1-a85f-f44c4e919480",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d345d4db-d9ec-412a-b25b-247c30dea01b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69b46911-21c8-42c1-a86d-00596d01d694",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9b6206dc-22cc-4f5b-8c1f-06d25d0f1599",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78769c0-cd91-4754-a609-fcb38b88c84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7398c8de-f5b1-47e7-8fbf-a892029f5542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb219934-1a56-4b3e-834a-310cd290b959",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84a2a18-a276-4736-ac88-9c1dd2176d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d0680e7-ae6c-470a-86c0-0761e667f22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac66523-df46-4a55-8537-ef3f3aee6c55",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa023b9-a889-451e-9ccf-cee7197ee89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6734d278-fb29-4dcf-90f6-2850dce489cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "03f65a22-34ab-4cba-bb4e-2be093ac3f1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8024f7fe-ad50-4f67-99a1-677ce69c7845",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b8be54-636b-4bc5-a7d5-ffd4d7c365bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49be42fb-5525-4376-8fcb-0a1c92a91a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ae14ae-3553-49ac-9d44-a385d22cd2e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d91b46c8-ac47-47f7-8ac5-107d06891790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd2c688-2eba-4a7d-9053-2356cad4ef03",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e19c49d-f4dd-41ed-92c0-9bdab52914ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0ce289f-6460-4260-8471-5dc6daf0418c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e623d59-4876-4ef3-bc75-d0796e5138f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "726947f6-289f-4d45-a8eb-4fac4faf3b86"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "498b1e02-69f3-48e4-9991-aaefe6afb9ac",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62d4fe3d-1c14-445f-82f9-40c6ccb1ea84",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7e6a2d4-4cd4-41eb-b6de-84ac695da336",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0fc3ea77-dddb-4aa5-85bb-d3127b4bf175"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8635ec35-0497-4f28-b87c-d626dd908a01",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "1c81defe-afa8-486c-b22f-5f31d8d31382"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b79ba9a-64d2-4548-a22f-0fe93447c805",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2cec5444-6e08-4960-a66d-86eaadfc2806"
            }
          }
        ]
      },
      {
        "id": "39aa6114-968f-4d14-a4c0-419184ad963b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c5c83ba6-cf50-4917-a575-f93ddaff2104",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e2de582-e041-4f5f-9414-3935737b6ca3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6793b72c-8faa-4cdb-8460-9a890162b61b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e620b83a-73d3-4bd7-9a29-df00a9acf2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24e71ac-8926-496b-9295-7711ee33b4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9e7d12-627d-47fc-8d60-d3de8292961f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90ac3534-652c-4892-974e-39243c8327f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b304573-0a7f-424b-950a-3cf96be59cec",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b501d1-aad5-4c60-b935-13fe71e6d180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d227a763-6ee1-43d8-ae1a-1d6539b8dfc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1425c4-aa2e-4663-abc4-f1750e3e65e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e8cbe9d-a4dd-4802-9707-c5654bd29637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbc9cda-6264-46b6-8b17-06cf450c582a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611f0f68-36b0-403d-93af-2fa97b50691b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b36360-d9d0-4de4-915b-81a9e456c049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3201059f-f037-400b-9363-8daa726683c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f50109a-7544-4c03-a982-7e28e78d8a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb478ec-632f-4c52-90ca-17a946f0827b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba63c5fb-dc75-4a54-9dcc-07b46ef1c150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82431786-e74e-4f51-a259-182bd6f2cd9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bc764a-f3b8-467d-90a1-df502ad8fc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0d9fc5b-e9b5-42f4-8b58-794f983fb6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5d1a09-0c4c-4a43-9337-cc53830a7904",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b17d86-6994-41c5-b3a4-e8e0bd12c6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c4c313-36e8-4b78-9640-2f8c8abe9b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cbb65f-f759-4daa-997b-f28edb119c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b02562f-caff-43f3-a05a-aded8fed5372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d786b662-4045-445e-b28f-9766fd027928",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566ca84a-a443-49e7-bf34-ed25c34531c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa092c0-7d70-42aa-b9ea-a242c8aa9bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e824b03-5727-4af6-97cb-6877f88bf626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48766f23-dbe1-4cb4-8b8d-3614ba7a3658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75522ff7-1d7e-495e-b400-a52f122fd23e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b07d173-5ae2-45a9-9816-10d8a6667d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ddd72d2-82cd-4e62-b331-20c006c1422f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9700450-aa84-4f2f-b45d-a9c7f9277858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8c1f330-2a9b-4918-b6a3-1c3267d12004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd300d97-86f0-420a-a9c5-41cf5ce13ad3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75609b95-6561-4a4b-bfdc-f01f0859fcda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca093f9-a602-4223-a911-952fce4baadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73482ff-01da-4c5f-8dd0-2b8d2aa96ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9542ca38-81ad-4e98-822c-a109079d68e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30194041-8dfb-4146-a96e-2055f961022d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee296d79-a5df-4864-bbb5-65d578e7b1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05878bcc-8a65-41ed-910b-4ca873baf61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38872bb0-1fee-40f2-a922-bc3020462af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bea2f25a-d27f-41ff-b0b3-e3f7e7dc8b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a65d70-ccb2-4a27-a1b6-d0bbe9305d16",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35f7932-f1c8-4a0e-9164-24b5b138defd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5a5b0f-6c11-4e9f-90d8-658e81e33cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62ccac7-b6b6-487b-9799-43ed0a859f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2703b1e5-33a0-4f56-964b-37e44ba13bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76aca236-cdf4-4387-8ffa-de7c24b7aee6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0fa4a4-962f-461a-9790-5eeaded98b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "991c9c09-13fb-44e9-a692-6bf53ad909fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7086f8a6-5645-4e15-b4c9-e6ae64231c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a800b67-0e21-40d1-abe6-6155440802ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb77bc79-d492-4051-a6ba-1dfc221d2025",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa86a18-0a3b-471b-bf0c-72f6dfb2e0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b23879-7826-4d50-a14a-c2abfa53b0d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd705db-f487-4715-9ae1-356f78f47380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91b98456-2703-49ea-bfea-e45b2b576c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2c7cb4-e027-4d36-b6a4-0055fe6d74cb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77d505b-ca58-41bf-936f-3a6c73c051a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4082449-3211-4ba3-a66e-97ff75234f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b50879-7ac9-4473-ba65-cf5fa8e9d986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a29cdf6-331a-4f38-8bcc-c3c503147094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b453cc-445e-40bc-9d81-16894bb3651a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccd1d46-bca8-4256-b006-d606cac3e121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef8fe5c-7b5f-4989-8f77-71496b555c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e954d5d-928a-48d8-a223-78169d29d551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddd1ff31-dce1-4afe-8486-4b0239963182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62670041-2355-4be9-9ce9-67525254f189",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff14392e-4ae3-48fd-9412-96b87f847ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b36af0-f5f1-4d74-be5a-14d0184c680b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a044dd0d-34b8-4ff3-9561-ea5edcdcb1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01a37f3f-e11d-407f-ae24-640b6c1a1adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0848de-955f-4864-8cbd-989e1a168266",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb32668b-38c1-4c47-bbff-e33fadc7109f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d572d95-3f75-4278-b33a-210411e96e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586d443c-21dc-4562-862f-9793500e2cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14e686d8-c9b9-474f-b420-ebb56087a6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da2780f-38c0-4e10-a452-9063a77e9bca",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954210b5-eccf-429f-9936-65525094dd7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a148a69-97e5-4ba8-885b-3cae7670b758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec95985-8745-4dc8-8398-83a1b54e953a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ee0d93b-22dd-4614-9143-871dbfca75d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7163410-ab46-4cbb-b8bc-9127f0eb4c72",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76742442-c51f-4967-bba0-125681914dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fd02cf-7520-4ef7-a8a4-a906dd39aeb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90543486-c5c6-4963-80b2-95ca6799d19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "23e257c1-91c8-49e1-b26e-b9754b4fb813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510ed13d-9e27-4c1e-bada-cbfc48267c5d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc02afa4-d44b-4de6-a2cf-5ce1f1ff0184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c939a3-8c50-462f-b6b4-ce363fabdd6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ca680c-0191-460c-b45f-8a3c25ed8db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1c3fa2-3ad5-4e0a-9b25-e25441f45973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82940df6-365e-4c1f-9b35-ed1aa40d9844",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4704f133-0423-441d-92d3-188f2843f1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3fa659-4001-42ee-ab79-f4d0024d0e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0ee8da-0012-41f4-81e1-601035896e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "660913e4-4cab-4e3b-be2e-da8b195deb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19be307a-8da1-4b0f-889a-d9936ccf1d3b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb9f694-d82f-41db-a1ed-be7d0f0befe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11c3cfd-6e0c-4c2e-a2bb-cf539bd8557f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe19277-5fbd-44e7-b7c6-676af3e7de9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0251490e-bcbc-4b9e-a6a7-0d1ac1ddfaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03d8bbd-2e22-4cab-9946-22d36526fa82",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f98e48-3fff-438a-8198-1dbc9c5b88a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f975c0-0cf5-45b5-b02a-7f6442b3ff6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8aec49-e86d-4c94-b3b3-9d6942b473fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91c6cec7-287a-4e86-881c-352ef97baeba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6426ca-d1bc-4da5-8574-1e9d1eeabfab",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd846e4-3227-433b-9d08-6fa163962ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e0a5e5c-d765-4db0-baf3-1c3990bfe31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1a8e84-dc2b-479d-9b29-39d9c87946f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dec62146-8b0d-4c3c-8327-9fdaf711a887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a7845d-cc3b-4102-b9d0-aad954d0d0b4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1638a2-1413-42e7-9d74-e7c6807cdfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9269ead-8396-4a0c-8064-5791d7433e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4509e9e-492a-4db8-b539-84fa349e35b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "db5ade09-de05-4845-9709-9daacd755bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015aa6fb-678c-43b5-9d22-7eed80b8ad1b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3526b62a-218b-4279-9b42-bcc1a6dd4b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22fbc39-1a98-4373-8dc4-d6f23f64071e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a3c4a5-060c-40fa-b95a-7382035393b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06a5d6e3-da28-4ca1-9ced-355f01e1c07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4afaa04-3005-483d-add3-20e6dfc707c4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "defe47b9-a6ac-4a04-a0ec-ffb75635e21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c3305be-9009-4a4f-8621-0dcb956af072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5868c21e-1b08-463b-bb17-2973784ad4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "509d1208-af83-4a80-b17c-5cf0bfa15c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f3a6e7-b703-4c2e-9a74-42a51a229bac",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d511c5-3573-4f9e-8bf8-d0febfd43548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ddce8a-b2ba-4ddd-998f-ce5d943b0816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa468532-990e-4c26-8b75-4ce394a47f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0561bb-d0e1-465d-9702-e56d34ee0aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2708f6-507a-4fd1-8e31-bfd4ab662eae",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce944ed4-f9b9-4ec9-8554-77e56fbb27f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5bf955-ef03-44a2-a6c2-339e014c3a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e02bafd-f98f-47df-a690-585fac2b06c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "932960a6-2765-4690-bbf8-fdf62f17e4f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29253fcd-26dc-4f47-b856-cf2f1aef474f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c354378f-53c6-45f1-bd06-43b92478d1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa285a88-3200-46d7-8940-7ee3bc9e8c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab04930-62c4-4011-9e78-20e47a633621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd05fff-af83-48b3-a6d8-4a1e283fe429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c42675-73cd-4197-a0e2-847d2a5e193e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371b1afb-555a-488f-96ee-80cd7be1ac03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327b4295-4e7e-4324-ada0-d8c29750c4d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab594acd-e79d-4fdf-a21c-4b99fcd27603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cda00d74-4a90-4af7-b905-03b3a2df1710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65f9b07-5056-4d11-972d-7d4abe2f5fb7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1947d5-93ee-4dc3-887b-1bb295b622ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39d314a-8e1b-44c9-aa73-e536f63cc4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c51457-016d-414b-be0d-d14a481e10f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1e0f53-41aa-467f-862c-631ad74030e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a64e490-46e5-4179-896c-b06a29dc158c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9419d04-f4cf-4443-bcd5-71c245d054f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5b265f-ab36-4b05-a5d8-5c900982ee1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901a66dd-e30d-4184-b2a1-5e795f636453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8726adb-ad46-459b-92c9-b9ae60029f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b600bd-d774-4603-b91f-a26678d28cd4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d88dd01-a80f-4664-8dab-01368319e63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e855cf5c-f2cd-4f43-894b-1f7fd4883bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9eded2b-bf16-462a-bc09-7133ca62d578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b25125a-ce67-4aab-9e85-6506248878ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed152ff-7b51-49aa-8369-fa8c6d2d0058",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dfd467-d6a4-4946-81a9-2d0a18909c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0671f358-cb61-4e1a-b5e1-521a6515f46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0fab22-a4b8-470a-a8de-3cefd6ab1439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbcb3b1-3ce9-4e0e-ba2b-28b5fe28e7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ca0b2c-b7c6-4976-aa33-8e5c1b9a523d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43702868-5a0b-4eab-aed8-f925e1ce7a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996e55fa-db08-493b-8951-6af0d702a905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c89df9-8763-4298-b088-ddc3beee83c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "761dd27e-11be-4b5e-9615-0178964a1287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d95ece-1db8-4784-ad0b-b86a4ba726e0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81d43cb-cb22-405c-b9a0-415227c918bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfd60bcd-997c-4351-bc33-e60a4fb97bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f525215-0eec-431b-a3ac-44642f125806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71bb9e23-781c-4127-977d-dc478f0980db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5602489-f1dd-4efa-a1e2-b4174d68f522",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9802a776-cc4f-4aa1-82d5-d4097ca86dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c85c2c7-bc0a-42b2-9756-aa173a28ed00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0dbffe9-6094-444d-9620-bc6f1370d82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e9b3890-2831-4bd5-951a-451198a93128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541b3d06-9e8a-4d46-bb58-bd72d2d79425",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f1bdcb-7fe7-4a0f-83c9-3e80e73f7ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58699a5d-1f9a-4d6c-ab3b-235b453a9ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8d5c7e-2493-4ff7-a108-1b03c6458806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "52d753bd-f107-496a-96dd-c9643a2315f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62240eb3-0828-46df-a0f3-c296bb08da14",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804b4fd7-2bb8-49f5-9473-6302dc5741f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e6c7ba-665e-4bcc-9490-263f400fee23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9ddce1-1567-45eb-b61a-98dd339db59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5aa777-5bb1-4f77-a5bf-47187c656411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a29c24-4993-44be-b4f4-009bad73d8b2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1af3ed-3327-49dd-8ad3-ce7c41b439e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc5de1c-450c-4ed0-afaf-25aa3e5b70f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6498e638-63db-4f43-bb8f-1da33632283b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "62fd82e3-caf6-49c7-bd97-c68ee7e041c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c012039-1435-4f34-acd2-c18e65b587a8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec57e3a7-2cbf-40f7-935e-cc3bd4abbf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ff0ce0-cb44-4d05-91ec-19df33b66323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d816bc5-83a6-4cf4-ac05-d77273f1eb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "131f3736-832b-4caa-bc2b-9329893da070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f339ef68-3a5b-4aab-8726-e9504947e74b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f05db3-2b1d-4910-b1e5-75ef2d46b3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be56f91f-853d-4f09-b1c4-92e519d3e92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f0af41-2944-4cfe-a6f6-f9f61655357b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5f753bcc-4aa2-4736-9bf1-ad44c53e3892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b3aa5a-fba6-4e12-ba18-4582f542c801",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3c93ca-4fc3-43f6-a1c4-43dcb78fbf24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5e32a7-cf6a-407f-b4f5-ea9356b2c14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17633148-003e-4201-a7b2-91e43459ea30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b0840ca-127f-49a3-b6a3-8fdabcbe3f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64400f69-3139-4788-a1e2-62885430791c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e4a1e2-357e-4f41-a07c-b87de6391b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ac4031-f75f-4f11-bee8-c320470a160e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787bbe45-eab7-4348-bb22-f43d6a8d7269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "38b5e961-ee65-4781-bf18-39a4664babb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9636692-5085-47c7-8ad7-a56a931363e3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3273e52c-b9cf-4b46-8140-39adc7345ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91ec1b4-8efe-4c6b-a016-4b39a6d08ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd327d3-7bc1-46c9-86e0-b6f7f0b04132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f14e28c-b01b-44dc-a23e-5d87e5406388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b605e70-0286-409f-8bf0-346a0eaa0354",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdbae3e-e7e7-4e21-b239-cde28a6d2782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa8af30-be55-45e1-b373-f9a325f10cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c2f599-fffd-4bcf-a259-c2cfef6bd438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b41b184-f1da-4a18-98c7-ec2ce4716a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4828a7d5-cc13-49d9-bab8-c69e4a5059a8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5337bc-f4fc-460f-8714-593e5429b603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad614070-0247-4137-9dd8-e19cd4cd22c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f85b877-4818-4668-bead-9724b0461361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05fc5a8c-0e89-4542-b17e-5115e49f30a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e89861e-7b72-4e23-b413-b89a8b02ca73",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e14686-1f6f-4b70-8013-42ec7296c488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a56adfc-c52e-4722-94dc-63a3c70c2ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1603af5-21b2-4064-9f9d-2900695d62d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1156be28-9931-4fc6-8b73-3db6faa49168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4126c4-1c94-4ba5-a6da-f9a6d72115ee",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992c9cd2-1531-474a-912e-35820c2e8cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab16b88-06bf-440b-84bd-092f743ca584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2ef90d-dd94-4e01-a9fe-37ee642c251f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "74f54e32-c073-441c-94dc-15073cae0295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28159afc-1f41-4499-a42c-ab0b70a481ef",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668c498f-b4c3-4e58-9b93-01ec68b77db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67dfb28a-7ff1-4e79-a785-f0d0d1f6a35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c89a8a7-a76c-47f2-bd52-102a74cb461e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1761f034-c63d-44c5-8f8f-27958f104a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62b1b97-d4cc-44d5-9858-8eb27f6302be",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d75a68-7d97-4752-b734-7e279a926b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d56667d5-0ae6-4b97-bf73-ea334f444b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd71ff68-2a7b-46cf-b28a-9cf07a040a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe8b5de-90d4-47b5-acbd-4b545b42ae5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9cfe2a-c8f0-431b-b3b8-a917ec8eaf2d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48eab7cb-c2c7-4b3b-9fa0-dc9c03af44f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0433a38-16f9-4d3b-9e26-7d77bced7671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c999aa15-1af6-425b-89fc-d57076257312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4dd0ab-8c56-4218-9457-58bcd346dd46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3741ac7-d428-4683-93f4-bbdcb9f2da10",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76df0c5-eada-44ee-a32a-8cc33a56b53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341325ca-0f6c-4b00-bfac-e72af634e294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1bbcfb-7fdd-4015-b2c6-aa9f10aa8670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbdf3069-c3c2-43ff-abe8-0463f22f724c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a6d58f-ba7f-4ee9-849a-6daf48b21d48",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068051b0-fd7f-4644-b18e-77328b7fee32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc06d1d-1fc8-43da-855b-df435f84c5a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3404070-939c-41e3-9aaa-7decdd5d017d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b523405d-8e25-48ac-91c9-a986e75274d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2aacdc-11e0-40df-b38c-2589c37174cb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502b8579-6c01-4645-aa1b-492734172712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a037512-b52f-437f-93fd-b1675f1b409a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c13e99e-7920-415c-b645-15b252c29764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24fa53e3-dd7b-4055-8f27-d45e2d898a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae23347-885d-4c2a-abff-d88118da4dc9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb222ed2-d4f9-42db-9452-797611b43883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f54848-7462-40f5-9b45-63fd07de7be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae8ca01-7de7-405f-b9e7-10ed653ecf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "01118c56-4f5a-46ae-8730-5095f8d2815e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef963fd7-af2a-409e-8943-afaa0ae9d4f4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3b06a4-eacc-4791-a6e9-8b647673aeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0ad941-71f3-4fb1-aaf6-caf3f01774b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ce663a-16c5-4592-98a6-0507c45ee7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0708154-74fc-45c0-a216-375a2e4a41de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05074b43-f9cc-4593-bff8-f8c4dc9143ed",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b58ca0-95bb-4857-86d4-056b11dacbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ab9ff9-32c8-498f-affb-57fa2aa5bfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1bf6b5-63a9-4b23-9919-105f7ac5b452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d387c722-0e5a-4285-8d17-a29298646ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88701b3-9296-4878-9e91-a4132bd70346",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fae049e-a15d-470a-8b45-2b371497a4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05e165c-cffe-47fc-8ee7-bba265029bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9f6e56-f898-4c98-b6c2-44a07d370005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "86bcff16-8c08-4ef2-9593-edd01bd38550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d803a08d-b2d6-4cd8-94ca-eb9a3735fab1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de76243-1383-461e-879e-10ab3e363423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ef53a4-e7e1-49c0-bcae-733cd6ac622f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c870fc50-715f-4e21-97d4-6d1aeb387eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "95f4601d-e8cf-4e10-a763-383117ab7dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a956aa9-64fc-4462-a12d-5727c7c1c5e2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00d414b-c0a5-4e07-b51f-d658f63cc1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217b233a-e98a-4a1e-bf80-9f73afbca4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37adee2d-701b-47ff-98cc-b43f35ec0f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "41369b93-d99f-4adc-bea6-542c9db382ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9710f7-568e-4bed-89bc-08238aa39b45",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dad012b-23de-4226-8a8a-9839b3a14e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "792a70fd-26f0-4c53-9096-64eae336abde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b42efd9-cccd-4230-bb4c-fcee81fdb721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4c4712-e347-42d6-bbac-d5b7f2f25af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0751a092-c923-4b56-bc54-e4c642f2adf9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcf4419-6dce-4900-bc2b-0b0b845062dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ce8f57-cd80-40c5-9a01-c2bf90bdd7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7ad080-3a95-4275-8a84-0841e7ee56a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "892d53a8-0e96-4b23-beb1-f64381183bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a489bf30-aa84-4a03-a37a-197f8003b470",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfe0401-c6d6-41fe-9e0b-a307a1d6f738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83f04a3-f5ac-426c-be28-67e47ca70b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372cef12-0959-4fab-9482-3e4341501d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "481f8824-5334-4260-85a0-f0c5e0a1a03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24bf2b5-6028-4d0a-8c84-a2b3cdd340ec",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d2e343-3cb5-41aa-9b34-14eded44b46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff05e552-a24a-4616-b9db-5278a700e641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac7c862-63a3-4488-a53b-1fea6e303152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5abccf4-9bc0-4345-b83e-8b7effbfe6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5076e6-2244-4766-922e-ae767ad8c692",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18ca2a8-c00d-463d-b5c4-32061ddeb72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1060289-2caf-491b-ada6-c5cc4b97fccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af109ff-2eb1-4568-a674-bb1ee1530c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1060085-0162-4a22-a354-b9fceedf95b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65f6f52-a20f-4937-a27b-269e2b23ae07",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9f0e42-1260-4012-b9ed-2815b05abbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c2a0580-c621-47df-98ba-20e59ae9f4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072b0145-4e61-4d9a-9d82-974bd82caa62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "479553cd-ea1b-4750-9320-fe0fed6cf16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b5cd82-5421-4b31-afe4-ce6c057bf621",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b62362-7c62-4eff-8924-e6baf1455f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51cfe897-efea-46b5-8acd-41351cb025ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e1c365-e0f3-4bb2-ad84-493ae9fc0632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "04c1c770-36ea-4dd6-9909-0df255af557c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c1f916-c4dc-4730-9c3b-b48ce2d4bff0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a53d63f-0cc0-4b32-8e91-007d4b2aaa53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44328ef0-02a8-4308-8e3c-c40a384f4041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd7a004-7533-4d6c-8933-ec2a0905cd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1872b16-8780-46b0-805e-f3f923aac77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6092ab-f503-4dd1-8985-d53a458eab4f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91ce0a0-ef32-4662-9821-3a3d4bde37ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce27763e-3371-4877-b88a-5a08be0b5722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e767e01c-3d90-4028-a4d7-74b7bd6f92d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f41f264-7743-4412-bd37-5fa619457f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecd27c1-ce9b-43ab-a762-6556d793553c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73381d72-2ffd-4e96-9898-c920359c9589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cbc64c8-f2ed-46e4-8fcd-f6fb9919733c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166547f8-6b24-44d3-b5bf-cd4fcc12a1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f27c11f-876e-405c-9f24-681b7db07ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9426a2d9-27db-4ef9-a88a-1212fef5b40b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92287ac9-47ea-4720-986c-749c93d9a27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b229a103-6558-4a78-8f7f-5a033f267fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80297178-15b7-4b18-8494-274f950593fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af92ac4c-a18e-4ea3-acdb-6502bff2800d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600a64c1-2a38-4521-ab35-11504dc84a9e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0de412a-ebf7-4718-b9ea-969d7666b386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "089e39bb-c6fa-427f-b4ed-069a9711b9bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e3e235-7899-4c04-913f-802a9237a0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1df6a05d-d135-4390-a56e-93508f4bf98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d0f984-e8bb-4f46-8d74-391ba706fa3a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e0edeb-d2a0-4649-932b-898821e03fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f453d82-4fc5-4242-88cd-cd9094c411ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bfae93-2000-48ca-81c5-7695403cbdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd71d382-84a2-4416-abad-76c26f8d8ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd53e8f9-4226-4781-92f3-3ceefd388711",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7543481b-ddf6-44a8-9652-2a2363fbd2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7422795-cd44-47d0-84cc-7a66e814ee08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c352df04-0893-43c8-9a87-6377a5fae0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "71c0af57-6193-4914-bfe1-de91b576a14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61826586-119f-4c00-ac79-bb677263dde1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2813f3f-aa40-48f9-844b-967305466d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7292dfc1-406d-4d91-a44c-3f2788b3309d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17faddf0-b7c9-42b1-b08d-242925797668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f34841e-03f0-4342-bc74-e1d4365d25c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0032ae88-c28b-414a-9e4c-c411fcd65f72",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dc08bc-d372-4cfc-a084-9aa6e0a0a85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ad0dac-a65e-455e-998e-f4fb29e96c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb293d5f-a5ef-4c0b-bfb3-a9bb435dc452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cede2fd-a81e-45df-8bf6-2a7725504ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26c9add-48e0-4801-8e18-8dd8b2b9924c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd3c5e3-8a92-41bf-91bc-2cc9c64faa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e5e494-1b51-46be-afcd-4d127009047b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e365980-53c0-42f3-95cc-e07d5ef774e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a34647-21d2-4a03-afc5-28da6f4ff188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14d40f2-5379-443a-b964-a7c4344aa471",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5826af24-88a9-41ce-8383-3b1afb5976cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba672b3-1c47-468f-a481-6f839cb67bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d6413d-ace1-4018-a159-34cb12157de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b42909ac-0cc3-4768-a821-23e2c37fd273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7db9f02-10e6-4f15-85f7-364392c3f07b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d262224f-96a0-42f0-9e67-4788049b682d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e07fb1-032d-402a-acdc-75152a9ffde4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e7a175-e2b9-4f4b-b58a-9679e41f67e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26df2e48-7bac-4828-89cd-c0b2db3613e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a408e05-8a82-4683-b7b1-311fdad3fe24",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26f9bdc-71eb-4d21-a8d1-50feab19665e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c049edbb-9122-47d0-b7f5-44fdd2774344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f09213d-279e-424f-a420-ccc54a79f246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "11e5528b-794e-4c0a-9a7e-d883b84a4996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8287e3-9d60-494e-84b1-4df325ad2119",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a29298-61ca-4d9b-84de-c7fb4a8fb19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2f9119-293d-48d5-9e7b-9fbdbbbf51e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e6396d-fc3f-49bb-b938-0a389b05aff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79560a0b-a722-4fb0-95a3-fee1fe3fd931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792924f4-003a-4285-8b4f-7772b0b6deec",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf1117f-f1e0-43fd-adac-533a689ca194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce11da9-0b0d-4ed8-8f0d-fbd6d93e973a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1e255a-61fa-4b4f-ac9e-3279b7732ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80dd034f-bc1e-4b20-b43b-9ca516c364e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ebdb85-53a8-42ed-95d9-7749d849cfaf",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd621c3e-9f29-4ae8-852d-2cb64668cdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee798263-11d1-41fc-9b1e-701e44262839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad50b09f-0cbb-4256-8a5b-04f62e85f217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7431e707-9ae2-4b7a-b491-ee186b9acdcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4ba35d-b4e7-4e84-a165-7f9c6ab80204",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01221a93-c7e2-4fb8-b881-32a7944ac6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd3cca1-1f06-4a89-9720-0630b9380641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ce468d-38b1-4f31-9756-9e9958609a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0719208d-de68-4ae7-b75a-e06079d5069c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334b9c19-60d1-4b1f-9560-2432d8ce5b38",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45edfc10-0b83-461e-9e13-dfb77f1c0dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede4c627-c927-4580-b137-8b4ac82b665a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4a116b-00f1-4b2b-a9d4-ee20b7b4776c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "756ce1d9-d2dd-4565-bd6b-bee23419655d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8607f4b1-0110-4daa-8787-cae219317377",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4642081a-e97b-4db4-8acb-7bccf4d2e70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3039187f-45c7-4831-bd87-4171bb4d4a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8a4491-796d-4cc4-a418-40d2ee774cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2df59b1-061f-4183-9500-ed48e1bf5b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f176f007-4c83-484f-ba11-9f952f50868f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdda7ca-cd79-41da-8ee1-c941f3db698f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0171a4ac-10ca-4838-b6e9-3bafa82858a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4aee64-158c-474a-82ba-f645fe69d597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "95e4dabb-52b4-4439-95fb-efe67fb18e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dea7fe-2944-4b40-8638-f1dbaa9a95b0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec08c67a-a2f5-4195-b99c-230c4f0f2342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a5e0e0-415d-4684-9ff3-accd1323649f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdeab934-dee1-42f3-a6b0-c12e611a44c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc9640e-08f3-4e5e-83bc-9821b1738320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098eaf95-c899-41cf-8ffd-8283b2338dd5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afd9b1c-28a1-49cf-a810-f4237e57d435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0572123f-719d-41f1-9218-4c4689a4a843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2246524e-39fd-4d4d-b303-582db71a1f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "136ff307-60cf-4c8d-85f9-9d562a31a363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f44c91-0739-4470-ba50-25d0fffa6ee4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8ee956-574e-4e7e-8491-c267d132c9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a530ff-0de6-4c2c-8139-f7adb561bffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a862adc3-2b1e-42e5-97fc-9682fc9d9379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8586129-fd66-45e3-9248-2b9ba6439d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d88b256-a52d-46f4-bf61-b732322d53a5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a4327b-3099-46fc-a72d-c643fb258eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "36cc8ac3-0974-4547-b6ce-02a13f08b8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f26222-0fe7-44ec-980f-5c9f177608e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "05d631c7-0df8-4cfd-8429-201f065bb5d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9329c08b-d055-492c-a621-f11fd1c57411",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "50676afa-c86a-4cec-9f77-fc1c80381a85",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdd9fa9-ec18-4924-aa8d-fb94ee82c2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3765bc8c-f697-4125-b585-48d750e9eb8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2918c507-5582-4302-ad36-316eb6c090f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "157c9a2e-a6d9-4186-91f3-f01d57feee37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81207be4-892b-41ce-9daa-8127f0c1442e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e222fc-7435-4409-bb36-70f64b2047f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e2948c9-b438-4c2f-a33e-ec73d2ffc718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ade793-2ad0-4e4b-ba08-243eb7a48ab2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "198d434e-885f-4d69-b71d-9be7b057ac05"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f46d9d9-2e44-4776-a925-91ee0bf496ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "402e189e-32ac-4a41-b815-7c19be80b695"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ccfca99-a73b-4bd1-9cbb-d650623e9867",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4eac35b2-cb92-498e-9bfb-00ce9991c235"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b896c588-5cf8-4dc3-8dc7-3c6892d8bacc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "77e73453-f7cc-435d-8480-b77e41c59a59"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "35ceda0f-0886-4fc4-a1bd-1a97a9c91c09",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92144459-5d4b-4041-9f2c-b14d3aa8ab5b"
                }
              }
            ]
          },
          {
            "id": "b935dbc9-3ef5-4fec-a408-a924af373cec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ad95183e-7172-47fa-aa0c-4901c73f2809",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2b0c275-13a9-420a-ae6d-0869da62e024",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "329d68e7-2af3-4922-942c-557ca79c0c4b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a54317ff-86a5-41b0-95e0-58662e910941",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6a164501-863a-4f20-b8ac-7b9e17840bdc"
                    }
                  }
                ]
              },
              {
                "id": "ba86a4a3-0c15-40e9-b1b9-db6e26b5ff69",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "426282d9-1785-420d-8500-88372dc181a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7a0077b-64c9-4c03-b72e-b1400cc71018"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52a40a05-fbe7-44d9-a420-a81cc29cf974",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ae1ab62-da74-4ac3-b7b2-e73061e9a8c9"
                    }
                  }
                ]
              },
              {
                "id": "202a7565-8990-4524-9ace-1bd66d96d1e4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "270cfab0-2467-4b35-b154-43bc5d98827c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3ee07dee-41a1-4b11-9ef6-8cfb09f24c41"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fba20041-7d78-48b4-a637-3d586d730039",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4aca7a31-0c18-4c49-b8b5-56c3038e1ab8"
                    }
                  }
                ]
              },
              {
                "id": "3f1117b4-c2db-4884-8c67-9e4e365208b8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfdb5bc1-cc06-4363-9904-5641c7401be6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06da1a50-4764-4d41-b227-9c42e25c6d6e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "973397a0-5972-4e7a-a944-1628cf41e5a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "105b32c9-842f-49de-9f80-e95de21989b9"
                    }
                  }
                ]
              },
              {
                "id": "691067b7-b8d8-4acf-8653-50be52a38d8f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5eaa4ccf-547b-4afe-9cc4-d1dbb8618134",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cec7c7bb-aaa9-4cd6-987d-78f76338c29b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56288664-b9b0-4f97-8f0a-7a64e46e3335",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a0c92f45-2b0c-4665-b25d-ea166b6b8040"
                    }
                  }
                ]
              },
              {
                "id": "31823378-1a83-4d6b-9220-c182fd7caa8d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ed7c3dd-4d71-4cad-b0bd-8bdb78ce7dce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5dcf863f-ad09-4a25-920c-5ef93fdaedde"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d8214e2-74b7-4a41-9264-a6c8ed45fb8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d464e09e-2598-4f6b-8ff0-57ea630e17d5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fe729451-1f50-4952-a74f-7f5a2c2c8b4f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53fdff79-fccf-4893-b7d6-88c83df60a92"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d8ad746-020e-4f35-bef4-2047dcca2f9e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ffc8f2f4-89a1-422b-b068-824d37845908"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96825d12-95a4-4947-98c7-e04613c321c9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b486466b-00d6-4ba9-96a7-ee78cd936c4e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0753e06-6bc0-459e-8c0c-9406dfa2d7e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1184eb01-f865-42c9-bbbc-9cf39e425930"
            }
          }
        ]
      },
      {
        "id": "50e1b887-f121-48f7-9e02-a74a45c4f403",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "88585dca-ba9d-41a0-8b1d-97e6daa770e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49330a17-5c4e-4b18-8b1e-183b11994f46",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e3e66e8e-ea78-48d8-a5ca-4f38cd5cc63f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda744a0-4a59-4baf-9f0d-bada61d43060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca65b57-7a9e-4bbf-81f7-4e9faf128f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcf47eb-2685-4455-8c2a-61537636eb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b28ff0-d759-4da9-b45a-66f4f6f44fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7380e11-3cfd-4608-8d78-82bceb99ee8e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7062d15-845f-4462-8931-931ef0c8b761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd1cfa7-d2e3-463b-8bb3-74879f2c39fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cf2666-94df-4bbc-b610-9c021d25a3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f151415-4ca2-48b0-80f3-0ae86efea500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f57da63-848e-4719-9f2c-fa1a6a572232",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2098e1-b88d-42ce-b999-7e0bc0db82ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfbd599d-9dcb-4d1b-b85e-ee7d19ac7e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b28640-2692-4a45-9e12-9de9bfa4772a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2b8f60-acb3-4880-b1f8-3e6e93858b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d66661-aa8c-41a5-80b1-93fce48bb501",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bddb08-bf69-4f92-9947-78ee289fdcc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bbcdc3-1425-49cb-a833-f8a2c6366d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1f2772-315f-4422-84b4-ff01af4de95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab92e441-9109-4435-a6b4-5006353e6ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ed17e9-2c1f-4442-85ee-462f35ed2c6c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec9fa4c-81ca-45cf-bd81-0fc3ae748e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aebf01c-703e-449b-baa4-c62bb40882e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74301e48-3171-4138-8e80-8810324faa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b11f95ba-d351-48b1-87f1-f73ce1d2aee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e665b177-263a-4983-925a-023624fcfe09",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b233046-4ceb-4dd2-90ff-095378fda100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50874d8-f7a2-4127-83f9-25fb2e1734aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e82366d-a63e-42e6-a32b-4e7a53a2d051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "568c746e-2f3a-407a-8ffa-a42bb1db2853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e242d26-06cf-4af9-97ea-c017148d861a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566f7a06-d2fe-4c78-b50f-c7a50d454d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad88df5-bfee-4d1c-acc5-18c457566b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cb3aae-9e96-4188-a809-8fe30f57b54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d83c65-9e27-40b5-acce-82f4e7ccea49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b630f870-c223-4df3-bebb-242d1f00ca0f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94eb9bea-cb12-4b27-81a5-5a847e20ae36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8b5700-2059-43a0-b8a2-27205e602b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97415bf6-8e04-43d7-86c2-d98dcd7b860e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50108574-ff46-4ea4-b834-afd4c45aa767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593aedd4-ec1d-448b-ae9f-07d033d33ef5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e422d7ca-9ba9-49be-b0ce-4f7d2cabed85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e20b8c74-7cf6-47ea-a22a-935ba47b5a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c28e7f-7e41-43d1-9fb1-f02377969b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ca2106-9d60-4c51-ae33-8dba4d193ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95adcec3-09c5-4168-915e-cfee4bcdee81",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46a9a10-1207-4c04-b3cf-fc4512369044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ef96cc-74e1-4c2f-baff-52553503f4d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45457a96-ecf9-46dd-b081-db7d19ac1804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7ec994-2039-4340-863c-09fcf7abc545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db28e4a-3608-4478-9f6a-b37b7c8af00e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ad5dcc-2cf2-4a09-a953-44b498f4790c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff11715-e74c-494e-89b3-a81b0777e26d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95591e5c-78ba-4c88-95e7-f5345db58826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a8192143-095a-42ab-aba7-7c9a6acb4981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5edd033-dc52-4ca0-ae32-a8bcfa762d70",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e9fa3a-ffb2-428d-ae26-76e60ac2582a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede8ab79-949e-4f90-a86f-d84bdbfe5634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b223a97-fe5b-4a25-b367-e9e41ae725cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8069fc7-b3ed-4951-876f-1a4fc1f1c810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c78bf7-9db1-4564-a637-3e7c233f99bd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34110483-4856-4d2d-8a41-0a692fa611c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3456e168-bb72-49bb-afc0-098be71b0505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97a8216-be53-4e55-b7f3-e1510bffcb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6108b45-b838-4db4-9c8a-f9c84977a88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932ec07c-e467-465e-bf56-f04e10bccb36",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6302d9-7d2e-4016-8b0f-dda220ac4d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd769e1d-9793-4e29-914e-cf037fdcdbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9a719e-8281-4718-a955-7da94ebef04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "46989adc-4cbe-47c7-b066-f9714f29fcbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dbd42f-06fe-4f86-8f62-b725f4168ef9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6226b6-317d-49a9-acdc-572915db08df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3d7c08-00a9-4aee-b357-55c9e5fc77fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8e994d-95f3-45e4-a855-4ba85e0e23c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1a048f6-d533-4e9c-b6c5-3346318a2ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7843f72e-e099-4f9e-8e77-0e508693cf57",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b1abac-26dc-484c-a5c6-7461fa28761b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42cab1f3-0931-4706-bc80-f352e0aa6bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9169d37d-ed6d-4958-86a8-753b0270e75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "14629bf5-2947-418a-b6a9-df21ef5e4193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c33dbc-dcb4-4f62-b761-9d5960357d34",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328326c4-cace-4c6b-83fb-ec2f7a769d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce50cafc-5765-4af5-a342-e00d50ba8b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2aee485-8c8c-43ed-900a-f89509b528d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "428a9fc8-d3c3-4880-83bc-c50813f4cb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90ed58e-72d5-4454-b051-fdd9dacc8135",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bf6f85-6ecb-4e4f-8396-f41d936c2b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c5252f-75b2-4451-aa72-418bd0994ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e827e51-b238-40af-ad74-7c871db87641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0949fde7-3998-48bb-a0df-eef5384d0e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab322ca-446a-4e0c-8882-59d996cdb731",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0770c0-30fc-455f-ab17-4bf1d29a6c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd27c13f-f6c7-4481-bce0-e92ace988a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6e6df9-1c19-414f-ba07-cf71cc994e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "780603a7-dd7d-4f69-9c1e-7649411fd250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e87139-307e-43d6-889a-cec1b113aa2b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058d5388-d0e3-400f-99e1-f9e707e99605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faefdb7c-ea38-48db-b434-04a648cf8336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c054092d-f95f-4de0-944d-6cbded58c757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "264d84c2-e9ba-4376-935f-04591718310b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab757cb-941f-4e1b-9042-4ecc9d6838b4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "821b92c6-016b-4379-b7b3-10b0fb1d50f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0443b3b-1efc-4c9c-a45c-160c70750909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fefd64a-619e-4cc1-ac59-82f502f8d20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "945cf4d8-186d-4bfd-ad98-98d0f0d41082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5208e8dc-ec9f-49d0-a359-67d755dfcf49",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e079ef4d-305c-4e7c-adb3-09aa3ccda8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a829c4-bfb6-45e6-9466-bc0d3f1b734d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9468ae4-986e-4cc6-9d11-10ea29f3922b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c896537a-a9a7-40ef-ab98-311524542ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e24afd-f792-470c-a1fa-3bad4b6d33bd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76b5aea-7cd1-4ad4-b05b-0e85db8a0dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d893da2-96dd-4661-a029-221353804116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9267a6c-ca1e-4739-999b-b98ea3adfba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "358b0d6e-e7f0-4f98-98a8-a4a03ad45fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75226932-dd8f-4f5e-bf2c-bde4ef10ccab",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f4dae9-0fd1-4c2f-95ec-bec8666bcf5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "763f5db7-b417-4329-8125-6131a4f35d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7072f027-39b7-40e5-a878-8d731eb4653a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4575c6e5-7cc9-416d-9367-9edc6283341a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16cf385-0329-4737-961f-795709e5932c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94170ac7-3fa6-4603-a695-d168c61f2302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f79e06-a13f-417b-88bb-41f8d3fa26b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386f8741-d4d3-43bc-87d7-ae2dc574d4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "198791df-9e5b-4375-8ffd-da59916f0261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65eb1f0c-3440-41a3-82e7-340fdf168d0d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ba6871-6f9f-4a5f-a0c7-2bca9c501dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bb9a96-bffc-43aa-8ae1-2595d167182d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71b1aae-c0ea-4082-b8e5-d3709bbe0dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61facf67-4998-4237-aaaa-804a4a3d230e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e983be-88f7-47b0-b60b-9cd61f92bb63",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7026b075-b0ab-41b1-8e30-4fc8d51cfb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1539b9-d208-4f38-b7e1-1f7d1a12b2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b146a9c5-2a8b-4352-80db-58fc261fecd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28e2e8a1-25bc-4272-aa3d-20a80fd7936e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0637cb3-9ef1-446b-9798-112c407baa70",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d30afa-f108-4a11-8877-eeae7ba35650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571523ef-8efc-49d5-bb2e-3229ba0fa818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81668654-5421-4e87-be5c-b60a77cac308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ced9439-ad26-42ad-b0a8-eb6214c0f3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cb100a-9aea-4bff-bfa9-55e5f3084d58",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38bed47-5efb-4342-8178-44031a56028e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b879c02f-ec97-45a4-9bc4-ba3bdadcec16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7758ad8a-5244-4ae0-a338-4c2fbfc317bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40cd950e-807f-46ca-bbce-86c0c5efbbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad3ae84-bf5d-487c-bbeb-e177b90929b9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc0a72f-8baa-4e3c-99dc-a0cadc8e6dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fccf7af5-98ae-4bca-ad4c-f28057931d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161b9b18-7178-4084-a414-de3773736b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9344a4f-94a5-4dde-a310-82521e8f5e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ca2216-e67e-4188-86dd-22fab5750ac4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4c61c4-5dff-41ce-a59c-6d4cf9b0590d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5b07fd-ecf0-4f0a-8a8d-8c84745166e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368268da-9be7-45aa-9bd1-20df521300cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61fcffa6-92eb-4ff0-94ca-942168ffc86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fad87a-ad3d-4c3b-b1c0-30033e7e2b2c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2441015c-17e5-4de9-9ef0-d754b118cd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d17bf7-04d7-471f-8c24-9706dd8058d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc506ac2-0109-412e-b50e-5b09ef7bccdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06155227-e1de-44de-942f-6aa02563a701"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1b2df490-2a44-43f5-8cb4-4b0f9cdbeb35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75cb681c-11b9-4069-a171-b1393a3b2c78",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4cb3cd-2303-4934-87d8-9708a723f1ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fead0b5e-bb33-4ada-b477-74ab1363f490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1eadc1-786d-406e-bc58-52ff9ebcd108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc239e86-6b31-4530-9516-c0e215fbc5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4377caf6-a4b3-4f5f-bb3a-2ef84691ed2f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59d05b6-572f-45fe-bd22-b2508dbb17c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "43427f8f-d1af-4a2c-a743-e0ba30c2e750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ae62d7-8601-468d-9193-62dd7ff74c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b85a74c7-a4a7-4af9-a474-949354a2d621"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12e51034-02d5-4746-9979-63cfba2e0b9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cd49459-d4c8-43eb-9da0-d89a4dea1f16"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1f1382f-627f-400f-a2e4-e1f18aa6babf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "077c3d07-63ea-4425-81d6-81d9a9f3041c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "351a3ef8-abc3-4c6e-83a3-9be3c9766d1a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0a095ab9-1ec3-46b0-a9be-55c8ba25cbdd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70ff1870-e103-4f0b-a087-e4a8d40e3747",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b26c7efc-8a54-46ca-8d48-ede44d2068e7"
            }
          }
        ]
      },
      {
        "id": "9f5a1997-5275-4626-8912-77b8038c67b7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2f2673b7-47ca-436b-be5a-ff41c4aecf27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95607c7d-679a-4757-b3d9-97c20991f4a9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9fcc18b7-659a-485f-bfc2-5d5c9f3f4358",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92714b7-fe57-4646-b926-e9c43247d9fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3316dcf8-8cde-4b49-9ba5-8ae254e11fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52489e77-11f6-499c-af22-4aff37bcf232",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18987cd-adda-4392-b052-9fb94188e724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a6f945-03d5-47d7-83bc-6a1a1575d118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f5f7b7-9854-4d23-93d5-6c690961deb8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658c7359-f2d0-41f2-a91e-58ea7e4bd275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7960b725-881d-4bfe-8de2-d2826a295340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ea7e2f-1761-4093-a990-0e9c2dae6760",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5617edc4-6f7e-4679-9bde-7fd615367e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71aae179-0b06-4ef5-8b15-e747b351319e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311516ee-c3dc-411f-9b17-8933e800528f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1395dfe-d70a-4a6f-97e7-fa59b2304020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a970c38b-8d21-49cf-be0b-73bc3163d19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb39fdc4-9c58-4c4c-8fb3-30bde6bb338c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d0b022-3ffe-40c8-9be3-ed166c4e8e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bc68a3-063e-494e-be8c-66ef667c5083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e47c27-f80f-4a09-a112-cc3ede5601bf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1a1dcb-8d95-4e29-b55b-ec192ee712cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5f5000-bb6b-499e-9c4d-0e1f4fc2c7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e57238f-caa4-4d39-93b0-b5d377a09f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151d3216-8687-4bdb-b8e6-6ea839bed2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb6f2b2-7972-4d24-8530-8f6aef5cf520",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586ae22a-7617-44e3-aa4d-c463678ea262",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "894bc436-bf37-421b-ada9-07fcb4753830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b14c221-70ec-475d-b6a2-b62499ededdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cfdc9ea-d35f-44a7-84aa-a7ecfab5e181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675ad8b7-a9d8-4c21-bd75-bc530d922901",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbea661-b9e5-44e0-832c-26032ee57640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3e67be1-32b9-4b5d-bf35-cb39518be789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd49fff-ff3a-4c41-8621-4b4891461656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b222b23-1f44-4c12-8785-82558d4422ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3f5008-55c9-410d-b3d0-93751c520130",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aafc49d-f550-4a09-9e2d-b3b7969fd4c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "899d512c-bb10-4766-b425-4df8a485cc7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c2c9a9-3b3d-4665-a2c6-9b8335fc5e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af95b80-f80b-4f90-8724-3afc3300fe0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9374ed-a53d-4e3d-bd1a-e147137c8cae",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627764dd-ef55-4fb8-9894-96b63813bcd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e13912-5779-4892-a66b-edaa1d2fdc0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22335e3e-2b36-47c1-a6e1-c06355f89b01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ffdd36-65e4-4f05-ac9e-bb1a00b60c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88eebf9a-7c77-495f-97c9-fa54212c6ec8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27696544-0ce3-4df6-a2c2-06feb13cb23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf0bed7-d182-4626-88cb-d4f2e13d8f7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace3abc1-2395-47a5-972f-c6bb19e9f974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9120b03-030b-4b86-b30b-a12b9a6cce1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6a5471-b409-44fe-ae77-6c1cf2f24774",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999c08b8-0fd6-47f5-992f-69fc422ea2bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e68fced-5dc2-49ab-8c4d-050b22c178e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7323f37-25e0-4caf-b701-910529d02fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29c8215-275d-4ec8-ac1f-69ffc7f0884e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba39a43-ff5e-41a0-ab2c-00571ac6caa4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390ba002-d4e7-4e42-9e4a-20f937992c11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9f9c1c8-1fea-4b99-a96d-a2d3da7648df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0767fff7-37fe-4820-8da4-e69bc119a68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd962db-a375-423b-a3f5-d237975cfcff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cffec5a-3b11-4e18-84b0-90af07a2681c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa082c84-bb6f-4144-8934-20c9d0093358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "191cfeae-f8fc-4cc9-b2c0-1d3dbafea884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6dcac6f-58ad-48e6-9f32-bc1bf8f0a1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ddf763-5af1-47fd-9f5f-d2b4f75b2fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c00164-70ce-4914-b45c-d552d680d46f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427eca5b-147c-4515-b160-eb28b53b79cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8598a7a-917b-456e-a43a-82699dd6e88b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8709e3-2ff4-4286-8586-733f0c988199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ced0c49-6ca6-455b-a008-3f3f1ad7cfd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8960057-6be1-46a8-8cce-be96798b979b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d912ed-97df-44b8-8be0-cafcc2d2a0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099dde3a-1d2a-4fc6-8371-78e5d2ca7f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "637ef02b-b347-485d-92d5-944717c3b883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3cb415-6855-44cd-86cf-517435c082c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90542f45-f330-44e2-9332-2d3262a5f291",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67379627-d7a2-444f-97a6-9e1603a886b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece16ab0-ce7c-4226-9f3c-93dcbcbc3e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6b36cd-7f17-4ab2-a9d8-927be29f6fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aada0dc-9be0-4b31-9c12-8b09567e2e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975d15b2-f89d-4e0a-bc0b-5ce3445d5bbe",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f93d443-f6b2-4df7-8da9-55bd0de253e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fff5395-cc8c-4dc6-a810-3281415142e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f73ef8c-4fc0-4db1-b06e-3a44ab5e2516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb00672-c742-4880-addb-1ca1249ab174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa816541-6ad3-4f6f-82e2-364bd85ca18e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d3f90a-5292-4ac0-9e68-de01fae62a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e6bd7d-3ab2-4b1b-8a26-8ddbf4ec4240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f18f50a-7990-4908-8f4a-e138a5300f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d9f2b4-be08-4175-959a-65ef6cebe54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42910bf3-3272-4b8b-aa8e-0ba521664450",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bc8de5-8605-470f-9028-5cc64676764f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f97c606-d286-41a5-a856-5747d73bf335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac45dbc-0c8b-4dad-a567-0993f5fd885e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc8291d-be3c-431f-8950-99b397360ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7809f4-52ac-47b1-88b2-0c7b851707c8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e6a58e-7174-49eb-9dea-2337a5229c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430e65b0-5433-46ea-902c-94f42c12ab05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "856823d5-85cc-4585-b733-b86b2b78d8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd516e03-6d34-40c8-950b-7e9fa9d59846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaca07c2-df6c-4c4f-9e23-4479723808e6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2596732-8866-4db1-8661-75a9f8e80941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f5a046a-d53e-4286-b8c0-d2f8d8fa215d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070cc408-913f-404c-ac97-65e37dfb8f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523ff030-0aeb-4b7c-8899-b79c3a06557f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f10a357-7b73-4761-8d47-5fbf883ec6e9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03237f47-0773-4d08-9dbf-1aae64a88fda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2db7e3ec-bbb1-48c7-a730-e907166f08eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11ae7ae-e5d6-4de8-a5f4-8d76abbd1c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce9ee16-1bed-4c20-b58b-89c748147bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b7f507-7aee-4abe-b456-00a9a09eb684",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59261fbf-5834-4483-8c13-effa11416945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c0a0f45-b61e-4157-86a0-2d9ee9785a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5fb9bd-f263-4f7b-b0d5-f88bd98466fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5d2506-957e-4446-bd1d-aff699ea31a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5a1b53-d06c-4b6f-94fb-c0933405b3d5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f5cd7c-1c0e-405f-a9e8-c8c96b81b631",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b649f06-2a0d-4b13-a4f5-6dc21837481f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da84f164-bb0c-4400-8c33-8df63677c632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb29c02-6976-45cc-afb7-e4f7e9eee33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db464980-f0b6-4851-949b-1cec58560f28",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14db1cb8-1cb1-404c-8259-b520a5486182",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1862a02a-22f4-481e-a1da-39802e2ed925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d4e2b1-6cbf-4ec5-8ecc-ddc85519e830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7afcf051-7f29-4e44-b059-bbd994c8c48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686fac5e-1ea1-4411-8a7a-bb6306c6057f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31b4efd-fba0-4fc6-aa47-8e0f6c66a9fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96cd3753-4138-4af2-bea8-950a0b023b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61a371a-68b9-4010-a7f3-0c120230496a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc03c0b-ce40-4aa3-8f26-2d629cfc80c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14b38f4-49b2-4132-a9d2-3dbaf3f9b512",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ea5088-90e8-48d3-9986-989149d85cba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e67df2c-3091-453a-9793-d274568e0906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fa747f-0303-4f5e-8968-585dc6db99f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cad0ea9-03a3-408d-b93e-617842f21e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f7fdf9-c060-40d5-88a7-afcc57fa5ead",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5518213-ebe3-4847-8b0a-953e161d9e84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10eebe01-1a8f-43e3-8e32-8f1605376d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80dd8312-9990-47a1-ae15-74ccef3377f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9234baf5-6a01-4585-906b-dc1fae7522f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d957c70a-f3b3-4ae6-82f2-c1c4a977b779",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cd5696-feae-4d6e-9f0a-4f668900c433",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "353be843-e498-4db9-9615-e3334c72dca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "232be73e-7c34-4a0d-90ca-27bb4fec0b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0dcf91-6484-483d-8af7-b9f0ca353ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31badf39-3b45-43dd-9ccd-5b0e0a78f20c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55904f2a-e6cc-4a6e-82d9-531025216bad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "522cb861-67da-4919-b8a5-6f2e2a5b586d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0497b481-595c-438c-9d8f-fb845745d305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc02e34-7627-48d5-b8d9-db6a4cb7754d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da461f1-1259-4925-9a66-b43a2a3ba9f8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612d82f6-3dbd-4900-b936-157714dad341",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18ab85b3-f9f3-477e-a8e1-c1b75256405e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b59049d-ea30-4903-9d6a-187cf31ff622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c6ffd8-9a16-4c0a-a345-5133d7303b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae30f46e-f60f-4027-8a14-9036b031391b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5986a607-c94b-4fac-9501-b23ce0f33685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6970946-cdf7-457a-85e0-57a6292b0934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d709d1-7fd4-49f9-af3a-982a1aade33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f43107-52c8-4975-9ec9-bbacac69d171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf135a6-bfa1-47f7-a9c2-aa99ca0164e9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ac1326-c194-4b98-8f44-4c1fd33b4ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fdf0a00-f161-4543-a466-c7c9d568fbfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aebcaf9-25d4-4211-a385-578d4e1ce0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cec234a-c749-4f90-aa23-49e38ccaa1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622d1f65-e0e2-4756-887d-c412ff61e6ce",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5c414e-2159-4129-9fef-2f2de31d713a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2acb9a95-e59a-4ff7-849d-aa36d9da74b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16342628-5a58-4e14-9884-5e79d53503a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dabe733-cf60-4803-9dc1-24c122176431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948e7716-9bf8-4f48-95fd-b08cee819aef",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0947d11-edd1-4604-99f5-bf790908a7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eccaa556-ea5a-4ae8-8512-16f61963ed15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "283b26bc-177b-41bf-a432-0285b080f699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1fb02e3-ffe0-496c-895a-5e995a484423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb789e3-0688-4212-a78e-1d325c197f21",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecd6ad8-8cfe-43b5-b234-69d3d00f62db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d283a8b-d54a-469d-b488-c5865f907a5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29495817-3626-45a9-b2e8-2e33d4ce002d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d786961-f0be-419c-80a7-60f853c50c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60819757-0e2b-45df-8f99-ef53ea9d0fe2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16de0dc4-8397-448e-ba87-86c90c564c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381638c7-b500-4f11-a1b6-2b56eb441466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1474d99-9319-4f44-8c61-5460c25d0376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fd9ef1-8ed2-49bc-83cb-871e8c7601b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547698e8-c1a4-41b4-a8a1-8826dc4e2645",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3289b214-545d-4bbb-8f90-76fd2a496af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0efc3966-98e2-4d14-bd96-36cfa0915b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7585b14e-c8ea-48ee-b9f4-357b375ad389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f768245-07c6-4ccc-bcae-29b499f58c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958533eb-44bd-4790-866d-103bd0eff688",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6dd8450-d870-42a9-bbb3-511c6d71a100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6275c9e1-e1c0-49d8-86f1-20aac9097ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81009b05-d34b-4c98-82ea-2077e44aeaca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32803ffd-0e71-4bca-adab-bd83fb2bfae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0887b9c-f078-44bb-84fc-be85ca8f7f3d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3a0a0d-d977-4853-a363-83c3cba7cce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6855ef0-5655-47db-9f6a-e8db8f04d0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8edf0f-d6ae-4974-ae53-93a8a62c7cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e8ee2e-6b0f-4959-82e5-0d319bd3eafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e4311f-aa5d-4371-b669-5eab2214be57",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc6840f-56fc-477f-b9ae-866d7e3046d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed505497-10f2-4872-a248-94b66e7c147f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea524ff-3782-45be-9102-097a5bc92ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3db6a7-2c23-433d-bf2e-d8013a67396a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e4943c-c6fd-44de-a8d4-a6a71600d75e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff84856f-72b4-48d7-a53a-6ecec7f0ee5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fc28cd-9d53-4a43-8a6b-bfc04d91507f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fad9c00-ccfe-45b0-8cd9-c58a28903c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580db619-a20e-469d-8a52-ba4adffbaad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6993c159-4d01-47e1-b7aa-082f1206e342",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1838fe07-0542-43ad-ba68-c55cdd5b510f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349a64a8-cc91-45bd-b0dc-de2c5efd8fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41db29a4-d387-4bf4-899d-c0e2356801ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "304eeb13-fb82-4b03-b465-72f8d8d48201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986f4331-7be8-4d64-aa4e-a79f83e2dd0d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4f05c7-8ecc-4f62-93dd-d257488da89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15cfe6c9-b22f-4655-bb76-b09b6cd15ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56c797e-0a2d-447d-8b0a-33a84405ae8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137653ac-7b96-4b59-8beb-c08192719024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60385808-150d-44b4-a3ef-4b53e5680344",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b63438-8e9d-4e6a-9be2-10d06283107b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4105669-4c9f-4ca4-8c4d-77ef1b6a25e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9876773-6596-4e04-9d48-753b2fd79223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2590768f-a6fb-4db9-8a8f-22b0e63e832c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fb642d-f2e6-4fdc-9a56-7cb7952dd39c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed5c565-6d2b-4669-ba7c-5806ea87e340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16ae118-193d-4599-9fc7-2937d99eee2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be13aade-1112-4dda-84c7-5d2ff69803d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42cd7795-e5df-4b84-86d6-c00cb72f327d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade4ee05-70d8-48ae-88d2-ef99056b30b2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb9ff6b-0b89-4c3c-a5ff-28f059d6109b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c921b12-286c-468e-a1e4-8426853a3b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f47685-6459-4c92-923a-106ea0d7169a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea95cb4f-6ed6-4ef1-9704-c2489af12132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf35b24-1055-447a-ae2a-276fa51f5dfe",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba21e648-5dba-4c53-91bd-07ca88bd624b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f44556-c724-49ae-965b-d4d1d6604fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2386d02-af51-4795-9a20-a83fa3f8ddf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a6a455-aaf1-42b2-b758-abb1ea909065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f751536-3192-4c5d-b654-3137f8a1240f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee436fb-189e-4a02-92db-34bd95f3d81b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c487dff-3742-40ee-a5fc-068d38568691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "320fab3e-8a0f-42d3-b0f9-a85e50cb12a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "923764b9-2c72-4d30-95e1-8a1ada00b8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12b6a30-1aef-4f20-9416-49246aac764f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68003926-ff37-44e7-9973-d4ad055be8fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64df3841-3408-454b-bade-827c9fb38137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c737b4-a44c-438a-a2e0-dd35be4d2526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a14110-af80-4aa9-a2dd-3895705a7cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1d7d3f-5817-4fda-bffc-2ec0e0e4111f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecac6159-d714-44fc-9fd4-4338132357dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3493c60b-29d6-4f62-9811-929551a5a34e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efb42a3-149a-41e1-a40c-54f50ce54f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b1df48-c794-46ac-bf1e-33bea58bf304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fa13d5-b65d-46bd-ad9e-8bf83d8d4c3a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f74c7c-966c-4f92-86f8-c27a81ef88be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc877175-c35b-43d3-bc44-766eef78ed8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ef673b-9919-4ac2-9762-cc8071782f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae540f81-83da-47a3-969a-65f65d03a84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469952c7-5e30-4d68-9c97-29c7a24e9693",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187248d5-2c37-463f-a871-0c6a3f022bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "283804c4-70f1-47fe-8a73-3cb4ddbded38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47911741-c8c0-45cd-8407-80b59a5c2329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02952cdc-3d7c-4b43-ab90-612e900ab21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d487b76-ef83-4015-97f5-bfeeadaab819",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac94b41a-d69b-444b-9e7c-926f23494028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69d675e-c2ab-43a4-b39a-02b4a73eb206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf357552-f7cc-489d-b968-839f9439ea85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d384641f-5ed0-4eeb-8551-56b9de76c59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754c0203-9971-4885-ba7f-20594d861c41",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44adc3d1-14d1-4e10-8417-4a907e65f8c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d535c2-165f-4edd-a251-9510e419ad1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98252282-931d-4805-b4ad-e7a805183876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a0f5792-b32d-4366-a65b-beb97be108d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdeb99d0-a743-415e-9de3-8715576dfbd3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c1dc0b-df17-4615-b2fa-eba97a157a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1ecc85-8efe-4d30-b5e2-52036082306e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c5cf98-37bc-434a-aa9f-2aca1f447eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b517b6-f6e1-4e4e-90d8-a2d7041252de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5f3275-44d2-4f1c-8664-272d8f025380",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e22713-965e-4f74-97e9-a9320576d8ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a18edf4-dfe8-43e9-ab43-93fdd91bfe95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91503dd-5460-40eb-acd6-5a6132351aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7712d2ba-f861-4c73-9f82-ac93d61e9f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac2c268-f1ad-4435-8d2b-3c4eb2f29da7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902d92a9-10d1-448d-ab94-6fe17dd72903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f62b0c-3bef-4b60-bcac-bce61bac11bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755e4f51-9a82-42b2-9f13-e8ba822dd4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb36434f-a6d5-4979-b23d-90b73f3137ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70875fc5-e8f8-46a2-9c60-83b2d3f9606f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b999a9-890f-48d2-afb0-d8c6f9fe2a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c864c382-0152-4844-8204-eb1fd274f426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed02b578-4a6f-431a-a0b8-1d17020c1f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8b0318-7345-4bc6-a286-201832feebcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfffa5d-d425-4587-a716-5e1239514fc7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbb643b-4f4c-4623-9a00-ebf9b15e887a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5e8343-d0c4-49af-8510-fb41c02ed0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afb835d-8b89-45ce-b42f-8b85b72f4167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd6c0555-99fb-4d0d-85f6-0ef4c9e4aa2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34dcacfc-e194-4df2-b489-88696546dea8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ed18e2-2429-437c-b997-b7fef0592280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9263ef9-8001-4565-8170-e9563bd25619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527a9dfa-e772-419c-9905-ce87b558baeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "936941d0-c7ea-4289-9e5d-48c09f82cf2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a184f9c-86a0-4d03-8af4-52c29f7f1e0a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0958d980-303d-4dbb-ad60-b235ad906091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e39079-a9af-46d2-a89f-319960886aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9aa8256-1f83-4809-acc0-9294b6045cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0288837-5c2b-444d-be31-9d6eef10dc38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5f3563-0a8e-4979-b2a9-c494eee09990",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d56bd42-d4df-415e-89dd-cd6dbb0240b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d45853d-8133-4c9b-9c8b-f19ebd0f1b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712dcf2e-ea3a-4887-8120-89a1761d1317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d91f71-15bc-41b9-b70a-16c86be93473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b751bf7-e7b1-40bb-a9af-fe4491f8e051",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79a0f44-62b6-4dda-9566-7ee73869de2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbecfea2-1ab0-404c-bd43-6fb0fd1ba6a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbe1b0c-3e25-4afd-89d3-d7d134cd7cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "390ed24c-6b6b-4879-b219-616fc8d9d64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620368a8-6477-470a-a61e-d407bbad3e23",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0578827-3c34-40ba-8363-9803cd84dcaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2b199d6-dee8-49ea-b9ce-7ec84621da11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e390bbeb-5a78-4b3c-b76b-608899f8ab0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd91442-946d-4ffb-83e5-781ce206cb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f12128a-8e4a-4f4c-972b-38547e7a4b08",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93b3d67-7da7-4620-a250-ebc51a1105b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edf915e2-973f-42c5-8cfe-ebe43d36c137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c6548e-ba92-42a2-b73e-beab4b36ac41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87745821-7a8b-4f15-98d4-b75518fd134f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82343ae0-719f-4f54-ab66-a2464fd3af69",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c6a75d-ddde-40c5-8712-0b29deaf3a99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff0c921e-3c3c-4737-b32b-743ff9e95669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ff5b54-43ad-4d57-a4c6-af62356cab37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a624d3b-b9e0-4b63-8fc9-769be752d500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf348ac-b2fa-49ad-be22-6467361be85e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3922cccb-16e3-47b9-85a6-db423677f84a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37f1d098-702b-488a-bf9a-70071e18caba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bb12d4-71d3-4350-a39a-eb8f4b537fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39705ad8-dc14-4d84-912a-c0b1003b66f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c1976b-9828-4032-ba34-0e318a1c2798",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b22012-49ee-4610-a064-bdb769fd4b72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b30ce1f3-b85e-48f1-bc19-a64a94a149ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5c7c5f-bc61-452f-8a64-4163ed1700e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beceafcd-4d70-424c-9e76-9e01b29a9dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959f3a87-d6f8-4c96-8e18-b2fca31c910f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fb627a-5d1b-434f-941d-caf3715bb3aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1acb66c7-62de-4ad2-80a5-2db1ed58cb7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d06c5a4-a895-4c59-b55e-1649ea0b28e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5525488-0860-430c-8c73-31a103d76048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6df47d-ae9d-4d8e-a373-51b318e3806f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08331c1-80ad-40ea-929b-7769dc989fd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c59e44f9-36fa-4434-a296-91a1bc5f161f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b937c13b-4500-4113-9cf8-7bfca9241e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716ce338-ad75-44a9-ad01-5c9e42f04788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc719b72-d76a-4867-9125-5668b1506353",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0491b222-c51a-48ff-845d-659312f4ade4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b09d1af2-e3e6-41ac-b746-ca025411dedd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a6098b-e320-4771-9596-7ef43e1d2e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7523c1-e694-413b-b089-34a01019864e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e787cbf8-f5bc-4972-9798-3e8234c6f5a2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c626ad1b-14dc-4a43-8a22-e20f26dbad6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cdf9a4a-9f08-45ac-8919-57db41a13a5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e354c1-47c3-4b90-a53f-d09459309593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63f8c476-653b-4816-9704-ea5afe87ae49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c31ad01-c998-4bbc-9cb0-7dae3d05ea48",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f6f742-c49c-4d08-aa7d-2e2d0ab2c5db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c96d5ed-328e-40a9-8a7a-c265b37ce0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bf8294-9cfa-4171-a082-56019e130f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3f0402-fb3f-4034-bc4f-65f89994a22d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5dca805-da90-4c3b-9ca1-c7b5c367bef3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a90045d-b56d-488e-9b10-bd384af5100b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8849506-6f7a-4dbe-8d2a-a06a92437b34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d63d505-3b9c-4bfe-896e-10d84336a9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2662318b-3d7c-4e02-87a9-fe075e24c49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87884cfa-8355-44d6-909a-3e6a26ca24ca",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfda7c03-bf5e-4110-a6ba-092e6c865e2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5b8481d-2c47-463d-b7ee-5212e0428ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa2953a-8611-4f3e-8869-d7fcd1e327b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5fc90d-c0fa-4f34-9a0b-c03b7aab83dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26459034-023e-435b-8505-8863d15c9991",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714fcbb2-6d76-4e8d-bc31-b912ef04e7f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f2fe246-bbf4-42a0-a23e-971c5fbbfc5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d78baa9-0142-47a4-ab91-da6d78e9009c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbdb1c30-887b-429f-b264-750d2f12103c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69019e9d-81fa-4ac5-80ca-582affb040f8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c7ec15-8d18-49e1-9933-efdb78e88937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13e796fd-62e4-43a0-b3fe-efca9d200f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faa7de7-0954-41b6-9e43-fee3c6b61e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9196afc-8697-4a78-a073-e2cfc4c4bfe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00121a90-26ab-4e1c-a44b-03f1f83a0578",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5151f1af-3e1a-451b-8e42-f3f022c4c3d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84ef013d-7b9a-4cf4-86a9-599df5edd318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f0d627-b9ae-4355-a04a-5a90ab878af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab0ca12-f23e-4193-ba95-4de0314358eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9254fd83-1aa9-4774-a2bf-d5e95dbc77d1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc53be50-101a-4bb3-9da0-246962862635",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aef77e9-2516-41c7-8b51-b7aa1dce57ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e278788e-bc52-4815-b22b-b2ccb43dad73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b72dcd-dcae-45fe-a0c6-1a78f9318397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab733535-12e9-40f6-b39c-894f789524cb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ccef01-4956-4b29-980e-64db7a76b45b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "244f5530-a7c6-46b4-a2bb-84d9be761f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf29416-57f5-41f5-9697-a1372e345f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787fd8a5-2a18-4c5e-954f-8126b029acec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406373bf-9dd0-4e53-8707-3552c9d5c606",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8af4509-30d5-4e44-8317-f0dbbcb50d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ea11fc0-305b-4480-8d1d-738ad46ad2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca451e0-9d28-48bb-a51d-332e00c6a908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c07a73f-1b0d-4b8b-9d78-f10f4c150e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54abedd-2cb6-421b-8df1-8bdc5e08f68b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a163ba-9e4b-4935-badc-5f0cddb42d5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d6c5cda-bd5f-451c-9a88-4fef2fbdf5f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a31d5b-7d19-42c7-9c77-540a4d18497b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa41c6a-5a98-4c51-9558-9a29a79c359e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d22556-f673-49f3-b9a0-4b8273631226",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a1316a-f4ca-4787-b5f4-1e1adba59ace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9db5d48-8e5e-4dd8-adc4-89ef558272e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e962f32d-6545-4971-8793-b4926f2e9d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcd2544-5a5c-46ae-9fbb-381b48afb877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b97ffd-779d-46e4-a977-3e723ce181f0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33620ad8-6f87-4b37-a792-6bd8e8630324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c06e2bfe-8920-4a5b-a083-71bb215e267a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f89758-78c6-48db-884d-fabacb3a0e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dde68e1-3dc2-4837-9be6-78fb6ed24415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a81f44-8ac1-4ce6-919f-34374f1b9c6c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e011f84-4a03-4f78-a935-02c3558a8350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "708914b3-7404-4ad3-93c4-54862514ebad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d992d5-224d-4f75-8302-57b3be9a274b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c5f0d9-02b9-49b5-bbb0-4e61cc9cd263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bce425-085b-4960-a581-8c0a8c097c26",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1198fe30-92da-4652-bdec-60110461fd6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "346df131-39e1-4734-bd93-84ba0b3fdfbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dddb73e-358f-45fa-b542-e61979ffe7e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34636ae-3841-4d01-92d5-cfbe3445184a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179416b6-93d1-4ac6-a090-020c1dfabad3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8984341a-5ff0-4b72-98cb-30a26c3acf96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47faba41-997a-406e-8134-014fd3fca33e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06332c9-8843-496a-840a-1aba452e649d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ccd42a-b53f-4022-897f-b6bcc6187c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b68ee8-fbf0-4395-8914-de1cdcbd610e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf79a561-0e10-4bbe-b193-7c1b9c8006f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acf8a2a8-0632-4299-8d1a-6e377d3673eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49e28fc-572a-45c6-8090-b11f5cdc4755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef52ba5b-f6d5-4256-bfb2-e65b3207debb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a149746e-bbf5-4c25-96f1-e4de44212b9b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9df84ba-5f08-44a7-964c-840f77ce3ce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "714d1b68-e1c4-49c9-89c8-ae5af55e5232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "309a1912-310a-4925-bf9d-a90c23aeb425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3eaeaa7-865b-48d5-b788-ca73f2f7aa2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef7c2de-1074-4256-9d8d-33764559a32c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15008e5-3323-4d58-80b5-8ee9774fc2d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6f5eafe-e27b-4474-92f5-322a52e6f3aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b090a6-a17c-4ebc-919f-8b56bfba76bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95bb08c0-8f37-4ce9-a92c-44ebb615b344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d810cb3-9d4d-463c-88a9-9b7e3d15cd13",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0428bf1-3ca4-45ac-b614-4675213173c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33d29e69-8047-4026-bada-9ad6646d0ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8437423-dc96-49cc-a035-7eca2bfa552c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e450dda2-4fdf-41ed-8d3c-18132da19c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51e9c06-9e26-415c-a488-bcf1e102ad39",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8f7836-51c3-4c1a-a337-40c1b3716413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39294eca-7778-4fd9-9a8f-3a8ecf760fa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e069ad58-f9ef-46d8-bfd1-823c01c8803b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab2d524-0abe-4e4c-a29f-506b29ef9588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c218a60-3cbb-43ea-9eda-492d9b2f0b94",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8ed75e-5711-4050-b1b2-6457db0b4d70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae5600a5-84a3-4554-b135-f142ca7552c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "963d2f68-8a9d-4d92-a439-c044c5baf9e3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b7e85c-afde-4f5b-9437-eb22d75f5f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031d1d7b-14c7-48cf-9c4a-106db8f1553b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e7bbfa-e85b-4c02-9bc3-205c7f11945c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a990a8a-c766-4f04-9d4f-1ac81dcf8240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4524be7-0b61-491a-a1e7-b60d02361306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957d5b76-3acd-47fc-ba16-691abf90f2fd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7a7fcc6-fda7-4486-b804-e50d3324eb64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d4fcf5c-cce8-4508-9cbb-c644b43d0aed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7557e272-1d78-4a51-aa4c-f8b5737c599d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c28779aa-5e1a-403e-a1b4-0118de90c369"
                    }
                  }
                ]
              },
              {
                "id": "1cfbefd5-b756-40a6-9ace-03a9194de5a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c31efd56-78d0-47ff-8917-afd5a4f5f207",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebfb4f3-487e-4222-881b-12bc37a8313a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ef05071c-38ee-4e04-a96b-d4b93e034a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2f4a73-2afe-4f99-b56c-44b1f5505a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1eb14ea-5f4f-442a-826b-f556b38694a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00033383-ac94-4d94-a725-ac8f3d9d247d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f37a14a-62d8-4315-9895-f8fcea7724f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "462055e5-9db0-4075-9839-dd7957cf1592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de215c0-bbc5-44ad-b015-11334c5e5b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "468a0c38-bc3d-489e-afce-b0f8fea0852f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4b0ecf5-ef2e-45a2-a8e0-8ff194d99cc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6b3b8f6-7cc6-45ff-9dc0-d12c654c6989"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ce6d2d3-8478-49b1-8437-93f97b96b508",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf63f514-ee0a-4fe6-a377-058cf2136cf5"
                    }
                  }
                ]
              },
              {
                "id": "ca005e1d-8539-4adb-b29f-599f12d94d89",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7a02fa20-c375-4102-b5de-6fc8d5bc2399",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83959abd-5a2c-4b34-8ea2-d2b74440830f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "add1f763-2433-4062-88a8-a63adc695663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a28a23f-5542-4a8a-bffb-6d58492dc17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff14f9f8-15f3-4233-9c79-d87e36bd5ed5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "54e4047c-a70e-4575-8524-0153e1324f8a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c5111c1b-fe8d-4f72-a262-cf0323161295",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8211adbe-4563-4971-874b-fcf1ba4662b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "310e8d32-e627-4724-bb71-5b5df56c27ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6095a0b3-d230-428f-a2bb-b3432b1eed5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37d7b33b-65b3-420d-afd3-9c5f519398c5"
                    }
                  }
                ]
              },
              {
                "id": "1012bce1-9b48-48ac-8d80-0f24e2cf4957",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bf4a70e-55b8-4b20-a8c0-8c2f7a26b5ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "76ed285f-4c99-4333-8f71-5f29b3b009b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4eb81bcb-d0b6-45f0-acd4-7f08628129ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d65d9580-ffe8-42b7-b01b-d630b17bda40"
                    }
                  }
                ]
              },
              {
                "id": "244192d0-809c-4d03-a891-2ffd4798a8b7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c5ca44a-8578-459b-940c-162846c206db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a0cab4e2-fbf6-49b8-a4dc-5d97570a7b0e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "141991bf-da3d-4366-b369-19d55efcaa01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7900e7e-bad0-4a20-a03c-e51ceb8d6897"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec0d6d88-986b-4b27-aee8-5441ebe1eafb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9964f3d5-00cb-44db-a71a-f0cfcc37678f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bf2b21c-ea29-416b-8d84-7bef79b5897b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2cf04ba3-3891-4b92-8663-57f70896b561"
            }
          }
        ]
      },
      {
        "id": "c5d17699-932a-429f-819d-3df3a3a77211",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0bea392a-5d02-447b-a42c-6e68c0f2d854",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b5ea296-2c24-4169-bc4d-24642c76d4a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1f2cfab-e7fb-4a12-a2b4-5012f651d907",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c56da6f-9075-4332-bdb4-82e45b914ccc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "274a3bb7-9393-4545-960f-2bf3c3490f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f819591-994d-4014-9b3b-6a226bf9fe47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98e365bd-0a39-40b2-a8b2-f378348cd706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc298c1-209d-4e1d-ac21-7f7634ddc253",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864718dd-7bed-4231-9eba-f0c38d0144b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d66fa252-9a41-4a97-8f1e-655a16ea24b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55118169-36b8-4e51-b29b-455d94ae1e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab463072-7b96-4ebe-b638-0a97d21a9011"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67d515fc-d809-4d68-b615-ee4b8897aeaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0a8a086-ab66-4464-8abf-d3d90b8797a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "223e08f7-0ac7-41ff-8e2c-932c15b7b402",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4e9a5c3-61f4-4fc4-8b5a-daa0c5b23d53"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bcb045c-6601-4bbf-97de-6c5684925a5f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "56a46730-b397-413d-b945-bc9c24f5b82f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b6134d2-7006-4668-91c4-bab8cf8dd766",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16f6b848-2536-4259-9b54-e9802790d031"
            }
          }
        ]
      },
      {
        "id": "9200a05c-7ec1-4e1e-ae63-94026aabbd5a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "aae0f48b-cffe-476e-b608-a7fad398511b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2bcd0ce8-5a85-4f7a-96b0-ac7500637fd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b04266bf-64c7-4df3-a181-bef40ddbfcf4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc34ad9-29a8-405c-88d6-cbede00ef3c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9e951153-b5b4-4f53-b01c-5cf474170bc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c221fb63-52dc-4ba9-bcc1-43375550b91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0c37a8a-5351-4b53-b048-e90ea1329ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693d0ca3-742b-4b30-944c-3df3870c59ab",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90e7902-bfae-4c0b-bb78-b9b18e5402e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d3112bb8-6f2a-4a3f-9cc6-2d8ecdb2d121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa99272-1c51-4ca5-86ba-02d4554bbd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de0b1525-e510-4807-9f7d-c4b3981faab1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f22d0826-2384-40bd-a91d-e0ee35fe8d4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41ab882f-326b-44f5-ae22-a88a5f2bd2b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "066d00e5-dcd7-4725-a8cd-d93e64b797ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1405074e-16d7-46fd-995b-c50e14e0ed48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bca80e17-4c7b-485f-8f85-00c02cefb8ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "23baafdd-5279-4b50-8412-5c86f6c7945e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5b9d025-ae1f-4980-a880-6709d4cbe9a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e049a18-1f6a-4a2f-85db-ac42092ca648"
            }
          }
        ]
      },
      {
        "id": "fd5dd192-f2b7-4d3a-b93b-48424b209c13",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b3ccf2ae-febf-4d10-8a22-0755208cfa64",
            "name": "Negative Testing",
            "item": [
              {
                "id": "249becfb-6107-46ef-894f-1bd4cf8a9b54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "48366ea4-4584-443b-92e2-4c3760083206",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af955fa0-39e3-4de3-b40c-33e18b13173b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "30b1e7a9-59d6-4dbf-b910-eb015a719988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e618b4a9-51dd-414b-9cea-9008dfb3457a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f745caf9-ceea-4c5b-b085-c7a5897e4a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4dc7867-d01d-4ae2-aa55-c54c74f3b6a3",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae14706-8d63-4260-9dfd-028dc3936578",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bd593bc8-8d90-4ad5-9b60-459904c68355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "167078b5-b943-4f2c-8fe3-1b074bd1a7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d7511bd-ae94-4767-b6b4-aec8b6c19775"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33926ab2-6891-4942-aee0-af45c54f006c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a180c0b8-c311-4427-b319-ee05884eee61"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e033544a-753c-4612-ba22-f1c07644b28f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92749cc0-cdc9-4766-86e6-1dec473cb830"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5120b2c8-21d2-4520-9272-6a4e138dfaa6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2a07b571-ad79-4a9d-881f-7089405a9cc3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6d0f7f4-2552-496d-8531-9107cfe942a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed72f552-2417-44f4-bcd3-a69d8de7fb56"
            }
          }
        ]
      },
      {
        "id": "1772e61b-2935-45ae-a84d-49ebb17b46d9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3da0abb-9e1d-4cf0-8726-3f729c4df93e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cb3c70e-104d-4a7b-b4a1-40083fbb46ec",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c2c7148a-7507-43db-bb5f-744511d22589",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06cde6bc-fd6a-4724-b6ed-1e8af01a4244",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e446eb82-581a-4d65-9573-c105f9a27364",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 183.3256704980843,
      "responseMin": 7,
      "responseMax": 15740,
      "responseSd": 972.0170585632543,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670114325992,
      "completed": 1670114385152
    },
    "executions": [
      {
        "id": "a7fa7eae-b133-49d7-a4c3-d5a1d35983bc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0118e4e3-2784-4806-b7bf-e748d9097eab",
          "httpRequestId": "5e8fdc6c-0a41-4610-98a4-dfa107b190d7"
        },
        "item": {
          "id": "a7fa7eae-b133-49d7-a4c3-d5a1d35983bc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "69f58849-7393-44bb-9683-b383a26ca99a",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "25a676ed-12d5-4c9b-9fed-de57e55aa003",
        "cursor": {
          "ref": "1e4fa3a7-2004-49b2-8488-44a4d50e7ddf",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c0a65fe5-0326-44a9-bb52-55d1409dc143"
        },
        "item": {
          "id": "25a676ed-12d5-4c9b-9fed-de57e55aa003",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f51ae688-44e3-4f02-8823-b4a531e99041",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "6cea33d7-09bd-4ec0-854b-77ebf3dcf9ee",
        "cursor": {
          "ref": "177ee3b5-2799-4102-9e48-2c3f24e38050",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "648f725a-041f-4c23-81ad-9de48e43ed98"
        },
        "item": {
          "id": "6cea33d7-09bd-4ec0-854b-77ebf3dcf9ee",
          "name": "did_json"
        },
        "response": {
          "id": "4a7e59e0-49ae-412c-9f63-063de0b9265d",
          "status": "OK",
          "code": 200,
          "responseTime": 216,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6206dc-22cc-4f5b-8c1f-06d25d0f1599",
        "cursor": {
          "ref": "888d7299-c4c2-41ec-a0d4-2c0aee03af07",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "96450b6a-63da-4285-95ec-b88330369dec"
        },
        "item": {
          "id": "9b6206dc-22cc-4f5b-8c1f-06d25d0f1599",
          "name": "did:invalid"
        },
        "response": {
          "id": "453467e8-82f8-47e6-8b2b-8db9107a3026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6206dc-22cc-4f5b-8c1f-06d25d0f1599",
        "cursor": {
          "ref": "888d7299-c4c2-41ec-a0d4-2c0aee03af07",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "96450b6a-63da-4285-95ec-b88330369dec"
        },
        "item": {
          "id": "9b6206dc-22cc-4f5b-8c1f-06d25d0f1599",
          "name": "did:invalid"
        },
        "response": {
          "id": "453467e8-82f8-47e6-8b2b-8db9107a3026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb219934-1a56-4b3e-834a-310cd290b959",
        "cursor": {
          "ref": "940457f8-1326-45e7-88e7-5ca13ed20e83",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "af36dde7-c191-4bd6-ba0d-2d993f4fc1ac"
        },
        "item": {
          "id": "eb219934-1a56-4b3e-834a-310cd290b959",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "681fd732-e2c2-4c5e-bf87-149156a2dbab",
          "status": "Not Found",
          "code": 404,
          "responseTime": 189,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac66523-df46-4a55-8537-ef3f3aee6c55",
        "cursor": {
          "ref": "7c143ba1-cbf4-4148-86fc-bcbbae3623da",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "164530ae-5d43-4fbc-bf06-218e8292a58b"
        },
        "item": {
          "id": "5ac66523-df46-4a55-8537-ef3f3aee6c55",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bfaa20a3-55c2-48b5-805d-50cd92606578",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8024f7fe-ad50-4f67-99a1-677ce69c7845",
        "cursor": {
          "ref": "b690afff-7fe5-4756-8159-10a5ed18d466",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7594252a-a64e-4185-80a9-bbac13924a67"
        },
        "item": {
          "id": "8024f7fe-ad50-4f67-99a1-677ce69c7845",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b11c6b7f-7d76-4fa4-8f00-19c4d2e1b2ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd2c688-2eba-4a7d-9053-2356cad4ef03",
        "cursor": {
          "ref": "ded08066-7b99-459b-8922-2672c1c77e38",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ea04f1bd-495c-429b-a630-ecec607cb327"
        },
        "item": {
          "id": "dbd2c688-2eba-4a7d-9053-2356cad4ef03",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d9a5415b-9172-405d-aa0e-9ff67a3123f1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd2c688-2eba-4a7d-9053-2356cad4ef03",
        "cursor": {
          "ref": "ded08066-7b99-459b-8922-2672c1c77e38",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ea04f1bd-495c-429b-a630-ecec607cb327"
        },
        "item": {
          "id": "dbd2c688-2eba-4a7d-9053-2356cad4ef03",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d9a5415b-9172-405d-aa0e-9ff67a3123f1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d4fe3d-1c14-445f-82f9-40c6ccb1ea84",
        "cursor": {
          "ref": "1315cdef-6dc1-4805-a0d0-fdf4fa8d8192",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0c3ff581-58d1-4f21-b1d9-236b2173b14b"
        },
        "item": {
          "id": "62d4fe3d-1c14-445f-82f9-40c6ccb1ea84",
          "name": "identifiers"
        },
        "response": {
          "id": "20bd9eca-f2c3-4de0-862b-3137a01d8bcd",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6793b72c-8faa-4cdb-8460-9a890162b61b",
        "cursor": {
          "ref": "420346f9-575b-44cf-af24-c980fb2bbd86",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "720fccad-e7d3-4160-97eb-c132bd66536b"
        },
        "item": {
          "id": "6793b72c-8faa-4cdb-8460-9a890162b61b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e318af00-a7b2-4696-b171-16def6779083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6793b72c-8faa-4cdb-8460-9a890162b61b",
        "cursor": {
          "ref": "420346f9-575b-44cf-af24-c980fb2bbd86",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "720fccad-e7d3-4160-97eb-c132bd66536b"
        },
        "item": {
          "id": "6793b72c-8faa-4cdb-8460-9a890162b61b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e318af00-a7b2-4696-b171-16def6779083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b304573-0a7f-424b-950a-3cf96be59cec",
        "cursor": {
          "ref": "0b7e2e57-3274-49a4-b208-81e61aeb3620",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d201dbc4-21ec-4b9c-aa79-c53b711562a0"
        },
        "item": {
          "id": "8b304573-0a7f-424b-950a-3cf96be59cec",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3470c168-fe90-4bae-8057-89014e8fa75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbc9cda-6264-46b6-8b17-06cf450c582a",
        "cursor": {
          "ref": "b978170d-c2ce-44c1-bf96-4afe9d5e4a0c",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "da898280-a20f-4440-a354-da4799666527"
        },
        "item": {
          "id": "7cbc9cda-6264-46b6-8b17-06cf450c582a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "58b3f9a0-e29c-4bbd-b925-3c4079e66732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb478ec-632f-4c52-90ca-17a946f0827b",
        "cursor": {
          "ref": "9b098085-3213-4c0f-9880-5582dbf29ccc",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5d688334-3391-40a4-9e9a-7b016b008d2f"
        },
        "item": {
          "id": "aeb478ec-632f-4c52-90ca-17a946f0827b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d5cd6214-6075-4ea3-8a55-ec4c96ed5d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5d1a09-0c4c-4a43-9337-cc53830a7904",
        "cursor": {
          "ref": "8d3d1d4f-1a4a-4ba8-92ca-1910221e5a3e",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8128b5fa-3d13-4218-8107-8a41c7f59545"
        },
        "item": {
          "id": "9b5d1a09-0c4c-4a43-9337-cc53830a7904",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0ed0a691-1dd0-4696-a857-2484d31be5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d786b662-4045-445e-b28f-9766fd027928",
        "cursor": {
          "ref": "570e467b-c6aa-4d55-a731-8f10c078e34c",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fa07738e-9291-42df-a279-6d98805a56d7"
        },
        "item": {
          "id": "d786b662-4045-445e-b28f-9766fd027928",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dd4729ae-e7a2-4e85-9a2f-799c9ac8dafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75522ff7-1d7e-495e-b400-a52f122fd23e",
        "cursor": {
          "ref": "cc70cf74-1fd3-4b5d-9e12-020eca5277b7",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fec82d84-9c47-4912-8992-e314c7324929"
        },
        "item": {
          "id": "75522ff7-1d7e-495e-b400-a52f122fd23e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f1860061-89b3-4a01-95d1-000a07a359ba",
          "status": "Created",
          "code": 201,
          "responseTime": 718,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "cd300d97-86f0-420a-a9c5-41cf5ce13ad3",
        "cursor": {
          "ref": "adba87f7-faa6-4689-9fcd-32c7a13b4a94",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "40b6e7b7-e774-446e-85db-0af7ed6844a3"
        },
        "item": {
          "id": "cd300d97-86f0-420a-a9c5-41cf5ce13ad3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "122df248-0581-47dc-894c-af6e9e095b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30194041-8dfb-4146-a96e-2055f961022d",
        "cursor": {
          "ref": "0fa97248-44dd-4f35-b997-7f44e290fe5d",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "958e5522-0d6d-4849-988b-8a2b549ff0a4"
        },
        "item": {
          "id": "30194041-8dfb-4146-a96e-2055f961022d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1bd9eeea-d59d-42df-a321-53d580f78baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a65d70-ccb2-4a27-a1b6-d0bbe9305d16",
        "cursor": {
          "ref": "52123842-51f0-411b-a8d0-9adb8a3b5185",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f64a3b6a-7886-4cd9-91b2-b85b4d5a0c17"
        },
        "item": {
          "id": "a1a65d70-ccb2-4a27-a1b6-d0bbe9305d16",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "76d7002c-5a7a-44c1-ad55-ae560a45a2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76aca236-cdf4-4387-8ffa-de7c24b7aee6",
        "cursor": {
          "ref": "7928e08b-def2-4baf-b5ca-ead8d66190ca",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7a560b19-cf94-4c8b-a3a9-811ff73acdb4"
        },
        "item": {
          "id": "76aca236-cdf4-4387-8ffa-de7c24b7aee6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0ade4db1-2e20-4f98-acf5-dabf494dd8b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb77bc79-d492-4051-a6ba-1dfc221d2025",
        "cursor": {
          "ref": "e5c0350c-23ed-410d-8384-870634fac720",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b33f43b9-0d63-48a9-b5f6-2c7b9d60499d"
        },
        "item": {
          "id": "eb77bc79-d492-4051-a6ba-1dfc221d2025",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f2bedd62-2f2e-4917-bb11-88d4ee0ccc8c",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "0a2c7cb4-e027-4d36-b6a4-0055fe6d74cb",
        "cursor": {
          "ref": "26ae91da-462f-4eb3-86ac-ef1cfdfd6297",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "22536fd2-405c-4986-a0f5-8329eb934704"
        },
        "item": {
          "id": "0a2c7cb4-e027-4d36-b6a4-0055fe6d74cb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "02d4817f-2a5e-4bdb-a8da-bf465b75235b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b453cc-445e-40bc-9d81-16894bb3651a",
        "cursor": {
          "ref": "cb2ee54d-89cd-4955-9149-7e8d8790ef51",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "079b5c50-9a7a-4bca-b68b-f61a2ac49eb5"
        },
        "item": {
          "id": "b6b453cc-445e-40bc-9d81-16894bb3651a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2646380b-a03f-4e18-9121-7c8d46fda020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62670041-2355-4be9-9ce9-67525254f189",
        "cursor": {
          "ref": "ac5862c2-4996-4fb3-971d-f5c138203e86",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "493e240e-ecdf-4110-a907-79227f37857d"
        },
        "item": {
          "id": "62670041-2355-4be9-9ce9-67525254f189",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "caeb582f-fa9e-41dd-b196-67f6625f5446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0848de-955f-4864-8cbd-989e1a168266",
        "cursor": {
          "ref": "1ecd7b50-28fb-4e20-8305-b31fd9fafda2",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "708bcf68-e316-48d8-81a3-ecd6c081749e"
        },
        "item": {
          "id": "6e0848de-955f-4864-8cbd-989e1a168266",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "42bb704c-00af-4288-8ce9-36697137727d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da2780f-38c0-4e10-a452-9063a77e9bca",
        "cursor": {
          "ref": "fafcc46e-d347-4f88-b286-fd6c99a0e34a",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5dd748e8-a497-4e5d-af25-2a6614da2e30"
        },
        "item": {
          "id": "8da2780f-38c0-4e10-a452-9063a77e9bca",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "18dad9b7-bcf9-41ee-889b-1df6d9888cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7163410-ab46-4cbb-b8bc-9127f0eb4c72",
        "cursor": {
          "ref": "68687168-b2f2-403e-bfb5-20ca94403b0a",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d27a75c0-9949-4cba-b8a5-3d41ebbc06a5"
        },
        "item": {
          "id": "a7163410-ab46-4cbb-b8bc-9127f0eb4c72",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7540b96f-1a5d-41be-b017-ae4dbadcfe1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510ed13d-9e27-4c1e-bada-cbfc48267c5d",
        "cursor": {
          "ref": "b2662e5e-cd8d-405c-bc03-19f2d425bbcc",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e8e13996-e499-4fdd-b3ea-87d6842bdb87"
        },
        "item": {
          "id": "510ed13d-9e27-4c1e-bada-cbfc48267c5d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "05e197fb-bf82-4ac2-af03-856559187169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82940df6-365e-4c1f-9b35-ed1aa40d9844",
        "cursor": {
          "ref": "5734d280-22d0-45f5-8d43-648e38b1ad3e",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2dc0cbdd-1d21-4c8b-b13b-2b8295fc0888"
        },
        "item": {
          "id": "82940df6-365e-4c1f-9b35-ed1aa40d9844",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1e6a41c9-2496-4245-887e-8cbf34b7b84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19be307a-8da1-4b0f-889a-d9936ccf1d3b",
        "cursor": {
          "ref": "a2aae8f6-2739-43a6-830f-d3aa88527704",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dc4daed0-0f31-41e7-a188-b15fef158440"
        },
        "item": {
          "id": "19be307a-8da1-4b0f-889a-d9936ccf1d3b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d2eb6d01-18ce-49a4-b334-801ce864ace8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a03d8bbd-2e22-4cab-9946-22d36526fa82",
        "cursor": {
          "ref": "2a421593-e30e-4659-99e3-db6a926fcef8",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "59e3db10-964c-4da1-9765-63ede8260432"
        },
        "item": {
          "id": "a03d8bbd-2e22-4cab-9946-22d36526fa82",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0ac4965a-20e9-4690-844b-c3f5073a99d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6426ca-d1bc-4da5-8574-1e9d1eeabfab",
        "cursor": {
          "ref": "2e003c59-0833-437e-b283-efb14a7190c1",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5ae6f6dd-b76c-4dc6-8c39-88441c6ee8f7"
        },
        "item": {
          "id": "8e6426ca-d1bc-4da5-8574-1e9d1eeabfab",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fe2ad3dd-b194-499d-bfb8-229b60d8ed6f",
          "status": "Created",
          "code": 201,
          "responseTime": 443,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "a7a7845d-cc3b-4102-b9d0-aad954d0d0b4",
        "cursor": {
          "ref": "eb8e34ab-c31a-4e25-8b77-3ca28b9f73ba",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a206474b-eddf-4444-89eb-7014f0cb6523"
        },
        "item": {
          "id": "a7a7845d-cc3b-4102-b9d0-aad954d0d0b4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1c235372-b075-40e7-816c-2485daf53de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015aa6fb-678c-43b5-9d22-7eed80b8ad1b",
        "cursor": {
          "ref": "8b6edae4-8929-48b1-b87a-7d484a32e72a",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a74781f8-d903-40e2-bcdc-b48806850089"
        },
        "item": {
          "id": "015aa6fb-678c-43b5-9d22-7eed80b8ad1b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a6b23f03-7f6d-4e8b-9b4a-437258e77dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4afaa04-3005-483d-add3-20e6dfc707c4",
        "cursor": {
          "ref": "1d6993f7-7041-4424-a350-47450b761a2d",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3b499a17-b494-4573-a37d-a69fae4606d3"
        },
        "item": {
          "id": "c4afaa04-3005-483d-add3-20e6dfc707c4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "16411f02-dac9-4f32-bf11-0d89ad19195c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f3a6e7-b703-4c2e-9a74-42a51a229bac",
        "cursor": {
          "ref": "8866efa0-e8f9-4ee4-8cad-65377f02b202",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d37780d7-df5e-4b18-a0d9-100d6710b666"
        },
        "item": {
          "id": "69f3a6e7-b703-4c2e-9a74-42a51a229bac",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fedcf4e2-5c07-41a4-b5ea-52757f48e80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2708f6-507a-4fd1-8e31-bfd4ab662eae",
        "cursor": {
          "ref": "36c339a2-40c3-4456-8499-9c577563c99e",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "92a4dbd5-ebb9-4f22-b9d9-81733a3e4882"
        },
        "item": {
          "id": "8b2708f6-507a-4fd1-8e31-bfd4ab662eae",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "04667bf8-9f48-4f4b-bad6-ee01e67fe503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29253fcd-26dc-4f47-b856-cf2f1aef474f",
        "cursor": {
          "ref": "7a45c95f-fcc5-4dc2-bcb7-bcccb1a276ae",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9bef85fa-813f-4c92-85cf-cb8f8eb7e884"
        },
        "item": {
          "id": "29253fcd-26dc-4f47-b856-cf2f1aef474f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "002761cc-4026-4664-8cd7-ddc347856ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c42675-73cd-4197-a0e2-847d2a5e193e",
        "cursor": {
          "ref": "1e60367b-7e14-4302-b71d-a6d3a6f25d9f",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "da7da41b-eb42-46e6-b654-b836bbc8f24c"
        },
        "item": {
          "id": "32c42675-73cd-4197-a0e2-847d2a5e193e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "482a7a5d-f2c6-444d-9247-a2b63fc5ee80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65f9b07-5056-4d11-972d-7d4abe2f5fb7",
        "cursor": {
          "ref": "e126abc1-2dca-4f13-8d47-67dde49eca12",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9aee0ae9-2c6f-4191-94e3-16b9eb9aeb41"
        },
        "item": {
          "id": "b65f9b07-5056-4d11-972d-7d4abe2f5fb7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a11309a7-8997-45b7-8dae-cff71395e731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a64e490-46e5-4179-896c-b06a29dc158c",
        "cursor": {
          "ref": "d71d92c9-8d25-4793-8093-3811c166a5f6",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0b4bb264-54b2-4a21-b4ac-4e12a069ff13"
        },
        "item": {
          "id": "5a64e490-46e5-4179-896c-b06a29dc158c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b512c474-44e3-4b7e-8be5-5a3d43e64e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b600bd-d774-4603-b91f-a26678d28cd4",
        "cursor": {
          "ref": "feefb7a9-7f15-4855-ade3-d35939022561",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9bbb0360-15c2-42e0-8a6e-e67e205c007a"
        },
        "item": {
          "id": "26b600bd-d774-4603-b91f-a26678d28cd4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d8edc8db-3e24-4232-9057-2ed32a054019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed152ff-7b51-49aa-8369-fa8c6d2d0058",
        "cursor": {
          "ref": "e944bba2-6575-4ba8-babb-088eb3d5fcbd",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7ecb1e14-3ea5-4f1d-9831-66566b53f62b"
        },
        "item": {
          "id": "4ed152ff-7b51-49aa-8369-fa8c6d2d0058",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "022256b2-1bf1-4c10-96b3-6ed8360130fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ca0b2c-b7c6-4976-aa33-8e5c1b9a523d",
        "cursor": {
          "ref": "2bd76cf9-2289-4e9a-aeb8-59dafaf002de",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0f63214e-b80e-49b6-93f7-cf08d3196b19"
        },
        "item": {
          "id": "75ca0b2c-b7c6-4976-aa33-8e5c1b9a523d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2e3eb0f6-4982-47ab-9304-3904b8b59898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d95ece-1db8-4784-ad0b-b86a4ba726e0",
        "cursor": {
          "ref": "ce8f3114-f31d-402a-852b-32fa61823332",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fd459830-8099-43b3-a943-5c678d158755"
        },
        "item": {
          "id": "00d95ece-1db8-4784-ad0b-b86a4ba726e0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0eb18a20-c15a-491c-82c9-a72eb8756e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b5602489-f1dd-4efa-a1e2-b4174d68f522",
        "cursor": {
          "ref": "a678ee73-37cb-4e44-b1a5-c6032679a204",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d55b1be4-b3d7-4ad7-9d21-a9a6eae21540"
        },
        "item": {
          "id": "b5602489-f1dd-4efa-a1e2-b4174d68f522",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "92e23b83-b81e-45d0-bbd6-65bc16677d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541b3d06-9e8a-4d46-bb58-bd72d2d79425",
        "cursor": {
          "ref": "43a9122e-7bdb-451d-94cd-8d11935ee80e",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "346f00a8-d821-459f-a581-63c3827171be"
        },
        "item": {
          "id": "541b3d06-9e8a-4d46-bb58-bd72d2d79425",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "27687c02-7b3e-43f5-9cff-e4ce3ff82177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62240eb3-0828-46df-a0f3-c296bb08da14",
        "cursor": {
          "ref": "2ec2966b-e8f8-44fb-8594-fdb3e624f58f",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c148cba4-e02d-49cd-b007-c46b5c6d726c"
        },
        "item": {
          "id": "62240eb3-0828-46df-a0f3-c296bb08da14",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "cd36ac71-07d4-43b7-b2b1-e9e722628df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a29c24-4993-44be-b4f4-009bad73d8b2",
        "cursor": {
          "ref": "029a899a-c8c6-4cbe-abc9-fcccdf721d32",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "12f959cc-f92b-4868-9976-cde2a43cd603"
        },
        "item": {
          "id": "b4a29c24-4993-44be-b4f4-009bad73d8b2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e2d2aa47-0750-46e1-9aaf-5a14e76b1c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c012039-1435-4f34-acd2-c18e65b587a8",
        "cursor": {
          "ref": "4ca451f1-3528-471f-a637-c21402f205b8",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f78d726c-e75e-415b-b35b-ad191e8e5de0"
        },
        "item": {
          "id": "9c012039-1435-4f34-acd2-c18e65b587a8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "df70fc1d-29e0-4b75-bf9a-485a749bc2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f339ef68-3a5b-4aab-8726-e9504947e74b",
        "cursor": {
          "ref": "89fa39bd-f369-4c7d-9e5d-eb0bab6442d7",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "98c13ecd-e05f-497a-93db-b6d84ab4e5a9"
        },
        "item": {
          "id": "f339ef68-3a5b-4aab-8726-e9504947e74b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "932bab31-b593-4c55-9e11-43652f5b6b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b3aa5a-fba6-4e12-ba18-4582f542c801",
        "cursor": {
          "ref": "bd03d68d-c81f-45a2-a39f-91ded55c4f0e",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d587f603-6ff3-45ee-87ca-c684d37b33fc"
        },
        "item": {
          "id": "c6b3aa5a-fba6-4e12-ba18-4582f542c801",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4732bda6-ecb7-4c33-9102-cbd3e3033c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "64400f69-3139-4788-a1e2-62885430791c",
        "cursor": {
          "ref": "d2a160ed-62af-49a7-a838-b77889bc7e1d",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c33b83d0-f06e-4aff-8eaa-bc030798b44d"
        },
        "item": {
          "id": "64400f69-3139-4788-a1e2-62885430791c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "67a3917b-99ae-48a8-9dad-7c984a39644f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9636692-5085-47c7-8ad7-a56a931363e3",
        "cursor": {
          "ref": "3401ed5d-e0cb-4845-88d0-9d617654fcca",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "115b67c4-ab31-4af2-a6bc-1a394582efd1"
        },
        "item": {
          "id": "c9636692-5085-47c7-8ad7-a56a931363e3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "06988c7c-f936-4a6a-be93-a8c427d7f560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b605e70-0286-409f-8bf0-346a0eaa0354",
        "cursor": {
          "ref": "4a367dbe-e20d-4d00-ab1a-e6cdb06638de",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b469055b-9b16-4285-9a92-4905dc832d03"
        },
        "item": {
          "id": "1b605e70-0286-409f-8bf0-346a0eaa0354",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "09c68005-2829-4539-8d4b-913fa89730b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4828a7d5-cc13-49d9-bab8-c69e4a5059a8",
        "cursor": {
          "ref": "08fe1f2d-c0e2-45b4-8c8b-cad62990de27",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7707d139-8afd-428a-83a6-cef67872c27a"
        },
        "item": {
          "id": "4828a7d5-cc13-49d9-bab8-c69e4a5059a8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2b97d876-bc1b-4622-b4b9-f520a1a4f12e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e89861e-7b72-4e23-b413-b89a8b02ca73",
        "cursor": {
          "ref": "581a0fae-ba81-4029-ae44-027d95f7fcb6",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cfbe0e2d-7861-41df-b63b-9919a1d72c7a"
        },
        "item": {
          "id": "9e89861e-7b72-4e23-b413-b89a8b02ca73",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b78a7ec2-b9ac-4658-a860-f6bdc2ad5c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4126c4-1c94-4ba5-a6da-f9a6d72115ee",
        "cursor": {
          "ref": "9f735fa8-8ac7-422f-a7e3-98472fba9682",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "541516b5-b1b8-4668-b0ec-449a8e3ee18d"
        },
        "item": {
          "id": "9f4126c4-1c94-4ba5-a6da-f9a6d72115ee",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a4a0466d-7a4f-4525-8a62-88ee5126d3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28159afc-1f41-4499-a42c-ab0b70a481ef",
        "cursor": {
          "ref": "19aedf5e-3691-419e-9d7e-48061e42dbd1",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "97b2dfd6-5ab8-4d72-a9c1-85207febbe92"
        },
        "item": {
          "id": "28159afc-1f41-4499-a42c-ab0b70a481ef",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f24ac324-2cb1-435a-8135-43ffed73f477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62b1b97-d4cc-44d5-9858-8eb27f6302be",
        "cursor": {
          "ref": "54c7915d-8a97-4894-a235-55dbbf563533",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "21abb7c1-0296-4d37-99dd-95ab93cfc4d6"
        },
        "item": {
          "id": "b62b1b97-d4cc-44d5-9858-8eb27f6302be",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e4af5aac-45d0-4a78-9f55-6235ff629fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9cfe2a-c8f0-431b-b3b8-a917ec8eaf2d",
        "cursor": {
          "ref": "9e760a4a-3762-42a1-804f-0f65bf7642bd",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "778f6bad-c12b-4a31-819d-e75d3fc311c7"
        },
        "item": {
          "id": "6c9cfe2a-c8f0-431b-b3b8-a917ec8eaf2d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e3ad2d65-c26d-4c36-803a-18fcab27067e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3741ac7-d428-4683-93f4-bbdcb9f2da10",
        "cursor": {
          "ref": "f268d91c-81ca-4d21-9ed9-0596b36daf63",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2e50f4f3-3af3-4b71-be65-b265bbe742f6"
        },
        "item": {
          "id": "f3741ac7-d428-4683-93f4-bbdcb9f2da10",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6acb63ec-4b03-4a46-bf5c-a0fa640fdd53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a6d58f-ba7f-4ee9-849a-6daf48b21d48",
        "cursor": {
          "ref": "b2d2ad94-6992-449e-91be-03d19e874580",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4240b82b-c45c-4a3a-a835-fbbce21e450f"
        },
        "item": {
          "id": "02a6d58f-ba7f-4ee9-849a-6daf48b21d48",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7df47fd6-119d-4543-8148-e3516cd45ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2aacdc-11e0-40df-b38c-2589c37174cb",
        "cursor": {
          "ref": "399d1e98-f32b-4936-839d-da6210de277e",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6be634aa-a53d-4280-b956-b06ed02e2b58"
        },
        "item": {
          "id": "ac2aacdc-11e0-40df-b38c-2589c37174cb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0820b589-d832-4773-a292-3604fd789cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae23347-885d-4c2a-abff-d88118da4dc9",
        "cursor": {
          "ref": "62f1377f-151a-41e2-a78a-342e176ebc44",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5a6ef9b3-2a70-4c93-a7c8-e73e161dec05"
        },
        "item": {
          "id": "eae23347-885d-4c2a-abff-d88118da4dc9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "da7d5557-db4c-4136-a95d-033358ed3e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef963fd7-af2a-409e-8943-afaa0ae9d4f4",
        "cursor": {
          "ref": "309bccce-7c3f-4fea-9fe8-8007dd2ba2b1",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "01e36da6-07f6-429e-8ccc-cf4aca6dbb5e"
        },
        "item": {
          "id": "ef963fd7-af2a-409e-8943-afaa0ae9d4f4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0ff426e9-28ee-472e-ba2f-0a3a35ee9353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05074b43-f9cc-4593-bff8-f8c4dc9143ed",
        "cursor": {
          "ref": "31ea6177-3819-43a5-8450-5d43efa0fa80",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a0bda90d-3ffc-46e8-9a67-0f4d85b4e435"
        },
        "item": {
          "id": "05074b43-f9cc-4593-bff8-f8c4dc9143ed",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "520bea4f-174b-412e-9b8b-c2a76a85f5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88701b3-9296-4878-9e91-a4132bd70346",
        "cursor": {
          "ref": "0142152e-97e6-435c-86e1-e6a0644cf002",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "99d89f79-994f-48ce-a755-4bcb37439a01"
        },
        "item": {
          "id": "c88701b3-9296-4878-9e91-a4132bd70346",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cbf73fa8-c80e-495c-a51e-9796e7c5577c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d803a08d-b2d6-4cd8-94ca-eb9a3735fab1",
        "cursor": {
          "ref": "a6dda3f7-38ab-4700-a24d-af8b5b583b4e",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "176e47f7-7ef1-48d9-95f4-70718c8ddee2"
        },
        "item": {
          "id": "d803a08d-b2d6-4cd8-94ca-eb9a3735fab1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "45198e66-976e-4c4b-872f-0d56b54ba2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a956aa9-64fc-4462-a12d-5727c7c1c5e2",
        "cursor": {
          "ref": "7c94fc18-32a5-410a-b963-6f1c7e4f3eb1",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4bfd9544-e052-4dc5-b74f-6a7281fba232"
        },
        "item": {
          "id": "2a956aa9-64fc-4462-a12d-5727c7c1c5e2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "76950130-a7f4-4bc7-85d0-90d056b51e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9710f7-568e-4bed-89bc-08238aa39b45",
        "cursor": {
          "ref": "11c91a77-2242-47f3-8565-ffc9a6c80ae5",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e9242ec7-ff9c-48b9-8c87-63d4395230b1"
        },
        "item": {
          "id": "ae9710f7-568e-4bed-89bc-08238aa39b45",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "511d69de-3bfd-4da0-988d-80efab87232c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0751a092-c923-4b56-bc54-e4c642f2adf9",
        "cursor": {
          "ref": "98ddc311-df51-4466-91a6-21183fa174ab",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "be4e3e2b-9383-4ea9-bdc1-53d3d14b2e97"
        },
        "item": {
          "id": "0751a092-c923-4b56-bc54-e4c642f2adf9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2547fb24-26e3-4336-b7e7-396baf46dfbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a489bf30-aa84-4a03-a37a-197f8003b470",
        "cursor": {
          "ref": "efb90069-ee48-4709-bd08-9fa0253ebe68",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4bb92b60-51f2-411d-af45-ba649e49acb6"
        },
        "item": {
          "id": "a489bf30-aa84-4a03-a37a-197f8003b470",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b27111b6-a755-43cd-9856-f5c7c3f39d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24bf2b5-6028-4d0a-8c84-a2b3cdd340ec",
        "cursor": {
          "ref": "2a9cf0c6-0605-4fdf-9599-5ad6b0797a73",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d02f8dfa-c7f9-4c03-ba92-8e8ebf0bfdd4"
        },
        "item": {
          "id": "d24bf2b5-6028-4d0a-8c84-a2b3cdd340ec",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e9e06a83-cba0-4aff-a6b0-052d37890e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5076e6-2244-4766-922e-ae767ad8c692",
        "cursor": {
          "ref": "bc00efdb-734c-46c7-9b5f-4035596dab63",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ef1f19c6-dcaf-4053-a127-7c78bc61a86c"
        },
        "item": {
          "id": "6c5076e6-2244-4766-922e-ae767ad8c692",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5b961513-81b5-4ebe-aa25-93c8d0bcf5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65f6f52-a20f-4937-a27b-269e2b23ae07",
        "cursor": {
          "ref": "8893d81b-4e42-4106-8b05-da6417e7db6c",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "abc83541-4ed3-428e-a920-7962cf14099a"
        },
        "item": {
          "id": "f65f6f52-a20f-4937-a27b-269e2b23ae07",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d88ac4dc-34d1-4697-b099-cbe0619eea37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b5cd82-5421-4b31-afe4-ce6c057bf621",
        "cursor": {
          "ref": "7af3348b-8aa8-4bc6-97e9-91eee80835a0",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e497e79d-cc78-4764-89f4-13f05577ca40"
        },
        "item": {
          "id": "11b5cd82-5421-4b31-afe4-ce6c057bf621",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4ee40288-b849-4e9b-960f-8fd4819650a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c1f916-c4dc-4730-9c3b-b48ce2d4bff0",
        "cursor": {
          "ref": "3eccd60f-5d57-490b-8838-cbe49c145c87",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "646ff210-a1a4-48e5-a38b-2bc80dd58453"
        },
        "item": {
          "id": "61c1f916-c4dc-4730-9c3b-b48ce2d4bff0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ead96afa-277c-4978-8e95-6853527713df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6092ab-f503-4dd1-8985-d53a458eab4f",
        "cursor": {
          "ref": "2f06e913-7176-4761-80df-b86197b9f2d4",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9c4a5b50-3774-48e4-807b-6cca7bb7c7a3"
        },
        "item": {
          "id": "0c6092ab-f503-4dd1-8985-d53a458eab4f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b19487b7-fdce-4fb8-8870-cf74dbe25820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecd27c1-ce9b-43ab-a762-6556d793553c",
        "cursor": {
          "ref": "3942694b-5d54-473f-bf4d-4245b79d94f0",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8d576c88-4841-4db9-8ff9-c9d7d4eb74e3"
        },
        "item": {
          "id": "eecd27c1-ce9b-43ab-a762-6556d793553c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ca81bb70-1308-4046-818f-7b966a0d09b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9426a2d9-27db-4ef9-a88a-1212fef5b40b",
        "cursor": {
          "ref": "e83f5401-6795-4302-91ce-00251b72c9fc",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f62e409b-3482-4bb6-8d3c-e5dabb2bb372"
        },
        "item": {
          "id": "9426a2d9-27db-4ef9-a88a-1212fef5b40b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8892a2cc-4de1-4c10-ac42-b2eb906debe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600a64c1-2a38-4521-ab35-11504dc84a9e",
        "cursor": {
          "ref": "c56f53cd-aadd-4749-b3dc-37a02aab4a5d",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "56ea5622-24c9-4241-8a58-a2b14c649eb9"
        },
        "item": {
          "id": "600a64c1-2a38-4521-ab35-11504dc84a9e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "038dc335-1aac-4f0e-a77c-afce99625d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d0f984-e8bb-4f46-8d74-391ba706fa3a",
        "cursor": {
          "ref": "5a15d4d7-58dc-4a02-a3b2-b264dbda4357",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ee9a7291-21aa-487e-9c13-6e903ce9ea5c"
        },
        "item": {
          "id": "b9d0f984-e8bb-4f46-8d74-391ba706fa3a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "599b1104-e5c8-4d23-a006-0c23ac262830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd53e8f9-4226-4781-92f3-3ceefd388711",
        "cursor": {
          "ref": "f94a7b7e-a058-4dfe-8e13-6d0e786e0ce2",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "50635606-0f0c-4376-a648-c0e7e17b407c"
        },
        "item": {
          "id": "bd53e8f9-4226-4781-92f3-3ceefd388711",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b702f06c-9956-4a22-84df-22b8581eae36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61826586-119f-4c00-ac79-bb677263dde1",
        "cursor": {
          "ref": "4afa769f-2517-4f5c-b6bf-53ab6d0daa08",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "60bb2460-640a-4c9b-970d-8ae8f5227a6b"
        },
        "item": {
          "id": "61826586-119f-4c00-ac79-bb677263dde1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e0325e25-4079-4958-9b99-1aab0ec20d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0032ae88-c28b-414a-9e4c-c411fcd65f72",
        "cursor": {
          "ref": "9d597327-f068-4cf6-8784-9b16da3271ba",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "40e0d3e8-302f-42bc-92bd-f79d7e6d4f1d"
        },
        "item": {
          "id": "0032ae88-c28b-414a-9e4c-c411fcd65f72",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4c025c02-0ef9-4ba3-8c26-bc924170e46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26c9add-48e0-4801-8e18-8dd8b2b9924c",
        "cursor": {
          "ref": "b129022b-5945-43ec-a7f4-702dcbaa4919",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b7e6b98f-19c2-4cdd-aa69-5d06a9ccd172"
        },
        "item": {
          "id": "b26c9add-48e0-4801-8e18-8dd8b2b9924c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9b855fbd-be66-4447-95fe-b918b5656f65",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "f14d40f2-5379-443a-b964-a7c4344aa471",
        "cursor": {
          "ref": "a2082e9c-5636-4ec5-a4a3-a11784eb65dc",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "96461484-7200-445f-b2ac-cfe2440c0826"
        },
        "item": {
          "id": "f14d40f2-5379-443a-b964-a7c4344aa471",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b4c43307-d9f0-4182-9b0e-5c0cb38883c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7db9f02-10e6-4f15-85f7-364392c3f07b",
        "cursor": {
          "ref": "3fb45fe0-0613-446c-9145-349bae55447a",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "84134862-7f77-4ff1-b461-319d9dec017b"
        },
        "item": {
          "id": "c7db9f02-10e6-4f15-85f7-364392c3f07b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a3a03562-45be-4e75-a2f4-e6e0ebe1ccd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a408e05-8a82-4683-b7b1-311fdad3fe24",
        "cursor": {
          "ref": "074718a0-8894-4296-a195-770a8a3b1402",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a5ec3cdf-ef69-4a09-9d54-27c1434b796c"
        },
        "item": {
          "id": "8a408e05-8a82-4683-b7b1-311fdad3fe24",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "98efa00a-0fa5-47bc-9712-728661b4c8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8287e3-9d60-494e-84b1-4df325ad2119",
        "cursor": {
          "ref": "e0566cf8-b185-42df-9dfa-c7ea27375aa0",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b855fc23-15e9-42ae-9940-5a0b6f1ce32e"
        },
        "item": {
          "id": "2a8287e3-9d60-494e-84b1-4df325ad2119",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ecdaeb1b-fb63-409c-8725-875517513698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792924f4-003a-4285-8b4f-7772b0b6deec",
        "cursor": {
          "ref": "4d73391e-53c2-4f83-a8b5-067e2c262fca",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7ec468d0-9305-4b9a-b436-0d6035758f52"
        },
        "item": {
          "id": "792924f4-003a-4285-8b4f-7772b0b6deec",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f7f8d1ad-4660-4e4c-bc7f-cb7e0dc1c09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ebdb85-53a8-42ed-95d9-7749d849cfaf",
        "cursor": {
          "ref": "b857ecb7-1cb0-4c2d-a724-2adbc8e88592",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "57c85a17-456f-41b1-a0f6-a5e3bcb5677b"
        },
        "item": {
          "id": "32ebdb85-53a8-42ed-95d9-7749d849cfaf",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1f9c6a82-ad9e-4ca7-afae-acbbcc37fcbd",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "ba4ba35d-b4e7-4e84-a165-7f9c6ab80204",
        "cursor": {
          "ref": "8f5f7057-9ea8-4ddd-969e-842f5b807464",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "68337a47-51ec-4b6c-833c-a7784b4163e7"
        },
        "item": {
          "id": "ba4ba35d-b4e7-4e84-a165-7f9c6ab80204",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e6d8b956-67cc-4463-9344-f9073c68d1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334b9c19-60d1-4b1f-9560-2432d8ce5b38",
        "cursor": {
          "ref": "2e43bc19-2491-4887-bc2a-8da1b53f65c8",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "af73fb6a-3c0d-493a-9c83-226a51903a1f"
        },
        "item": {
          "id": "334b9c19-60d1-4b1f-9560-2432d8ce5b38",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "144b077e-c175-49c5-ae30-ffa57e76c081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8607f4b1-0110-4daa-8787-cae219317377",
        "cursor": {
          "ref": "bb95683c-99f1-48a6-a188-037af0cb9897",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2f7ca85d-7ef3-44ba-a0d4-b6442c7eebe3"
        },
        "item": {
          "id": "8607f4b1-0110-4daa-8787-cae219317377",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "16d48e0b-0672-48f5-ad73-a1ed71ec17be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f176f007-4c83-484f-ba11-9f952f50868f",
        "cursor": {
          "ref": "32a33ea3-ddc4-4112-b150-18b6fe4e6fb6",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0571a15e-b7dc-432b-b15e-37ca6de64feb"
        },
        "item": {
          "id": "f176f007-4c83-484f-ba11-9f952f50868f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "13dd6619-2178-42bb-b1e4-81fb2755ad2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dea7fe-2944-4b40-8638-f1dbaa9a95b0",
        "cursor": {
          "ref": "cf90ddcb-1834-4630-880b-9c604f1336cb",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4b1714bd-4723-4048-a140-545dafde9704"
        },
        "item": {
          "id": "a2dea7fe-2944-4b40-8638-f1dbaa9a95b0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b66e0816-ab4a-4148-a48d-6d346e59f1c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098eaf95-c899-41cf-8ffd-8283b2338dd5",
        "cursor": {
          "ref": "89f82ef8-8a58-43a8-a4b4-47d8dfacd68c",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "663bfc93-b26e-4c04-8b4a-a0be8244e058"
        },
        "item": {
          "id": "098eaf95-c899-41cf-8ffd-8283b2338dd5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "be8c0554-c441-4e3b-a444-316587e47ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f44c91-0739-4470-ba50-25d0fffa6ee4",
        "cursor": {
          "ref": "37b912a7-5fce-4a65-8f73-9c650df17aa2",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d9c53992-6fdb-44aa-b0ba-9ffc8ca00651"
        },
        "item": {
          "id": "e5f44c91-0739-4470-ba50-25d0fffa6ee4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a3e88d0b-c96e-4937-b370-a1cdfd7f6c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d88b256-a52d-46f4-bf61-b732322d53a5",
        "cursor": {
          "ref": "85a0e25f-2c5a-4653-9def-a00b40d642c0",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bc084d8e-5277-4158-a978-e38eef6f0320"
        },
        "item": {
          "id": "1d88b256-a52d-46f4-bf61-b732322d53a5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a5785444-8892-48d9-a515-406480cd4cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50676afa-c86a-4cec-9f77-fc1c80381a85",
        "cursor": {
          "ref": "1370907d-3e0f-4d4d-abc4-1a2e84873157",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "107b7d36-438b-4f29-8d3c-0df57641537d"
        },
        "item": {
          "id": "50676afa-c86a-4cec-9f77-fc1c80381a85",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "33806617-d228-4c16-a3ac-424c4e2c11b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "81207be4-892b-41ce-9daa-8127f0c1442e",
        "cursor": {
          "ref": "7a8adeae-e779-43c2-b19f-a9c9114d77e4",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "32736749-0b19-4525-b4e6-b714a93fcaa2"
        },
        "item": {
          "id": "81207be4-892b-41ce-9daa-8127f0c1442e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "93a5aa45-617a-4ea4-98cc-f1d130eaefba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ad95183e-7172-47fa-aa0c-4901c73f2809",
        "cursor": {
          "ref": "ea464ae1-3e09-400e-b881-a66835e6b7af",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d5b12e00-4b40-4e91-bc1e-abc0fe6f0e60"
        },
        "item": {
          "id": "ad95183e-7172-47fa-aa0c-4901c73f2809",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a43bdbd9-7cb7-4808-975c-f858123c0ef6",
          "status": "Created",
          "code": 201,
          "responseTime": 490,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba86a4a3-0c15-40e9-b1b9-db6e26b5ff69",
        "cursor": {
          "ref": "84563fea-db40-4325-aca7-6fa082b08e4a",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "544345db-b504-4c58-b8f2-741a4b877deb"
        },
        "item": {
          "id": "ba86a4a3-0c15-40e9-b1b9-db6e26b5ff69",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "e455fdff-3b9e-4f19-a6ad-9f15f2222d5c",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202a7565-8990-4524-9ace-1bd66d96d1e4",
        "cursor": {
          "ref": "ba4aa110-203b-43fc-a0f3-20157859181a",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "de5c7fef-9fad-4ed4-8c66-23c690a1830c"
        },
        "item": {
          "id": "202a7565-8990-4524-9ace-1bd66d96d1e4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "75a0accd-1c1d-4f5f-a145-f933059fc8fa",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1117b4-c2db-4884-8c67-9e4e365208b8",
        "cursor": {
          "ref": "2745f399-ca1f-4e88-82b2-d4aa59561a32",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "63ed5880-a391-47e8-9652-5d17712eb334"
        },
        "item": {
          "id": "3f1117b4-c2db-4884-8c67-9e4e365208b8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0cf33aee-2247-493b-940d-9d94518754d5",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "691067b7-b8d8-4acf-8653-50be52a38d8f",
        "cursor": {
          "ref": "7c82c45c-280a-4e2b-8d81-b5386ce8ba26",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "36aa4b9b-290d-47ce-bb1c-68740c0463d6"
        },
        "item": {
          "id": "691067b7-b8d8-4acf-8653-50be52a38d8f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6b53e1a4-9be7-450c-8046-ffe263878aa9",
          "status": "Created",
          "code": 201,
          "responseTime": 373,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "31823378-1a83-4d6b-9220-c182fd7caa8d",
        "cursor": {
          "ref": "9125330f-543b-4b8b-864c-750ffa26e2f2",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "dc6987ff-114e-4529-851a-466ef4df9b83"
        },
        "item": {
          "id": "31823378-1a83-4d6b-9220-c182fd7caa8d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d4aae2c3-cfd4-43c5-a660-6e62b767c315",
          "status": "Created",
          "code": 201,
          "responseTime": 476,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e66e8e-ea78-48d8-a5ca-4f38cd5cc63f",
        "cursor": {
          "ref": "c8161a18-56d0-4cb0-ba44-8407d37751c9",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d9a44d4c-53fc-4f66-9393-6a17b574ccb6"
        },
        "item": {
          "id": "e3e66e8e-ea78-48d8-a5ca-4f38cd5cc63f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ed3673db-76d5-4788-bf58-ee49e1983c24",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e3e66e8e-ea78-48d8-a5ca-4f38cd5cc63f",
        "cursor": {
          "ref": "c8161a18-56d0-4cb0-ba44-8407d37751c9",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d9a44d4c-53fc-4f66-9393-6a17b574ccb6"
        },
        "item": {
          "id": "e3e66e8e-ea78-48d8-a5ca-4f38cd5cc63f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ed3673db-76d5-4788-bf58-ee49e1983c24",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "b7380e11-3cfd-4608-8d78-82bceb99ee8e",
        "cursor": {
          "ref": "a472f007-ad3e-413d-8232-de538427e8fb",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "61aaed96-04b7-4218-b431-a80d4354ee77"
        },
        "item": {
          "id": "b7380e11-3cfd-4608-8d78-82bceb99ee8e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8df6f686-ff34-40c5-8046-eff3a5d686a8",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "1f57da63-848e-4719-9f2c-fa1a6a572232",
        "cursor": {
          "ref": "f636bd92-3acb-4b45-9ad2-de5c5b508a5f",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "faa24f70-93f0-4ae7-b39e-2ef095e3fa4c"
        },
        "item": {
          "id": "1f57da63-848e-4719-9f2c-fa1a6a572232",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "23cb200e-3e73-419c-8707-697e76c79aaa",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "01d66661-aa8c-41a5-80b1-93fce48bb501",
        "cursor": {
          "ref": "7d23f0bf-2dcf-42b8-996f-0018bf654943",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "207327b9-46ae-49f3-b8e7-a1e1e36bac3a"
        },
        "item": {
          "id": "01d66661-aa8c-41a5-80b1-93fce48bb501",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "88eafd0c-ac0e-4501-bb65-abe4db49fd6c",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "59ed17e9-2c1f-4442-85ee-462f35ed2c6c",
        "cursor": {
          "ref": "93b112f0-ffc3-4795-8eea-6df3e2878fe2",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a5a64704-5c1d-48fc-8cac-5790287beadb"
        },
        "item": {
          "id": "59ed17e9-2c1f-4442-85ee-462f35ed2c6c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2c920111-d476-44fb-9543-62c5fbb86d2f",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e665b177-263a-4983-925a-023624fcfe09",
        "cursor": {
          "ref": "d211f329-9efe-421c-9ee5-d04ba4f39290",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6b0a95d8-f5ab-4762-b8e5-6f3fcffff9af"
        },
        "item": {
          "id": "e665b177-263a-4983-925a-023624fcfe09",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d0703fe4-10e3-4ebe-a84b-9804852c0a95",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5e242d26-06cf-4af9-97ea-c017148d861a",
        "cursor": {
          "ref": "4dae43c7-1b39-4c3f-ba5b-244e09e63102",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3df8f050-9278-4806-b2b3-44f0e917d4cc"
        },
        "item": {
          "id": "5e242d26-06cf-4af9-97ea-c017148d861a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "be1d0897-b3e5-4ed3-9857-6a284689198b",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "b630f870-c223-4df3-bebb-242d1f00ca0f",
        "cursor": {
          "ref": "f2c0a3f6-dc5a-405c-b9c0-b27fba1a0897",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "60e6125c-09a3-4967-b56f-b56a9af83537"
        },
        "item": {
          "id": "b630f870-c223-4df3-bebb-242d1f00ca0f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bc5f22f5-9348-4834-9041-658373055c4f",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "593aedd4-ec1d-448b-ae9f-07d033d33ef5",
        "cursor": {
          "ref": "9ccbb5c4-e279-4784-b9d8-720cf7ef09f3",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ff01d2a5-8aca-4b3d-a608-cc48ebc127cb"
        },
        "item": {
          "id": "593aedd4-ec1d-448b-ae9f-07d033d33ef5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fdc271b7-e5ce-4c1d-86cd-f55f5736b454",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "95adcec3-09c5-4168-915e-cfee4bcdee81",
        "cursor": {
          "ref": "c6565dd0-32bc-433e-bfd2-ed9a44e712b4",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d0c2a386-24c9-4c55-8039-7b9ed3a29ec7"
        },
        "item": {
          "id": "95adcec3-09c5-4168-915e-cfee4bcdee81",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ad520729-0044-45da-bc11-14494dfff98c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "3db28e4a-3608-4478-9f6a-b37b7c8af00e",
        "cursor": {
          "ref": "8ea1e05e-f35e-45c8-9ae2-acc494965616",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b05782da-a5fd-4da6-bd81-4de3205b329a"
        },
        "item": {
          "id": "3db28e4a-3608-4478-9f6a-b37b7c8af00e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0af61991-61cf-41de-802f-0cbaaaa75ae1",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "b5edd033-dc52-4ca0-ae32-a8bcfa762d70",
        "cursor": {
          "ref": "5a83cd7c-3235-402d-96df-6380cc98ee35",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "845378f3-5eb0-4b3a-8909-0a38ca25bba3"
        },
        "item": {
          "id": "b5edd033-dc52-4ca0-ae32-a8bcfa762d70",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7806d83f-c382-4d39-afdb-3e269215b200",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "75c78bf7-9db1-4564-a637-3e7c233f99bd",
        "cursor": {
          "ref": "ef65e801-30b8-40e9-aa06-68c60bd03f5d",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c4533d4b-c4ad-4dd7-bb4a-0c0229f63952"
        },
        "item": {
          "id": "75c78bf7-9db1-4564-a637-3e7c233f99bd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "344c737c-e290-4132-b1d2-8e89bf7304ba",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "932ec07c-e467-465e-bf56-f04e10bccb36",
        "cursor": {
          "ref": "ea9d7826-c148-48f2-a0a0-6f83a6355405",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3c598380-1b3b-4d5b-bb93-4e6f8604db87"
        },
        "item": {
          "id": "932ec07c-e467-465e-bf56-f04e10bccb36",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1106c2f7-8689-452e-82ce-40fd59f5fba5",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "17dbd42f-06fe-4f86-8f62-b725f4168ef9",
        "cursor": {
          "ref": "55a10163-83b4-4d65-973f-6522f9ba87ea",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b614fc30-36e0-4a59-91ed-a31abd7e80e0"
        },
        "item": {
          "id": "17dbd42f-06fe-4f86-8f62-b725f4168ef9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3a1d2002-e962-4173-9080-1e06bbe5652b",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "7843f72e-e099-4f9e-8e77-0e508693cf57",
        "cursor": {
          "ref": "0a1d7bf6-1e01-4301-a448-6ed44f9a6aaf",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "47ece9c3-608d-4b80-967a-66aeafbc40b7"
        },
        "item": {
          "id": "7843f72e-e099-4f9e-8e77-0e508693cf57",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "23728d4c-33e1-4899-9c0e-d7adc05e4f62",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "a1c33dbc-dcb4-4f62-b761-9d5960357d34",
        "cursor": {
          "ref": "d57cc1e9-a58c-49e0-804d-ed9feb39a7cd",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "47b8224b-26e4-4c96-9b02-5a0ef49708e4"
        },
        "item": {
          "id": "a1c33dbc-dcb4-4f62-b761-9d5960357d34",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2d91bd5a-59a5-4722-a4dd-e6527a7418a9",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d90ed58e-72d5-4454-b051-fdd9dacc8135",
        "cursor": {
          "ref": "be361143-a062-4805-b8c8-20650362519b",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f7f5e7c8-3c1f-4885-92bd-42d59ef2d05f"
        },
        "item": {
          "id": "d90ed58e-72d5-4454-b051-fdd9dacc8135",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "88033b12-50fc-463c-9e20-44ab5bbe8c53",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "0ab322ca-446a-4e0c-8882-59d996cdb731",
        "cursor": {
          "ref": "ec06722f-a39d-4853-8d1d-a2085cf25cdc",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fed6e88e-d5fc-4097-89b3-f3347cf5afec"
        },
        "item": {
          "id": "0ab322ca-446a-4e0c-8882-59d996cdb731",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b129c687-2922-4e80-a476-004b7a7303bb",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d7e87139-307e-43d6-889a-cec1b113aa2b",
        "cursor": {
          "ref": "2fcba54c-910c-43fa-91c8-e5d045ec4a8c",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b8ea68e6-45b9-4ed2-8f6c-da98bf79142b"
        },
        "item": {
          "id": "d7e87139-307e-43d6-889a-cec1b113aa2b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d52a3b45-1322-427a-9e98-018fb025ab60",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "2ab757cb-941f-4e1b-9042-4ecc9d6838b4",
        "cursor": {
          "ref": "1ce8bffe-03b3-4383-b62f-2afef4fa1146",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1d44c665-fe08-4d8f-b678-c97a53722fe5"
        },
        "item": {
          "id": "2ab757cb-941f-4e1b-9042-4ecc9d6838b4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "80000910-ba0e-4a5c-a86b-1793106519fc",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "5208e8dc-ec9f-49d0-a359-67d755dfcf49",
        "cursor": {
          "ref": "e29380cb-bf58-4378-a9b6-3c92e6b417d5",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9da559d1-069a-4cf0-80d8-4189b2a6002f"
        },
        "item": {
          "id": "5208e8dc-ec9f-49d0-a359-67d755dfcf49",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "282048f9-6e26-43db-b035-a4f3629b1540",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "16e24afd-f792-470c-a1fa-3bad4b6d33bd",
        "cursor": {
          "ref": "b5274e9c-fcb1-4fe5-bf76-ff9c7795ccaf",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5d09aedc-ba29-4cd2-b9c8-3ac2bac9f3e3"
        },
        "item": {
          "id": "16e24afd-f792-470c-a1fa-3bad4b6d33bd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5d4f924d-cd18-400e-8e02-6c161ea2f148",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "75226932-dd8f-4f5e-bf2c-bde4ef10ccab",
        "cursor": {
          "ref": "93d024ea-9340-4b47-a06e-4e52aaec9ebb",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "998d406a-be5c-4b2d-aa64-0de72efd578a"
        },
        "item": {
          "id": "75226932-dd8f-4f5e-bf2c-bde4ef10ccab",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f5e1fa48-e396-487b-99af-48eed272299e",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "d16cf385-0329-4737-961f-795709e5932c",
        "cursor": {
          "ref": "e5adcac9-88c0-414a-8a8b-6722616eccd9",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ad209959-2002-4843-97c9-7a33e5689767"
        },
        "item": {
          "id": "d16cf385-0329-4737-961f-795709e5932c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "71178055-37b3-4b1a-92b1-e24981485b5e",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "65eb1f0c-3440-41a3-82e7-340fdf168d0d",
        "cursor": {
          "ref": "c6f622dc-e56f-4fac-9b95-89f585ba3e1e",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "57afe7d4-a3b9-4e9d-970d-9f3e1ef46eb5"
        },
        "item": {
          "id": "65eb1f0c-3440-41a3-82e7-340fdf168d0d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5367c619-d7ad-493c-b38d-eefbeafbe303",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "91e983be-88f7-47b0-b60b-9cd61f92bb63",
        "cursor": {
          "ref": "7aec82fd-0448-4676-943b-ff5a254f442d",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "352e5f20-9768-429b-a0bc-56cc513f2aef"
        },
        "item": {
          "id": "91e983be-88f7-47b0-b60b-9cd61f92bb63",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "adee7100-0189-4791-b502-0aa093b7a241",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "f0637cb3-9ef1-446b-9798-112c407baa70",
        "cursor": {
          "ref": "0bf12d6c-5e5a-408d-bcae-1ef390106de8",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "67c584a6-6769-4825-a947-087d7e8869bf"
        },
        "item": {
          "id": "f0637cb3-9ef1-446b-9798-112c407baa70",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c13d528c-3b39-4da9-af98-df0dcc4c8459",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "97cb100a-9aea-4bff-bfa9-55e5f3084d58",
        "cursor": {
          "ref": "3488b520-9fe9-4886-8743-41d04202a8e5",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f591f6b7-3306-4836-8e9d-63ffea6c8dc7"
        },
        "item": {
          "id": "97cb100a-9aea-4bff-bfa9-55e5f3084d58",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6f0f1bd3-330e-49c4-8b32-f5f14c9bf927",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5ad3ae84-bf5d-487c-bbeb-e177b90929b9",
        "cursor": {
          "ref": "d9950730-400f-4968-ac18-5a871040c9f8",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c04f6807-1077-46ba-8a90-ec84fd5ef0ac"
        },
        "item": {
          "id": "5ad3ae84-bf5d-487c-bbeb-e177b90929b9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "72e18659-5c8b-4b00-b242-906e376768f3",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "30ca2216-e67e-4188-86dd-22fab5750ac4",
        "cursor": {
          "ref": "528243ee-7d56-47f8-8f14-894a604f3079",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "aa54f475-8f4c-4c8e-92bb-0f5c78015fe4"
        },
        "item": {
          "id": "30ca2216-e67e-4188-86dd-22fab5750ac4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d4113fb6-be62-4e26-a1a8-b124e9130922",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "74fad87a-ad3d-4c3b-b1c0-30033e7e2b2c",
        "cursor": {
          "ref": "35c54ae5-8892-4867-ad22-da7286fc1500",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "43000905-27e8-406d-a33c-1f0c9c6afacc"
        },
        "item": {
          "id": "74fad87a-ad3d-4c3b-b1c0-30033e7e2b2c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "66a23620-aa46-43b8-bb09-4f624985b647",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "75cb681c-11b9-4069-a171-b1393a3b2c78",
        "cursor": {
          "ref": "f5d336df-9248-48cd-a140-af6f8dfaf4e2",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5a576e55-4390-4302-bc8b-86c0a0325c53"
        },
        "item": {
          "id": "75cb681c-11b9-4069-a171-b1393a3b2c78",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "94c9ba3d-a749-40b4-a361-225f742f8f3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4377caf6-a4b3-4f5f-bb3a-2ef84691ed2f",
        "cursor": {
          "ref": "5108bff0-b061-4ae6-a63f-be2887738a47",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2e0e7b31-735b-49ed-8b22-d303c28f82ea"
        },
        "item": {
          "id": "4377caf6-a4b3-4f5f-bb3a-2ef84691ed2f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "bb3230b2-1c66-4a63-8140-61d1375d79d7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 79,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcc18b7-659a-485f-bfc2-5d5c9f3f4358",
        "cursor": {
          "ref": "757a290b-fead-4526-99c8-99f0a8f1a85a",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6326c6a7-57d1-4f38-a749-5bc6fd235042"
        },
        "item": {
          "id": "9fcc18b7-659a-485f-bfc2-5d5c9f3f4358",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ceea38e1-5492-4b8b-92c6-8dbcb736a169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcc18b7-659a-485f-bfc2-5d5c9f3f4358",
        "cursor": {
          "ref": "757a290b-fead-4526-99c8-99f0a8f1a85a",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6326c6a7-57d1-4f38-a749-5bc6fd235042"
        },
        "item": {
          "id": "9fcc18b7-659a-485f-bfc2-5d5c9f3f4358",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ceea38e1-5492-4b8b-92c6-8dbcb736a169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52489e77-11f6-499c-af22-4aff37bcf232",
        "cursor": {
          "ref": "b6e1463d-45f9-4ad8-8597-2c902c48cb39",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "729c335e-0b73-44ac-98ef-0e101805857a"
        },
        "item": {
          "id": "52489e77-11f6-499c-af22-4aff37bcf232",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4c34c95c-9943-4c41-b959-49c7fb8e8e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f5f7b7-9854-4d23-93d5-6c690961deb8",
        "cursor": {
          "ref": "3c977b38-692f-4b26-b498-a6d47a9eb34b",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1c5c3392-1be0-4536-864a-72f4130b8554"
        },
        "item": {
          "id": "33f5f7b7-9854-4d23-93d5-6c690961deb8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "26484256-1833-4f5c-9c02-e0049c29f84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ea7e2f-1761-4093-a990-0e9c2dae6760",
        "cursor": {
          "ref": "2ae7f129-844f-43b7-a3d2-fcda6c9d6c9b",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b7f64330-17dd-4f72-8b8c-bfc1f9c1c0f2"
        },
        "item": {
          "id": "a2ea7e2f-1761-4093-a990-0e9c2dae6760",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0251cdb2-138f-4a08-9a7e-703f06482cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311516ee-c3dc-411f-9b17-8933e800528f",
        "cursor": {
          "ref": "456134ce-070b-4743-996b-58dd4c40c19f",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "787c7182-e2a0-42f8-a81c-30ab17b08641"
        },
        "item": {
          "id": "311516ee-c3dc-411f-9b17-8933e800528f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6e6300e0-7c90-418b-be6b-27f935e1fa36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb39fdc4-9c58-4c4c-8fb3-30bde6bb338c",
        "cursor": {
          "ref": "b042622a-af83-47fe-b7c0-8894f338237f",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7f787a3f-f075-4d51-b052-364d4304b516"
        },
        "item": {
          "id": "eb39fdc4-9c58-4c4c-8fb3-30bde6bb338c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "eba831f2-603c-4de3-a47b-642016f1bbe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e47c27-f80f-4a09-a112-cc3ede5601bf",
        "cursor": {
          "ref": "6c06a3e3-4cc4-4275-9557-4de7031f5d9d",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "787c19d0-1721-4c3a-be94-e91d446561e9"
        },
        "item": {
          "id": "89e47c27-f80f-4a09-a112-cc3ede5601bf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e438decd-2605-42b7-a0b6-9fefd82bce63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 645,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb6f2b2-7972-4d24-8530-8f6aef5cf520",
        "cursor": {
          "ref": "7ee02f18-e097-4dd7-ac83-4687686c7366",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "19bd4e07-03a9-4704-b292-29ec4f1160d9"
        },
        "item": {
          "id": "bcb6f2b2-7972-4d24-8530-8f6aef5cf520",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "98c593a8-01ba-4102-86f6-781163966c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675ad8b7-a9d8-4c21-bd75-bc530d922901",
        "cursor": {
          "ref": "5ed88619-4668-46aa-8b05-a5ca3998f33d",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "878ce66e-ee48-4148-8264-927fa1651038"
        },
        "item": {
          "id": "675ad8b7-a9d8-4c21-bd75-bc530d922901",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b694cccd-9d54-4da2-9347-74f340f43c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3f5008-55c9-410d-b3d0-93751c520130",
        "cursor": {
          "ref": "b11d7ab7-7efc-43a8-88bc-704a012bef62",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "149c4054-d6b4-4fe3-979f-0e83a7993871"
        },
        "item": {
          "id": "cc3f5008-55c9-410d-b3d0-93751c520130",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "76d2644c-0e28-4cc2-8989-151c0b6d243f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9374ed-a53d-4e3d-bd1a-e147137c8cae",
        "cursor": {
          "ref": "4b8835bc-60c0-4b26-93b5-03fd789dee69",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f38cf7ae-94b2-406b-87c1-940e3ab0dc7a"
        },
        "item": {
          "id": "1d9374ed-a53d-4e3d-bd1a-e147137c8cae",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e7a780d3-cc94-49df-b7a4-d6aa4ce66040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88eebf9a-7c77-495f-97c9-fa54212c6ec8",
        "cursor": {
          "ref": "daedeb4b-5bcd-4ee0-b116-bef41c7ab5b7",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "858278dc-b939-4065-a47b-b8d7fcc14afb"
        },
        "item": {
          "id": "88eebf9a-7c77-495f-97c9-fa54212c6ec8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "446a398f-73a6-45d0-ade9-bff2b9b64f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6a5471-b409-44fe-ae77-6c1cf2f24774",
        "cursor": {
          "ref": "d618a503-cbf4-4702-9d15-bf514063e6cf",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5e0e2b54-36a9-4b8b-b1e1-b2fb4ce76c14"
        },
        "item": {
          "id": "af6a5471-b409-44fe-ae77-6c1cf2f24774",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "eebc5aa2-13d7-4be5-bab1-c1495e846ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba39a43-ff5e-41a0-ab2c-00571ac6caa4",
        "cursor": {
          "ref": "aa18372e-9b99-4dc2-abeb-e482798f00e8",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "77d252f1-dc06-4cc1-8575-28d8ff937055"
        },
        "item": {
          "id": "1ba39a43-ff5e-41a0-ab2c-00571ac6caa4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a9864686-c646-4627-93b5-5a3e64fb25f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cffec5a-3b11-4e18-84b0-90af07a2681c",
        "cursor": {
          "ref": "f74bd326-2133-489f-9723-6d59e5fcf550",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bd35d206-b73f-40ad-b6f6-a2e8a23f86c0"
        },
        "item": {
          "id": "4cffec5a-3b11-4e18-84b0-90af07a2681c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8f8f6a29-2de4-49af-bf54-1f731a1fa357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c00164-70ce-4914-b45c-d552d680d46f",
        "cursor": {
          "ref": "a2f0e522-a131-4f32-a0e7-8a2d92ca5b08",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "14009675-029e-48e2-8774-134ffc080cf7"
        },
        "item": {
          "id": "46c00164-70ce-4914-b45c-d552d680d46f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cb0f0e41-65ba-4370-9bc8-16f1e2dd1b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8960057-6be1-46a8-8cce-be96798b979b",
        "cursor": {
          "ref": "8e560f95-799e-42fc-82fc-fe0f08d0758e",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e8e3d7a8-a033-47eb-9087-15d3573b7e36"
        },
        "item": {
          "id": "c8960057-6be1-46a8-8cce-be96798b979b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "fa692d7d-25d0-4dc7-9894-66be55bb3db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90542f45-f330-44e2-9332-2d3262a5f291",
        "cursor": {
          "ref": "11418746-e044-4471-bea8-c17131686849",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "500e9e2a-0844-4a53-9879-ff03940b2da7"
        },
        "item": {
          "id": "90542f45-f330-44e2-9332-2d3262a5f291",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6223dc79-ecb7-4a64-bb61-ca0b789b45fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975d15b2-f89d-4e0a-bc0b-5ce3445d5bbe",
        "cursor": {
          "ref": "7259656f-d18f-437a-8ee7-c6f16dec71ee",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0e5cde9c-7b61-458f-bd27-9b567a191332"
        },
        "item": {
          "id": "975d15b2-f89d-4e0a-bc0b-5ce3445d5bbe",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "dee67b25-8695-4fa5-bb13-d41863853473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa816541-6ad3-4f6f-82e2-364bd85ca18e",
        "cursor": {
          "ref": "1666c858-9296-4433-9dda-862b8f1f85fd",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e3e73f54-99f4-49a5-bba4-009b19dab64c"
        },
        "item": {
          "id": "fa816541-6ad3-4f6f-82e2-364bd85ca18e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "21edef62-aedb-4fbe-82d1-d557c2824913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42910bf3-3272-4b8b-aa8e-0ba521664450",
        "cursor": {
          "ref": "3f700393-10b3-4c56-91dc-4f73a0bef320",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5878426b-803d-4475-a04b-42cf019ab239"
        },
        "item": {
          "id": "42910bf3-3272-4b8b-aa8e-0ba521664450",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7f5c3d2c-42c7-4c5c-9ba5-fc8961360366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7809f4-52ac-47b1-88b2-0c7b851707c8",
        "cursor": {
          "ref": "7f757ec9-17ab-4ca8-a645-3ab20b665699",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e3e84f04-d01e-436d-8c9f-187a6db77ea1"
        },
        "item": {
          "id": "fd7809f4-52ac-47b1-88b2-0c7b851707c8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3ea006c0-3862-44d6-ade9-45445c52a229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaca07c2-df6c-4c4f-9e23-4479723808e6",
        "cursor": {
          "ref": "f060b1fc-2638-4961-91b8-ca2df968f974",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b0d4caa3-9440-4db1-8bbe-3ef581fd00fd"
        },
        "item": {
          "id": "aaca07c2-df6c-4c4f-9e23-4479723808e6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "446af624-f693-4b0a-9447-0f5d36820ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15740,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f10a357-7b73-4761-8d47-5fbf883ec6e9",
        "cursor": {
          "ref": "4b625625-5094-4e9c-b5ed-4b7322b927e6",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "64fc1d27-cb2b-4902-9559-0d91353bd2d5"
        },
        "item": {
          "id": "9f10a357-7b73-4761-8d47-5fbf883ec6e9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ebd76ec5-d63d-4907-b02c-3ec9b3384c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b7f507-7aee-4abe-b456-00a9a09eb684",
        "cursor": {
          "ref": "0e2c3c62-8116-458a-a539-3e84baa68d19",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1ab84ba7-f823-4425-8f4a-9f8e4a068fc3"
        },
        "item": {
          "id": "71b7f507-7aee-4abe-b456-00a9a09eb684",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "152599d4-54bb-474c-afe9-2b202073ac22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5a1b53-d06c-4b6f-94fb-c0933405b3d5",
        "cursor": {
          "ref": "e85e1be9-96b9-4370-9e6d-ae9de9c10857",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "06b48cc0-1426-478c-b461-ab6ab0a342c2"
        },
        "item": {
          "id": "1e5a1b53-d06c-4b6f-94fb-c0933405b3d5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bbe54973-924d-4840-b846-c02968c0d402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 857,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db464980-f0b6-4851-949b-1cec58560f28",
        "cursor": {
          "ref": "e2d704d7-3542-408b-9265-9741a110c43b",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7d518a1e-562b-4f69-96a6-4758044d68d2"
        },
        "item": {
          "id": "db464980-f0b6-4851-949b-1cec58560f28",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "70418eea-7569-4a27-889e-9a6e0a40fe99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686fac5e-1ea1-4411-8a7a-bb6306c6057f",
        "cursor": {
          "ref": "89e41032-ed73-44d8-b87e-38603e2011d3",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3e497a03-3af2-4a05-a803-52e26ea1b519"
        },
        "item": {
          "id": "686fac5e-1ea1-4411-8a7a-bb6306c6057f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9a326d59-3d4d-4041-9531-6633a6c5228e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14b38f4-49b2-4132-a9d2-3dbaf3f9b512",
        "cursor": {
          "ref": "3f2dffa5-b541-463b-8c78-90a793c854f6",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "978682df-fe51-4458-8bfe-018b98277829"
        },
        "item": {
          "id": "a14b38f4-49b2-4132-a9d2-3dbaf3f9b512",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7973fe67-3b96-4bf5-9aca-f4e307733d9f",
          "status": "OK",
          "code": 200,
          "responseTime": 244,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "c7f7fdf9-c060-40d5-88a7-afcc57fa5ead",
        "cursor": {
          "ref": "762d4f68-3fb0-4526-867c-92bd4edd8ad8",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4d5ba5df-0fcc-4bac-aadb-30e4295d2f8a"
        },
        "item": {
          "id": "c7f7fdf9-c060-40d5-88a7-afcc57fa5ead",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "81d58369-23c7-450f-b5bb-3f0b085a65f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d957c70a-f3b3-4ae6-82f2-c1c4a977b779",
        "cursor": {
          "ref": "17a7e1a1-8a3b-4980-81ee-c368f4b76b3e",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "323f60a9-8afe-4aec-b9d4-d6874c1cf66d"
        },
        "item": {
          "id": "d957c70a-f3b3-4ae6-82f2-c1c4a977b779",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "935d76d0-a66e-4425-998a-b16c87e478f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31badf39-3b45-43dd-9ccd-5b0e0a78f20c",
        "cursor": {
          "ref": "e4b4e5a5-bc6e-4476-8d1b-f14fb7fc4c33",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c4b2a635-179c-4503-afd1-5fc29a97e6df"
        },
        "item": {
          "id": "31badf39-3b45-43dd-9ccd-5b0e0a78f20c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3404d7fe-9ea1-48f9-a84d-7cd9bb95828b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da461f1-1259-4925-9a66-b43a2a3ba9f8",
        "cursor": {
          "ref": "a5c69153-7246-40ce-b88c-1986e4194b9f",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c1d28e39-efbf-4532-bab5-349d5166ef55"
        },
        "item": {
          "id": "5da461f1-1259-4925-9a66-b43a2a3ba9f8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "71654486-662d-4fe7-9ef3-396a053f7d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae30f46e-f60f-4027-8a14-9036b031391b",
        "cursor": {
          "ref": "62d4fdb7-1a9d-462d-a4c1-bff292aca824",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4c47d766-7d92-4a1f-aef3-28571dc7173b"
        },
        "item": {
          "id": "ae30f46e-f60f-4027-8a14-9036b031391b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a419bf81-7ead-4d1a-a113-cd97edc52e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf135a6-bfa1-47f7-a9c2-aa99ca0164e9",
        "cursor": {
          "ref": "56a6f72c-7d3f-4773-8d06-72b3c0669164",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e917b61e-c6a8-4ffa-9f0b-504cb792aa14"
        },
        "item": {
          "id": "2bf135a6-bfa1-47f7-a9c2-aa99ca0164e9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3e66fb15-44c4-498a-a910-a1b3f4fc81ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622d1f65-e0e2-4756-887d-c412ff61e6ce",
        "cursor": {
          "ref": "25a4cccb-28d9-4601-b398-cc80ac3f08be",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fe937549-6bb5-4878-87bf-40fb07575492"
        },
        "item": {
          "id": "622d1f65-e0e2-4756-887d-c412ff61e6ce",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ab255ef8-b6dd-4ed3-b19b-547a64ee4b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948e7716-9bf8-4f48-95fd-b08cee819aef",
        "cursor": {
          "ref": "4bb772e1-ba96-435e-bac2-a6176a05b70c",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ebdffe7f-a4f3-4699-ae6a-347cd5edf3a8"
        },
        "item": {
          "id": "948e7716-9bf8-4f48-95fd-b08cee819aef",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "245a4e77-72bc-4be0-87e9-d67d88b26743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb789e3-0688-4212-a78e-1d325c197f21",
        "cursor": {
          "ref": "f98a2694-0b83-4fa4-bfb0-7f031270eacf",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d49ab6f1-e29b-489f-9e23-7a3ac0ecfa8d"
        },
        "item": {
          "id": "9fb789e3-0688-4212-a78e-1d325c197f21",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "87afd124-2d99-4bbd-943c-7f940f43ce1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60819757-0e2b-45df-8f99-ef53ea9d0fe2",
        "cursor": {
          "ref": "904db71b-be7b-4060-a3ea-14a03355bd1c",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "95e3e3dd-2729-448c-8ea2-dc4cbaa62c4a"
        },
        "item": {
          "id": "60819757-0e2b-45df-8f99-ef53ea9d0fe2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "db470729-534e-46c1-8ec1-6c4cbb4bb682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547698e8-c1a4-41b4-a8a1-8826dc4e2645",
        "cursor": {
          "ref": "d8141720-1e1a-4431-b01f-fcb29ac58883",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1994f04b-2ede-4df9-861b-7a25ab3f756f"
        },
        "item": {
          "id": "547698e8-c1a4-41b4-a8a1-8826dc4e2645",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2c3b9333-3709-40c0-9da3-8fbe64ea30a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958533eb-44bd-4790-866d-103bd0eff688",
        "cursor": {
          "ref": "5ff79b6d-e222-4afc-b4a3-e443987a608c",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c9c89136-950b-4819-b7cb-34dcf255d6bc"
        },
        "item": {
          "id": "958533eb-44bd-4790-866d-103bd0eff688",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ee346d30-62ea-4217-8854-c82b0cfb0aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0887b9c-f078-44bb-84fc-be85ca8f7f3d",
        "cursor": {
          "ref": "667a7370-c8d8-4174-807e-8346e1bc80b2",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3facc72f-9d15-4167-9f2e-4616ef29f4b7"
        },
        "item": {
          "id": "d0887b9c-f078-44bb-84fc-be85ca8f7f3d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b390e8be-a64b-419b-aaf6-dfc189d77d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e4311f-aa5d-4371-b669-5eab2214be57",
        "cursor": {
          "ref": "95182d92-b474-47cf-b33d-1a20f89c988f",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1f79894b-5923-484a-9621-07c77c06cfea"
        },
        "item": {
          "id": "21e4311f-aa5d-4371-b669-5eab2214be57",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e00f49f4-9ac5-45c1-84d4-a48cf8234ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e4943c-c6fd-44de-a8d4-a6a71600d75e",
        "cursor": {
          "ref": "560224f2-56b5-4904-8cf2-b8e4daa30a7c",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3fdb6fa7-3f08-4984-9998-44f7a880e564"
        },
        "item": {
          "id": "d4e4943c-c6fd-44de-a8d4-a6a71600d75e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "53ca96eb-149e-4d95-a726-2913715c0a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6993c159-4d01-47e1-b7aa-082f1206e342",
        "cursor": {
          "ref": "6050d8fd-4d48-4964-8764-905b0140d32f",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b039519b-994b-431f-abb4-91b43a803f83"
        },
        "item": {
          "id": "6993c159-4d01-47e1-b7aa-082f1206e342",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2449dd94-1302-4ea8-b4bb-69ebfa6516c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986f4331-7be8-4d64-aa4e-a79f83e2dd0d",
        "cursor": {
          "ref": "38b13df5-e3cb-432a-96b1-49672dd3bd70",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "005dfe73-cd3b-4e6b-88d9-9d724881bfb2"
        },
        "item": {
          "id": "986f4331-7be8-4d64-aa4e-a79f83e2dd0d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3c81ffdd-e35d-44f4-8b91-e9885c4a5556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60385808-150d-44b4-a3ef-4b53e5680344",
        "cursor": {
          "ref": "e1d7ae10-8f97-4aa7-b0cd-a0d7d4e37018",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6de6d291-e2da-445b-9684-18f76b24eb88"
        },
        "item": {
          "id": "60385808-150d-44b4-a3ef-4b53e5680344",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f8d0a96a-b89c-4c9b-be53-a38454202acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fb642d-f2e6-4fdc-9a56-7cb7952dd39c",
        "cursor": {
          "ref": "600740a2-a1e7-4ab6-aa4f-d73a6a2868fa",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bff7654f-e4d3-4449-a8f7-19d2831dec8c"
        },
        "item": {
          "id": "22fb642d-f2e6-4fdc-9a56-7cb7952dd39c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9dc54341-9e2f-4fbe-adc8-cd8d157c2f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade4ee05-70d8-48ae-88d2-ef99056b30b2",
        "cursor": {
          "ref": "359bbc56-9968-4896-84ff-0a7bf91d57d5",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d30727f8-2c68-4c94-a5c8-6a3f04e4e1e9"
        },
        "item": {
          "id": "ade4ee05-70d8-48ae-88d2-ef99056b30b2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "41e52423-b26c-46f6-abcb-231ff3d43a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf35b24-1055-447a-ae2a-276fa51f5dfe",
        "cursor": {
          "ref": "8ebdec10-4d87-4843-b5b1-20e950e5c8a0",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e7bd3d82-8932-4ed6-aabe-e830d9337a28"
        },
        "item": {
          "id": "adf35b24-1055-447a-ae2a-276fa51f5dfe",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1bf4a3c3-49ac-4bb0-b947-25d9c2a34cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f751536-3192-4c5d-b654-3137f8a1240f",
        "cursor": {
          "ref": "4df1fa31-b3fc-4500-8dbb-a57edf61434e",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "09b58e7d-3ad4-4b45-a424-b63036542f05"
        },
        "item": {
          "id": "6f751536-3192-4c5d-b654-3137f8a1240f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dc106efe-c76e-4738-8413-be1c1708b14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12b6a30-1aef-4f20-9416-49246aac764f",
        "cursor": {
          "ref": "b96a6fa2-6c7d-4760-833a-00029b6cbb79",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a4a1cb7b-c0dd-4b1b-8964-8c8ab6a78cd9"
        },
        "item": {
          "id": "b12b6a30-1aef-4f20-9416-49246aac764f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "77b63c5e-3bd9-4dac-ab07-6037aa29cede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1d7d3f-5817-4fda-bffc-2ec0e0e4111f",
        "cursor": {
          "ref": "e4b39ca3-66db-44a4-ae4d-a022647c1948",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5c358a34-3a9a-46cf-aa0f-236487391cad"
        },
        "item": {
          "id": "5b1d7d3f-5817-4fda-bffc-2ec0e0e4111f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c243e944-9aea-459c-b3c0-cd81cf84db5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fa13d5-b65d-46bd-ad9e-8bf83d8d4c3a",
        "cursor": {
          "ref": "14d383cf-d355-45a5-8638-af28e509560b",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1344bc16-7a14-49ef-9de8-62ed8028521e"
        },
        "item": {
          "id": "a3fa13d5-b65d-46bd-ad9e-8bf83d8d4c3a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d7bda263-05d4-473d-9148-a22537df9128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469952c7-5e30-4d68-9c97-29c7a24e9693",
        "cursor": {
          "ref": "a06fbceb-46ec-454b-81ab-d4ab3050101a",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b969f094-e262-4d2c-9343-67638e4ada57"
        },
        "item": {
          "id": "469952c7-5e30-4d68-9c97-29c7a24e9693",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6b970c5c-12c0-44e0-976e-4db4f9e51d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d487b76-ef83-4015-97f5-bfeeadaab819",
        "cursor": {
          "ref": "c9022811-898a-4dfa-bb5a-e9e7e0bffdd2",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0c3287df-2b92-423b-9d4a-713d53a4b490"
        },
        "item": {
          "id": "4d487b76-ef83-4015-97f5-bfeeadaab819",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "364a2739-d8eb-4638-8d62-0a17ff370dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754c0203-9971-4885-ba7f-20594d861c41",
        "cursor": {
          "ref": "7be90e45-b1cc-44e6-90c1-0d987b77923b",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "374c374d-2027-4653-92b3-b590961e0a25"
        },
        "item": {
          "id": "754c0203-9971-4885-ba7f-20594d861c41",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "45fbd790-6ab6-4d44-af8a-a0822133153d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdeb99d0-a743-415e-9de3-8715576dfbd3",
        "cursor": {
          "ref": "6ae96163-5154-4402-aaff-a5b09c35abf7",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "141d7484-72bb-440e-9d17-eebf7603a4d2"
        },
        "item": {
          "id": "cdeb99d0-a743-415e-9de3-8715576dfbd3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f41727dd-e788-4d4d-92f0-506089b9d504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5f3275-44d2-4f1c-8664-272d8f025380",
        "cursor": {
          "ref": "9b5c246f-0d0a-4830-957c-315e9b3adf85",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "860f04c3-e230-4747-b51c-b4fb0314b83b"
        },
        "item": {
          "id": "0e5f3275-44d2-4f1c-8664-272d8f025380",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2afe4c4d-5e50-4c5b-8419-0ce1a16b6400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac2c268-f1ad-4435-8d2b-3c4eb2f29da7",
        "cursor": {
          "ref": "c54a0ce7-1200-4c42-9a9e-a640b85234dc",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1dc845af-408f-48df-9ee1-274c8c0aa5d3"
        },
        "item": {
          "id": "4ac2c268-f1ad-4435-8d2b-3c4eb2f29da7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "aa129465-c706-40f6-86e0-5636970f0a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 387,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70875fc5-e8f8-46a2-9c60-83b2d3f9606f",
        "cursor": {
          "ref": "b72f95d2-dff0-4398-a2e4-e6379fdf2641",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "55f2e693-b325-4a17-8b22-1ca8aba28aa0"
        },
        "item": {
          "id": "70875fc5-e8f8-46a2-9c60-83b2d3f9606f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "432cadc6-1f7c-4e6f-ac20-89d082f59fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfffa5d-d425-4587-a716-5e1239514fc7",
        "cursor": {
          "ref": "6aa90bc2-7ffa-412f-a2ce-b3a3a834c592",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "da1d273c-2acd-41e2-9734-aa59bdf8d2c0"
        },
        "item": {
          "id": "1cfffa5d-d425-4587-a716-5e1239514fc7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "07642e35-edca-408a-9bd4-4e6a8d8e28f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 351,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34dcacfc-e194-4df2-b489-88696546dea8",
        "cursor": {
          "ref": "d5d96546-862c-4e5e-b061-f9a89d5c4b88",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d451d08a-0680-4f2f-a5bc-fe80b3e943d3"
        },
        "item": {
          "id": "34dcacfc-e194-4df2-b489-88696546dea8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c9cba210-085d-49b7-a53f-4fd31783064d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a184f9c-86a0-4d03-8af4-52c29f7f1e0a",
        "cursor": {
          "ref": "9af46c14-ddc1-446f-b951-08e654d0e5fc",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2e042def-2973-4557-bdc0-6e9f170acaa0"
        },
        "item": {
          "id": "2a184f9c-86a0-4d03-8af4-52c29f7f1e0a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3d6b6db4-2474-4aca-94e3-37a897380b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5f3563-0a8e-4979-b2a9-c494eee09990",
        "cursor": {
          "ref": "8a266619-0222-4107-9184-6b6b9275b342",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e2354795-27a2-4e9f-884d-0bdabb74f73b"
        },
        "item": {
          "id": "db5f3563-0a8e-4979-b2a9-c494eee09990",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e6f9369c-7485-4073-a8cb-6b4348eacac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b751bf7-e7b1-40bb-a9af-fe4491f8e051",
        "cursor": {
          "ref": "8965dd0f-380a-4842-af1f-e0550eb2defb",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "62ec90bf-2193-48a4-92d4-f0a16d1104f2"
        },
        "item": {
          "id": "6b751bf7-e7b1-40bb-a9af-fe4491f8e051",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "aa8bf8a1-3266-4b7f-9ef1-372f5e29da76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620368a8-6477-470a-a61e-d407bbad3e23",
        "cursor": {
          "ref": "0373ff70-3f13-4701-a286-ce9a57c15c83",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b38f7418-827a-4fab-97a6-305ed80431f1"
        },
        "item": {
          "id": "620368a8-6477-470a-a61e-d407bbad3e23",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0eefa238-4d2f-41ea-8bd7-24e46f539366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f12128a-8e4a-4f4c-972b-38547e7a4b08",
        "cursor": {
          "ref": "3523c962-da3a-4a45-b0de-264061b13273",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a80a3ded-d0e6-4b83-a372-f61545b0ccf9"
        },
        "item": {
          "id": "2f12128a-8e4a-4f4c-972b-38547e7a4b08",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "863d2343-b1a7-43b4-ada4-7dc158b0de41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82343ae0-719f-4f54-ab66-a2464fd3af69",
        "cursor": {
          "ref": "23511843-a7f5-4d75-92d9-839f45c3817a",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "11687c47-e71d-4b5a-841e-27279e82ead5"
        },
        "item": {
          "id": "82343ae0-719f-4f54-ab66-a2464fd3af69",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2d3df6d5-88cb-4422-b2eb-597793ab4044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf348ac-b2fa-49ad-be22-6467361be85e",
        "cursor": {
          "ref": "304ac2f9-f511-4050-a4e2-2b71878e6223",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1696553d-b4ef-468f-909a-a63974d3ead4"
        },
        "item": {
          "id": "abf348ac-b2fa-49ad-be22-6467361be85e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d7b263c9-9f76-43bc-a601-481b359e49e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c1976b-9828-4032-ba34-0e318a1c2798",
        "cursor": {
          "ref": "68c1452c-da33-4f42-adf4-9ed997521bb8",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "90abd094-6946-4db2-979b-7372f054fd6f"
        },
        "item": {
          "id": "65c1976b-9828-4032-ba34-0e318a1c2798",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3e296089-60a1-4f6c-9c8b-881f2de6df82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959f3a87-d6f8-4c96-8e18-b2fca31c910f",
        "cursor": {
          "ref": "7e1c2921-ce2c-4e37-919e-52555a5be507",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4cab6842-be40-4d30-a08b-b3d7ab11a5c8"
        },
        "item": {
          "id": "959f3a87-d6f8-4c96-8e18-b2fca31c910f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "900520ad-04aa-44ce-a391-e65275de2b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6df47d-ae9d-4d8e-a373-51b318e3806f",
        "cursor": {
          "ref": "dbc7d9ad-3d74-4175-a78e-1dd528287f58",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ab789d92-92bc-448c-8aec-cac40e49226a"
        },
        "item": {
          "id": "2c6df47d-ae9d-4d8e-a373-51b318e3806f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1671abd0-9ebe-4824-b2b9-5e93d0beef78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc719b72-d76a-4867-9125-5668b1506353",
        "cursor": {
          "ref": "1a6392b2-9bb1-4ac8-83c0-c366f969b8d9",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ad964b9b-a69c-4498-abca-cb680a5a43d9"
        },
        "item": {
          "id": "bc719b72-d76a-4867-9125-5668b1506353",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "85556d0a-0d45-42e9-9de0-3062b30df37c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e787cbf8-f5bc-4972-9798-3e8234c6f5a2",
        "cursor": {
          "ref": "14419472-8d5f-480d-a3d8-938d830ddc62",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a25b0c70-a952-49e0-a31c-2809fe5d3870"
        },
        "item": {
          "id": "e787cbf8-f5bc-4972-9798-3e8234c6f5a2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a8b1a700-6a93-43cc-85f5-24fd001bcf8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c31ad01-c998-4bbc-9cb0-7dae3d05ea48",
        "cursor": {
          "ref": "3b651980-26c8-4df0-985f-b595e8dec8b8",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b3f8fd45-ebb4-416a-b4da-b6885b59e1c6"
        },
        "item": {
          "id": "4c31ad01-c998-4bbc-9cb0-7dae3d05ea48",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ff92b743-1fe2-408c-82d0-09200d8c6bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5dca805-da90-4c3b-9ca1-c7b5c367bef3",
        "cursor": {
          "ref": "82fbb82d-f2b6-4263-a71c-da11b7677979",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b1b09242-80bc-4a56-b375-762afc72f1e0"
        },
        "item": {
          "id": "a5dca805-da90-4c3b-9ca1-c7b5c367bef3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fae2052e-4791-415d-ac9c-f1687c0ef4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87884cfa-8355-44d6-909a-3e6a26ca24ca",
        "cursor": {
          "ref": "0279871e-6a7d-4233-8ca3-08c87d1177a3",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9f53ec35-ef34-44d9-b20a-c2d30bc48d67"
        },
        "item": {
          "id": "87884cfa-8355-44d6-909a-3e6a26ca24ca",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5fdc1c00-a4d2-48ed-becc-204d4a6bc9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26459034-023e-435b-8505-8863d15c9991",
        "cursor": {
          "ref": "d3c99dfe-dc90-4348-a82b-6f861c6b3fce",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9f623f2e-c54c-4740-9a7c-f274b7c93f8b"
        },
        "item": {
          "id": "26459034-023e-435b-8505-8863d15c9991",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "19d559c1-9de0-46b1-9656-e478690bc378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69019e9d-81fa-4ac5-80ca-582affb040f8",
        "cursor": {
          "ref": "0a2da975-2407-424a-95f9-c311523116dc",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b3c3b4e6-144e-407d-99b4-f7af202bdaf2"
        },
        "item": {
          "id": "69019e9d-81fa-4ac5-80ca-582affb040f8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "42d33688-9584-4fc0-8e5a-bcef0d5796cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00121a90-26ab-4e1c-a44b-03f1f83a0578",
        "cursor": {
          "ref": "b537daaa-d675-42cb-9db4-fa9af119d410",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bc913c0f-3cdf-4ecc-b2c9-5be2b910cef6"
        },
        "item": {
          "id": "00121a90-26ab-4e1c-a44b-03f1f83a0578",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4346b77c-346c-4996-ad93-334ba7417946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9254fd83-1aa9-4774-a2bf-d5e95dbc77d1",
        "cursor": {
          "ref": "78092faf-099b-47d1-9d81-b4716f350b3a",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "47e3d824-72e3-4016-ae33-2bd5da238ca2"
        },
        "item": {
          "id": "9254fd83-1aa9-4774-a2bf-d5e95dbc77d1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b38969f2-fdfa-4feb-b2b3-3ee498ee48e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab733535-12e9-40f6-b39c-894f789524cb",
        "cursor": {
          "ref": "19f65469-2003-46c3-bc8a-8482b7fd94f8",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e9d2a537-fd16-4a5f-b748-a7928b49ef0f"
        },
        "item": {
          "id": "ab733535-12e9-40f6-b39c-894f789524cb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b95007e1-a169-436f-b03e-65b373931551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406373bf-9dd0-4e53-8707-3552c9d5c606",
        "cursor": {
          "ref": "7f95c94a-0bf0-4d98-aa4a-e73f1063c60d",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fed8bb0d-c8cb-4bda-8ed1-78f640bc20e1"
        },
        "item": {
          "id": "406373bf-9dd0-4e53-8707-3552c9d5c606",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0ee7ba0b-7d76-47ba-92c9-6490227acadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54abedd-2cb6-421b-8df1-8bdc5e08f68b",
        "cursor": {
          "ref": "6c64361b-aedd-493d-bbb6-e563c88f33b1",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "648f973d-0268-4ae1-880f-bae6e4ece676"
        },
        "item": {
          "id": "b54abedd-2cb6-421b-8df1-8bdc5e08f68b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6e7e70c0-5edc-4cfa-89d3-81117791ba6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d22556-f673-49f3-b9a0-4b8273631226",
        "cursor": {
          "ref": "4794585c-ebcb-43c0-b22e-879ab3dcae6d",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f3777086-3718-4826-9813-b6e513f89528"
        },
        "item": {
          "id": "38d22556-f673-49f3-b9a0-4b8273631226",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "db8f5b26-c78b-4cb8-b516-224e4da31ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b97ffd-779d-46e4-a977-3e723ce181f0",
        "cursor": {
          "ref": "0aa9610a-a3df-45f2-a511-dd2562433e56",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "82d25059-1c95-44f4-a486-4c4d58310fdc"
        },
        "item": {
          "id": "d9b97ffd-779d-46e4-a977-3e723ce181f0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2d8bd04e-7086-4fcc-9aa2-a7224da53500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a81f44-8ac1-4ce6-919f-34374f1b9c6c",
        "cursor": {
          "ref": "87c32e47-5dd1-4c9e-ba2d-45e324681919",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6417f8df-fa12-465f-8991-37fb1d4146b2"
        },
        "item": {
          "id": "87a81f44-8ac1-4ce6-919f-34374f1b9c6c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7e700448-07ab-4a47-9b08-0c9e681adcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bce425-085b-4960-a581-8c0a8c097c26",
        "cursor": {
          "ref": "948f92ac-8fde-4e98-b3e7-298695fd9f53",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cc0033dd-9942-4666-8c24-24123cab5d16"
        },
        "item": {
          "id": "66bce425-085b-4960-a581-8c0a8c097c26",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5eae7072-e24c-4b59-9f62-0ec9e9bb6e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179416b6-93d1-4ac6-a090-020c1dfabad3",
        "cursor": {
          "ref": "d176e862-14de-44a8-ad4a-7588dda925ce",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "639b0018-d35b-49c1-a166-5175cb0caea0"
        },
        "item": {
          "id": "179416b6-93d1-4ac6-a090-020c1dfabad3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4dba2de7-426d-438d-9607-92d2d8e3111f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b68ee8-fbf0-4395-8914-de1cdcbd610e",
        "cursor": {
          "ref": "9d338f47-6848-4806-99bc-f29340a86241",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ec6d5c69-71c8-4617-b1a8-9940828cbf13"
        },
        "item": {
          "id": "b8b68ee8-fbf0-4395-8914-de1cdcbd610e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c613b81c-30d0-4c6d-8485-4edbc43de43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a149746e-bbf5-4c25-96f1-e4de44212b9b",
        "cursor": {
          "ref": "71d3b44f-6146-4d97-8a7b-7c49775a6ceb",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2d8a20f9-51c2-42ec-9ee5-74a8581f25dd"
        },
        "item": {
          "id": "a149746e-bbf5-4c25-96f1-e4de44212b9b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8752d995-e951-4fc8-b9c3-6f2ce5524c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef7c2de-1074-4256-9d8d-33764559a32c",
        "cursor": {
          "ref": "a6267ed7-4cec-4db6-be6f-3789e4d150e0",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "595c5e15-3d7e-4c8f-907d-f1dd77a645f1"
        },
        "item": {
          "id": "4ef7c2de-1074-4256-9d8d-33764559a32c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "27f4b7c3-0fab-461b-bc59-186ab38f7d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d810cb3-9d4d-463c-88a9-9b7e3d15cd13",
        "cursor": {
          "ref": "fe73c909-92b6-4265-8e0b-f55ceeb456d1",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b1c91634-924b-43eb-b6b9-0fda0e54d22f"
        },
        "item": {
          "id": "6d810cb3-9d4d-463c-88a9-9b7e3d15cd13",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b2167621-e5c4-4db2-8fad-d9cf3c4d53c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51e9c06-9e26-415c-a488-bcf1e102ad39",
        "cursor": {
          "ref": "93744ec6-4fa6-4154-8e61-1fe4894c5dd7",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "765c874c-bce8-42d7-850b-4c14a720901f"
        },
        "item": {
          "id": "b51e9c06-9e26-415c-a488-bcf1e102ad39",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "337bc199-5af4-4d20-a27a-7f2c518e0a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c218a60-3cbb-43ea-9eda-492d9b2f0b94",
        "cursor": {
          "ref": "3ca04226-937e-43dc-b6a3-f6f7eb87376e",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a65ee910-4dce-478b-aaab-b1a3a800e70f"
        },
        "item": {
          "id": "8c218a60-3cbb-43ea-9eda-492d9b2f0b94",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e1d9abaf-d82d-4a9a-89bc-34d70cdc07da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031d1d7b-14c7-48cf-9c4a-106db8f1553b",
        "cursor": {
          "ref": "39f41137-15e4-40a3-a807-db5b577f551e",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "feaf9fa4-aa3b-4b99-8210-93641b0e61ea"
        },
        "item": {
          "id": "031d1d7b-14c7-48cf-9c4a-106db8f1553b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "de784c11-e553-435f-8de4-7dcffa27258e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31efd56-78d0-47ff-8917-afd5a4f5f207",
        "cursor": {
          "ref": "7d4ea49f-e525-418e-a0b2-8ddce2cda79b",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3f6b0eda-c734-457f-9f01-9cb0f0956c61"
        },
        "item": {
          "id": "c31efd56-78d0-47ff-8917-afd5a4f5f207",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "15fba1f0-ee7a-49e6-9982-31aa08f99aa7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00033383-ac94-4d94-a725-ac8f3d9d247d",
        "cursor": {
          "ref": "1c6a8188-7881-41e6-85fe-63b743fdb0ed",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e0528a52-fee1-471f-b5f4-3a2805f6011c"
        },
        "item": {
          "id": "00033383-ac94-4d94-a725-ac8f3d9d247d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c0fe8294-133b-4609-84ca-160934e855a4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a02fa20-c375-4102-b5de-6fc8d5bc2399",
        "cursor": {
          "ref": "05b52e99-8dce-4bc8-84cc-ae50e722d754",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e3e26246-c4d2-4ce1-8ff6-5a0547883d20"
        },
        "item": {
          "id": "7a02fa20-c375-4102-b5de-6fc8d5bc2399",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "90bf90b7-3033-4132-aae3-ecee94235403",
          "status": "OK",
          "code": 200,
          "responseTime": 575,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5111c1b-fe8d-4f72-a262-cf0323161295",
        "cursor": {
          "ref": "aff0d411-8418-44f1-889e-4ea0a689b29c",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "be9bca99-f7a1-4493-a96a-d513b2ed4c6d"
        },
        "item": {
          "id": "c5111c1b-fe8d-4f72-a262-cf0323161295",
          "name": "credentials_verify"
        },
        "response": {
          "id": "793e72f4-1451-40ac-967b-0ebd949f2fa4",
          "status": "OK",
          "code": 200,
          "responseTime": 407,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1012bce1-9b48-48ac-8d80-0f24e2cf4957",
        "cursor": {
          "ref": "005251ed-3e3d-4070-8266-299a57181368",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "72f1498b-5880-4c1e-a207-269965fd1296"
        },
        "item": {
          "id": "1012bce1-9b48-48ac-8d80-0f24e2cf4957",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "31092081-4ade-44d9-b5d1-78dfd1c8ad0f",
          "status": "OK",
          "code": 200,
          "responseTime": 360,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "244192d0-809c-4d03-a891-2ffd4798a8b7",
        "cursor": {
          "ref": "88f1f8d7-afc8-4d68-882c-9b94a5d6f679",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "88036706-6fb8-4f9d-a4fa-e12fd2c12573"
        },
        "item": {
          "id": "244192d0-809c-4d03-a891-2ffd4798a8b7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "75b04b89-b2f0-43e1-a34c-132e130a0820",
          "status": "OK",
          "code": 200,
          "responseTime": 363,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f2cfab-e7fb-4a12-a2b4-5012f651d907",
        "cursor": {
          "ref": "98769b62-7e45-4366-854c-4de34cad8e61",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "98ea4e5b-0e01-4359-a289-09b5cd899678"
        },
        "item": {
          "id": "a1f2cfab-e7fb-4a12-a2b4-5012f651d907",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "194f6622-a4a8-42d4-a872-e59165e74d50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f2cfab-e7fb-4a12-a2b4-5012f651d907",
        "cursor": {
          "ref": "98769b62-7e45-4366-854c-4de34cad8e61",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "98ea4e5b-0e01-4359-a289-09b5cd899678"
        },
        "item": {
          "id": "a1f2cfab-e7fb-4a12-a2b4-5012f651d907",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "194f6622-a4a8-42d4-a872-e59165e74d50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f2cfab-e7fb-4a12-a2b4-5012f651d907",
        "cursor": {
          "ref": "98769b62-7e45-4366-854c-4de34cad8e61",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "98ea4e5b-0e01-4359-a289-09b5cd899678"
        },
        "item": {
          "id": "a1f2cfab-e7fb-4a12-a2b4-5012f651d907",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "194f6622-a4a8-42d4-a872-e59165e74d50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc298c1-209d-4e1d-ac21-7f7634ddc253",
        "cursor": {
          "ref": "7d696acd-933d-4c4d-9c08-b8d27be6ad1a",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0fab74c2-ae39-4b6b-a523-3af3277d7db0"
        },
        "item": {
          "id": "4bc298c1-209d-4e1d-ac21-7f7634ddc253",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6e3de97c-4eff-45ad-a5fd-1dfcdfd419a2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04266bf-64c7-4df3-a181-bef40ddbfcf4",
        "cursor": {
          "ref": "5f48c64c-3792-433d-9f12-8867da48e121",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0f7c4250-4127-4339-9348-dee5435bc5f1"
        },
        "item": {
          "id": "b04266bf-64c7-4df3-a181-bef40ddbfcf4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5d791a14-4e5e-49da-a10a-c20b184c3105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b04266bf-64c7-4df3-a181-bef40ddbfcf4",
        "cursor": {
          "ref": "5f48c64c-3792-433d-9f12-8867da48e121",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0f7c4250-4127-4339-9348-dee5435bc5f1"
        },
        "item": {
          "id": "b04266bf-64c7-4df3-a181-bef40ddbfcf4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5d791a14-4e5e-49da-a10a-c20b184c3105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "693d0ca3-742b-4b30-944c-3df3870c59ab",
        "cursor": {
          "ref": "4681182e-f86f-4ff3-8ba6-7fe49f54dc51",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8081f58e-f1c0-4a25-b19c-4ba75c5ae8fe"
        },
        "item": {
          "id": "693d0ca3-742b-4b30-944c-3df3870c59ab",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "85021733-1e3e-4df0-a210-8adf7e630d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "48366ea4-4584-443b-92e2-4c3760083206",
        "cursor": {
          "ref": "b59a02f9-3d2c-4538-8767-412c2ee859d2",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3ce363cf-9f91-4dae-b36c-ba5997e55f1c"
        },
        "item": {
          "id": "48366ea4-4584-443b-92e2-4c3760083206",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "413c7f52-ed73-4727-85a0-c21a6e6ff69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "48366ea4-4584-443b-92e2-4c3760083206",
        "cursor": {
          "ref": "b59a02f9-3d2c-4538-8767-412c2ee859d2",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3ce363cf-9f91-4dae-b36c-ba5997e55f1c"
        },
        "item": {
          "id": "48366ea4-4584-443b-92e2-4c3760083206",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "413c7f52-ed73-4727-85a0-c21a6e6ff69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "d4dc7867-d01d-4ae2-aa55-c54c74f3b6a3",
        "cursor": {
          "ref": "5091a840-245c-4db0-8478-e274dec82a70",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "71bb0349-2537-4802-bca0-9d1fe9ff3020"
        },
        "item": {
          "id": "d4dc7867-d01d-4ae2-aa55-c54c74f3b6a3",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "72c76aad-a7ae-4aa6-8c14-aa103abd4275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}