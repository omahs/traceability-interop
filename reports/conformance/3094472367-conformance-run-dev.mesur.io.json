{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "918acf5f-8bb6-4493-a669-81d4c48b2f8f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5ab55b65-d6aa-4599-95a3-c76b1d9da1f1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0cab0ecb-2bab-42a8-8b1e-b34e3a2bac76",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3890fc3-3197-4a44-b19f-f4493bea340d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46a7189d-afd9-4dc6-9fa4-a67a4cac8a1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "026d6217-b234-4250-8308-c049c12ca926",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d489f751-14f0-408a-8620-a9bfad92fe62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "110ebe19-3ccc-4dd8-b258-e6471753229e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "69e47b5f-5241-48ef-aa40-7c88063f9526",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4fdb53-578a-41d2-b30b-9266c317fdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8be245b3-6efd-4718-a668-c0464d8e0de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd4eaa9-4e57-48d6-8f13-7f3b4c6d82cb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370aa5e8-ab02-45ac-8d3c-eb2e4ad66dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35cd5052-297f-47d9-8aa6-9568a5aa419c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a1c208-dca2-421b-b1f4-eec94251ca59",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd29c0c-485e-47dd-b333-63980361f625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daf4ffb5-8d81-4dc8-941a-50fb2c86716a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e35e2a34-4f27-4b8e-af46-2d500287c0b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "751ea635-aac2-4f45-8300-252278606805",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28e0386-4a93-4d0e-ba9d-0a4058745080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b1b920a-683a-422b-a64a-677fd0781162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d46a609-4b61-449c-a5ec-a214d59656c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d46a3a-a172-4fea-845c-375645582e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2504abd1-3a79-42bb-a575-9bdb0807ff6f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0d9fea-4beb-4d98-b51f-bb875ad4d5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a53f954-70d3-418a-aa64-41ab2adca3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe815bd-6fe4-40ad-b551-acf4639b0fee",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8d7dd933-72c8-46ed-87dc-186d53358c84"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5981ea52-5974-4d5d-b147-516e1d4917dc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9a1fb5a7-0b45-4b37-bc60-c4183d17f0e2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e9c6e1b-380e-4371-957f-469a96baee43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4a050af4-919a-4b61-a9ef-7c44de996776"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cbb225f-eab9-4c35-bc54-35169414006e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "03fdf470-86b4-4737-b1b6-30a3918529ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cfca48d-adb5-4097-99b1-b86e98acd26e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e825b0b9-90a0-4d28-921c-29310b205d54"
            }
          }
        ]
      },
      {
        "id": "d31ca587-b242-40f1-aea5-3b19154e982c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "74f53ac6-1c6e-4350-a3fd-78ee770dcbca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d1d872b-e503-4bd3-a113-1bd489ec15e2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7d49a04c-fcb2-470c-b884-c8c49590e6aa",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c0fb04-2248-44b6-9c36-a5eb45dad56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b10ce57-d27f-42f6-9be5-ed7f8ba8a567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10af131c-47a7-4dc7-a0bc-209f13794741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1fb3de1-0ba5-4321-b228-413f4a6bc16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d57fc0-968e-4d66-8a34-b0cf187a78e4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf35957-b2b3-4195-a673-c85f7cd6630a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee9ae70-a854-444b-810e-88a751833901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95833ec6-4402-48de-82e1-6a7ac723a638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ce6eee6-9581-499b-9b4b-0f245a647500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93006097-0beb-4eb9-8c6d-a1fe6f404c62",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3acf65b-164b-4241-8b85-736c461f4110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4844c2-fa4d-4a5f-be69-123f7bfa721e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292becac-989a-480d-a944-0a25c2f142b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aff6e17-a66a-47ba-9cd6-99ff8b4c1551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14d1897-e92e-4eb5-a7b1-858fb00a0dcb",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97118779-88c0-4248-ba14-82c9f9a8d747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7398032-0a1d-4b3b-9776-fb3f9bd46347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534620cb-5a04-476a-a4ad-d9f7729b794c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5286fa12-4e2f-40be-98ff-12b7f670a848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d88085-24e8-4da7-a8ec-233ed001386b",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e051209e-4cca-47e8-b3f1-691adcec5a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3365cf24-a7f1-4b3e-bf9c-fbe44387e304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919bdbbc-b57a-4b27-ad8c-bf19a9b2af7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c58cf6a9-b1e5-44cc-bd6e-24cacc8cddcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2044c1-f587-4744-8a8c-509d73c3ebd7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17410241-b502-424e-a69b-1b4c64dbe22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99984cef-f121-454a-a972-0c4dccf8a7e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d91aa2c-3235-4801-852c-ac9683feb525",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b0fbdc9-0cf0-4326-a5d0-a620cd28e69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e500b7de-9d57-4497-9df9-b0812709ddc7",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfca704-f96f-44f2-8e6a-229a1fd04a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ec7049-43b5-482e-8bb3-b0d6c088e66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e3774c-dc26-4ff7-804b-8a245737b905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9637ff84-093d-410c-974b-f0f6c9636b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991687d9-ec58-4977-ba77-1f26eb1ee3c1",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728df3d2-b87b-42ea-9e11-cb376e25f5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0496ac5d-6ece-4192-8388-bf1ac32a4905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cb3f93-2c2f-4a41-92e0-430704faa6df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c7ce235-55de-4793-80fe-f59de25451cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a683c509-c684-48d9-8ec5-beab1bb6bc13",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a03de3-dc34-4e5f-b376-e8d892ff1f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29c863a-1b7f-4afc-903c-6b28c79074ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8b8d84-e5f4-4f7d-9aa9-a3d314f16a83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9600c620-d041-41f2-91b7-fde99f51fd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe1f870-9a0a-4500-9317-54210edb604d",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86086386-b636-44b9-a489-059f906a7058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ae3ae9-7ca9-4218-a9d4-d5bf55313f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7236bfdb-219f-4899-9341-8a20d08124b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98ccfa99-e535-4bf9-ae07-0302d06985d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54491b1b-bbd5-4422-b00b-8b237693b8eb",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ed3ac5-eb6e-4c01-95ee-5eaaabd2cf77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856cf9c5-ac2b-4ec0-80db-0ff9d67772d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a26230d-2c68-47d7-b28d-049d19b1e5ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8e9f57dd-b06c-46d4-bcab-8dbd2329a7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f437ac-14ff-4481-8502-32fbc9abb7b8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea02c466-229c-4ad9-85de-3ce2b832d79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e17ad0e4-1663-43f7-a8df-59e7940b8030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216b86fa-8468-44f3-89bc-c89508f16ff0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "209efbc8-1816-427d-9a26-40d336f4430e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e054188-3d65-476f-b1be-01f00bf0fd2c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb0f122-5cbf-42c1-99dc-022149ea9396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4aea8a-4263-40e2-af0c-6c491c5e29fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0172085f-d126-4133-8b5d-42bb45be3595",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0af13678-e2e6-43e6-be98-0d4e212f67cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc8a06e-2622-4e66-9460-08eecf8d76e6",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d7b476-eba9-49b5-bd82-65f6f16b8233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76873a0-d2b3-40df-b1d7-0de2e3483f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78db2b1-c3fa-425f-90a8-805a83bfc7ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "306adae3-8e74-419a-8c79-731a805a1b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5667399-3992-4fba-8fb0-19115a2fdafd",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388cb25b-ce17-4807-9f9c-331e4f1396ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84bfd175-c7e2-4390-bb34-238fe3babcff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b6792d-7e16-4365-be52-f186f12ab54a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "3f08279f-9184-40d4-a52e-a95bf202082f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86146c8a-0005-453c-816d-1aa7c9d1c0a2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a073446e-4246-4a3d-b521-760109eb8f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb6cc07-f08b-4503-bcf8-b31145da871b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c17792c-8682-47ba-be78-441ddf32252d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8a54af24-6e6a-40a4-9337-c5d9c7d2735b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5504ea1-5f95-4d80-87a1-79694a61f7e4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4f3457-4b58-4333-a1fd-1a50fd53dbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc559cd-75ff-40f5-bde6-36a622cdcfb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442d0458-3719-4532-ba2c-1cb3a978c823",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5ff5b7a-695f-46d6-950a-cf748891300c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35694796-1002-4039-a702-cf6ef4b63233",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdd22ad-82a6-4139-a96c-a74262d5cb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5231d1de-4a73-4f18-9071-4a843d284c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b3d4c4-92a5-4b97-ac80-d43d2700a2c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "892b63dd-b7d8-4527-99b0-0304b5ef684d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc63903-34bb-4396-894e-e1c08fc7270c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f4b8f8-7167-4537-a388-1b290aa871f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd698289-ab02-4884-94bb-01820e5f2050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2305c2f6-fbbd-414c-90c0-fdcc0cfe6743",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "088d80ac-f305-410d-a5ab-3ca6fe4ea6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1944fd-91e2-4566-b1a0-38bddff45cbb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d18bf9-743d-41b1-b863-b6601356b832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23316a5e-953f-49fc-a02b-a5a7da5fa86f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdeb3270-aa27-4671-9427-e036a6cb1690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bab6569b-51e9-4709-9f3c-2457cacad838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b46ecd6-0f49-4b3a-b915-2685f963c37c",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1661eec-3ed2-4baa-8023-f801872f01a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9af976-4f7b-4adf-bb35-3c65d041d2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8258fc-56dd-4422-bfe1-7b82d8c3498e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4b0fd9b-1bea-4489-bddb-cf0dbe918bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37dc6164-2d30-46b9-9679-b531853c05dc",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9f778d-08d2-49dd-bc5a-32e8fb6bb83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f52d366-7984-4531-b2d8-da8df3071fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3deee7-4953-4906-aa5d-e060728b4bb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28f74645-a3ef-4e51-aadf-06ddaba7129b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb333b5f-273b-4bbf-a23d-c35a6ca166e4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d532fb-6ec5-47bf-b58f-775d547d0f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c9462c-0b2f-4d62-917c-cdd92d9f3c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5314d4d-3c56-4f93-9a1a-c199e60feb4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "706d2466-ff2b-4246-b1a6-54776c6add2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5946fe0-3941-45a1-ba94-e15c062b9f16",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d2e5bc-d5db-478c-a0e8-ad3034b7c71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09193e38-4a23-4b9a-a103-e498f423d1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b466e4-2250-4958-b8c4-90ee0eac4ab8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80f4c7b2-48f5-43aa-b9de-a73ccc8e7b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d3e7e9-1d99-431b-8a6d-2838050d6e47",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a75e5e2-19e2-41a2-9cd6-2ac50bbbb926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa04652-c17c-4381-bf43-ec85a4d5b0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f19266-c65e-4ab1-ac74-42573bb0d1be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ad27be8-1e34-4a02-a98a-6f288895d7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97cfd4c-0e15-4ab4-a2e7-7b79735473da",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43458bc-5ef7-4d57-bc15-e4285489194a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425837b0-aa49-4a41-a209-6bc85bd8962a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5988cd2-b95e-459b-9b97-06ae9dbcc522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9f52bb9-c403-4ae2-ac75-74139fa6210e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf124c41-a0f6-4cab-b19d-fa1f4cfa7c83",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8ff167-9458-47e6-93a0-0a9b1adc6bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0d0583-8bc0-4b96-8cd0-74841c45efa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c1fa89-df9d-4b98-8450-ad2088d0a79d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee2c122-6430-4c2f-8eba-0bd12e0451bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3398887c-a847-4dfb-af4a-b5d6c29e42f7",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b88d43b-c98e-4526-af0f-6f0b727869e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98266de0-ef48-4af0-8e54-401b93f76110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408ca8fc-1753-4582-a0b0-d2ed637e4198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0f9b35a-bf9f-41ff-9871-694ce1c34b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabc06da-f4bd-4e28-8e5a-8cd909ea8ad0",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff7e8d5-b0ef-43a1-a071-d4a0db6131da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5219362-721c-47ed-9b41-278d0db2dfa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160d2beb-1f25-4195-85e8-374edfdf4e43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5343c63a-4a82-4a8e-a8b2-f1225a4d7b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046845e0-e4e3-4e42-a4c9-80439a5952d5",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b32d90-7038-421b-8f5f-a6e44f1fea48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0958a5-149a-403e-ac5e-83b0a45b6064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6270a684-a8dd-4fe0-b322-2a45ac82e655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22f56901-2f58-4f8e-b3d4-10260603605d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60aa34a6-c914-45d2-a625-2c37c3ddf23b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641c3e0d-4396-46f0-a781-609c2d623b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "56bc5ed1-60ba-45ad-8d6d-4f50047b9de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4d1402-f45e-4cd5-8bf5-bd3c8910be80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ede7680-a135-496f-9011-94b8dcf9b4f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1b23716c-0943-4c42-8ba3-7ae599d8dbc2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "782dc095-d228-47a4-ac33-69c3bdb7466b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5e906a-1f1a-4f2b-bfbb-f71a62b7b7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d9c786a-c33d-46aa-bba4-46ba8c3675aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555fba50-087a-428a-98f0-779344e43ff5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "48a683da-2f61-41dd-a330-ee9ac024aaf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2047e7bb-075f-4133-be75-f50d37ea5ba1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe32ebb-e225-47bc-a8b1-af6488031410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a79a3b6f-e068-48e6-97c0-96c7f6f56d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713ee211-aafd-4b1d-a75e-25238355e0e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f0d00a33-6e72-4eee-b9f0-3400f57018e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "775b9bd2-c5da-41e3-8985-a0dd7ecc942e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7a66371-035a-4c63-8156-409615cddb42"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5df8773e-81f9-4877-a1aa-d7733a87f5c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9dd414b2-5623-4f6a-9695-aefa685c9d54"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96b64430-60dc-424f-bc77-7685ab360d69",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62876c93-7514-45eb-b61c-36961bcd75ea"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "81b11266-0624-44bc-ba53-715fcb029b6f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e97af099-7559-4fac-8066-b2fbc3efb810"
                }
              }
            ]
          },
          {
            "id": "4e4c76d3-e4e6-4b19-963f-93cf4436d0a1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e54ef596-a958-48e5-97af-b3adce0b5478",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5c65cde-e7bd-477e-a73d-5ef7f353b9c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e8d0598-01a4-4449-b813-51f343b3f8a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b88d197-f164-454c-b4be-57ec779a3661",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8fe54894-10dc-4588-867e-08fef52182d1"
                    }
                  }
                ]
              },
              {
                "id": "34328416-1609-400d-8b91-1c4639f533ae",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a99acde7-7d17-44d2-92c6-ef9c6753980e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d834ccb-7341-42f5-9b57-aeb4c1a000e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "408f99cc-63b8-4815-b5fd-4670236c2028",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "eb1852b4-1a5a-4047-a913-5ee5e93af398"
                    }
                  }
                ]
              },
              {
                "id": "9430e29c-908a-414e-897e-77e53bd53c7a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a5c5201-8c6b-4c66-b6dc-7f4d5e4963bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d93499b4-f1c6-4ec6-8a4e-d6b9b7022cfc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "893541fd-27c6-4b76-be79-2f251d3138b7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7cde6b0c-c7c3-488a-89c4-ce0f56381255"
                    }
                  }
                ]
              },
              {
                "id": "1d6ed39a-1150-4232-8fec-e505bc72953d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e56dadb-2964-4459-ad51-3fa7ba21a3a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a6bd605-1cb5-48d7-b3d3-49132505ed5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9414ee1-d8fc-43d8-a854-9ba756ea9e67",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a0e80df9-f458-4f8f-a74f-00980ccc6eba"
                    }
                  }
                ]
              },
              {
                "id": "1392185e-69e0-4a9a-80d8-4a353ddcb6a9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe6a994e-52d2-4006-bdad-ec103337fdfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ab769d8-990f-4db3-ac30-d802ef9ae4f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c4a666b-65dd-4e66-8f88-047b1e1a1387",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e0ff34a2-934c-46a5-a204-32d78773ae9b"
                    }
                  }
                ]
              },
              {
                "id": "bd028fe1-34e3-4afe-bb2f-2df13bce240d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7a48d5d-e79c-48a1-a1f5-df4f93755c9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4434473-c69b-41fe-bcd6-13360f0d5359"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c095e07a-e495-4f4f-865d-50d8c585648e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "bf983d2c-38e5-4d41-a092-9b9419c8253d"
                    }
                  }
                ]
              },
              {
                "id": "736f5d9b-7054-4d96-afe0-acd597a05042",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9864e1cc-5a1b-4ba4-a920-08b68316b004",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6944ee0-995b-4bc7-81cc-964092170805"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "582f38c5-df10-45d2-bd89-dc492051c74e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "70503a64-f97a-40a6-b77a-f2a9ca196927"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9157daa-4aac-4d32-818d-4ab29195486c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b43b96ab-e309-48d5-b375-4a351262730f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d8d14b8c-23c3-4eba-8065-7e6e3db40840",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14a491c2-97c7-47be-b330-2bcd2699a2c4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "841a1c40-c461-4bdd-b56c-19b14a0b3907",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "848a7f85-59c1-49c6-b623-16e5abdb8756"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bab5bb85-ae02-4028-b1e2-a3bb2289ad99",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "762781e6-d00a-4dc8-bb32-13573aea6dba"
            }
          }
        ]
      },
      {
        "id": "3e0d4108-4af6-45ce-8186-f0702a254319",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "663c340e-6890-4629-b153-239d14310786",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e29bd6aa-6e83-4e03-b239-0b9657d39bd3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db39a4f2-23ad-461d-a036-04e0c84618d3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fed9661-3881-4231-b2e2-820883c2ce2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad631f4-d778-4ae9-88f8-dd651c94cded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3770d29a-0be6-4445-96c1-6c0855bc2847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7185e095-4d7c-4ce2-82ab-785a679b32c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492d7174-918e-4128-8e75-49607a809662",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9308f7-64b5-49b5-8297-e2a30abbc762",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "96535e9b-99fb-423d-af51-80a500888d13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7c23d5-e336-47b9-872d-a31c2f0ec0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef606c30-c2e7-41bd-94a9-0c8400f4ea70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cb818cc-3ba8-45b3-a652-2ef19aad6998",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9896f9f-3718-45c3-b0e3-2325980dc2ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "233d05f8-d275-434f-8e19-1fcc1100ffbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9994c35-8028-46b2-92ac-02aed8d2e25b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0883658-a0d8-43a0-8ec2-071aa86b2f95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "8ab76862-ee18-4d51-9ac6-5cf585fb3759"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd6b4853-a55f-4632-8e5e-79150d872cfc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0be5cd64-3885-48db-956d-be85978abeb6"
            }
          }
        ]
      },
      {
        "id": "42d96527-8e2d-4356-ac9d-29aa631a3db8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "189a60c0-df5e-4673-954a-75fd021007ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f9f5894-e564-4756-9e0b-6a21867ee219",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9002307e-6bac-4e08-b653-a635206d4f02",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c133416-a723-435b-9bc8-9cb64c55810b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c913ade-ca50-4d7d-b305-2443d192112c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9c6cf2-2ac0-4770-80c4-37f952937a2d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906be83c-ae8b-4711-a776-3ad35925bdfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "622c2c59-c60e-4cd3-9a71-9ea5e14f1ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a7d77e-189f-4d35-b976-fd7e44ae5feb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f18ff57-69e6-4502-ba48-90e385f826ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb2a109-4d05-42e6-83d5-3e0d8d9c19bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cdc33b7-5f92-486e-9d65-b3773414abd2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2df0b2-91e1-46e7-9b51-b7f73612d5d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03851828-52f7-48f5-8a4d-05bf2630eb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7027b23c-92ed-495b-8408-7af4f49dedf1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7da1890-35c2-4b74-877b-431cb79abafb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63363941-13a9-43a2-81c0-4f5221c495dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd1f690-b9a1-4bfa-85ad-e1a0e29ecca5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bfc956-9f3f-41d4-abc9-0c58e657b4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10486815-febe-4d08-a892-5e5876e914e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08181acd-4158-448c-9ccf-bbbcb331f9f9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a636e64c-4e46-4b03-81d1-d97add000e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9cbced-47e3-4ee4-ba9c-185700772cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6819383a-0f3e-4546-ad0b-2a3f0ba76cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3935ee2-3ca4-497a-a170-b828bba6fa79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbb0579-5fae-4e69-b868-9a4ebcc7b6b7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab559358-36bc-497a-861e-1a82f8b88105",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4c67cfa-c2c4-4f3f-a62c-b4dc6333f040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "833e94b5-eb41-4102-bfb1-62c35bc6060a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5d9009-e010-4939-a669-a5f493e6e1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d68d0f-3382-4224-afee-404abfe7acfa",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418c29be-f8cc-45c3-b717-f0829b7b98d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89f76cae-6580-47a8-9a55-2320a0f3fbb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422234a8-8c92-4ec0-81b6-69fe977ae271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2d751c-7c12-4819-b7b1-34047333d037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af902199-0db2-4155-98ee-6d1873ba5ce2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa5658a-1619-43c5-a9ac-502e20041b94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2f74b14-1224-4a60-8f04-b965df08d958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "794b5ea1-3a22-4de7-89b0-d7343b0d1025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c4993a-5406-4d7c-810c-9f86db49b1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb38067-8c37-4657-afcf-3ab0085fa5f6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..RJunbl8K6pk5JyKv0VkmdJT4I8sfatEPdbup0RAYKU6F1fDvEZ8j0xFlr1ocpNQGIi4H5cufTCRE3Fi45ZQ-CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c746322-139d-4a33-8e39-de2046c7487e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10471357-b148-4848-8c51-8ca50d89e536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1d646b-9ef0-4cb8-8f88-3633134c3e65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5f5b0e-dbb6-48ff-8fb8-6ae1e062e915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57adb790-9456-4e61-8022-687bb4a5c8fc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e739c58-bc3d-4105-b24f-fa66f6f553c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d51d0b9-4e5c-4041-887d-71b34b231f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7bd0f1-5dac-4cf1-8d48-97e0d5412829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462b7251-2db3-43fd-96d3-b2e1deed3f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7ed654-3beb-4169-8ba5-1a4ce65a8d74",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1103298-abbc-463b-8f49-b866c09200de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f06d2d2-d999-404f-965d-40cdef4a2074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb910e4-1d98-4048-92d6-6b056189c785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f88843c3-1636-4e01-8652-0431e4f23baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e13615-b587-47fd-a2ab-eac67a82abf7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e40b662-10b2-4913-9fd1-5c155473ad4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebba2167-2e31-43a9-83be-90817b8dc88b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7deee7-b257-4dcd-9d90-7f66a1a164ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183f0e28-0628-4a11-8b71-5b3a6e8f1d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20c2f09-d888-4ee0-aa85-13242377df6f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81bdbd2-e854-4352-8192-eee2a535de73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8ccd939-1a3d-4e13-9ae6-458bd61bd059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af430600-23ee-4398-9ba2-8200417b63f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d070e7-af5c-4938-8b44-ef10677da623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a9f4a6-a320-402e-a569-9fbb8b87f7ee",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6f0f2d-d8b0-4148-932a-d55388c9f196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b948f44-c3cb-4ede-b503-36f5706b6645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4cbb6f-dccb-4a88-991a-2697e79a0ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d879fbf3-1be0-467a-a115-dfeb0cb28f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f405d9bb-905f-4c0a-a0d2-92cef65ce98c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472887d8-fa0a-4198-bc0c-e6d82ccd841c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2d9316-bad9-477c-b1b3-6931f7f61086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71a76aa-92e7-4702-abe2-3e2a2a7e7c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec35bfa-03ac-4bce-8865-60bb9d716a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4020abaa-b06b-4de8-9808-6e828493bd2a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..CaZ2UcTNDOTCXaDXAclLPy7_3rpuf2sbL5xwaMnN2abolieE_C7fB7RsmZ7i5_6CoKRhGnrM3_YkAms8IlObCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b3a472-49e1-4091-bf59-2f882c37516e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3678bd-7baf-4390-9d5a-e53936ad468c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d06664-32d1-428b-a2ba-2e8261f9a629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81def71-2bc3-41e6-836a-31d51ef8dfb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9e8778-3c71-48f3-b92a-9dc8e4e23fb2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..yonwdW7r7YFAAjZZxjVrYPkLVrbLR5TMZ3bkWN1uo2UbUi5tgtlikoyyHlj8QD0MPA7xd4Jv-1PlryIVOqtUCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc2a182-46d3-4bb4-9644-8b6ef9f252a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87cd9446-d08b-4131-9f88-86ba938decf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceccd542-23be-4c9c-9beb-57860a4a3665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "015bc01c-6852-4900-8915-de0b59ae386e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d60142d-8c0a-41a5-9bc6-5bdf09f16d26",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TRCl90uRMmkycDvfeHw1S7yxyAVl1-Vc2SfwwDzXkn1SqfCJxptwVsgJWwr3gQRAqveZR0xrxQczy4tWHq2FDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ebe434-10e6-4585-ac9d-03787ba375c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b92c47-132b-42ea-95ae-d7c9a9495c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ded246-b2cd-49af-8641-bbe9e6954104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a474adf1-41d9-4608-8cd6-bc5d788a3aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680f2b12-0ff4-4f0c-b840-332cd3ce140a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3eb084c-0dfa-4991-89d4-78bbe109bea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d833306-7412-4426-8dbf-15e092e6cbff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "429ae8b5-bfd6-44f2-bb6f-790a0b18850d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef750b9-2d68-490e-a13b-8dd1f333685f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e034bf-7de0-46db-98b7-72d20283537e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ymo0kNnQ9mVHr1RKpfCuR_ekUAXzNEM7stSEtbbFv4ZPZb6NK7kUBkckgwrZyBp8re9RQEedJ9yiyfzTL41dCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e1c9ce-2b1c-4a92-8fe5-b0e5502af1fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58929d87-54b5-4c17-b631-646891b11d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2459993-3be7-4393-a480-e7c54f7ee035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70563441-3da5-4718-9e04-307efa4a4120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713383b9-c86d-4c73-9826-45c8e6ed6a8c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2e531a-6bcb-4988-a1f9-772ce1d3d797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eaa2fd1-f0a6-4224-9306-ffcb5bf590e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9d23ef-a586-418c-be6a-538a58c5c545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f0773e-b021-406d-b95f-eeb204ae0bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211752e7-168d-4fd5-a102-3f7c443e92f7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94a631f-745c-4391-9748-dcca42ce9dea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "806a14c4-005c-4a97-aaa1-c52d6c02f99b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd821ed7-fd0d-43f8-99a3-44b4b62e8ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2396d78-2d36-4adb-8bcf-c3f8e35f29aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b7aebb-03d6-4ba8-948d-e0bdb0cff3e5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef90d45-f488-4c53-b510-34b775ce38d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0059d04-93c0-4508-8e34-54355f598104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7ef7b1-f667-493a-97ef-18fd80ef81dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc671d6-bca8-403b-adf3-d11b3785733d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b7c031-92ae-4149-8f2b-f141241882c0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27a9941-cebf-4b38-be5d-f828acf364bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de972866-b2b2-4b75-b253-f587fef5608d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a9eb3e-94a2-42a0-882c-2bea00224af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c7e0bb-c833-4fa5-b4c9-61622d831ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83baf74-ecf9-45ba-967d-8d31aa6d78bc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e799b0a-fa35-46aa-8ac3-f5dfe3cff0fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d49c65c-9c4f-4174-a7e2-69d31dcba7dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2717839f-fc1e-4688-811f-bd6b1a003c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c419433-420d-4fc5-9040-426f9de84c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e1222c-869e-4f82-a065-a88b109e6796",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f945b32-ae66-4986-8282-e8c3f5c5ca5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7b37dd-7e1e-42bf-98a0-dbdd721967c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d635e4-ca47-4dad-914d-82c3137b4d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0da860-3799-4f6c-97ba-c135dc36b8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe4ecd8-171a-4a0f-9262-6546020666b3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40dfc9e-cd30-47e8-bdbd-d9a12eb49ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8a2ac59-73dc-46a9-8692-ea32d5bfb1d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a49712-14ca-4f24-b489-d941d2608e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2a9d47-e503-4053-92ad-4b57153cb872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22479d99-db66-4049-a452-1089573ba79d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ab8de8-c697-4666-9d27-9aaa6cfb8414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "534be43b-7eef-4e41-8d3d-4e48d80583d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6990f720-5808-4a9c-912b-6dde8e5a14f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40dc8ad-0ccc-436d-ae41-77b5d125d391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b4840e-c29a-4ea4-9519-d5c0926737a0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90a577a-7c2d-4005-b8cb-616379648dc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1e15164-a52e-44eb-a7cf-5870fa845273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c83c02-0f41-4905-8a3c-1f76cbfcb0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406fbf56-659c-4f34-8b86-e8733c1b84a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ce4486-4e17-4c5a-aefe-3b76f074ca09",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e3ccf9-707b-4883-8771-6fef4af1961c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4467f2e-5c81-48fd-9f1a-acd47a7dda7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0c277d-0fd7-4776-a07d-3affe133111a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a5aeab-8dbe-4061-b88c-56944b151de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1591e739-7207-435b-85fb-f3e89baf8d7f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36eaa12-52b3-4c9b-9c67-76556a678844",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02aa1abb-5ecb-4a76-9b4e-5846dd563702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16617c36-3514-440e-a77b-658395f892ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9609e6cc-5bf7-4cce-a432-df80baa4d76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547de86d-41e1-4258-9c3f-947cc3f54289",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88554282-a9b3-4420-aecf-7ab88d81071b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1f6a4fb-f92f-4c77-bf4b-db99a7efb2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02726111-82a8-4bb3-ad8b-822e11ed7729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6536f292-d316-4a63-a3ab-156f0ffae3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f25791-f00a-4db6-8dd0-5d27727e8fe9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bgY03ZzK02APUHCDiqUVMYbbvu4mSPNC1sGY3lTC8ko7j5oZDB4rB8FRzsXCc9L0O4nHx4UNJURCsRZUErbRCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924734c6-d3b2-4513-840b-eccd3ea73f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b789e201-c91f-4300-9176-6a278fa351b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff89f46-b20f-4c56-b156-ff2e2973a253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a2656d-8334-4c3c-ba85-dc4fce6bd9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acba20c-3f3e-4a26-ab89-f83a52a459c9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..2Mu6q2PaIBjmfXHqLuT7XIFthDHboV4bdlIdLFY9KxapUXic6uhoefYFrarss-AN_5dUHdjWnHEMCoWYjW4MAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbb9cd9-02d3-469b-82e8-44d66ab9dd39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9f30b8-5fab-4ecc-b502-a0561dc4c183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089f7f4b-4a97-4ad3-8f14-f6cc179a8928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5644006-b298-4dd6-970b-fcd753b64c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d95ffaa-cc18-499a-af59-8b9c8b494efd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..L3RWLJfQzaffmRy3vXZF_7gfdlR-iQbA_8TjGFaBCmaOqm8R7Qi0B6JivEqshh8MZWufDitgO-r6ASk2iaGVDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b6dffc-c24f-4e0a-a6b3-4408a664de8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a454e0fb-a2c0-42bf-88da-1a04d398de9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e137dfa-7ca6-4379-9a33-84befd7b0f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769492cb-843e-4244-908f-78b16ce7557f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fe0a0a-5bb7-48ac-b58f-027e5d90e7d3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e2e02c-7212-4d99-9d7b-2128cbd97839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68377282-055d-47fc-8bec-96a521c94b4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7b8f17-97d0-4a7d-b609-fccf03b3e62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e748f9ec-ac24-47bc-bbe1-96cfb8c1ea36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558864ea-09a3-4a6d-8e93-25eb2db9996b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa7df6d-a71a-4b3e-9426-269ee82996e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827fc876-454c-4f16-9ca0-ec039182c0ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a8b213-d2c0-4ffe-b367-df8774e859cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d832a87-0bed-4cbf-8bd5-35dcfdc239c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966f662e-d3a5-4881-bc70-809d4eeb421e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..E4WypAOLo4KNTnvHucei_9yLEMdlq_UwhS7mexlp5i3hF8SfBAlLv2scHANd3Ikhtqr9JIyaXuDnIN2LsaVFCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992c94f6-8cd4-46e2-a2d2-dd90457070ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5abf21-2e5c-4c3d-affb-c801a6f0dc6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7cda0c2-957e-4b9a-a8c0-ba39c4576bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f867e4-3e70-4dae-9c73-e884daccb9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbda071-8e65-477a-9893-6242c1288c44",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rnEgkKo3EQPiGixl67oPIFuZ7H9zueq0ELswP2p_FdahgJooIojScCnp-AcxeC_G6YDtLUbsNlVy0SkDvTnwBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcab61df-6303-4573-814d-9ef489260dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859e68de-715b-40d6-8cc2-bbd3bb6a14a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76213e22-109a-41ac-a7b0-f17db4d55f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e8d9b7-1947-4516-bca7-0c4ba0f2261c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55c84d9-d997-427e-b6c3-f6d4ebc2d903",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..nK8J_eHLw18__7Byp9ohgpDCHY1-Wfpw8vk-8k-nw4ezzjlwYoYjbo9x_xx3ES0WY0aCN2Xr9SbRoZHr78P0CQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16372f1-92f4-48ba-82ef-75ae42f602bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f085e0f7-e2a4-4b42-8507-c54d045b0f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c409c4-3f59-4b5a-a6ec-82d9676cd169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6797a77-0f19-4144-b308-54aea929ac5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913f5d44-63cc-459b-94f1-8c11e93d04d4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7048013f-68a2-40d8-b910-a16b0a6382b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc80d016-256b-4e76-ae52-1688183ed9ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1066334-005a-4ce6-a7ad-7fe01381f948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d9bc6f-7d99-45f2-9fce-4b1d4453685e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638854fe-f917-419f-8854-15afbec97c19",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GEyy2tqmKf8AzHhXY06veUbSRVk9uoQIu21GZlYtcdMGh-VrTjvfVg2R8DAFtCBe6tEUL4dnsM87mT-20nG5Dg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0706d4-4aea-4881-93de-dae2d533ce35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f44050-fc38-4cba-ab69-095f6aa1e3b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbebdbe1-41ba-4c86-ac6d-ff24672815e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed6cd55b-3a41-4bae-9e29-d32c11baee5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32370b56-09b5-4b73-94e1-951bb5d5c417",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e815026-199b-4075-b023-787d66803672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd480b87-eb39-4aa7-bf32-3a28f39e3304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9454f2b-7c6d-4ee4-be62-9a876d6e904e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f30226-2aa6-42e7-b8f4-8fb26e2bf577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6768124-164d-4359-b7f7-798af67ff9a9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vuVI_mdt7bpVwmKIsmIusWlCbj-wk33p6_FC2COcGBKzh9m5jxydHlDRIM6YoJQJWpS8_EavVFKwQvPuLuwNDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2d91fb-31fc-4ac3-afb4-ec81f76d3da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b71c9fe-bfc8-4fdc-84a7-7e2eb73b4421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb06410f-c25a-46ff-8354-02c6286ab26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b18613-8325-4e25-8fa9-d548597f05af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78691bad-2224-4516-ad6a-47efb355ac6d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jurLQ2KXgTdIxIAB1dwcysrBFVMT95g3Mn2SuyxAubRWS8Rbe-dFsoVG24kxo5wE6EZVYEuES8uHwNX_SSrvBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be64d81-15bf-48da-8f98-e0147df9b8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0cdedd-1fe5-4f14-b803-946ee287857b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb92c7b9-6225-4352-9d3f-02867580f64b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825b6fe6-9d23-4447-9a6e-a3bfb8f75f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432ef227-d1b1-4672-8b33-c590740176c9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..HyTRfrVnRzNCXO3qmmbQnmtXYV_bAdmZg-27bnuBGqQScL87kkmPfY3CpSTLN_8aV72mVBkvy1-uvYhkQotmDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09d681e-3e07-4483-8af1-f0d81e5f9bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bf6015-be63-44c7-9285-c286f88c29e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22d05b9-a9bb-4b9e-a748-8a6cb8b9aeaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111edf2e-4149-42d1-9d44-3b7d881c3dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0245c6b-1b74-4699-99d6-c480af7a3399",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db23d0ab-6870-4cfb-b072-bca99abdec87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15548231-85a2-4c13-8853-c761c56ed5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c178156-1318-4e7a-8723-ad7030333013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de882295-85fc-43d5-87a6-a9a2a51891ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11355e5c-6c6e-4ff6-b461-d70ecf413801",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5NhiK8XqFDY7TB3l0Mli_VAhnflErggK8zlj71jNg6F5WD4eNAVufeVLhK8HtvGaC-7R7nQzQfzkCH9692DUAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d45e5d-6c91-4873-9726-d080654669ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e39590-2dbe-4a6f-9c25-92485b4a9376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef27ed60-a05a-4a41-96b7-927105825e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d32010-6a06-4d55-a7cb-2173c2536f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021b3faa-e9fb-4953-a0b4-e4e7a74888ac",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1phNak29yV9Dt7ljiilV_cD1b78U9dV8Zhwjgrocc4Nahxchof8QHmEAFjfupRQZ71WIBpW-VGUtW-OwUu6eDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f942ea-16a5-496e-b250-9a7f7d6eb4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66edbcfc-abf8-4658-97c9-24e1f2d57755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fb51f8-8af0-4618-a45f-4226b4f8a085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238f0634-7a8c-471f-a54b-b3b981d1cbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e582c2b-63c8-4bac-a232-9a6715f9a6fe",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb29489-9a7b-439d-a1cf-1f49cf21c26f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d61343a6-04f7-4a88-b928-e30fe265aecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cc4017-4ecb-45c1-a568-e3850695ddb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c332f7cf-c321-4518-a7d9-d21d3369b1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de0051d-7ba5-4500-acf4-c16c55e801b9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25eda35e-d4a2-4e3b-873f-54eaf0f3a8bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d068327c-ffa7-45ba-a358-1a91a3f25502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183003df-2dd1-4c7e-ba57-7fcdf83cd9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c0a2b6-f991-4934-a53d-1cb511cb4517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de8472d-7d42-4116-be03-f51505b22b4d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..j1W65DhMkwul7bodXfKrVNsT_27QIFO7rI-8TDk0-ef-wu4PU7OuA8MFAOXfx-HdVf5KdqVu0BB1ITE6WjIXCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff5c86d-5b59-4676-9fa1-30857874b778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ed5354-0425-4cd5-82ee-6f6f9abe4316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5ce9e2-3a33-4f3f-85bf-559af784b954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce17f8e1-67b2-4526-bc5d-d5d53c2fac86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02359cb2-274c-41a7-af7a-febf695ff0a1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Wm4yBzXF87zLmyA0LMEwHSWs-2EfPpdN2yJstmvPJkPVLFdXKUdjh7lZuHNVtTkAMGNT8Wi_RZ5Q1BWAY054Cw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1a1df8-2305-460c-88d1-c9ecff7b9c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99211bd4-5b89-4954-b81d-c03c648324eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0da2bb-895b-4015-87e5-0f629f3f9332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa2c0ebe-ca7d-4596-87c5-67dae53c0f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c52d08-4119-498f-8612-2a4d512568a0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfe4f77-87da-4fb1-a2c3-0a67e23fc44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a36c64e-5113-4163-9d8b-0442efc900df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f231f6-5339-40d4-8859-a47b9bb0ddf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f30c1d9-c1f2-442b-805e-9788bbc893aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719a9248-fe76-480d-b044-42426e486993",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c79b083-9583-4361-86d1-8a632961365b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7badcb81-8dbe-4076-9678-de6dc1a32f9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad5dcf3-880b-44f6-a552-bf7cf72d1e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2866e337-4ca9-453f-b44e-ee869f432584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ba30a5-5eaf-4fc2-a758-5bb26525e2cf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VDVadt3rnBQ7P8dSYyZU5RHdfxVBWz3liR1wKbXbfBuaNT-rJYOoUCLQj-7IQ2elQaB4Fhp2nsgul9ZQmZc1CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d917fc-0d7c-46aa-bb85-2520170f6433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3720cd29-da3d-4013-b52b-16cc2f947be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff67f0a-def4-485d-8e5f-5d50a15ef34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f280d55-5558-43f8-9ab2-1ba13d495f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a3caa4-c41d-4241-84bb-537b413b0cd9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Kz272GRCnCfgHy4D8txIaM1bY5O5vW8iFfQrL2B8a7OnaVTcq6nF-dhqnoMLHPEbrUNzHK7spVAZG05Njl6CDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc9c56b-604f-44d6-be83-2f50b78900f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0aafb98-b4c6-44b0-abc5-a77f8316ad6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf51d774-73ee-4452-90cb-51f7bded7217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e9a0fe-4cc3-4b86-b6d4-9aacc5c554a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946c86bf-16f3-4575-a7e3-d916f08743da",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..P9pVMuK8IN7B38_-uHlTyqAeQFcasIOW06wJWEZDZLPpaeLA4L-S6ee-tZsbGmM0QoSr8WTkbqkhiXpEhuIbAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9ba4cc-c04d-480f-a00a-7a581a1f9238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e8fbf0-bfe0-43df-8374-d7072f526e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c03679b-7004-4640-bc2e-d2d50c141ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "804575df-c792-4851-b476-860c86e9b2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e945d7-4449-4561-8bb9-cc0c1e35df3b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rdlyOsz8ZwKwD5_CacS7c9iPQnRUIywCc_sHdyJlADD9Cq4cRwRw0wwJ7OZtLDylbm512V0s3Cn69i1qMWc8Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79508556-0e74-4b26-9c81-9cb7ffc4425a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10714ba-1cd0-4af4-8628-da7a7dfffc13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcd0933-c519-4cd9-9f8c-a3b4d29328a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3398ea-61da-4f18-9ba0-b805a0bf44de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621b4391-d0bc-4974-a44f-c94ec3994e18",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YXI2e8nVY98qybXn64g4bOG063TH6yjKFmSF9gRq0MtX3q3cex1t5ayc38JjZSBEgoJTKQzUTbL71FOukoNrAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7049b9c4-6cb5-4d39-a9f7-88da4a2160ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ef2217-57d0-4b7c-a335-611a35841c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef94e8d5-714a-4d08-9a99-3b6c5f94780f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d308eea3-0d9a-42f0-8830-f31e1b01f472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbb89f5-7160-47be-b22b-41d02a54110b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba0a6da-ecff-443e-ba1a-983684ad3a01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a3b1a0a-990e-4903-9b11-e0321ba3b228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6757cbfc-30c1-4514-86bb-e12a94837811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97353e0d-4bec-4547-964d-a19b8514a05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4012d4c8-1b89-4b3f-b41d-1b6649feb52d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a5f51b-1447-4371-80c3-c1a6dc1f243c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00c53e4e-8739-488f-936b-4fc93aa11f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a0195f-d9e2-4866-b098-52228120d6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f634305f-28da-4fe4-8651-568bbcb32f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ad3091-2882-4378-bd05-a889ac8de02c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f7a12c-8dae-4845-a3bf-96ecc8583719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5c44688-1709-49ca-ba58-ce10e47f832d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "987e4f77-72fc-4860-bf60-ee356e448d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d566aa48-894e-457e-99da-10de1d4d3595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faec8b7f-8cac-4d30-b898-ab533303a0e6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6843a56a-0f5d-4c02-a5e3-f20dea2bc147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "300084ec-7690-49e9-8c04-a98c025ae631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b68337-5abc-4087-9dec-82d92e2fef69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1460e27-eaed-456d-9a13-d6e8d52a302d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2bfe82-2f9e-4a0a-bc68-875cd0421826",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009f92c0-db60-4ebb-89b9-01c4beed3459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd2d3ec2-3f3e-416b-b196-8f7fd9e49a82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "458d4db2-671d-4bb1-9bc0-fbe516190256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3491f2f-76c8-44c7-9995-0190ac1d76ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a065a8a-bfe9-4448-a28c-f54ddb196012",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258b1053-e6eb-45eb-a9f8-6762ea22e5d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e631108-4fe9-4532-87ef-5493f2c819d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5269f2-c60a-4262-8f62-c7e650043c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c74ad361-cfd3-43be-905a-46636fd1606a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4598e332-b150-4d2b-9c03-a8898e55bba2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0dcafdf-31b4-48ac-8a81-cd047a29856c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c720785-fd11-4026-b37b-0dbd6f65b904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c07780-7de8-4843-8af1-729b5c202aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59efe7f6-1043-4596-bec5-5f82cf7c9d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7754cdae-0695-4d44-b06b-5d7a05be8eac",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5b7d6a-2446-4574-abe3-670bb6057395",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11c6eab7-0d4a-45aa-a348-3a7382f2f073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702352d0-5122-403a-8880-55331fe6b72d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9eadc2-5c9f-4c0a-9b84-9094459ac5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecd3163-3dac-4acb-83b9-f03d4d43cb18",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62253776-ac69-4755-a488-f82e9dd2fafd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "198a955e-7848-4c0e-8696-2d5348905471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd7235d-7d9d-4e73-ae4e-db3c2c3aa144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "118fbc82-15d4-4469-9671-c8e6707551c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b58074-cd56-47dc-84e1-5a8962bf5e45",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b190872-02f6-40c1-8a4f-dd663248cb97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "294ec15b-641b-435d-8bdc-59415783346f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "073d9462-c817-42ab-9def-ccf0485b3af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1bd4ec-895d-446a-b2b7-07c6a16940ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f638ff-9f10-4000-9835-e4eaf27f3396",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1642afe-b774-423a-81eb-2ddf952ed3b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53c83846-1e6f-43fb-a312-0b4512b0d22b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffe865d-49d0-494d-ae86-1b6ffea09fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d8266b-6f7d-410a-8fe3-39db9229eaf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56c6a71-8a3b-483f-966a-558c9c5c0e2f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068cb1ca-ec68-4499-a8f8-0c60d7871f6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4d8d170-eb44-4e6c-bdd7-d5c50eba7911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc3539d-35cc-4473-bfa9-9630bc04b41b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e0bb59-de7d-48ec-8ef0-9817bfc9f559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f958600d-997c-4793-a09e-0270fe0af21b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84d9c62-bef3-419e-9fb3-60459537548b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93b4c8dd-4ecb-4c2b-b8b6-903427c4e3db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fe17bf-8cf8-43f8-8412-989734b48932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a980b04-a5be-4398-885e-9ea4f1aabaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66821aee-0496-4ed2-8535-b6cd7c778c12",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07fe839f-0507-4bf9-9d93-90e593979afb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2afdd503-1428-4d98-be74-9f86e161d70f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf91ddd-5ea4-4853-966c-a3d240ca2800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc7f178-eee6-4df5-b691-83ff2574763e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0965881e-e48a-4aa4-a170-67c85d7638cb",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201b67f5-5a4e-4bd6-89f3-1412003c0be1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "442fbd1e-c604-461b-8d28-37c245b34815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d8bc17-52be-4bc1-9bcf-593877c76103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b04d93-231e-45b9-91d8-3b293cd726c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b248cd-ec21-459c-91f4-b9ad99f94554",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf4fa2b-a101-4a19-a517-fbf2ee03739e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "949e8066-0739-4a88-856b-75be63352af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a878705-37f1-4dd3-a564-7fe722f9c7d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d6c4ca-b9a1-4ddf-8385-733d052d96be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a9911e-909c-4e53-b80c-fb24e1ccec5f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a754637b-13ff-46e2-89b4-d4083904d9c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07b55b5f-2b63-403b-a981-55c97b107325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d157651-c91e-415a-852f-7e15feaef6e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbbfb234-3872-4d13-90f4-bdaf9e26bef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0316f9-786f-4141-950b-e9c81860f122",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baec67cd-740e-44cc-8786-a5ee0fec559a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "383d0390-f065-47b1-8bf1-9a466d78bb01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cd27b6-5aa4-4301-b41a-72e68294d4ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5bf347-69fe-4a53-8469-6603b68e3875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975c7a9f-9e3d-4c4c-abd1-0a6139ced112",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a945347-fcd3-422c-b793-0c2d2c46ad4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "987e1557-bac1-4136-9da9-4c41f96628d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf735262-1ac2-4a28-8c96-4456b5af7cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19cfcef1-ce64-410e-9ef1-29b99815887f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c56885-3c17-4519-92d4-d9d0d97bd9d9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3022bf-aaae-4269-ba88-c71f086fef16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7b07532-69f5-48ed-b06b-2b30ee2812cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82851e2a-745a-4848-a85e-a0d4bb8a2be0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952e80cc-f19e-4eba-bc11-bd21358a8f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9f9216-dc22-46f2-b01d-a8a4ea3b61dd",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37fedd9-26e7-4a96-8447-574606dbf1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f41753a-df0c-4299-aa73-9a4e64808689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21472ff5-03c8-430b-8cc1-2c682cf0bc04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c794f622-2857-4472-9f9b-10a6214e7f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31cd96c-0e6e-42c3-aefd-a5d29eb9a37c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebaf608-3d4c-4251-bf6d-2a7e4d62d343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7abb459d-3dea-4ffd-b358-993c0e15b1da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e0bed8-f465-4362-b895-f6c380a131bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ce9727-2f27-446d-afe0-846a0aebe944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351fc473-121f-4f19-9c08-e853cac39051",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee58a36b-0be5-4330-9d9f-27f2f7336757",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e2822af-59d7-4ac3-8382-292c3971c8f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2934eb4a-1d7c-4df6-8108-4c8378e19f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cefe8f93-b151-4c3a-a354-c5935d33ad95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef12469-ca07-4e73-8027-143fdd7e66fa",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaece2e4-05b5-41d5-a66c-acb959fd0f14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cad8aa4f-d63b-46ed-8516-cd3a8511cd2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7b6415-18cc-4a4e-8f82-24345c9cfd43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7272544-65b2-4d78-b148-42dc834cb926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f643417d-900f-4186-a767-7a92f4da41b0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4985b304-7245-47a8-90b7-3c5164e2e853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fc9d8c3-fdbc-40a7-881f-6b26d15a6e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb53af29-5527-45b9-9aa0-a2a1dab7bebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e893b22-bfba-430c-929a-b96ed776f35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940c7e13-dc38-44d0-9e20-c385f9d4f466",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70c6103-e9fb-4ad6-9821-7dda67d3edc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b83ce45e-c337-421c-90a7-473835a4256b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9eb272-6984-4310-a610-8f264f18f95b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041cc75c-7c87-4efd-b25e-75386c236007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e6fffd-62e3-4dd2-85c9-7e5d7996a17d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f627ea-9654-4b2b-b868-c62181172724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c4de5eb-cd23-4946-9ccc-3c73b8592d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3966723-4d92-4b67-9cff-1597554881d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9960691f-64b0-468e-b904-830cd5d4c623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7071687-0c01-41f2-8abb-76c343346d4c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98aed5bf-aca3-46b3-9464-ee9cc1b41fcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d4b8eb9-e370-43ce-80e8-f7954b4096c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89521999-b88a-4fb4-8f59-6c390dab4753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6ec5d5-0158-428b-9d2f-0e1cdd81754a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4040901e-add7-424f-aa2e-dd0fe0acdf7e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105ffc00-c476-4bfd-a0fc-3b71f2ea4daf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1e4e22b-15a0-4711-a9c3-4d2d07c85116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d2dab0-9028-4458-bb85-496f398198a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c00900-c0ee-4c24-a8e1-c563ceb59138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dcb4596-4e22-400d-8155-276a0a00544b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875d1911-9853-4341-8eab-8a12d9026209",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c39b8618-774e-4568-8d3f-7eb58211dc62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed26d8dd-f67e-460d-a7eb-9db51641f65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e8f885-3dfb-4515-a3f5-ed39a36c6bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e65c4e7-2028-4788-baf0-4a09da013e83",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bc004e-84fa-4945-87c6-688a7ca39009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dc1d2e3-a107-4a97-9c2d-ced3e71e9b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5023d3a6-0dba-43ea-88e7-0720fc0577ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e2d355-e3b7-4f2a-be69-35a1eb38e205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2270eaf1-9b45-47f5-8e83-af43ebd4f535",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d666cffd-b89f-44d5-bb56-6fbc97e87eb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da16b45f-db0e-4607-9d51-8fb03068b1de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44c2276-b8c9-42a2-a4ac-b4805b1d463d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbeb617-ee50-40b0-b0c5-503ced954689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e6b715-e1ab-482e-b12b-87bba711e874",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8993491b-1e00-471d-985e-47d7fc71ccd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "839e536d-d1d1-43cc-8883-26d46817d1e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27e4242-a0fb-46ca-a5e4-77965e23d390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4e23d2-cb82-4880-8b96-763c15cf10a0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6bfcd7f-e94e-4612-a521-06d7d705c916",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae20fbfe-a9c6-4032-8ed7-841da61be4ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5086ed3-cd0f-46f3-8515-02d1e72070b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8b5a504-917f-4cac-a065-956a013cb356"
                    }
                  }
                ]
              },
              {
                "id": "39a05b42-5bb0-4a58-930d-a8c93cf31422",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0028a8a7-9df9-4bb6-9027-8612962e5114",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd5a954-c8fb-41a8-b9de-63d78cba42f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "68fefc40-1c35-4fe8-976c-edcf33fbb4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d615ecc-c81b-4a5a-befc-5ba8a10924aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34911787-19b0-4d09-a0c5-834fdf7e5768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f028ce6-cd0f-4bc2-973a-8ba4c782531c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05b4f3d-14a0-4be3-94b5-5e63cf2b0a16",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "db6de8d9-d359-4516-8f7f-1bddd3ee3eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a7061b-6624-4f82-97ee-509262e97577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92a5227d-677b-434f-9f38-6a069033afc4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59af7f73-69c7-4765-aa53-722dce33b004",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aaa0c70d-9f93-4eb3-8115-95c6970becd8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0daa7c07-56f0-410b-bf24-32414cff0a27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5201aad-0241-42d9-b9b9-75a4c1f89b81"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f969b29-2bfb-40c6-aa24-06492de7dd9f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1752f1cf-0047-44c5-96e2-a1f83bdf2cf6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d2f5acd-40db-48ac-8dda-880eb49490e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6287d923-ed37-4e2c-8937-9e003f51fbe5"
            }
          }
        ]
      },
      {
        "id": "f514246f-58ae-4b06-953a-788fd7bdd250",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "dbb4a1fe-201c-42ae-8d69-9321548b8a21",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c18683f-fe2c-4287-a076-269fc8c49fac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b40d6561-4f75-4fae-97f8-5341537318d5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232b5d77-e1ff-4ea2-9d03-fe32b5e1c973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21d3bf9e-51ff-48b3-ba0b-7f6dc47bde9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "347230f9-ab69-41d6-8c12-6abe4eda811d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3859b553-d605-4a48-b76c-665cd2226d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef7d21c-fdda-4f47-b47a-bade6bf3c2a8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00630250-bb0c-4163-b87d-9614443bf818",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e3fa231a-47c6-41e8-92cd-0fb07b55c10c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c814ce-aeef-4d54-8624-e9d9317c9fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7172bb11-b770-4486-8a3f-bfbaf731df63"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b55a391a-cd3f-4947-9cb9-4e996f730e4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc30c967-f2d8-484f-8ab6-d8e32aa07fe3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8244e2f1-1f7d-4073-8f34-9974100f7e25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f9e5d25-740a-4c18-b33d-505a5ab5cd76"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "212efa40-73c8-4d6a-9fa3-95c8c294793d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "bedaeeb9-4588-4f84-ab95-8394b1d4663f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4411da02-edd9-4448-9278-60402f378de4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c05d5700-9b34-416d-9f11-845403a2d082"
            }
          }
        ]
      },
      {
        "id": "9eb3e26a-3376-4f41-a8e8-a8fea2622c03",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9be174b9-6588-48cb-85e9-fb1f7aa1b8e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "05695efe-5ce0-4495-8d5a-81e4a61dd43a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6563be0-e98d-4aeb-916e-a220e2169869",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fdfec3-35ce-46ce-9b19-af00c078c07f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244bca38-498c-463a-8bef-ca5211a7b637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b927b0-fbfb-40a2-8ecc-04fc3b274e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac877251-0a7f-473e-9e2e-eb12b7b5657b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16029a41-a71b-4e36-8b12-a5837f71b515",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af93cd55-b89d-4dbe-a599-d3558a05aa04",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "adf8ebd4-0aa7-4418-a2ad-d1154215d450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85092147-53e3-47e6-b38a-589dbf2cdcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c9dcbfc-57d1-4f7e-badb-4045f0b87409"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "035beff4-5f79-4d08-aa0f-86d163a33891",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cf190c6-8f07-4f63-8bed-3cb9a72ea265"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfe2e663-4636-4bd4-96c7-69d3135358a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ff8bbdc-78a8-43dd-9bdb-5309cf9656f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d201d9e7-75ed-4d08-902a-a93146a42934",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "954ddc17-b3b9-4993-a58c-831986db80cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a1f36a0-eac7-449b-b9ab-dd6e8be28454",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8e9fc5c-a9d4-4dbf-b2c0-3ebd921114b5"
            }
          }
        ]
      },
      {
        "id": "dcd2b780-536c-4426-8f76-84fce926a738",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "89cfc87a-9b68-48fd-8ab3-85f51a9b57e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c768df7-9c87-4f4e-9645-74aa99be17a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "497a06d6-a43b-4855-9170-cc2396de67ad",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247c6cf8-6e4c-42e0-8824-fbb03abf290d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a44ea7-75cd-446e-9916-1cddb41d374e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d2b7ee-e09e-44bf-93e2-2b424433f28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b7e39e3-8d0b-41e2-a2cc-9895bae23ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb73d6e-65fb-4783-be59-9b42a2210154",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bfe5f7-c9da-4bda-a82f-34f0b229e64f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c59382f2-6a8c-484f-bde9-29da4e81612c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c298b969-ce69-4643-ae3f-fa36184578be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c7de110-c1c4-4309-ae63-7be0445e7f7e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98a13a6b-2493-423f-bb96-9f76f997950c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b425b67-3577-4e5b-8351-8bbc3646cedb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe07cd59-326b-4018-871e-c6b800331a54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47e6d85e-cf92-49ed-aee0-2b1a6f724b6e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c7876b1-67cc-4561-9908-896642b2058a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "5d8f4ff6-0c8e-41c8-aa3d-f49144c2a530"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "296e5b7f-6e0e-467d-aac3-b7de1f753450",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1765a2e1-4205-4b20-b6a8-63ca7f294f36"
            }
          }
        ]
      },
      {
        "id": "8e5ccfd9-9414-45f8-87e7-e38c4b315232",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "e5412b04-6062-4ac1-b2a3-5740a634df9f",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1193,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 200,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 309,
        "pending": 0,
        "failed": 24
      },
      "testScripts": {
        "total": 602,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 591,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 112.09000000000002,
      "responseMin": 32,
      "responseMax": 3072,
      "responseSd": 230.13029331228847,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663721719848,
      "completed": 1663721750435
    },
    "executions": [
      {
        "id": "0cab0ecb-2bab-42a8-8b1e-b34e3a2bac76",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 152,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3172ba31-ba5b-4799-8b68-71cea4138a22",
          "httpRequestId": "e305e7b0-2d49-4e67-bb79-51037dec7e81"
        },
        "item": {
          "id": "0cab0ecb-2bab-42a8-8b1e-b34e3a2bac76",
          "name": "did_json"
        },
        "response": {
          "id": "d12a2175-44fd-4bcf-827e-9442eb2e7897",
          "status": "OK",
          "code": 200,
          "responseTime": 246,
          "responseSize": 1289
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "69e47b5f-5241-48ef-aa40-7c88063f9526",
        "cursor": {
          "ref": "d8da36e6-1b17-4d26-9c41-a4bf35350eb7",
          "length": 152,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2a85fcab-1a3a-4017-80d7-61be4c6046ae"
        },
        "item": {
          "id": "69e47b5f-5241-48ef-aa40-7c88063f9526",
          "name": "did:invalid"
        },
        "response": {
          "id": "fdddf3a7-0460-4e7d-bc2e-56439d7940a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e47b5f-5241-48ef-aa40-7c88063f9526",
        "cursor": {
          "ref": "d8da36e6-1b17-4d26-9c41-a4bf35350eb7",
          "length": 152,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2a85fcab-1a3a-4017-80d7-61be4c6046ae"
        },
        "item": {
          "id": "69e47b5f-5241-48ef-aa40-7c88063f9526",
          "name": "did:invalid"
        },
        "response": {
          "id": "fdddf3a7-0460-4e7d-bc2e-56439d7940a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd4eaa9-4e57-48d6-8f13-7f3b4c6d82cb",
        "cursor": {
          "ref": "ff58fe54-84d7-40ee-a5ee-d3b57f254e56",
          "length": 152,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "593958ab-c9b4-4a21-9ba1-77947808d85f"
        },
        "item": {
          "id": "1fd4eaa9-4e57-48d6-8f13-7f3b4c6d82cb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9e620990-2fff-40b5-bf9a-442b54ca2f00",
          "status": "Not Found",
          "code": 404,
          "responseTime": 78,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a1c208-dca2-421b-b1f4-eec94251ca59",
        "cursor": {
          "ref": "12c758dc-66b5-4d96-bd70-5eea4eed8ddb",
          "length": 152,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4cb6f88c-ab2e-4f9b-94ac-c6d6ea1e0597"
        },
        "item": {
          "id": "89a1c208-dca2-421b-b1f4-eec94251ca59",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b78ec240-72fc-47bf-b3b7-519fae95ce57",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751ea635-aac2-4f45-8300-252278606805",
        "cursor": {
          "ref": "e0192f38-50ee-4a97-8afb-02ef7ebe1ddd",
          "length": 152,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d22cd534-a7a3-4e80-9d2f-00144a182430"
        },
        "item": {
          "id": "751ea635-aac2-4f45-8300-252278606805",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "de7738ba-0952-4483-b593-e923e938ba4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2504abd1-3a79-42bb-a575-9bdb0807ff6f",
        "cursor": {
          "ref": "2ec991db-dfb5-46b0-aee0-5979bf37b131",
          "length": 152,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "26e2b2fc-f0d8-4329-b350-a36825aa0890"
        },
        "item": {
          "id": "2504abd1-3a79-42bb-a575-9bdb0807ff6f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f9bc1e99-4ce1-4369-aedd-d1e375a4b0c7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2504abd1-3a79-42bb-a575-9bdb0807ff6f",
        "cursor": {
          "ref": "2ec991db-dfb5-46b0-aee0-5979bf37b131",
          "length": 152,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "26e2b2fc-f0d8-4329-b350-a36825aa0890"
        },
        "item": {
          "id": "2504abd1-3a79-42bb-a575-9bdb0807ff6f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f9bc1e99-4ce1-4369-aedd-d1e375a4b0c7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1fb5a7-0b45-4b37-bc60-c4183d17f0e2",
        "cursor": {
          "ref": "20c92fb2-6194-4cbe-89b5-4445a24aa628",
          "length": 152,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4eb2085c-63ae-4201-9e05-7ac179b8a393"
        },
        "item": {
          "id": "9a1fb5a7-0b45-4b37-bc60-c4183d17f0e2",
          "name": "identifiers"
        },
        "response": {
          "id": "afeeb1f9-277b-4d2b-b91a-4aa06d19945f",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 1318
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d49a04c-fcb2-470c-b884-c8c49590e6aa",
        "cursor": {
          "ref": "a444665e-60c8-4e15-8dea-01297666af0f",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f54640a3-39a5-40f8-b5bc-21ce7fcfea27"
        },
        "item": {
          "id": "7d49a04c-fcb2-470c-b884-c8c49590e6aa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b18263d4-c052-4a38-86bb-676600c67184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d49a04c-fcb2-470c-b884-c8c49590e6aa",
        "cursor": {
          "ref": "a444665e-60c8-4e15-8dea-01297666af0f",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f54640a3-39a5-40f8-b5bc-21ce7fcfea27"
        },
        "item": {
          "id": "7d49a04c-fcb2-470c-b884-c8c49590e6aa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b18263d4-c052-4a38-86bb-676600c67184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d49a04c-fcb2-470c-b884-c8c49590e6aa",
        "cursor": {
          "ref": "a444665e-60c8-4e15-8dea-01297666af0f",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f54640a3-39a5-40f8-b5bc-21ce7fcfea27"
        },
        "item": {
          "id": "7d49a04c-fcb2-470c-b884-c8c49590e6aa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b18263d4-c052-4a38-86bb-676600c67184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d57fc0-968e-4d66-8a34-b0cf187a78e4",
        "cursor": {
          "ref": "cf33cc30-9015-4e29-a8b9-b6e9b64736ca",
          "length": 152,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "02585cec-43a4-43bd-abad-2612acf7ed1a"
        },
        "item": {
          "id": "d2d57fc0-968e-4d66-8a34-b0cf187a78e4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "37632dc0-afa2-4b80-8cc3-4d7f191099b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d57fc0-968e-4d66-8a34-b0cf187a78e4",
        "cursor": {
          "ref": "cf33cc30-9015-4e29-a8b9-b6e9b64736ca",
          "length": 152,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "02585cec-43a4-43bd-abad-2612acf7ed1a"
        },
        "item": {
          "id": "d2d57fc0-968e-4d66-8a34-b0cf187a78e4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "37632dc0-afa2-4b80-8cc3-4d7f191099b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93006097-0beb-4eb9-8c6d-a1fe6f404c62",
        "cursor": {
          "ref": "ed31f2e2-898c-40b7-9cd5-5b7ddf851c48",
          "length": 152,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7ea313f0-8a31-41bf-a625-1bb4fcfc7302"
        },
        "item": {
          "id": "93006097-0beb-4eb9-8c6d-a1fe6f404c62",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2789ff1e-344b-4343-affa-6ce6272a61e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93006097-0beb-4eb9-8c6d-a1fe6f404c62",
        "cursor": {
          "ref": "ed31f2e2-898c-40b7-9cd5-5b7ddf851c48",
          "length": 152,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7ea313f0-8a31-41bf-a625-1bb4fcfc7302"
        },
        "item": {
          "id": "93006097-0beb-4eb9-8c6d-a1fe6f404c62",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2789ff1e-344b-4343-affa-6ce6272a61e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14d1897-e92e-4eb5-a7b1-858fb00a0dcb",
        "cursor": {
          "ref": "6ae02296-9dc3-4284-8c77-5e12a215a184",
          "length": 152,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e4f257b2-12ea-4476-8b50-ff8b8d4225e8"
        },
        "item": {
          "id": "a14d1897-e92e-4eb5-a7b1-858fb00a0dcb",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "dad6db34-1888-487e-ab66-bdb08605c1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14d1897-e92e-4eb5-a7b1-858fb00a0dcb",
        "cursor": {
          "ref": "6ae02296-9dc3-4284-8c77-5e12a215a184",
          "length": 152,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e4f257b2-12ea-4476-8b50-ff8b8d4225e8"
        },
        "item": {
          "id": "a14d1897-e92e-4eb5-a7b1-858fb00a0dcb",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "dad6db34-1888-487e-ab66-bdb08605c1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d88085-24e8-4da7-a8ec-233ed001386b",
        "cursor": {
          "ref": "c6cd6579-e2c0-478c-ad32-9a5dfcf8be0d",
          "length": 152,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "62f5a661-301b-4c3c-b711-bfb17b2391ad"
        },
        "item": {
          "id": "a3d88085-24e8-4da7-a8ec-233ed001386b",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "c8fe9ed6-524b-4c78-8cd4-58bf3d812f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d88085-24e8-4da7-a8ec-233ed001386b",
        "cursor": {
          "ref": "c6cd6579-e2c0-478c-ad32-9a5dfcf8be0d",
          "length": 152,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "62f5a661-301b-4c3c-b711-bfb17b2391ad"
        },
        "item": {
          "id": "a3d88085-24e8-4da7-a8ec-233ed001386b",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "c8fe9ed6-524b-4c78-8cd4-58bf3d812f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2044c1-f587-4744-8a8c-509d73c3ebd7",
        "cursor": {
          "ref": "9937f41f-5c9d-46f4-95de-200ecf73f4f1",
          "length": 152,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4f991ce1-23dc-4101-842b-3bbb2b8a9d57"
        },
        "item": {
          "id": "0a2044c1-f587-4744-8a8c-509d73c3ebd7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c909fd8d-e861-4bdf-9679-03d4a5df2ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2044c1-f587-4744-8a8c-509d73c3ebd7",
        "cursor": {
          "ref": "9937f41f-5c9d-46f4-95de-200ecf73f4f1",
          "length": 152,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4f991ce1-23dc-4101-842b-3bbb2b8a9d57"
        },
        "item": {
          "id": "0a2044c1-f587-4744-8a8c-509d73c3ebd7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c909fd8d-e861-4bdf-9679-03d4a5df2ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e500b7de-9d57-4497-9df9-b0812709ddc7",
        "cursor": {
          "ref": "2e9613e5-d0dc-4748-9de0-8769d8c540b6",
          "length": 152,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6928c148-ea5d-4613-9494-19636ce2e12f"
        },
        "item": {
          "id": "e500b7de-9d57-4497-9df9-b0812709ddc7",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "11e388a8-2b03-4116-af8f-7e6957d7bb5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e500b7de-9d57-4497-9df9-b0812709ddc7",
        "cursor": {
          "ref": "2e9613e5-d0dc-4748-9de0-8769d8c540b6",
          "length": 152,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6928c148-ea5d-4613-9494-19636ce2e12f"
        },
        "item": {
          "id": "e500b7de-9d57-4497-9df9-b0812709ddc7",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "11e388a8-2b03-4116-af8f-7e6957d7bb5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991687d9-ec58-4977-ba77-1f26eb1ee3c1",
        "cursor": {
          "ref": "4ac72a5b-9b36-4244-9d03-23014c65ee56",
          "length": 152,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "18f83d3e-0a1a-4712-b08c-0ecad525b9c7"
        },
        "item": {
          "id": "991687d9-ec58-4977-ba77-1f26eb1ee3c1",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "55d78c85-af0f-49a2-af24-6f77e138ea0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991687d9-ec58-4977-ba77-1f26eb1ee3c1",
        "cursor": {
          "ref": "4ac72a5b-9b36-4244-9d03-23014c65ee56",
          "length": 152,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "18f83d3e-0a1a-4712-b08c-0ecad525b9c7"
        },
        "item": {
          "id": "991687d9-ec58-4977-ba77-1f26eb1ee3c1",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "55d78c85-af0f-49a2-af24-6f77e138ea0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a683c509-c684-48d9-8ec5-beab1bb6bc13",
        "cursor": {
          "ref": "170dd6ac-c472-4a11-bf49-48d9cf4d8064",
          "length": 152,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "67a2d284-3f29-4ee0-9fa8-29659b14c48a"
        },
        "item": {
          "id": "a683c509-c684-48d9-8ec5-beab1bb6bc13",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "15bf0371-ae2b-4482-ad34-79de9ad3fa37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a683c509-c684-48d9-8ec5-beab1bb6bc13",
        "cursor": {
          "ref": "170dd6ac-c472-4a11-bf49-48d9cf4d8064",
          "length": 152,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "67a2d284-3f29-4ee0-9fa8-29659b14c48a"
        },
        "item": {
          "id": "a683c509-c684-48d9-8ec5-beab1bb6bc13",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "15bf0371-ae2b-4482-ad34-79de9ad3fa37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe1f870-9a0a-4500-9317-54210edb604d",
        "cursor": {
          "ref": "e0fda273-53a5-4a2a-bb99-c95133d2cf07",
          "length": 152,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3773899e-4310-4ced-9e21-2af6317a6ad1"
        },
        "item": {
          "id": "ebe1f870-9a0a-4500-9317-54210edb604d",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "f528044f-caa4-417d-bd9a-0af92030506d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe1f870-9a0a-4500-9317-54210edb604d",
        "cursor": {
          "ref": "e0fda273-53a5-4a2a-bb99-c95133d2cf07",
          "length": 152,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3773899e-4310-4ced-9e21-2af6317a6ad1"
        },
        "item": {
          "id": "ebe1f870-9a0a-4500-9317-54210edb604d",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "f528044f-caa4-417d-bd9a-0af92030506d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54491b1b-bbd5-4422-b00b-8b237693b8eb",
        "cursor": {
          "ref": "d7286073-e0ff-4672-b6e6-085df706513f",
          "length": 152,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5e8faabe-e225-4eff-9ad4-447ad8371d1b"
        },
        "item": {
          "id": "54491b1b-bbd5-4422-b00b-8b237693b8eb",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "a14aeed9-6a4c-4e21-98c5-4c12e8e2b013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54491b1b-bbd5-4422-b00b-8b237693b8eb",
        "cursor": {
          "ref": "d7286073-e0ff-4672-b6e6-085df706513f",
          "length": 152,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5e8faabe-e225-4eff-9ad4-447ad8371d1b"
        },
        "item": {
          "id": "54491b1b-bbd5-4422-b00b-8b237693b8eb",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "a14aeed9-6a4c-4e21-98c5-4c12e8e2b013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f437ac-14ff-4481-8502-32fbc9abb7b8",
        "cursor": {
          "ref": "2a4921ad-8c2d-43ee-b881-b2750c9e0845",
          "length": 152,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "43411995-1112-476f-8733-afc6f5442b7f"
        },
        "item": {
          "id": "02f437ac-14ff-4481-8502-32fbc9abb7b8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c71b4f91-c828-4129-8f08-57fb8c83ec57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3072,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f437ac-14ff-4481-8502-32fbc9abb7b8",
        "cursor": {
          "ref": "2a4921ad-8c2d-43ee-b881-b2750c9e0845",
          "length": 152,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "43411995-1112-476f-8733-afc6f5442b7f"
        },
        "item": {
          "id": "02f437ac-14ff-4481-8502-32fbc9abb7b8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c71b4f91-c828-4129-8f08-57fb8c83ec57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3072,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e054188-3d65-476f-b1be-01f00bf0fd2c",
        "cursor": {
          "ref": "2e0a658e-17aa-4e7b-940c-726799573e82",
          "length": 152,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "225f3737-46a7-404e-851f-7a972a2441cd"
        },
        "item": {
          "id": "4e054188-3d65-476f-b1be-01f00bf0fd2c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d81e54b9-94d0-4317-9869-54ba3ecee89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e054188-3d65-476f-b1be-01f00bf0fd2c",
        "cursor": {
          "ref": "2e0a658e-17aa-4e7b-940c-726799573e82",
          "length": 152,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "225f3737-46a7-404e-851f-7a972a2441cd"
        },
        "item": {
          "id": "4e054188-3d65-476f-b1be-01f00bf0fd2c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d81e54b9-94d0-4317-9869-54ba3ecee89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc8a06e-2622-4e66-9460-08eecf8d76e6",
        "cursor": {
          "ref": "29480803-4416-472d-8efa-ec7ca1730e00",
          "length": 152,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "35fa2c93-33a7-408f-a812-030e6e105f7e"
        },
        "item": {
          "id": "6bc8a06e-2622-4e66-9460-08eecf8d76e6",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "16578d40-4d4c-4509-a11f-71b0cc73fa0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc8a06e-2622-4e66-9460-08eecf8d76e6",
        "cursor": {
          "ref": "29480803-4416-472d-8efa-ec7ca1730e00",
          "length": 152,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "35fa2c93-33a7-408f-a812-030e6e105f7e"
        },
        "item": {
          "id": "6bc8a06e-2622-4e66-9460-08eecf8d76e6",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "16578d40-4d4c-4509-a11f-71b0cc73fa0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5667399-3992-4fba-8fb0-19115a2fdafd",
        "cursor": {
          "ref": "bef9bd03-020b-4412-a308-b9b6f460c7a9",
          "length": 152,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "16f400dd-9b03-4e17-9abc-cd8db994b345"
        },
        "item": {
          "id": "d5667399-3992-4fba-8fb0-19115a2fdafd",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "b83ddfcb-44ee-4fd0-88e9-bac2d9dd7f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5667399-3992-4fba-8fb0-19115a2fdafd",
        "cursor": {
          "ref": "bef9bd03-020b-4412-a308-b9b6f460c7a9",
          "length": 152,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "16f400dd-9b03-4e17-9abc-cd8db994b345"
        },
        "item": {
          "id": "d5667399-3992-4fba-8fb0-19115a2fdafd",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "b83ddfcb-44ee-4fd0-88e9-bac2d9dd7f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86146c8a-0005-453c-816d-1aa7c9d1c0a2",
        "cursor": {
          "ref": "63c36929-af58-4acd-8b60-e807d9c842cf",
          "length": 152,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c9116f43-3c89-4535-b3f7-5024302bf8af"
        },
        "item": {
          "id": "86146c8a-0005-453c-816d-1aa7c9d1c0a2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7765ab90-00d5-4188-9786-6b6fc3c041a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86146c8a-0005-453c-816d-1aa7c9d1c0a2",
        "cursor": {
          "ref": "63c36929-af58-4acd-8b60-e807d9c842cf",
          "length": 152,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c9116f43-3c89-4535-b3f7-5024302bf8af"
        },
        "item": {
          "id": "86146c8a-0005-453c-816d-1aa7c9d1c0a2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7765ab90-00d5-4188-9786-6b6fc3c041a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5504ea1-5f95-4d80-87a1-79694a61f7e4",
        "cursor": {
          "ref": "af338bfc-e706-4275-ba94-1ab5fe19f2b3",
          "length": 152,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "62802467-6d12-4738-b80b-556022909663"
        },
        "item": {
          "id": "a5504ea1-5f95-4d80-87a1-79694a61f7e4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "95ecd66f-1902-4968-b8bd-ca85ff29e99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5504ea1-5f95-4d80-87a1-79694a61f7e4",
        "cursor": {
          "ref": "af338bfc-e706-4275-ba94-1ab5fe19f2b3",
          "length": 152,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "62802467-6d12-4738-b80b-556022909663"
        },
        "item": {
          "id": "a5504ea1-5f95-4d80-87a1-79694a61f7e4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "95ecd66f-1902-4968-b8bd-ca85ff29e99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35694796-1002-4039-a702-cf6ef4b63233",
        "cursor": {
          "ref": "dfa58bb8-f2ff-434d-940a-1176423fed92",
          "length": 152,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "76389c92-9229-49ad-9e89-2b35b385e0db"
        },
        "item": {
          "id": "35694796-1002-4039-a702-cf6ef4b63233",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "949683f0-b73d-4144-957f-50c1bdb0c44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35694796-1002-4039-a702-cf6ef4b63233",
        "cursor": {
          "ref": "dfa58bb8-f2ff-434d-940a-1176423fed92",
          "length": 152,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "76389c92-9229-49ad-9e89-2b35b385e0db"
        },
        "item": {
          "id": "35694796-1002-4039-a702-cf6ef4b63233",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "949683f0-b73d-4144-957f-50c1bdb0c44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc63903-34bb-4396-894e-e1c08fc7270c",
        "cursor": {
          "ref": "fa53b517-9aad-4246-a267-b3b44f1299e5",
          "length": 152,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ed1160f8-5bff-43f8-8551-8d918d9281c2"
        },
        "item": {
          "id": "7dc63903-34bb-4396-894e-e1c08fc7270c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b482b50f-05ea-4811-870c-970fcf403a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc63903-34bb-4396-894e-e1c08fc7270c",
        "cursor": {
          "ref": "fa53b517-9aad-4246-a267-b3b44f1299e5",
          "length": 152,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ed1160f8-5bff-43f8-8551-8d918d9281c2"
        },
        "item": {
          "id": "7dc63903-34bb-4396-894e-e1c08fc7270c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b482b50f-05ea-4811-870c-970fcf403a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1944fd-91e2-4566-b1a0-38bddff45cbb",
        "cursor": {
          "ref": "c69fbb20-fa53-4eab-82b5-fda443396525",
          "length": 152,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1d680442-ac44-4107-867f-a36d42445c89"
        },
        "item": {
          "id": "2a1944fd-91e2-4566-b1a0-38bddff45cbb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "52394f6d-614c-44b0-8b9a-abf2453fbd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1944fd-91e2-4566-b1a0-38bddff45cbb",
        "cursor": {
          "ref": "c69fbb20-fa53-4eab-82b5-fda443396525",
          "length": 152,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1d680442-ac44-4107-867f-a36d42445c89"
        },
        "item": {
          "id": "2a1944fd-91e2-4566-b1a0-38bddff45cbb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "52394f6d-614c-44b0-8b9a-abf2453fbd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b46ecd6-0f49-4b3a-b915-2685f963c37c",
        "cursor": {
          "ref": "36b3dd6e-8d8b-4f18-8f18-d6c31eec61be",
          "length": 152,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "00d4fd1f-2f06-4919-96c5-333e8cd8a16f"
        },
        "item": {
          "id": "7b46ecd6-0f49-4b3a-b915-2685f963c37c",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "78d428ad-2d5f-4d2e-be07-54cc1659b5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b46ecd6-0f49-4b3a-b915-2685f963c37c",
        "cursor": {
          "ref": "36b3dd6e-8d8b-4f18-8f18-d6c31eec61be",
          "length": 152,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "00d4fd1f-2f06-4919-96c5-333e8cd8a16f"
        },
        "item": {
          "id": "7b46ecd6-0f49-4b3a-b915-2685f963c37c",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "78d428ad-2d5f-4d2e-be07-54cc1659b5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37dc6164-2d30-46b9-9679-b531853c05dc",
        "cursor": {
          "ref": "51c75060-e9c2-4c3f-991f-d25623757bfc",
          "length": 152,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "209a1cb4-f92f-4795-871e-072ca5553794"
        },
        "item": {
          "id": "37dc6164-2d30-46b9-9679-b531853c05dc",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "8ab70e6d-64a3-4091-b199-896aa3579b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37dc6164-2d30-46b9-9679-b531853c05dc",
        "cursor": {
          "ref": "51c75060-e9c2-4c3f-991f-d25623757bfc",
          "length": 152,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "209a1cb4-f92f-4795-871e-072ca5553794"
        },
        "item": {
          "id": "37dc6164-2d30-46b9-9679-b531853c05dc",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "8ab70e6d-64a3-4091-b199-896aa3579b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb333b5f-273b-4bbf-a23d-c35a6ca166e4",
        "cursor": {
          "ref": "44a8cb97-97e6-4e96-867d-38a2fe38f691",
          "length": 152,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c4d3c8e4-93c7-4b13-a2d0-60fd52c1bfcd"
        },
        "item": {
          "id": "cb333b5f-273b-4bbf-a23d-c35a6ca166e4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7fcee5a9-993b-4808-a475-e5fbb322347c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb333b5f-273b-4bbf-a23d-c35a6ca166e4",
        "cursor": {
          "ref": "44a8cb97-97e6-4e96-867d-38a2fe38f691",
          "length": 152,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c4d3c8e4-93c7-4b13-a2d0-60fd52c1bfcd"
        },
        "item": {
          "id": "cb333b5f-273b-4bbf-a23d-c35a6ca166e4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7fcee5a9-993b-4808-a475-e5fbb322347c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5946fe0-3941-45a1-ba94-e15c062b9f16",
        "cursor": {
          "ref": "6741dee4-1ba8-444e-a62a-ad0bcc70b0ad",
          "length": 152,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "68b77749-c2e7-41c5-9cdf-ed83ad809ace"
        },
        "item": {
          "id": "d5946fe0-3941-45a1-ba94-e15c062b9f16",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "f5987283-96f8-4127-9b9c-a28642f01d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5946fe0-3941-45a1-ba94-e15c062b9f16",
        "cursor": {
          "ref": "6741dee4-1ba8-444e-a62a-ad0bcc70b0ad",
          "length": 152,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "68b77749-c2e7-41c5-9cdf-ed83ad809ace"
        },
        "item": {
          "id": "d5946fe0-3941-45a1-ba94-e15c062b9f16",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "f5987283-96f8-4127-9b9c-a28642f01d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d3e7e9-1d99-431b-8a6d-2838050d6e47",
        "cursor": {
          "ref": "a4b66bfe-dce7-46f6-a7f2-ff81f340ada6",
          "length": 152,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "07350788-23c2-45db-9ece-a814f492369c"
        },
        "item": {
          "id": "32d3e7e9-1d99-431b-8a6d-2838050d6e47",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a56f3670-9feb-4df2-9a03-39a68449416d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d3e7e9-1d99-431b-8a6d-2838050d6e47",
        "cursor": {
          "ref": "a4b66bfe-dce7-46f6-a7f2-ff81f340ada6",
          "length": 152,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "07350788-23c2-45db-9ece-a814f492369c"
        },
        "item": {
          "id": "32d3e7e9-1d99-431b-8a6d-2838050d6e47",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a56f3670-9feb-4df2-9a03-39a68449416d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97cfd4c-0e15-4ab4-a2e7-7b79735473da",
        "cursor": {
          "ref": "b2c1c52a-827d-4fd0-92e2-c3fbd9b18e9f",
          "length": 152,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6e822a21-d3bc-4045-96dc-75c4447172c6"
        },
        "item": {
          "id": "d97cfd4c-0e15-4ab4-a2e7-7b79735473da",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "19f95fea-c52b-4db4-8456-3b5180020476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97cfd4c-0e15-4ab4-a2e7-7b79735473da",
        "cursor": {
          "ref": "b2c1c52a-827d-4fd0-92e2-c3fbd9b18e9f",
          "length": 152,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6e822a21-d3bc-4045-96dc-75c4447172c6"
        },
        "item": {
          "id": "d97cfd4c-0e15-4ab4-a2e7-7b79735473da",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "19f95fea-c52b-4db4-8456-3b5180020476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf124c41-a0f6-4cab-b19d-fa1f4cfa7c83",
        "cursor": {
          "ref": "bd1dd5e1-0c4b-4298-9b80-7f1e7201140b",
          "length": 152,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7a0895ad-6a02-4602-bd5f-efe639a18ff7"
        },
        "item": {
          "id": "cf124c41-a0f6-4cab-b19d-fa1f4cfa7c83",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3b243464-a240-4467-b2e6-9e5fa7a0df9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 697,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf124c41-a0f6-4cab-b19d-fa1f4cfa7c83",
        "cursor": {
          "ref": "bd1dd5e1-0c4b-4298-9b80-7f1e7201140b",
          "length": 152,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7a0895ad-6a02-4602-bd5f-efe639a18ff7"
        },
        "item": {
          "id": "cf124c41-a0f6-4cab-b19d-fa1f4cfa7c83",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3b243464-a240-4467-b2e6-9e5fa7a0df9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 697,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3398887c-a847-4dfb-af4a-b5d6c29e42f7",
        "cursor": {
          "ref": "28666e6b-8b1c-4daf-829b-49480ca8290d",
          "length": 152,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3aa40e2e-f152-46cd-a9eb-48ba44dd4302"
        },
        "item": {
          "id": "3398887c-a847-4dfb-af4a-b5d6c29e42f7",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "258bedcd-7b10-4a12-a50b-ab9eda98e2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3398887c-a847-4dfb-af4a-b5d6c29e42f7",
        "cursor": {
          "ref": "28666e6b-8b1c-4daf-829b-49480ca8290d",
          "length": 152,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3aa40e2e-f152-46cd-a9eb-48ba44dd4302"
        },
        "item": {
          "id": "3398887c-a847-4dfb-af4a-b5d6c29e42f7",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "258bedcd-7b10-4a12-a50b-ab9eda98e2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabc06da-f4bd-4e28-8e5a-8cd909ea8ad0",
        "cursor": {
          "ref": "4d374d86-74fe-4730-bec5-8022d358be9c",
          "length": 152,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e0e9af95-3d9e-451d-bfbe-a3c166bcaaa3"
        },
        "item": {
          "id": "dabc06da-f4bd-4e28-8e5a-8cd909ea8ad0",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "22acc2e5-5618-46a1-a9a8-adad5911b02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabc06da-f4bd-4e28-8e5a-8cd909ea8ad0",
        "cursor": {
          "ref": "4d374d86-74fe-4730-bec5-8022d358be9c",
          "length": 152,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e0e9af95-3d9e-451d-bfbe-a3c166bcaaa3"
        },
        "item": {
          "id": "dabc06da-f4bd-4e28-8e5a-8cd909ea8ad0",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "22acc2e5-5618-46a1-a9a8-adad5911b02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046845e0-e4e3-4e42-a4c9-80439a5952d5",
        "cursor": {
          "ref": "2756f046-17c4-4c9d-b178-5a5e5b66bcab",
          "length": 152,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "76f671ea-b018-4638-821c-4953b4f19570"
        },
        "item": {
          "id": "046845e0-e4e3-4e42-a4c9-80439a5952d5",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "771aa28c-885c-4400-8c64-14e53944de89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046845e0-e4e3-4e42-a4c9-80439a5952d5",
        "cursor": {
          "ref": "2756f046-17c4-4c9d-b178-5a5e5b66bcab",
          "length": 152,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "76f671ea-b018-4638-821c-4953b4f19570"
        },
        "item": {
          "id": "046845e0-e4e3-4e42-a4c9-80439a5952d5",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "771aa28c-885c-4400-8c64-14e53944de89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60aa34a6-c914-45d2-a625-2c37c3ddf23b",
        "cursor": {
          "ref": "5439dabd-a83c-4064-a654-f3589af9d76d",
          "length": 152,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5ceec365-7911-4f8d-b663-4ebdaf2a36eb"
        },
        "item": {
          "id": "60aa34a6-c914-45d2-a625-2c37c3ddf23b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "2443d4da-d136-46f8-9f7d-18da54ba881f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60aa34a6-c914-45d2-a625-2c37c3ddf23b",
        "cursor": {
          "ref": "5439dabd-a83c-4064-a654-f3589af9d76d",
          "length": 152,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5ceec365-7911-4f8d-b663-4ebdaf2a36eb"
        },
        "item": {
          "id": "60aa34a6-c914-45d2-a625-2c37c3ddf23b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "2443d4da-d136-46f8-9f7d-18da54ba881f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782dc095-d228-47a4-ac33-69c3bdb7466b",
        "cursor": {
          "ref": "6d5fd4da-04af-45cc-99be-d6748b44d3b2",
          "length": 152,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0fde51b7-940b-4182-bb6b-a834d0d97122"
        },
        "item": {
          "id": "782dc095-d228-47a4-ac33-69c3bdb7466b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f1824fe3-16dc-4467-8c8c-2fce543469b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782dc095-d228-47a4-ac33-69c3bdb7466b",
        "cursor": {
          "ref": "6d5fd4da-04af-45cc-99be-d6748b44d3b2",
          "length": 152,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0fde51b7-940b-4182-bb6b-a834d0d97122"
        },
        "item": {
          "id": "782dc095-d228-47a4-ac33-69c3bdb7466b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f1824fe3-16dc-4467-8c8c-2fce543469b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2047e7bb-075f-4133-be75-f50d37ea5ba1",
        "cursor": {
          "ref": "8d4ae30f-fadd-440a-84ee-6b692b384309",
          "length": 152,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ed9df4ab-e966-4256-a737-33dc98df3bf3"
        },
        "item": {
          "id": "2047e7bb-075f-4133-be75-f50d37ea5ba1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7a366740-ac6c-4c25-b04d-286bf4a59745",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2047e7bb-075f-4133-be75-f50d37ea5ba1",
        "cursor": {
          "ref": "8d4ae30f-fadd-440a-84ee-6b692b384309",
          "length": 152,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ed9df4ab-e966-4256-a737-33dc98df3bf3"
        },
        "item": {
          "id": "2047e7bb-075f-4133-be75-f50d37ea5ba1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7a366740-ac6c-4c25-b04d-286bf4a59745",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54ef596-a958-48e5-97af-b3adce0b5478",
        "cursor": {
          "ref": "12fe753a-f9e6-4975-a437-23be4d0bb8ef",
          "length": 152,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "04af25dd-a2bc-4449-b742-2d6a055c3ae4"
        },
        "item": {
          "id": "e54ef596-a958-48e5-97af-b3adce0b5478",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e57dd261-609e-43a1-8bd7-493f612b7d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'",
              "stack": "AssertionError: expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": ".empty was passed non-string primitive undefined",
              "stack": "AssertionError: .empty was passed non-string primitive undefined\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "e54ef596-a958-48e5-97af-b3adce0b5478",
        "cursor": {
          "ref": "12fe753a-f9e6-4975-a437-23be4d0bb8ef",
          "length": 152,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "04af25dd-a2bc-4449-b742-2d6a055c3ae4"
        },
        "item": {
          "id": "e54ef596-a958-48e5-97af-b3adce0b5478",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e57dd261-609e-43a1-8bd7-493f612b7d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'",
              "stack": "AssertionError: expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": ".empty was passed non-string primitive undefined",
              "stack": "AssertionError: .empty was passed non-string primitive undefined\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "34328416-1609-400d-8b91-1c4639f533ae",
        "cursor": {
          "ref": "d12f5d3d-bceb-4185-bf9f-1b8537075a34",
          "length": 152,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "953b78ad-6c55-4e9d-9f3b-a73442a675b7"
        },
        "item": {
          "id": "34328416-1609-400d-8b91-1c4639f533ae",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "8f7d7d8d-0678-40b7-a7a7-fdfdfacdb4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "34328416-1609-400d-8b91-1c4639f533ae",
        "cursor": {
          "ref": "d12f5d3d-bceb-4185-bf9f-1b8537075a34",
          "length": 152,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "953b78ad-6c55-4e9d-9f3b-a73442a675b7"
        },
        "item": {
          "id": "34328416-1609-400d-8b91-1c4639f533ae",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "8f7d7d8d-0678-40b7-a7a7-fdfdfacdb4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "9430e29c-908a-414e-897e-77e53bd53c7a",
        "cursor": {
          "ref": "9d11add2-d39e-47a1-9050-2770a9062f13",
          "length": 152,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "09b5d89d-15f3-4a05-8f03-7f1b56ce7f2e"
        },
        "item": {
          "id": "9430e29c-908a-414e-897e-77e53bd53c7a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e83ef825-f636-46c9-a2c9-0315b71d5a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "9430e29c-908a-414e-897e-77e53bd53c7a",
        "cursor": {
          "ref": "9d11add2-d39e-47a1-9050-2770a9062f13",
          "length": 152,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "09b5d89d-15f3-4a05-8f03-7f1b56ce7f2e"
        },
        "item": {
          "id": "9430e29c-908a-414e-897e-77e53bd53c7a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e83ef825-f636-46c9-a2c9-0315b71d5a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "1d6ed39a-1150-4232-8fec-e505bc72953d",
        "cursor": {
          "ref": "3a4472ba-410c-4041-9718-cc4769a14068",
          "length": 152,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2481624b-d237-47a0-9abc-727bbd73c4fa"
        },
        "item": {
          "id": "1d6ed39a-1150-4232-8fec-e505bc72953d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ca252254-1926-476d-ad41-7ba23004e289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:44)"
            }
          }
        ]
      },
      {
        "id": "1d6ed39a-1150-4232-8fec-e505bc72953d",
        "cursor": {
          "ref": "3a4472ba-410c-4041-9718-cc4769a14068",
          "length": 152,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2481624b-d237-47a0-9abc-727bbd73c4fa"
        },
        "item": {
          "id": "1d6ed39a-1150-4232-8fec-e505bc72953d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ca252254-1926-476d-ad41-7ba23004e289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:44)"
            }
          }
        ]
      },
      {
        "id": "1392185e-69e0-4a9a-80d8-4a353ddcb6a9",
        "cursor": {
          "ref": "c56e1947-1e98-4bf0-98d5-765a37775d09",
          "length": 152,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "78dec296-87df-46b9-ab7b-536dc717154f"
        },
        "item": {
          "id": "1392185e-69e0-4a9a-80d8-4a353ddcb6a9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0d49dc65-b3bf-4f06-9f9d-8d32b4e2a92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1392185e-69e0-4a9a-80d8-4a353ddcb6a9",
        "cursor": {
          "ref": "c56e1947-1e98-4bf0-98d5-765a37775d09",
          "length": 152,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "78dec296-87df-46b9-ab7b-536dc717154f"
        },
        "item": {
          "id": "1392185e-69e0-4a9a-80d8-4a353ddcb6a9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0d49dc65-b3bf-4f06-9f9d-8d32b4e2a92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "bd028fe1-34e3-4afe-bb2f-2df13bce240d",
        "cursor": {
          "ref": "198b12aa-2df8-48eb-9e18-63efd8f94827",
          "length": 152,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4d26afe5-63dd-42b2-aeec-d3bc075d130e"
        },
        "item": {
          "id": "bd028fe1-34e3-4afe-bb2f-2df13bce240d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3c4974e6-f5aa-47bc-93ea-802f27087a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "bd028fe1-34e3-4afe-bb2f-2df13bce240d",
        "cursor": {
          "ref": "198b12aa-2df8-48eb-9e18-63efd8f94827",
          "length": 152,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4d26afe5-63dd-42b2-aeec-d3bc075d130e"
        },
        "item": {
          "id": "bd028fe1-34e3-4afe-bb2f-2df13bce240d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3c4974e6-f5aa-47bc-93ea-802f27087a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "736f5d9b-7054-4d96-afe0-acd597a05042",
        "cursor": {
          "ref": "4414818c-3b24-4bb8-ab33-bba23e6e9c98",
          "length": 152,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e7b02ad1-b62b-46b5-8f1b-a14fbc44ed19"
        },
        "item": {
          "id": "736f5d9b-7054-4d96-afe0-acd597a05042",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "dc44cea2-c9c1-485d-927c-64d0ab7da6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "736f5d9b-7054-4d96-afe0-acd597a05042",
        "cursor": {
          "ref": "4414818c-3b24-4bb8-ab33-bba23e6e9c98",
          "length": 152,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e7b02ad1-b62b-46b5-8f1b-a14fbc44ed19"
        },
        "item": {
          "id": "736f5d9b-7054-4d96-afe0-acd597a05042",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "dc44cea2-c9c1-485d-927c-64d0ab7da6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "db39a4f2-23ad-461d-a036-04e0c84618d3",
        "cursor": {
          "ref": "787d2aee-e673-4c43-84d7-ebfa8ec69c27",
          "length": 152,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "70f93678-caaf-4e51-9921-2fe49333fb63"
        },
        "item": {
          "id": "db39a4f2-23ad-461d-a036-04e0c84618d3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e271dfa3-9133-4b01-8eaf-6cf7524e152c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db39a4f2-23ad-461d-a036-04e0c84618d3",
        "cursor": {
          "ref": "787d2aee-e673-4c43-84d7-ebfa8ec69c27",
          "length": 152,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "70f93678-caaf-4e51-9921-2fe49333fb63"
        },
        "item": {
          "id": "db39a4f2-23ad-461d-a036-04e0c84618d3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e271dfa3-9133-4b01-8eaf-6cf7524e152c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492d7174-918e-4128-8e75-49607a809662",
        "cursor": {
          "ref": "a1668aad-eaa1-490a-99cf-6c723baca710",
          "length": 152,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2a1fe56d-a96e-4f36-84da-1bbab73eaf91"
        },
        "item": {
          "id": "492d7174-918e-4128-8e75-49607a809662",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "160e0be2-87a0-4d8f-be40-6f8dd2a6908b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9002307e-6bac-4e08-b653-a635206d4f02",
        "cursor": {
          "ref": "14a7622c-dd50-4125-81af-041be6e178d7",
          "length": 152,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f1c6db70-e18c-478f-8415-4548f2de226b"
        },
        "item": {
          "id": "9002307e-6bac-4e08-b653-a635206d4f02",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7049508d-a617-42d9-9cfb-f7b7a415e53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9002307e-6bac-4e08-b653-a635206d4f02",
        "cursor": {
          "ref": "14a7622c-dd50-4125-81af-041be6e178d7",
          "length": 152,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f1c6db70-e18c-478f-8415-4548f2de226b"
        },
        "item": {
          "id": "9002307e-6bac-4e08-b653-a635206d4f02",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7049508d-a617-42d9-9cfb-f7b7a415e53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9c6cf2-2ac0-4770-80c4-37f952937a2d",
        "cursor": {
          "ref": "3f326020-2eff-440b-b780-716538da0028",
          "length": 152,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "817b529f-a4f7-4281-8508-aeac12aa5f88"
        },
        "item": {
          "id": "ce9c6cf2-2ac0-4770-80c4-37f952937a2d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "74399e00-4a5c-46db-917c-28c4645369d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a7d77e-189f-4d35-b976-fd7e44ae5feb",
        "cursor": {
          "ref": "9bd2474c-d0c8-4fc5-9403-16227510550e",
          "length": 152,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8c8dc992-f485-4e0a-b539-68a35a6c7e42"
        },
        "item": {
          "id": "51a7d77e-189f-4d35-b976-fd7e44ae5feb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6cbd7a3a-93f4-4f64-9eb0-3ac739f9a96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cdc33b7-5f92-486e-9d65-b3773414abd2",
        "cursor": {
          "ref": "ac16da1f-d073-40d4-b674-d7db5a77706e",
          "length": 152,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1c189d06-c544-43a6-b9a9-cfcba62a9c82"
        },
        "item": {
          "id": "2cdc33b7-5f92-486e-9d65-b3773414abd2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "df5ec67b-bde7-4884-9d8c-9a353d3ad3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7027b23c-92ed-495b-8408-7af4f49dedf1",
        "cursor": {
          "ref": "16697273-b72f-4fa3-b223-37aa5458abfd",
          "length": 152,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "30edbc9e-c74b-450d-a7f0-918f8fc4dd88"
        },
        "item": {
          "id": "7027b23c-92ed-495b-8408-7af4f49dedf1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7a859087-3cf5-4d63-b513-cd84980cf185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd1f690-b9a1-4bfa-85ad-e1a0e29ecca5",
        "cursor": {
          "ref": "676982c3-82fe-41f9-a205-aad9026b4c70",
          "length": 152,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e854d290-be34-4d67-9a5a-99e868b9ae27"
        },
        "item": {
          "id": "abd1f690-b9a1-4bfa-85ad-e1a0e29ecca5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "120991b1-8330-4792-b75d-d550b4c35d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08181acd-4158-448c-9ccf-bbbcb331f9f9",
        "cursor": {
          "ref": "582ca6cd-0e8d-46eb-989d-5a0793d2cc7e",
          "length": 152,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "dc7e1a22-f2b1-4c9f-8742-7ea6d97867de"
        },
        "item": {
          "id": "08181acd-4158-448c-9ccf-bbbcb331f9f9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4d91e646-c6e7-4211-93ce-c3317f678496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 457,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbb0579-5fae-4e69-b868-9a4ebcc7b6b7",
        "cursor": {
          "ref": "43c78979-fa55-4b7f-b153-6316fc9621cb",
          "length": 152,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ca838ca6-fc90-45b3-969f-820ea2c34002"
        },
        "item": {
          "id": "3bbb0579-5fae-4e69-b868-9a4ebcc7b6b7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b9da083a-cb5e-40a4-9cec-b2cb8543485d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d68d0f-3382-4224-afee-404abfe7acfa",
        "cursor": {
          "ref": "d811b781-fe77-4eee-8155-c35282ce07c4",
          "length": 152,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6d4c1661-0849-4787-a84b-9716d0945d42"
        },
        "item": {
          "id": "51d68d0f-3382-4224-afee-404abfe7acfa",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8081ffe6-a747-4c84-89e4-fbeb6b8428b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af902199-0db2-4155-98ee-6d1873ba5ce2",
        "cursor": {
          "ref": "e5a832eb-f876-4001-a5a4-d4f5325f9aad",
          "length": 152,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a5a8a7e6-c68c-4d79-8e38-459fca66f51a"
        },
        "item": {
          "id": "af902199-0db2-4155-98ee-6d1873ba5ce2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "855fe9de-eb7e-47a0-bf91-7b7318c951d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb38067-8c37-4657-afcf-3ab0085fa5f6",
        "cursor": {
          "ref": "2598cf98-8d5e-4c7e-a4fd-c1e38edf537d",
          "length": 152,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3d640bd7-b5d6-41cf-9fff-debe33b67052"
        },
        "item": {
          "id": "2cb38067-8c37-4657-afcf-3ab0085fa5f6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "17b4c0d2-8529-4c53-b212-cc4212115035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57adb790-9456-4e61-8022-687bb4a5c8fc",
        "cursor": {
          "ref": "c66817c7-4b81-4a76-9165-eea020b1beab",
          "length": 152,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bf2a7d26-c2de-4914-8d5c-4a8fa50f62df"
        },
        "item": {
          "id": "57adb790-9456-4e61-8022-687bb4a5c8fc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7ffa5232-ae6e-4381-8127-ceb2408b9d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7ed654-3beb-4169-8ba5-1a4ce65a8d74",
        "cursor": {
          "ref": "e55aaa70-9b42-4cbf-ba70-8c6307a138ce",
          "length": 152,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "95eb76d5-6275-4582-b892-1230408d829b"
        },
        "item": {
          "id": "0c7ed654-3beb-4169-8ba5-1a4ce65a8d74",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "01dcc0de-5913-4c5f-ab85-acde158f215e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e13615-b587-47fd-a2ab-eac67a82abf7",
        "cursor": {
          "ref": "62552a45-479b-4608-8128-2fd80c98c785",
          "length": 152,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9176cba5-c751-4e16-b827-2c801564c7c0"
        },
        "item": {
          "id": "b5e13615-b587-47fd-a2ab-eac67a82abf7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3261a89c-4c32-4735-a3c1-78b49096290a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20c2f09-d888-4ee0-aa85-13242377df6f",
        "cursor": {
          "ref": "fa483489-3393-411f-a338-440a3f0115b1",
          "length": 152,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d6f58adb-d976-4149-aecb-29c225989679"
        },
        "item": {
          "id": "b20c2f09-d888-4ee0-aa85-13242377df6f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "54dc4714-888b-4846-855e-2a7fed380b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a9f4a6-a320-402e-a569-9fbb8b87f7ee",
        "cursor": {
          "ref": "38f0d69c-f3b6-4ac2-b4c1-fd25dd6612d7",
          "length": 152,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6cfcb1f4-9d43-405c-884b-a0c0eacd544a"
        },
        "item": {
          "id": "37a9f4a6-a320-402e-a569-9fbb8b87f7ee",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "554acd7b-cca9-4cec-8d0f-837c65f609a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f405d9bb-905f-4c0a-a0d2-92cef65ce98c",
        "cursor": {
          "ref": "8dabeef2-e652-4fc6-9e09-2f4da1eba304",
          "length": 152,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "740bce74-82bc-4548-92e4-0c1184b01777"
        },
        "item": {
          "id": "f405d9bb-905f-4c0a-a0d2-92cef65ce98c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "dd4d5605-5739-4985-b617-b5010d638817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4020abaa-b06b-4de8-9808-6e828493bd2a",
        "cursor": {
          "ref": "fb2da1d1-083a-4357-8b10-9130d0d7eebf",
          "length": 152,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c9141cb0-dffa-4b64-a49e-82b303c9a733"
        },
        "item": {
          "id": "4020abaa-b06b-4de8-9808-6e828493bd2a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2e81f24d-36ec-4ac9-92fc-898d057ed918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9e8778-3c71-48f3-b92a-9dc8e4e23fb2",
        "cursor": {
          "ref": "4f675407-359e-4a00-b949-df56eede937d",
          "length": 152,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "61e39096-c346-4c72-9eae-949a8eb59195"
        },
        "item": {
          "id": "ad9e8778-3c71-48f3-b92a-9dc8e4e23fb2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a9b1b1e3-64f3-47c1-9e9e-57e9a1b3923e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d60142d-8c0a-41a5-9bc6-5bdf09f16d26",
        "cursor": {
          "ref": "5e39b4f5-d4fb-4cb7-9da0-4442c6bdd1d4",
          "length": 152,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0f78a055-2a60-4d48-9b16-c9c79cb3724d"
        },
        "item": {
          "id": "9d60142d-8c0a-41a5-9bc6-5bdf09f16d26",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "069452ec-80fe-4f8b-bfa4-40aaa04a39d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680f2b12-0ff4-4f0c-b840-332cd3ce140a",
        "cursor": {
          "ref": "2cf4a074-7d3f-40d9-aff8-30d0ef396433",
          "length": 152,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "69b120c4-183a-419b-80e7-9184964d142c"
        },
        "item": {
          "id": "680f2b12-0ff4-4f0c-b840-332cd3ce140a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5caab301-bc0e-4984-abd7-4c64ab94d4f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e034bf-7de0-46db-98b7-72d20283537e",
        "cursor": {
          "ref": "00c901df-c495-41be-88a4-7bf6669af50e",
          "length": 152,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "63b8fe31-e6a1-4386-adfe-5acebd536edc"
        },
        "item": {
          "id": "78e034bf-7de0-46db-98b7-72d20283537e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7afaee6f-a151-4deb-a292-a5313f90a4f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713383b9-c86d-4c73-9826-45c8e6ed6a8c",
        "cursor": {
          "ref": "0581e82f-e5fe-4279-8d3c-b3dc0c8b9749",
          "length": 152,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "949fcedf-72c7-45fd-957f-7cffedd316c6"
        },
        "item": {
          "id": "713383b9-c86d-4c73-9826-45c8e6ed6a8c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a888f348-9c0f-41d2-a03f-c58e8f9ce4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211752e7-168d-4fd5-a102-3f7c443e92f7",
        "cursor": {
          "ref": "c68b2230-fcd7-4027-8347-3f4d6b79cc60",
          "length": 152,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3793c441-5b85-43ae-8bb5-ab456a338855"
        },
        "item": {
          "id": "211752e7-168d-4fd5-a102-3f7c443e92f7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "636bdf22-b40c-4aee-8da4-b66179bc5104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b7aebb-03d6-4ba8-948d-e0bdb0cff3e5",
        "cursor": {
          "ref": "952f6cf0-ac23-4daf-8427-edc3292dd0a6",
          "length": 152,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "300af2c0-6b37-48ba-a440-c68d810fb08c"
        },
        "item": {
          "id": "d6b7aebb-03d6-4ba8-948d-e0bdb0cff3e5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "53b0aeea-d4a6-4940-96e9-797df0f727c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b7c031-92ae-4149-8f2b-f141241882c0",
        "cursor": {
          "ref": "12d3c041-5f21-4bf3-8238-6de0d4b4e73d",
          "length": 152,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b5033028-9033-48c0-9d3b-944ce1d6e205"
        },
        "item": {
          "id": "46b7c031-92ae-4149-8f2b-f141241882c0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "882ca233-6e0e-4786-b30b-59b6b35e9940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83baf74-ecf9-45ba-967d-8d31aa6d78bc",
        "cursor": {
          "ref": "84d4c5f5-8fbd-4593-b579-1985b959b988",
          "length": 152,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "52989686-25e2-4978-af47-1d42c79560c7"
        },
        "item": {
          "id": "a83baf74-ecf9-45ba-967d-8d31aa6d78bc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b2536472-511c-45c7-8403-7ddc414d5f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e1222c-869e-4f82-a065-a88b109e6796",
        "cursor": {
          "ref": "1f846f8e-53eb-47f2-bbb5-201d9f53437b",
          "length": 152,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "33373c80-ff53-4d12-828b-9e02990e83d8"
        },
        "item": {
          "id": "83e1222c-869e-4f82-a065-a88b109e6796",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "70b3e5a5-886b-4779-a457-5ba7ec4ff021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe4ecd8-171a-4a0f-9262-6546020666b3",
        "cursor": {
          "ref": "a611fd64-57b7-4380-a9ee-1faa6c76bd26",
          "length": 152,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "deceb9f7-d240-49e8-9766-96381ddb1325"
        },
        "item": {
          "id": "3fe4ecd8-171a-4a0f-9262-6546020666b3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "efa928f7-8582-4ab4-b2eb-ebfab79688b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22479d99-db66-4049-a452-1089573ba79d",
        "cursor": {
          "ref": "ca7d9edc-be1b-4777-b531-60d4d6d3f36f",
          "length": 152,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "31a91475-3823-4e50-a280-efd31d3ef70c"
        },
        "item": {
          "id": "22479d99-db66-4049-a452-1089573ba79d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8c574d9b-efea-4770-88d5-83ca9513247f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b4840e-c29a-4ea4-9519-d5c0926737a0",
        "cursor": {
          "ref": "4211c090-3425-44c0-9670-05b1b5b686b1",
          "length": 152,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "85288254-1bab-483e-8cf2-aaeeb2acf327"
        },
        "item": {
          "id": "14b4840e-c29a-4ea4-9519-d5c0926737a0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cd9d2d93-4f69-4b8f-8438-7f8f9e34d262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ce4486-4e17-4c5a-aefe-3b76f074ca09",
        "cursor": {
          "ref": "d9624566-c8ef-4681-aa69-baf6973e449a",
          "length": 152,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9151dba9-ac67-4c2f-866b-2d1c1d3fade8"
        },
        "item": {
          "id": "f8ce4486-4e17-4c5a-aefe-3b76f074ca09",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7ba2f7d5-cb88-42c1-aa9e-9060d8e74f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1591e739-7207-435b-85fb-f3e89baf8d7f",
        "cursor": {
          "ref": "54e2073c-0f4b-40dc-8b1f-942856ae9527",
          "length": 152,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "21960711-1055-4a4a-8811-07b23af73772"
        },
        "item": {
          "id": "1591e739-7207-435b-85fb-f3e89baf8d7f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a2d7233a-abec-4468-bba3-2f7a4aa2a4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547de86d-41e1-4258-9c3f-947cc3f54289",
        "cursor": {
          "ref": "36cd8277-c057-4344-8450-7fbf22b4285e",
          "length": 152,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ff9fa533-d30a-4c8b-90ae-ad8b4f3345f1"
        },
        "item": {
          "id": "547de86d-41e1-4258-9c3f-947cc3f54289",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "61c85b9b-eb8b-40ab-a8bc-bee766d746e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f25791-f00a-4db6-8dd0-5d27727e8fe9",
        "cursor": {
          "ref": "ec386fb9-f293-457d-97e4-3356336f2249",
          "length": 152,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3045a5e5-a09a-4f2c-aba1-815efde88fcd"
        },
        "item": {
          "id": "49f25791-f00a-4db6-8dd0-5d27727e8fe9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b096bfa1-dbed-47cd-ab54-8df949787ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5acba20c-3f3e-4a26-ab89-f83a52a459c9",
        "cursor": {
          "ref": "d0746c61-d7ff-4d29-87f3-74c81c67b1f3",
          "length": 152,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c35e650f-d33d-4436-b40d-86cbb0fde61e"
        },
        "item": {
          "id": "5acba20c-3f3e-4a26-ab89-f83a52a459c9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "511ccb93-0070-4a5b-b708-f8856cebb2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d95ffaa-cc18-499a-af59-8b9c8b494efd",
        "cursor": {
          "ref": "c26c5f19-39ce-425b-97f8-e24d27989502",
          "length": 152,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6d8d151d-96e5-4611-a6a5-e900f7cc101c"
        },
        "item": {
          "id": "2d95ffaa-cc18-499a-af59-8b9c8b494efd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ae70536a-c890-4303-b45f-91d6c9f76b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fe0a0a-5bb7-48ac-b58f-027e5d90e7d3",
        "cursor": {
          "ref": "91f238e9-a904-4211-b7a4-7adac8ddc0a5",
          "length": 152,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4ec2a8b9-feb2-4cc1-a105-c533e8c3d4ef"
        },
        "item": {
          "id": "e8fe0a0a-5bb7-48ac-b58f-027e5d90e7d3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "95802c76-ac79-490d-9bc1-4658daca45c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "558864ea-09a3-4a6d-8e93-25eb2db9996b",
        "cursor": {
          "ref": "ec4fdba9-1a8d-426b-bfc0-9f115664dd4e",
          "length": 152,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3ec0f62b-d83a-4d8e-96db-728c078802c1"
        },
        "item": {
          "id": "558864ea-09a3-4a6d-8e93-25eb2db9996b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "80b358ac-8eda-4e37-aaf0-dca3c511262e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966f662e-d3a5-4881-bc70-809d4eeb421e",
        "cursor": {
          "ref": "71b3b8f8-8d81-453a-b638-6a83d8ad9c03",
          "length": 152,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8dea7b01-ece0-487b-aafb-e1f79fc735bf"
        },
        "item": {
          "id": "966f662e-d3a5-4881-bc70-809d4eeb421e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "673a2a89-6f9c-40c2-b8ae-2ed98473b75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbda071-8e65-477a-9893-6242c1288c44",
        "cursor": {
          "ref": "94e606df-8d6f-42df-a0e5-5c512897dfbc",
          "length": 152,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "157f4967-86ae-4674-8b11-fcdb506a0fce"
        },
        "item": {
          "id": "4dbda071-8e65-477a-9893-6242c1288c44",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "011c6f7b-2847-47b8-baed-c6c425f00017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55c84d9-d997-427e-b6c3-f6d4ebc2d903",
        "cursor": {
          "ref": "049360bd-49c3-4029-b9aa-c8d13f4c27f5",
          "length": 152,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e8080444-8d94-46e6-8276-5987f01b154f"
        },
        "item": {
          "id": "d55c84d9-d997-427e-b6c3-f6d4ebc2d903",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d54843e9-c161-4d0a-a843-cfe9760c4f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913f5d44-63cc-459b-94f1-8c11e93d04d4",
        "cursor": {
          "ref": "5f9e87d3-fbb1-4dcd-aec5-8cb12d858426",
          "length": 152,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2bf78881-f4d0-4dda-9d43-8b9013853432"
        },
        "item": {
          "id": "913f5d44-63cc-459b-94f1-8c11e93d04d4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "66a6d594-a96d-4e1c-933c-45d8d7419cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638854fe-f917-419f-8854-15afbec97c19",
        "cursor": {
          "ref": "badec27f-b89c-4512-8198-2f5e99dcbbf9",
          "length": 152,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "69e19820-0244-47e1-80b6-c17241548760"
        },
        "item": {
          "id": "638854fe-f917-419f-8854-15afbec97c19",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "09fa2a8b-63c8-4d85-babd-5464ecdd171e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32370b56-09b5-4b73-94e1-951bb5d5c417",
        "cursor": {
          "ref": "890c1298-e57c-4b7a-9586-acc0812649a2",
          "length": 152,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9af9332a-0d82-4185-a84b-b00a71818e4e"
        },
        "item": {
          "id": "32370b56-09b5-4b73-94e1-951bb5d5c417",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c969341a-adab-4b13-820e-894d45c4ebae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6768124-164d-4359-b7f7-798af67ff9a9",
        "cursor": {
          "ref": "17b55384-02bc-43ee-bb58-eb678859f0b7",
          "length": 152,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cbad8052-118c-4a9c-9101-b642cce80012"
        },
        "item": {
          "id": "a6768124-164d-4359-b7f7-798af67ff9a9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bc4ec570-b4e1-4e4f-b0e3-efcf34c55e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78691bad-2224-4516-ad6a-47efb355ac6d",
        "cursor": {
          "ref": "6a9173ea-69d4-4d1d-a79f-9a07370f6b91",
          "length": 152,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "65b62876-9668-4d58-b623-ee685d6d1f49"
        },
        "item": {
          "id": "78691bad-2224-4516-ad6a-47efb355ac6d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bc9266cb-f3fe-46c8-9b36-530ca47f74ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432ef227-d1b1-4672-8b33-c590740176c9",
        "cursor": {
          "ref": "af505a2f-14c3-4c17-b34c-4b7f43067b64",
          "length": 152,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "853c6c9c-4d2e-490e-a3dc-74566db85ba9"
        },
        "item": {
          "id": "432ef227-d1b1-4672-8b33-c590740176c9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7eb382ea-fb37-4f8f-b2b7-8b5f16ce7b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0245c6b-1b74-4699-99d6-c480af7a3399",
        "cursor": {
          "ref": "7a6f172c-0158-4759-b675-99b7aec4324b",
          "length": 152,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7044ae5e-bd6b-42a2-8e45-fe21ee13d785"
        },
        "item": {
          "id": "e0245c6b-1b74-4699-99d6-c480af7a3399",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4b1c5778-2c1d-4721-aaac-03861fa6814b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11355e5c-6c6e-4ff6-b461-d70ecf413801",
        "cursor": {
          "ref": "b3adf3d0-9d65-43da-bb7a-ca94af19d707",
          "length": 152,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "887c8870-3039-491e-908f-a9f44216c178"
        },
        "item": {
          "id": "11355e5c-6c6e-4ff6-b461-d70ecf413801",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "aaade36e-9ead-48e2-b722-0edf92d9e7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021b3faa-e9fb-4953-a0b4-e4e7a74888ac",
        "cursor": {
          "ref": "3b64ef85-030f-458f-b48a-3bfb0be6b376",
          "length": 152,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8cc6f9fc-890c-4bc5-b1c5-e5de9509ca38"
        },
        "item": {
          "id": "021b3faa-e9fb-4953-a0b4-e4e7a74888ac",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c7050ef8-3941-4e90-a0ca-632fd8016696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e582c2b-63c8-4bac-a232-9a6715f9a6fe",
        "cursor": {
          "ref": "3e0685f8-aced-4160-ab70-ea3ec851f1f8",
          "length": 152,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c8449a3e-8f31-48ab-951d-cf82fd2b4cf8"
        },
        "item": {
          "id": "4e582c2b-63c8-4bac-a232-9a6715f9a6fe",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "eca95719-e513-4c28-b685-a4c8e778e57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de0051d-7ba5-4500-acf4-c16c55e801b9",
        "cursor": {
          "ref": "b286248d-9c8f-4317-a1d4-dc644e75322a",
          "length": 152,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d1d420d5-0798-4cb4-ad1a-24e7658dc735"
        },
        "item": {
          "id": "1de0051d-7ba5-4500-acf4-c16c55e801b9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e3d7bbbf-6145-4661-9b8e-d4e8f3647285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de8472d-7d42-4116-be03-f51505b22b4d",
        "cursor": {
          "ref": "772f188f-344d-4a0a-b65f-71eb523a3da1",
          "length": 152,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9ae0bdd9-ce6c-49df-a891-07edf5865a2c"
        },
        "item": {
          "id": "2de8472d-7d42-4116-be03-f51505b22b4d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7bfe87ef-4769-48b6-82bc-6db259088139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02359cb2-274c-41a7-af7a-febf695ff0a1",
        "cursor": {
          "ref": "155e6d2f-dbe7-4aaf-9b6a-5ea835b933f7",
          "length": 152,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b72425f1-df40-4d52-9ba1-702528460010"
        },
        "item": {
          "id": "02359cb2-274c-41a7-af7a-febf695ff0a1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0349954e-b928-42ee-b0e9-cbf0d710c144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c52d08-4119-498f-8612-2a4d512568a0",
        "cursor": {
          "ref": "eb14f314-6095-4eb5-811c-d81b2fe2c78c",
          "length": 152,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "aa5a9b71-e4ac-49ff-8502-72c5400fa8fc"
        },
        "item": {
          "id": "70c52d08-4119-498f-8612-2a4d512568a0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6c7ad615-9b8c-4d65-8483-e1bef6d792fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719a9248-fe76-480d-b044-42426e486993",
        "cursor": {
          "ref": "661f05be-ccd2-4d35-956e-4c1ad9b24005",
          "length": 152,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "538cdef3-e8cd-4ffd-9581-9c94539a992d"
        },
        "item": {
          "id": "719a9248-fe76-480d-b044-42426e486993",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2cdb492d-3fe4-4a7b-a3e2-1ceaaf7b0043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ba30a5-5eaf-4fc2-a758-5bb26525e2cf",
        "cursor": {
          "ref": "66d34790-c496-4950-984d-51b2e5ec1947",
          "length": 152,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2e48f9ff-da35-4ef8-9e0d-e4526dc7adfb"
        },
        "item": {
          "id": "80ba30a5-5eaf-4fc2-a758-5bb26525e2cf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5a1198b9-bf78-419f-a67b-c89ac905d266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a3caa4-c41d-4241-84bb-537b413b0cd9",
        "cursor": {
          "ref": "730b7766-20c6-4e93-97c9-47aa186eacc3",
          "length": 152,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3eac9ba6-5c04-4d6a-94bd-654ce3967b7a"
        },
        "item": {
          "id": "d4a3caa4-c41d-4241-84bb-537b413b0cd9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2038b4ee-0aaf-490f-beb0-0f60ffb97b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946c86bf-16f3-4575-a7e3-d916f08743da",
        "cursor": {
          "ref": "853e750c-e30e-41d6-b710-c63617b0c887",
          "length": 152,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6a14a081-7247-4856-a152-88eaedfa1550"
        },
        "item": {
          "id": "946c86bf-16f3-4575-a7e3-d916f08743da",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "108f1a06-8ea0-4ac6-9e56-fe90e9620097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e945d7-4449-4561-8bb9-cc0c1e35df3b",
        "cursor": {
          "ref": "b2c84fcd-ea09-4083-828c-138f51e14a86",
          "length": 152,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ec75303b-625b-4d74-b7e5-8854969f08cc"
        },
        "item": {
          "id": "c4e945d7-4449-4561-8bb9-cc0c1e35df3b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5044e7b1-ce18-46ea-bd24-2799f5283744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621b4391-d0bc-4974-a44f-c94ec3994e18",
        "cursor": {
          "ref": "3ca8a3a8-2af0-4107-a473-e5a23f7feb74",
          "length": 152,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "eb63ddee-00c1-4bd5-a649-60df0d3db3de"
        },
        "item": {
          "id": "621b4391-d0bc-4974-a44f-c94ec3994e18",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9627e518-bc78-4e28-9044-b2306c8285e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbb89f5-7160-47be-b22b-41d02a54110b",
        "cursor": {
          "ref": "66da1de4-a437-4a3c-a99d-455a08d29a15",
          "length": 152,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ee3428cd-e386-4dea-adeb-d38eedf6208a"
        },
        "item": {
          "id": "3bbb89f5-7160-47be-b22b-41d02a54110b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3ff76f50-34a1-46da-9b77-17c9feb792d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4012d4c8-1b89-4b3f-b41d-1b6649feb52d",
        "cursor": {
          "ref": "f5c586b0-c33b-4c35-aa51-89dfe3cacbe8",
          "length": 152,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1438861a-e6d5-4e64-a98b-bf031719c89f"
        },
        "item": {
          "id": "4012d4c8-1b89-4b3f-b41d-1b6649feb52d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "98be9f3a-ad34-4462-9947-dba8e8db346f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ad3091-2882-4378-bd05-a889ac8de02c",
        "cursor": {
          "ref": "aaca5a52-879a-4c85-9e13-0f343ee75a3c",
          "length": 152,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "259ca6b5-974d-423a-ad55-8b9163a506dc"
        },
        "item": {
          "id": "94ad3091-2882-4378-bd05-a889ac8de02c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "85faf297-d970-4a8e-8c97-12f94b656120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faec8b7f-8cac-4d30-b898-ab533303a0e6",
        "cursor": {
          "ref": "71d974d2-f081-4ca8-bacb-e4992fc60aea",
          "length": 152,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e2d42e2d-ffaa-454f-bb54-a9f19430a9ef"
        },
        "item": {
          "id": "faec8b7f-8cac-4d30-b898-ab533303a0e6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "40d44d6a-70a7-42d0-8a33-3dcbfd626d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2bfe82-2f9e-4a0a-bc68-875cd0421826",
        "cursor": {
          "ref": "518db4f7-d04d-4501-b949-b19a35d78f18",
          "length": 152,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "86406a9d-fc27-4ac7-b40d-89f27b3b73e4"
        },
        "item": {
          "id": "df2bfe82-2f9e-4a0a-bc68-875cd0421826",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "69c9f804-e903-4565-b509-e1cae907c654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a065a8a-bfe9-4448-a28c-f54ddb196012",
        "cursor": {
          "ref": "a4720101-2c59-45b1-8ce0-e9b07648752e",
          "length": 152,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "78bf5475-8593-4c1e-bb7f-3a12bc9059a4"
        },
        "item": {
          "id": "3a065a8a-bfe9-4448-a28c-f54ddb196012",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fa658152-42ee-45e0-9348-d3de0c219a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4598e332-b150-4d2b-9c03-a8898e55bba2",
        "cursor": {
          "ref": "35e364a5-bac0-4064-b9e7-641d30a3e12a",
          "length": 152,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7d3c10f8-3a56-424a-a62e-4588d05293b6"
        },
        "item": {
          "id": "4598e332-b150-4d2b-9c03-a8898e55bba2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "93c29282-eba3-4ba8-b858-c76b8e454bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7754cdae-0695-4d44-b06b-5d7a05be8eac",
        "cursor": {
          "ref": "a1a60c25-e210-4779-a83f-b6ee728c8203",
          "length": 152,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d5df4644-b4f1-4900-95dc-34d3fe2eddad"
        },
        "item": {
          "id": "7754cdae-0695-4d44-b06b-5d7a05be8eac",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e247ea6d-3237-46ea-8dff-e0ce0c47d20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ecd3163-3dac-4acb-83b9-f03d4d43cb18",
        "cursor": {
          "ref": "4241aa89-d34f-439b-9f7f-3a93025911b3",
          "length": 152,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6517af3c-66de-4c70-84a6-54ef9ddf0f9e"
        },
        "item": {
          "id": "9ecd3163-3dac-4acb-83b9-f03d4d43cb18",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "179f7899-2f0e-4e7c-b59e-7f7ece99612e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b58074-cd56-47dc-84e1-5a8962bf5e45",
        "cursor": {
          "ref": "e102f38b-eb81-410a-9487-b9006c1adda5",
          "length": 152,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "20fb15c5-f749-4fdc-9318-f8ea85a179d6"
        },
        "item": {
          "id": "f4b58074-cd56-47dc-84e1-5a8962bf5e45",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0da6e91f-b480-449c-b5e2-b0fba7b45877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f638ff-9f10-4000-9835-e4eaf27f3396",
        "cursor": {
          "ref": "676a3766-a252-45c1-beda-7549b99bed3b",
          "length": 152,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cc899843-854b-4618-a588-60b3ac394346"
        },
        "item": {
          "id": "a7f638ff-9f10-4000-9835-e4eaf27f3396",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "af528348-2e41-42a7-b598-c1ba86960aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56c6a71-8a3b-483f-966a-558c9c5c0e2f",
        "cursor": {
          "ref": "cbfc4dba-8515-49c9-9bd1-38d431cbfac2",
          "length": 152,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0ba0cd79-af9e-4920-9f8e-fcf429b252be"
        },
        "item": {
          "id": "a56c6a71-8a3b-483f-966a-558c9c5c0e2f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "38832a24-273f-416c-9f67-4f9bea20d620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f958600d-997c-4793-a09e-0270fe0af21b",
        "cursor": {
          "ref": "fabec536-2ed3-47e8-8ff9-c3762aa202c8",
          "length": 152,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "47eaf229-5dd0-4b32-83e1-dca3c0d64df9"
        },
        "item": {
          "id": "f958600d-997c-4793-a09e-0270fe0af21b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "af8af781-b829-4731-9c31-da058945da2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 138
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66821aee-0496-4ed2-8535-b6cd7c778c12",
        "cursor": {
          "ref": "b0f0640a-383c-46c1-8c29-2e1ab89ffc48",
          "length": 152,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "19c6eeed-b76c-45a3-88fa-fdbc95ca7240"
        },
        "item": {
          "id": "66821aee-0496-4ed2-8535-b6cd7c778c12",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "04d5637a-2051-4acc-a5ab-f9394ff868da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 138
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0965881e-e48a-4aa4-a170-67c85d7638cb",
        "cursor": {
          "ref": "f3b3bf23-5892-4558-95cc-339eaa6f4702",
          "length": 152,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5847190c-ed2d-4468-8169-5abcf3889b14"
        },
        "item": {
          "id": "0965881e-e48a-4aa4-a170-67c85d7638cb",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a237ddc4-3132-487a-93ce-2651df0072cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 138
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b248cd-ec21-459c-91f4-b9ad99f94554",
        "cursor": {
          "ref": "2b65f778-8da6-4d2b-982a-fc9743db97b8",
          "length": 152,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "36c42ef0-c357-43ce-877d-1f82c055503c"
        },
        "item": {
          "id": "84b248cd-ec21-459c-91f4-b9ad99f94554",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5108819e-aacc-4437-962b-43a6097fcfdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a9911e-909c-4e53-b80c-fb24e1ccec5f",
        "cursor": {
          "ref": "7ad5fb6d-2251-4a04-b6d6-a4018de9a69d",
          "length": 152,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "74d9e25e-3489-4efa-b419-d772f8157fa6"
        },
        "item": {
          "id": "75a9911e-909c-4e53-b80c-fb24e1ccec5f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b5704375-10d2-4ae4-a98e-26f155ea134a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 138
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0316f9-786f-4141-950b-e9c81860f122",
        "cursor": {
          "ref": "802568d1-fb30-435f-8f78-257710ca3770",
          "length": 152,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f95745ee-6889-4678-bc83-b7b5af5ce1ef"
        },
        "item": {
          "id": "9b0316f9-786f-4141-950b-e9c81860f122",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "341a16de-95ef-4fa0-9471-cf1c799f2db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975c7a9f-9e3d-4c4c-abd1-0a6139ced112",
        "cursor": {
          "ref": "04a97804-dda3-4c6d-8816-695401187a81",
          "length": 152,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "30a69fb0-2f94-4f13-87f9-c170e923c4a2"
        },
        "item": {
          "id": "975c7a9f-9e3d-4c4c-abd1-0a6139ced112",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2a2932f9-761f-466b-9feb-a4a213e6f13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c56885-3c17-4519-92d4-d9d0d97bd9d9",
        "cursor": {
          "ref": "69f04cee-7721-4443-ab13-11c114ad8539",
          "length": 152,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "847cbe2a-fe63-4ea6-9145-db9b1f54a595"
        },
        "item": {
          "id": "10c56885-3c17-4519-92d4-d9d0d97bd9d9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "87d864dd-39ac-4db9-a96c-f14ee61e019f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9f9216-dc22-46f2-b01d-a8a4ea3b61dd",
        "cursor": {
          "ref": "17941590-a8f4-48a6-8e8c-02012c119740",
          "length": 152,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "dd80dd8b-9ddc-4abc-8fe7-f44e14a88d42"
        },
        "item": {
          "id": "8c9f9216-dc22-46f2-b01d-a8a4ea3b61dd",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "37246d7e-d1ca-4dd8-8ecf-c7c72d9bdacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31cd96c-0e6e-42c3-aefd-a5d29eb9a37c",
        "cursor": {
          "ref": "df62795c-19f8-4f4a-9bba-69a5fc9bb7c5",
          "length": 152,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "198ac3c1-3e22-48c1-b366-52a5c32b6972"
        },
        "item": {
          "id": "d31cd96c-0e6e-42c3-aefd-a5d29eb9a37c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "95d3dbf5-e7d5-4c13-bf7e-d81d5b6d9be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351fc473-121f-4f19-9c08-e853cac39051",
        "cursor": {
          "ref": "07a8609e-da83-4387-9837-817d3c04cfdc",
          "length": 152,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f0fe122e-2c35-41f2-899f-f1d583dd91d1"
        },
        "item": {
          "id": "351fc473-121f-4f19-9c08-e853cac39051",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9187a66a-5bc3-4a4d-b36e-2b16ac658f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef12469-ca07-4e73-8027-143fdd7e66fa",
        "cursor": {
          "ref": "174ea730-5dc4-480e-9eee-db8b17880888",
          "length": 152,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1224c91b-fd40-4f2e-948f-63075c87bd62"
        },
        "item": {
          "id": "eef12469-ca07-4e73-8027-143fdd7e66fa",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "40bef4d5-ca9f-4e80-9bea-606e058d1574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f643417d-900f-4186-a767-7a92f4da41b0",
        "cursor": {
          "ref": "5849df85-8098-49b0-bb9c-22feba0bdc94",
          "length": 152,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "42f7474c-2c60-4a91-bdfc-ac9444b9a31b"
        },
        "item": {
          "id": "f643417d-900f-4186-a767-7a92f4da41b0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c4dcad86-d199-4695-b040-67dbf8ff0bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940c7e13-dc38-44d0-9e20-c385f9d4f466",
        "cursor": {
          "ref": "cca131e8-d1e8-49c5-a592-abeb8004154b",
          "length": 152,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "be54af9e-1e9f-43ce-9a3f-1f9da22eac79"
        },
        "item": {
          "id": "940c7e13-dc38-44d0-9e20-c385f9d4f466",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7378aaa5-8177-421d-ac08-6c301cf13f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e6fffd-62e3-4dd2-85c9-7e5d7996a17d",
        "cursor": {
          "ref": "cbc76a13-b693-4854-8204-c3f39b378633",
          "length": 152,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b69917f6-7187-44a5-81c7-8200766f2a21"
        },
        "item": {
          "id": "99e6fffd-62e3-4dd2-85c9-7e5d7996a17d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "53d6c0fd-bc7e-48e3-a61d-e60b54ec46b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7071687-0c01-41f2-8abb-76c343346d4c",
        "cursor": {
          "ref": "11a65b2f-02e0-4e72-9216-c9e34753c6a8",
          "length": 152,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ee873393-d2b7-4808-b49b-b7a7a57695e4"
        },
        "item": {
          "id": "b7071687-0c01-41f2-8abb-76c343346d4c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "99d4ac14-2d64-4536-8a39-84c1fc921619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4040901e-add7-424f-aa2e-dd0fe0acdf7e",
        "cursor": {
          "ref": "05c057d2-30f7-4cb6-a7fc-1ad9954b47b6",
          "length": 152,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b9318438-2430-490c-a1a2-fe2567c9536d"
        },
        "item": {
          "id": "4040901e-add7-424f-aa2e-dd0fe0acdf7e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4032b4c6-e50b-4a1c-8e54-61aaa32d993d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dcb4596-4e22-400d-8155-276a0a00544b",
        "cursor": {
          "ref": "d6513d7f-ff25-4634-932a-d8c31a5decf3",
          "length": 152,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "06cdfceb-d8e2-4c7d-87f8-7787d7c0b9bd"
        },
        "item": {
          "id": "1dcb4596-4e22-400d-8155-276a0a00544b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a4b6f890-8811-4f87-8bc9-551d953e0136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e65c4e7-2028-4788-baf0-4a09da013e83",
        "cursor": {
          "ref": "aaf8225b-a5d5-4ed2-9fae-d9ceb2de17e6",
          "length": 152,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8bc9163c-2e06-4555-a84d-f33f532af401"
        },
        "item": {
          "id": "2e65c4e7-2028-4788-baf0-4a09da013e83",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "181dc1b0-9b76-4461-bedb-7cd3e13f2821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2270eaf1-9b45-47f5-8e83-af43ebd4f535",
        "cursor": {
          "ref": "fd633f5c-ff0e-4d78-87de-fc6e7d24ab86",
          "length": 152,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1bc3f9b5-6e6a-414d-9497-72dcb9e87eb5"
        },
        "item": {
          "id": "2270eaf1-9b45-47f5-8e83-af43ebd4f535",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5099c234-399b-4851-9666-2030de1c36de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e6b715-e1ab-482e-b12b-87bba711e874",
        "cursor": {
          "ref": "3826ad4e-7ce9-46e1-8f3d-784415fc8a19",
          "length": 152,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "812f4a34-b40e-4f5a-8b40-1f1e015ead59"
        },
        "item": {
          "id": "92e6b715-e1ab-482e-b12b-87bba711e874",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e7a67eeb-3eb7-4f6d-a26d-7a5b4d969b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0028a8a7-9df9-4bb6-9027-8612962e5114",
        "cursor": {
          "ref": "78b9b014-a94d-4e3f-9f3e-a10a3790465d",
          "length": 152,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5bdf69cb-bd32-4482-a73f-ff77e0ed9240"
        },
        "item": {
          "id": "0028a8a7-9df9-4bb6-9027-8612962e5114",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bfe23312-d7d5-4f61-a4ee-033e0ab59fa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f028ce6-cd0f-4bc2-973a-8ba4c782531c",
        "cursor": {
          "ref": "6375e459-93a2-4c62-8170-6571d12407e4",
          "length": 152,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "dab808ed-c887-4569-a795-4d08b9dd8b10"
        },
        "item": {
          "id": "4f028ce6-cd0f-4bc2-973a-8ba4c782531c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4dd61034-7b8d-49a0-a70b-b0b42a9f0455",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40d6561-4f75-4fae-97f8-5341537318d5",
        "cursor": {
          "ref": "38a6e897-0108-47f0-859f-6903d9db9043",
          "length": 152,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d8b8eeb9-1559-4a43-8764-60375913922a"
        },
        "item": {
          "id": "b40d6561-4f75-4fae-97f8-5341537318d5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5987620d-ecf2-46f3-bd60-6e9db4573f13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40d6561-4f75-4fae-97f8-5341537318d5",
        "cursor": {
          "ref": "38a6e897-0108-47f0-859f-6903d9db9043",
          "length": 152,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d8b8eeb9-1559-4a43-8764-60375913922a"
        },
        "item": {
          "id": "b40d6561-4f75-4fae-97f8-5341537318d5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5987620d-ecf2-46f3-bd60-6e9db4573f13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef7d21c-fdda-4f47-b47a-bade6bf3c2a8",
        "cursor": {
          "ref": "fa54ff4e-2e86-4caf-8590-b52ab4a0f5cf",
          "length": 152,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0e815acb-6049-4227-8a87-4e0137977b16"
        },
        "item": {
          "id": "5ef7d21c-fdda-4f47-b47a-bade6bf3c2a8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "73d33a07-b715-41dc-8c0e-45312f6cf339",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6563be0-e98d-4aeb-916e-a220e2169869",
        "cursor": {
          "ref": "60e9281c-2755-4e82-a2fd-63ce5c209d99",
          "length": 152,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c4b73b4f-7555-4774-9bf0-dff35a6e3964"
        },
        "item": {
          "id": "d6563be0-e98d-4aeb-916e-a220e2169869",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0edce3a4-cfd6-4967-b418-82e04a2849b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "d6563be0-e98d-4aeb-916e-a220e2169869",
        "cursor": {
          "ref": "60e9281c-2755-4e82-a2fd-63ce5c209d99",
          "length": 152,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c4b73b4f-7555-4774-9bf0-dff35a6e3964"
        },
        "item": {
          "id": "d6563be0-e98d-4aeb-916e-a220e2169869",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0edce3a4-cfd6-4967-b418-82e04a2849b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "16029a41-a71b-4e36-8b12-a5837f71b515",
        "cursor": {
          "ref": "eee4e88f-a322-484b-9e6a-22d8a7cce4a6",
          "length": 152,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2227deab-629c-4517-be96-33c6cd4b94a6"
        },
        "item": {
          "id": "16029a41-a71b-4e36-8b12-a5837f71b515",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ff55ed69-9b12-488e-a4f9-1d899ee818d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "497a06d6-a43b-4855-9170-cc2396de67ad",
        "cursor": {
          "ref": "967ab0d6-8f2b-4407-b9bd-6c23d4438377",
          "length": 152,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f259721c-02e3-4dbc-b9e2-4e5c8bc84858"
        },
        "item": {
          "id": "497a06d6-a43b-4855-9170-cc2396de67ad",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9c84fac1-3805-4647-a4b9-463b68e1b3c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497a06d6-a43b-4855-9170-cc2396de67ad",
        "cursor": {
          "ref": "967ab0d6-8f2b-4407-b9bd-6c23d4438377",
          "length": 152,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f259721c-02e3-4dbc-b9e2-4e5c8bc84858"
        },
        "item": {
          "id": "497a06d6-a43b-4855-9170-cc2396de67ad",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9c84fac1-3805-4647-a4b9-463b68e1b3c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb73d6e-65fb-4783-be59-9b42a2210154",
        "cursor": {
          "ref": "c1ab4ec9-3848-4930-90ef-baff997a51d7",
          "length": 152,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7fb69692-f1cc-41fd-91f1-b4713244bf39"
        },
        "item": {
          "id": "7bb73d6e-65fb-4783-be59-9b42a2210154",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6ad86efd-a2ee-4744-ad0d-b1737d116d76",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}